{"version":3,"sources":["/home/travis/build/angular/angular/dist/packages-dist/router/bundles/router-upgrade.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","router","upgrade","core","static","this","_angular_core","_angular_router","_angular_upgrade_static","locationSyncBootstrapListener","ngUpgrade","setUpLocationSync","$injector","Error","setUpRouterSync","injector","get","Router","url","document","createElement","$on","_","next","__","href","navigateByUrl","pathname","search","hash","replaceUrl","RouterUpgradeInitializer","provide","APP_BOOTSTRAP_LISTENER","multi","useFactory","deps","UpgradeModule","Object","defineProperty","value"],"mappings":";;;;;CAKC,SAAUA,OAAQC,SACC,gBAAZC,UAA0C,mBAAXC,QAAyBF,QAAQC,QAASE,QAAQ,iBAAkBA,QAAQ,mBAAoBA,QAAQ,4BAC5H,kBAAXC,SAAyBA,OAAOC,IAAMD,OAAO,2BAA4B,UAAW,gBAAiB,kBAAmB,2BAA4BJ,SAC1JA,SAASD,OAAOO,GAAKP,OAAOO,OAAUP,OAAOO,GAAGC,OAASR,OAAOO,GAAGC,WAAcR,OAAOO,GAAGC,OAAOC,YAAcT,OAAOO,GAAGG,KAAKV,OAAOO,GAAGC,OAAOR,OAAOO,GAAGE,QAAQE,SAClKC,KAAM,SAAWV,QAAQW,cAAcC,gBAAgBC,yBAA2B,YAoDpF,SAASC,+BAA8BC,WACnC,MAAO,YAAcC,kBAAkBD,YAY3C,QAASC,mBAAkBD,WACvB,IAAKA,UAAUE,UACX,KAAM,IAAIC,OAAM,gNAEpBC,iBAAgBJ,UAAUK,SAAUL,UAAUE,WAalD,QAASE,iBAAgBC,SAAUH,WAC/B,GAAqBX,QAASc,SAASC,IAAIT,gBAAgBU,QACtCC,IAAMC,SAASC,cAAc,IAClDR,WAAUI,IAAI,cAAcK,IAAI,uBAAwB,SAAUC,EAAGC,KAAMC,IACvEN,IAAIO,KAAOF,KACXtB,OAAOyB,cAAcR,IAAIS,SAAWT,IAAIU,OAASV,IAAIW,MAAQC,YAAY;;;;;;;;;;;;AA9CjF,GAAIC,2BACAC,QAAS1B,cAAc2B,uBACvBC,OAAO,EACPC,WAAY1B,8BACZ2B,MAAO5B,wBAAwB6B,eA8CnC1C,SAAQoC,yBAA2BA,yBACnCpC,QAAQc,8BAAgCA,8BACxCd,QAAQgB,kBAAoBA,kBAC5BhB,QAAQmB,gBAAkBA,gBAE1BwB,OAAOC,eAAe5C,QAAS,cAAgB6C,OAAO","file":"/home/travis/build/angular/angular/dist/packages-dist/router/bundles/router-upgrade.umd.min.js","sourcesContent":["/**\n * @license Angular v5.2.0-beta.0-057b357\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/router'), require('@angular/upgrade/static')) :\n\ttypeof define === 'function' && define.amd ? define('@angular/router/upgrade', ['exports', '@angular/core', '@angular/router', '@angular/upgrade/static'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.router = global.ng.router || {}, global.ng.router.upgrade = {}),global.ng.core,global.ng.router,global.ng.upgrade.static));\n}(this, (function (exports,_angular_core,_angular_router,_angular_upgrade_static) { 'use strict';\n\n/**\n * @license Angular v5.2.0-beta.0-057b357\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Creates an initializer that in addition to setting up the Angular\n * router sets up the ngRoute integration.\n *\n * \\@howToUse\n *\n * ```\n * \\@NgModule({\n *  imports: [\n *   RouterModule.forRoot(SOME_ROUTES),\n *   UpgradeModule\n * ],\n * providers: [\n *   RouterUpgradeInitializer\n * ]\n * })\n * export class AppModule {\n *   ngDoBootstrap() {}\n * }\n * ```\n *\n * \\@experimental\n */\nvar RouterUpgradeInitializer = {\n    provide: _angular_core.APP_BOOTSTRAP_LISTENER,\n    multi: true,\n    useFactory: locationSyncBootstrapListener,\n    deps: [_angular_upgrade_static.UpgradeModule]\n};\n/**\n * \\@internal\n * @param {?} ngUpgrade\n * @return {?}\n */\nfunction locationSyncBootstrapListener(ngUpgrade) {\n    return function () { setUpLocationSync(ngUpgrade); };\n}\n/**\n * \\@whatItDoes Sets up a location synchronization using the provided UpgradeModule.\n *\n * History.pushState does not fire onPopState, so the Angular location\n * doesn't detect it. The workaround is to attach a location change listener\n *\n * \\@experimental\n * @param {?} ngUpgrade\n * @return {?}\n */\nfunction setUpLocationSync(ngUpgrade) {\n    if (!ngUpgrade.$injector) {\n        throw new Error(\"\\n        RouterUpgradeInitializer can be used only after UpgradeModule.bootstrap has been called.\\n        Remove RouterUpgradeInitializer and call setUpLocationSync after UpgradeModule.bootstrap.\\n      \");\n    }\n    setUpRouterSync(ngUpgrade.injector, ngUpgrade.$injector);\n}\n/**\n * \\@whatItDoes Sets up a router synchronization using the Angular and AngularJS injectors.\n *\n * History.pushState does not fire onPopState, so the Angular location\n * doesn't detect it. The workaround is to attach a location change listener\n *\n * \\@experimental\n * @param {?} injector\n * @param {?} $injector\n * @return {?}\n */\nfunction setUpRouterSync(injector, $injector) {\n    var /** @type {?} */ router = injector.get(_angular_router.Router);\n    var /** @type {?} */ url = document.createElement('a');\n    $injector.get('$rootScope').$on('$locationChangeStart', function (_, next, __) {\n        url.href = next;\n        router.navigateByUrl(url.pathname + url.search + url.hash, { replaceUrl: true });\n    });\n}\n\nexports.RouterUpgradeInitializer = RouterUpgradeInitializer;\nexports.locationSyncBootstrapListener = locationSyncBootstrapListener;\nexports.setUpLocationSync = setUpLocationSync;\nexports.setUpRouterSync = setUpRouterSync;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=router-upgrade.umd.js.map\n"]}