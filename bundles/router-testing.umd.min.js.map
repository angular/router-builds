{"version":3,"sources":["../../../packages/router/esm5/testing/src/router_testing_module.js"],"names":["SpyNgModuleFactoryLoader","compiler","this","set","modules","res","_i","_a","Object","keys","length","t","compileModuleAsync","prototype","load","path","_stubbedModules","Promise","reject","Error","Compiler","type","_angular_core","Injectable","urlSerializer","contexts","location","loader","injector","routes","opts","urlHandlingStrategy","router","_angular_router","Router","ɵflatten","isUrlHandlingStrategy","paramsInheritanceStrategy","RouterTestingModule","withRoutes","config","ngModule","providers","provideRoutes","NgModule","ROUTER_CONFIGURATION","useValue","decorators","NgModuleFactoryLoader","ɵROUTER_PROVIDERS","provide","_angular_common","Location","useClass","_angular_common_testing","SpyLocation","UrlSerializer","ChildrenOutletContexts","ROUTES","useFactory","setupTestingRouter","deps","Injector","UrlHandlingStrategy","Optional","PreloadingStrategy","useExisting","NoPreloading"],"mappings":";;;;;;;;;;;;;;;;;oDAkDaA,yBAAqBC,UAC7BC,KAAAD,SAAAA,+JAkBGE,aAKKC,SAEJ,IADG,IAAoBC,OACvBC,GAAA,EAAAC,GAAAC,OAAAC,KAAAL,SAAAE,GAAAC,GAAAG,OAAAJ,KAAA,CACD,IAAYK,EAAIJ,GAAAD,IAChBD,IAAYM,GAAET,KAAID,SAAAW,mBAAAR,QAAAO,uFAWTE,UAAqBC,cAI1BC,aACHb,KAAAc,gBAAAD,MACHb,KAAAc,gBAAAD,MAGAE,QAAAC,OAAA,IAAAC,MAAA,sBAAAJ,iCAGUK,aACPC,KAAAC,cAAAC,+JAiDUC,cAAsBC,SAAKC,SAAAC,OAAA1B,SAAA2B,SAAAC,OAAAC,KAAAC,yBACrCC,OAAA,IAAAC,gBAAAC,OAAA,KAAAV,cAAAC,SAAAC,SAAAE,SAAAD,OAAA1B,SAAAgC,gBAAAE,SAAAN,uEAGAO,CAAAN,MAGMA,KAAAO,4BACVL,OAAAK,0BAAAP,KAAAO,2BAHAL,OAAAD,oBAAAD,6JA4CDQ,oBAAkBC,2BAKJC,eAERC,SAAAH,oBACJI,WACFT,gBAAoBU,cAAad,SACrBe,QAAAA,gBAAUC,qBAAOC,SAAAN,mCAITO,gCACEH,SAASI,gBACPf,gBAASC,yCAEHe,mBAAAC,QAAAC,gBAAAC,SAAAC,SAAAC,wBAAAC,sBACFC,gBAAAA,iBAAeC,SAAAA,wBAAwBL,+BACvCM,cAAAA,sBAAQb,SAAAA,mCACXZ,gBAAAC,OACJyB,WAAAC,mBACCC,MACL5B,gBAAAuB,cAAAvB,gBAAAwB,uBAAAN,gBAAAC,SAAA9B,cAAA0B,sBAAA1B,cAAAF,SAAAE,cAAAwC,SACA7B,gBAAAyB,OAAAzB,gBAAAY,sBAAAZ,gBAAA8B,oBAAA,IAAAzC,cAAA0C,aAGGd,QAAAjB,gBAAiBgC,mBAA2BC,YAAAjC,gBAAAkC,cAAAlC,gBAAAU","file":"/home/travis/build/angular/angular/dist/packages-dist/router/bundles/router-testing.umd.min.js.map","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Location, LocationStrategy } from '@angular/common';\nimport { MockLocationStrategy, SpyLocation } from '@angular/common/testing';\nimport { Compiler, Injectable, Injector, NgModule, NgModuleFactoryLoader, Optional } from '@angular/core';\nimport { ChildrenOutletContexts, NoPreloading, PreloadingStrategy, ROUTER_CONFIGURATION, ROUTES, Router, RouterModule, UrlHandlingStrategy, UrlSerializer, provideRoutes, ɵROUTER_PROVIDERS as ROUTER_PROVIDERS, ɵflatten as flatten } from '@angular/router';\n/**\n * \\@description\n *\n * Allows to simulate the loading of ng modules in tests.\n *\n * ```\n * const loader = TestBed.get(NgModuleFactoryLoader);\n *\n * \\@Component({template: 'lazy-loaded'})\n * class LazyLoadedComponent {}\n * \\@NgModule({\n *   declarations: [LazyLoadedComponent],\n *   imports: [RouterModule.forChild([{path: 'loaded', component: LazyLoadedComponent}])]\n * })\n *\n * class LoadedModule {}\n *\n * // sets up stubbedModules\n * loader.stubbedModules = {lazyModule: LoadedModule};\n *\n * router.resetConfig([\n *   {path: 'lazy', loadChildren: 'lazyModule'},\n * ]);\n *\n * router.navigateByUrl('/lazy/loaded');\n * ```\n *\n * \\@stable\n */\nvar SpyNgModuleFactoryLoader = /** @class */ (function () {\n    function SpyNgModuleFactoryLoader(compiler) {\n        this.compiler = compiler;\n        /**\n         * \\@docsNotRequired\n         */\n        this._stubbedModules = {};\n    }\n    Object.defineProperty(SpyNgModuleFactoryLoader.prototype, \"stubbedModules\", {\n        /**\n         * @docsNotRequired\n         */\n        get: /**\n         * \\@docsNotRequired\n         * @return {?}\n         */\n        function () { return this._stubbedModules; },\n        /**\n         * @docsNotRequired\n         */\n        set: /**\n         * \\@docsNotRequired\n         * @param {?} modules\n         * @return {?}\n         */\n        function (modules) {\n            var /** @type {?} */ res = {};\n            for (var _i = 0, _a = Object.keys(modules); _i < _a.length; _i++) {\n                var t = _a[_i];\n                res[t] = this.compiler.compileModuleAsync(modules[t]);\n            }\n            this._stubbedModules = res;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    SpyNgModuleFactoryLoader.prototype.load = /**\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        if (this._stubbedModules[path]) {\n            return this._stubbedModules[path];\n        }\n        else {\n            return /** @type {?} */ (Promise.reject(new Error(\"Cannot find module \" + path)));\n        }\n    };\n    SpyNgModuleFactoryLoader.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    SpyNgModuleFactoryLoader.ctorParameters = function () { return [\n        { type: Compiler, },\n    ]; };\n    return SpyNgModuleFactoryLoader;\n}());\nexport { SpyNgModuleFactoryLoader };\nfunction SpyNgModuleFactoryLoader_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    SpyNgModuleFactoryLoader.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    SpyNgModuleFactoryLoader.ctorParameters;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    SpyNgModuleFactoryLoader.prototype._stubbedModules;\n    /** @type {?} */\n    SpyNgModuleFactoryLoader.prototype.compiler;\n}\n/**\n * @param {?} opts\n * @return {?}\n */\nfunction isUrlHandlingStrategy(opts) {\n    // This property check is needed because UrlHandlingStrategy is an interface and doesn't exist at\n    // runtime.\n    return 'shouldProcessUrl' in opts;\n}\n/**\n * Router setup factory function used for testing.\n *\n * \\@stable\n * @param {?} urlSerializer\n * @param {?} contexts\n * @param {?} location\n * @param {?} loader\n * @param {?} compiler\n * @param {?} injector\n * @param {?} routes\n * @param {?=} opts\n * @param {?=} urlHandlingStrategy\n * @return {?}\n */\nexport function setupTestingRouter(urlSerializer, contexts, location, loader, compiler, injector, routes, opts, urlHandlingStrategy) {\n    var /** @type {?} */ router = new Router(/** @type {?} */ ((null)), urlSerializer, contexts, location, injector, loader, compiler, flatten(routes));\n    // Handle deprecated argument ordering.\n    if (opts) {\n        if (isUrlHandlingStrategy(opts)) {\n            router.urlHandlingStrategy = opts;\n        }\n        else if (opts.paramsInheritanceStrategy) {\n            router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;\n        }\n    }\n    if (urlHandlingStrategy) {\n        router.urlHandlingStrategy = urlHandlingStrategy;\n    }\n    return router;\n}\n/**\n * \\@description\n *\n * Sets up the router to be used for testing.\n *\n * The modules sets up the router to be used for testing.\n * It provides spy implementations of `Location`, `LocationStrategy`, and {\\@link\n * NgModuleFactoryLoader}.\n *\n * ### Example\n *\n * ```\n * beforeEach(() => {\n *   TestBed.configureTestModule({\n *     imports: [\n *       RouterTestingModule.withRoutes(\n *         [{path: '', component: BlankCmp}, {path: 'simple', component: SimpleCmp}]\n *       )\n *     ]\n *   });\n * });\n * ```\n *\n * \\@stable\n */\nvar RouterTestingModule = /** @class */ (function () {\n    function RouterTestingModule() {\n    }\n    /**\n     * @param {?} routes\n     * @param {?=} config\n     * @return {?}\n     */\n    RouterTestingModule.withRoutes = /**\n     * @param {?} routes\n     * @param {?=} config\n     * @return {?}\n     */\n    function (routes, config) {\n        return {\n            ngModule: RouterTestingModule,\n            providers: [\n                provideRoutes(routes),\n                { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },\n            ]\n        };\n    };\n    RouterTestingModule.decorators = [\n        { type: NgModule, args: [{\n                    exports: [RouterModule],\n                    providers: [\n                        ROUTER_PROVIDERS, { provide: Location, useClass: SpyLocation },\n                        { provide: LocationStrategy, useClass: MockLocationStrategy },\n                        { provide: NgModuleFactoryLoader, useClass: SpyNgModuleFactoryLoader }, {\n                            provide: Router,\n                            useFactory: setupTestingRouter,\n                            deps: [\n                                UrlSerializer, ChildrenOutletContexts, Location, NgModuleFactoryLoader, Compiler, Injector,\n                                ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()]\n                            ]\n                        },\n                        { provide: PreloadingStrategy, useExisting: NoPreloading }, provideRoutes([])\n                    ]\n                },] },\n    ];\n    /** @nocollapse */\n    RouterTestingModule.ctorParameters = function () { return []; };\n    return RouterTestingModule;\n}());\nexport { RouterTestingModule };\nfunction RouterTestingModule_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    RouterTestingModule.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    RouterTestingModule.ctorParameters;\n}\n//# sourceMappingURL=router_testing_module.js.map"]}