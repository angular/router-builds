{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","../../../packages/router/esm5/src/events.js","../../../packages/router/esm5/src/shared.js","../../../packages/router/esm5/src/config.js","../../../packages/router/esm5/src/utils/collection.js","../../../packages/router/esm5/src/url_tree.js","../../../packages/router/esm5/src/apply_redirects.js","../../../packages/router/esm5/src/utils/tree.js","../../../packages/router/esm5/src/router_state.js","../../../packages/router/esm5/src/create_router_state.js","../../../packages/router/esm5/src/create_url_tree.js","../../../packages/router/esm5/src/pre_activation.js","../../../packages/router/esm5/src/recognize.js","../../../packages/router/esm5/src/route_reuse_strategy.js","../../../packages/router/esm5/src/router_config_loader.js","../../../packages/router/esm5/src/url_handling_strategy.js","../../../packages/router/esm5/src/router.js","../../../packages/router/esm5/src/directives/router_link.js","../../../packages/router/esm5/src/directives/router_link_active.js","../../../packages/router/esm5/src/router_outlet_context.js","../../../packages/router/esm5/src/directives/router_outlet.js","../../../packages/router/esm5/src/router_preloader.js","../../../packages/router/esm5/src/router_module.js"],"names":["exports","module","factory","require","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","this","constructor","create","prototype","__assign","assign","t","s","i","n","arguments","length","RouterEvent","id","url","navigationTrigger","restoredState","__extends","NavigationStart","_super","toString","NavigationEnd","NavigationCancel","NavigationError","RoutesRecognized","urlAfterRedirects","state","GuardsCheckStart","_this","GuardsCheckEnd","shouldActivate","call","ResolveStart","ResolveEnd","route","RouteConfigLoadStart","RouteConfigLoadEnd","snapshot","name","params","get","has","getAll","v","isArray","defineProperty","ParamsAsMap","keys","NAVIGATION_CANCELING_ERROR","defaultUrlMatcher","segments","segmentGroup","parts","split","pathMatch","posParams","index","part","segment","substring","path","LoadedRouterConfig","routes","validateConfig","config","parentPath","validateNode","fullPath","Error","component","outlet","PRIMARY_OUTLET","redirectTo","children","loadChildren","matcher","charAt","getFullPath","currentRoute","shallowEqual","a","key","k1","k2","forEach","map$$1","callback","prop","_angular_core","ÉµisPromise","value","containsTree","container","containee","exact","equalQueryParams","queryParams","equalSegmentGroups","equalPath","numberOfChildren","c","containsSegmentGroupHelper","containeePaths","current","slice","hasChildren","containsSegmentGroup","next","UrlTree","root","fragment","_queryParamMap","convertToParamMap","UrlSegmentGroup","UrlSegment","parameters","_parameterMap","mapChildrenIntoArray","fn","res","child","childOutlet","concat","DefaultUrlSerializer","parse","serialize","tree","strParams","serializeSegment","serializePaths","primary","children_1","k","push","join","map","encodeUriQuery","DEFAULT_SERIALIZER","encodeUriString","encodeURIComponent","SEGMENT_RE","QUERY_PARAM_RE","QUERY_PARAM_VALUE_RE","remaining","parseRootSegment","consumeOptional","peekStartsWith","parseChildren","parseQueryParams","parseFragment","decodeURIComponent","parseSegment","capture","parseParens","matchSegments","decode","parseMatrixParams","parseParam","valueMatch","parseQueryParam","str","match","matchUrlQueryParamValue","decodedKey","decodeQuery","decodedVal","currentVal","allowPrimary","outletName","indexOf","substr","startsWith","NoMatch","AbsoluteRedirect","ApplyRedirects","moduleInjector","configLoader","urlSerializer","urlTree","ngModule","NgModuleRef","apply","_catch","expanded$","expandSegmentGroup","e","allowRedirects","mapped$","rxjs_operator_map","rootSegmentGroup","createUrlTree","rxjs_operator_catch","noMatchError","rootCandidate","obj","rxjs_observable_of","of","waitHead","waitTail","mapped","r","processedRoutes$","routes$","expandSegmentAgainstRoute","rxjs_operator_concatAll","concatAll","first$","rxjs_operator_first","first","concattedProcessedRoutes$","_","rxjs_util_EmptyError","EmptyError","noLeftoversInUrl","paths","getOutlet","noMatch","undefined","matchSegmentAgainstRoute","mergeMap","newTree","applyRedirectCommands","absoluteRedirect","_a","matched","consumedSegments","lastChild","positionalParamSegments","rawSegmentGroup","load","injector","cfg","_loadedConfig","rawSlicedSegments","childConfig$","getChildConfig","routerConfig","childConfig","slicedSegments","containsEmptyPathRedirectsWithNamedOutlets","primarySegmentGroup","_i","routes_2","createChildrenForEmptySegments","mergeTrivialChildren","containsEmptyPathRedirects","routes_1","tslib_1.__assign","isEmptyPathRedirect","expanded$_1","expandChildren","childModule","expandSegment","canLoad","rxjs_observable_from","from","injectionToken","runCanLoadGuard","shouldLoad","lineralizeSegments","createQueryParams","actualParams","redirectToParams","sourceName","group","updatedSegments","createSegments","redirectToSegments","actualSegments","redirectToUrlSegment","findOrReturn","idx","actualSegments_1","splice","Tree","parent","firstChild","siblings","findPath","_root","pathFromRoot","findNode","node","node_1","unshift","TreeNode","nodeChildrenAsMap","RouterState","createEmptyState","rootComponent","createEmptyStateSnapshot","BehaviorSubject","emptyUrl","rxjs_BehaviorSubject","emptyParams","emptyData","emptyQueryParams","ActivatedRoute","data","futureSnapshot","enumerable","_routerState","_paramMap","configurable","inheritedParamsDataResolve","paramsInheritanceStrategy","inheritingStartingFrom","parent_1","routeConfig","reduce","curr","ActivatedRouteSnapshot","urlSegment","lastPathIndex","resolve","_lastPathIndex","RouterStateSnapshot","advanceActivatedRoute","currentSnapshot","nextSnapshot","_futureSnapshot","shallowEqualArrays","equalParamsAndUrlSegments","createNode","routeReuseStrategy","prevState","shouldReuseRoute","createOrReuseChildren","retrieve","setFutureSnapshotsOfActivatedRoutes","result","commands","nav","Navigation","numberOfDoubleDots","isAbsolute","cmd","cmdIdx","outlets","outlets_1","segmentPath","partIndex","urlPart","computeNavigation","toRoot","startingPosition","Position","_urlSegment","g","ci","dd","findStartingPosition","oldSegmentGroup","newSegmentGroup","qp","replaceSegment","oldSegment","newSegment","isMatrixParams","processChildren","getPath","command","updateSegmentGroup","startIndex","updateSegmentGroupChildren","m","currentCommandIndex","currentPathIndex","pathIndex","commandIndex","compare","prefixedWith","slicedCommands","createNewSegmentGroup","outlets_2","getOutlets","createNewSegmentChildren","stringify","CanActivate","CanDeactivate","PreActivation","future","forwardEvent","initialize","setupChildRouteGuards","futureRoot","currRoot","parentContexts","checkGuards","isDeactivating","isActivating","resolveData","rxjs_operator_reduce","runningChecks$","futureNode","currNode","contexts","futurePath","prevChildren","setupRouteGuards","context","getContext","shouldRunGuardsAndResolvers","canActivateChecks","canDeactivateChecks","deactivateRouteAndItsChildren","mode","childName","isActivated","runCanDeactivateChecks","rxjs_operator_every","every","runCanActivateChecks","checks$","rxjs_operator_concatMap","concatMap","check","runCanActivateChild","runCanActivate","canActivate","observable","guard","getToken","wrapIntoObservable","canActivateChildGuards","extractCanActivateChild","guards","canActivateChild","runCanDeactivate","canDeactivate","canDeactivate$","rxjs_operator_mergeMap","runResolve","_resolve","resolveNode","resolvedData","key_1","getResolver","runningResolvers$","last","token","closestLoadedConfig","Recognizer","rootComponentType","recognize","split$1","processSegmentGroup","freeze","rootNode","Observable","inheritParamsAndData","routeState","routeNode","names","routeWithSameOutletName","nodes","sort","config_1","processSegmentAgainstRoute","NoMatch$1","rawSegment","last$1","getData","getSourceSegmentGroup","getPathIndexShift","getResolve","match$1","_segmentIndexShift","_sourceSegment","containsEmptyPathMatchesWithNamedOutlets","s_1","primarySegment","getOutlet$1","createChildrenForEmptyPaths","containsEmptyPathMatches","s_2","emptyPathMatch","addEmptyPathsToChildrenIfNeeded","DefaultRouteReuseStrategy","store","detachedTree","InjectionToken","RouterConfigLoader","loader","compiler","onLoadStartListener","onLoadEndListener","parentInjector","moduleFactory$","loadModuleFactory","NgModuleFactory","fromPromise","rxjs_observable_fromPromise","compileModuleAsync","DefaultUrlHandlingStrategy","merge","Router","rootContexts","location","Subject","errorHandler","defaultErrorHandler","afterPreactivation","defaultRouterHook","resetConfig","currentUrlTree","triggerEvent","initialNavigation","setUpLocationChangeListener","subscribe","change","rawUrlTree","source","navigationId","dispose","navigationExtras","relativeTo","preserveQueryParams","queryParamsHandling","preserveFragment","isDevMode","console","warn","routerState","q","extras","serializeUrl","parseUrl","removeEmptyProps","navigations","executeScheduledNavigation","promise","catch","rawUrl","lastNavigation","Promise","reject","rej","urlHandlingStrategy","extract","urlTransition","navigated","onSameUrlNavigation","shouldProcessUrl","runNavigate","skipLocationChange","replaceUrl","then","precreatedState","resolvePromise","rejectPromise","redirectsApplied$","applyRedirects","appliedUrl","preActivation","beforePreactivationDone$","urlAndSnapshot$","hooks","beforePreactivation","preactivationSetup$","evt","preactivationCheckGuards$","preactivationDone$","preactivationResolveData$","routerState$","storedState","storedUrl","navigationIsSuccessful","isCurrentPathEqualTo","replaceState","go","ActivateRoutes","activate","lastSuccessfulId","resetUrlToCurrentUrlTree","resetStateAndUrl","message","ee","futureState","currState","childOutletName","futureChild","deactivateRoutes","parentContext","deactivateChildRoutes","shouldDetach","detachAndStoreRouteSubtree","deactivateRouteAndOutlet","contexts_1","deactivate","activateRoutes","ActivationEnd","getOrCreateContext","activateChildRoutes","shouldAttach","stored","attachRef","componentRef","attach","advanceActivatedRouteNodeAndItsChildren","resolver","cmpFactoryResolver","activateWith","RouterLink","router","tabIndex","renderer","el","set","onClick","attrBoolValue","preserve","decorators","type","Directive","args","selector","ctorParameters","ElementRef","Input","Attribute","propDecorators","HostListener","routerLink","RouterLinkWithHref","locationStrategy","subscription","events","updateTargetUrlAndHref","button","ctrlKey","metaKey","shiftKey","target","_angular_common","HostBinding","href","RouterLinkActive","element","cdr","isActive","routerLinkActiveOptions","ngAfterContentInit","links","changes","update","classes","linksWithHrefs","hasActiveLinks","addClass","nativeElement","removeClass","isLinkActive","some","exportAs","ContentChildren","Renderer2","ChangeDetectorRef","descendants","ChildrenOutletContexts","onOutletDeactivated","RouterOutlet","changeDetector","activated","_activatedRoute","onChildOutletCreated","instance","detach","insert","ref","hostView","destroy","activatedRoute","childContexts","OutletInjector","createComponent","markForCheck","ViewContainerRef","ComponentFactoryResolver","Output","activateEvents","deactivateEvents","notFoundValue","PreloadAllModules","preload","NoPreloading","RouterPreloader","moduleLoader","preloadingStrategy","setUpPreloading","navigations$","processRoutes","preloadConfig","loaded$","Injectable","NgModuleFactoryLoader","Compiler","ROUTER_DIRECTIVES","ROUTER_CONFIGURATION","Location","ApplicationRef","setupRouter","deps","UrlSerializer","Injector","ROUTES","UrlHandlingStrategy","Optional","SystemJsNgModuleLoader","provide","useFactory","rootRoute","useClass","useValue","enableTracing","RouterModule","ROUTER_FORROOT_GUARD","LocationStrategy","SkipSelf","PlatformLocation","provideLocationStrategy","Inject","APP_BASE_HREF","PreloadingStrategy","useExisting","forChild","NgModule","provideForRootGuard","provideRoutes","opts","flatten","dom_1","_angular_platformBrowser","ÉµgetDOM","logGroup","log","logGroupEnd","resultOfPreactivationDone","rxjs_Subject","appInitializer","LOCATION_INITIALIZED","isLegacyDisabled","isLegacyEnabled","initNavigation","bootstrapListener","bootstrappedComponentRef","preloader","components","ROUTER_INITIALIZER","APP_INITIALIZER","multi","APP_BOOTSTRAP_LISTENER","getAppInitializer","RouterInitializer"],"mappings":"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","file":"/home/travis/build/angular/angular/dist/packages-dist/router/bundles/router.umd.min.js.map","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * \\@whatItDoes Base for events the Router goes through, as opposed to events tied to a specific\n * Route. `RouterEvent`s will only be fired one time for any given navigation.\n *\n * Example:\n *\n * ```\n * class MyService {\n *   constructor(public router: Router, logger: Logger) {\n *     router.events.filter(e => e instanceof RouterEvent).subscribe(e => {\n *       logger.log(e.id, e.url);\n *     });\n *   }\n * }\n * ```\n *\n * \\@experimental\n */\nvar /**\n * \\@whatItDoes Base for events the Router goes through, as opposed to events tied to a specific\n * Route. `RouterEvent`s will only be fired one time for any given navigation.\n *\n * Example:\n *\n * ```\n * class MyService {\n *   constructor(public router: Router, logger: Logger) {\n *     router.events.filter(e => e instanceof RouterEvent).subscribe(e => {\n *       logger.log(e.id, e.url);\n *     });\n *   }\n * }\n * ```\n *\n * \\@experimental\n */\nRouterEvent = /** @class */ (function () {\n    function RouterEvent(id, url) {\n        this.id = id;\n        this.url = url;\n    }\n    return RouterEvent;\n}());\n/**\n * \\@whatItDoes Base for events the Router goes through, as opposed to events tied to a specific\n * Route. `RouterEvent`s will only be fired one time for any given navigation.\n *\n * Example:\n *\n * ```\n * class MyService {\n *   constructor(public router: Router, logger: Logger) {\n *     router.events.filter(e => e instanceof RouterEvent).subscribe(e => {\n *       logger.log(e.id, e.url);\n *     });\n *   }\n * }\n * ```\n *\n * \\@experimental\n */\nexport { RouterEvent };\nfunction RouterEvent_tsickle_Closure_declarations() {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    RouterEvent.prototype.id;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    RouterEvent.prototype.url;\n}\n/**\n * \\@whatItDoes Represents an event triggered when a navigation starts.\n *\n * \\@stable\n */\nvar /**\n * \\@whatItDoes Represents an event triggered when a navigation starts.\n *\n * \\@stable\n */\nNavigationStart = /** @class */ (function (_super) {\n    tslib_1.__extends(NavigationStart, _super);\n    function NavigationStart(/** @docsNotRequired */\n    /** @docsNotRequired */\n    id, /** @docsNotRequired */\n    /** @docsNotRequired */\n    url, /** @docsNotRequired */\n    /** @docsNotRequired */\n    navigationTrigger, /** @docsNotRequired */\n    /** @docsNotRequired */\n    restoredState) {\n        /** @docsNotRequired */\n        if (navigationTrigger === void 0) { navigationTrigger = 'imperative'; }\n        /** @docsNotRequired */\n        if (restoredState === void 0) { restoredState = null; }\n        var _this = _super.call(this, id, url) || this;\n        _this.navigationTrigger = navigationTrigger;\n        _this.restoredState = restoredState;\n        return _this;\n    }\n    /** @docsNotRequired */\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    NavigationStart.prototype.toString = /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    function () { return \"NavigationStart(id: \" + this.id + \", url: '\" + this.url + \"')\"; };\n    return NavigationStart;\n}(RouterEvent));\n/**\n * \\@whatItDoes Represents an event triggered when a navigation starts.\n *\n * \\@stable\n */\nexport { NavigationStart };\nfunction NavigationStart_tsickle_Closure_declarations() {\n    /**\n     * Identifies the trigger of the navigation.\n     *\n     * * 'imperative'--triggered by `router.navigateByUrl` or `router.navigate`.\n     * * 'popstate'--triggered by a popstate event\n     * * 'hashchange'--triggered by a hashchange event\n     * @type {?}\n     */\n    NavigationStart.prototype.navigationTrigger;\n    /**\n     * This contains the navigation id that pushed the history record that the router navigates\n     * back to. This is not null only when the navigation is triggered by a popstate event.\n     *\n     * The router assigns a navigationId to every router transition/navigation. Even when the user\n     * clicks on the back button in the browser, a new navigation id will be created. So from\n     * the perspective of the router, the router never \"goes back\". By using the `restoredState`\n     * and its navigationId, you can implement behavior that differentiates between creating new\n     * states\n     * and popstate events. In the latter case you can restore some remembered state (e.g., scroll\n     * position).\n     * @type {?}\n     */\n    NavigationStart.prototype.restoredState;\n}\n/**\n * \\@whatItDoes Represents an event triggered when a navigation ends successfully.\n *\n * \\@stable\n */\nvar /**\n * \\@whatItDoes Represents an event triggered when a navigation ends successfully.\n *\n * \\@stable\n */\nNavigationEnd = /** @class */ (function (_super) {\n    tslib_1.__extends(NavigationEnd, _super);\n    function NavigationEnd(/** @docsNotRequired */\n    /** @docsNotRequired */\n    id, /** @docsNotRequired */\n    /** @docsNotRequired */\n    url, urlAfterRedirects) {\n        var _this = _super.call(this, id, url) || this;\n        _this.urlAfterRedirects = urlAfterRedirects;\n        return _this;\n    }\n    /** @docsNotRequired */\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    NavigationEnd.prototype.toString = /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    function () {\n        return \"NavigationEnd(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"')\";\n    };\n    return NavigationEnd;\n}(RouterEvent));\n/**\n * \\@whatItDoes Represents an event triggered when a navigation ends successfully.\n *\n * \\@stable\n */\nexport { NavigationEnd };\nfunction NavigationEnd_tsickle_Closure_declarations() {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    NavigationEnd.prototype.urlAfterRedirects;\n}\n/**\n * \\@whatItDoes Represents an event triggered when a navigation is canceled.\n *\n * \\@stable\n */\nvar /**\n * \\@whatItDoes Represents an event triggered when a navigation is canceled.\n *\n * \\@stable\n */\nNavigationCancel = /** @class */ (function (_super) {\n    tslib_1.__extends(NavigationCancel, _super);\n    function NavigationCancel(/** @docsNotRequired */\n    /** @docsNotRequired */\n    id, /** @docsNotRequired */\n    /** @docsNotRequired */\n    url, reason) {\n        var _this = _super.call(this, id, url) || this;\n        _this.reason = reason;\n        return _this;\n    }\n    /** @docsNotRequired */\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    NavigationCancel.prototype.toString = /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    function () { return \"NavigationCancel(id: \" + this.id + \", url: '\" + this.url + \"')\"; };\n    return NavigationCancel;\n}(RouterEvent));\n/**\n * \\@whatItDoes Represents an event triggered when a navigation is canceled.\n *\n * \\@stable\n */\nexport { NavigationCancel };\nfunction NavigationCancel_tsickle_Closure_declarations() {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    NavigationCancel.prototype.reason;\n}\n/**\n * \\@whatItDoes Represents an event triggered when a navigation fails due to an unexpected error.\n *\n * \\@stable\n */\nvar /**\n * \\@whatItDoes Represents an event triggered when a navigation fails due to an unexpected error.\n *\n * \\@stable\n */\nNavigationError = /** @class */ (function (_super) {\n    tslib_1.__extends(NavigationError, _super);\n    function NavigationError(/** @docsNotRequired */\n    /** @docsNotRequired */\n    id, /** @docsNotRequired */\n    /** @docsNotRequired */\n    url, error) {\n        var _this = _super.call(this, id, url) || this;\n        _this.error = error;\n        return _this;\n    }\n    /** @docsNotRequired */\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    NavigationError.prototype.toString = /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    function () {\n        return \"NavigationError(id: \" + this.id + \", url: '\" + this.url + \"', error: \" + this.error + \")\";\n    };\n    return NavigationError;\n}(RouterEvent));\n/**\n * \\@whatItDoes Represents an event triggered when a navigation fails due to an unexpected error.\n *\n * \\@stable\n */\nexport { NavigationError };\nfunction NavigationError_tsickle_Closure_declarations() {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    NavigationError.prototype.error;\n}\n/**\n * \\@whatItDoes Represents an event triggered when routes are recognized.\n *\n * \\@stable\n */\nvar /**\n * \\@whatItDoes Represents an event triggered when routes are recognized.\n *\n * \\@stable\n */\nRoutesRecognized = /** @class */ (function (_super) {\n    tslib_1.__extends(RoutesRecognized, _super);\n    function RoutesRecognized(/** @docsNotRequired */\n    /** @docsNotRequired */\n    id, /** @docsNotRequired */\n    /** @docsNotRequired */\n    url, urlAfterRedirects, state) {\n        var _this = _super.call(this, id, url) || this;\n        _this.urlAfterRedirects = urlAfterRedirects;\n        _this.state = state;\n        return _this;\n    }\n    /** @docsNotRequired */\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    RoutesRecognized.prototype.toString = /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    function () {\n        return \"RoutesRecognized(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"', state: \" + this.state + \")\";\n    };\n    return RoutesRecognized;\n}(RouterEvent));\n/**\n * \\@whatItDoes Represents an event triggered when routes are recognized.\n *\n * \\@stable\n */\nexport { RoutesRecognized };\nfunction RoutesRecognized_tsickle_Closure_declarations() {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    RoutesRecognized.prototype.urlAfterRedirects;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    RoutesRecognized.prototype.state;\n}\n/**\n * \\@whatItDoes Represents the start of the Guard phase of routing.\n *\n * \\@experimental\n */\nvar /**\n * \\@whatItDoes Represents the start of the Guard phase of routing.\n *\n * \\@experimental\n */\nGuardsCheckStart = /** @class */ (function (_super) {\n    tslib_1.__extends(GuardsCheckStart, _super);\n    function GuardsCheckStart(/** @docsNotRequired */\n    /** @docsNotRequired */\n    id, /** @docsNotRequired */\n    /** @docsNotRequired */\n    url, urlAfterRedirects, state) {\n        var _this = _super.call(this, id, url) || this;\n        _this.urlAfterRedirects = urlAfterRedirects;\n        _this.state = state;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    GuardsCheckStart.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        return \"GuardsCheckStart(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"', state: \" + this.state + \")\";\n    };\n    return GuardsCheckStart;\n}(RouterEvent));\n/**\n * \\@whatItDoes Represents the start of the Guard phase of routing.\n *\n * \\@experimental\n */\nexport { GuardsCheckStart };\nfunction GuardsCheckStart_tsickle_Closure_declarations() {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    GuardsCheckStart.prototype.urlAfterRedirects;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    GuardsCheckStart.prototype.state;\n}\n/**\n * \\@whatItDoes Represents the end of the Guard phase of routing.\n *\n * \\@experimental\n */\nvar /**\n * \\@whatItDoes Represents the end of the Guard phase of routing.\n *\n * \\@experimental\n */\nGuardsCheckEnd = /** @class */ (function (_super) {\n    tslib_1.__extends(GuardsCheckEnd, _super);\n    function GuardsCheckEnd(/** @docsNotRequired */\n    /** @docsNotRequired */\n    id, /** @docsNotRequired */\n    /** @docsNotRequired */\n    url, urlAfterRedirects, state, shouldActivate) {\n        var _this = _super.call(this, id, url) || this;\n        _this.urlAfterRedirects = urlAfterRedirects;\n        _this.state = state;\n        _this.shouldActivate = shouldActivate;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    GuardsCheckEnd.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        return \"GuardsCheckEnd(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"', state: \" + this.state + \", shouldActivate: \" + this.shouldActivate + \")\";\n    };\n    return GuardsCheckEnd;\n}(RouterEvent));\n/**\n * \\@whatItDoes Represents the end of the Guard phase of routing.\n *\n * \\@experimental\n */\nexport { GuardsCheckEnd };\nfunction GuardsCheckEnd_tsickle_Closure_declarations() {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    GuardsCheckEnd.prototype.urlAfterRedirects;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    GuardsCheckEnd.prototype.state;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    GuardsCheckEnd.prototype.shouldActivate;\n}\n/**\n * \\@whatItDoes Represents the start of the Resolve phase of routing. The timing of this\n * event may change, thus it's experimental. In the current iteration it will run\n * in the \"resolve\" phase whether there's things to resolve or not. In the future this\n * behavior may change to only run when there are things to be resolved.\n *\n * \\@experimental\n */\nvar /**\n * \\@whatItDoes Represents the start of the Resolve phase of routing. The timing of this\n * event may change, thus it's experimental. In the current iteration it will run\n * in the \"resolve\" phase whether there's things to resolve or not. In the future this\n * behavior may change to only run when there are things to be resolved.\n *\n * \\@experimental\n */\nResolveStart = /** @class */ (function (_super) {\n    tslib_1.__extends(ResolveStart, _super);\n    function ResolveStart(/** @docsNotRequired */\n    /** @docsNotRequired */\n    id, /** @docsNotRequired */\n    /** @docsNotRequired */\n    url, urlAfterRedirects, state) {\n        var _this = _super.call(this, id, url) || this;\n        _this.urlAfterRedirects = urlAfterRedirects;\n        _this.state = state;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    ResolveStart.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        return \"ResolveStart(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"', state: \" + this.state + \")\";\n    };\n    return ResolveStart;\n}(RouterEvent));\n/**\n * \\@whatItDoes Represents the start of the Resolve phase of routing. The timing of this\n * event may change, thus it's experimental. In the current iteration it will run\n * in the \"resolve\" phase whether there's things to resolve or not. In the future this\n * behavior may change to only run when there are things to be resolved.\n *\n * \\@experimental\n */\nexport { ResolveStart };\nfunction ResolveStart_tsickle_Closure_declarations() {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    ResolveStart.prototype.urlAfterRedirects;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    ResolveStart.prototype.state;\n}\n/**\n * \\@whatItDoes Represents the end of the Resolve phase of routing. See note on\n * {\\@link ResolveStart} for use of this experimental API.\n *\n * \\@experimental\n */\nvar /**\n * \\@whatItDoes Represents the end of the Resolve phase of routing. See note on\n * {\\@link ResolveStart} for use of this experimental API.\n *\n * \\@experimental\n */\nResolveEnd = /** @class */ (function (_super) {\n    tslib_1.__extends(ResolveEnd, _super);\n    function ResolveEnd(/** @docsNotRequired */\n    /** @docsNotRequired */\n    id, /** @docsNotRequired */\n    /** @docsNotRequired */\n    url, urlAfterRedirects, state) {\n        var _this = _super.call(this, id, url) || this;\n        _this.urlAfterRedirects = urlAfterRedirects;\n        _this.state = state;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    ResolveEnd.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        return \"ResolveEnd(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"', state: \" + this.state + \")\";\n    };\n    return ResolveEnd;\n}(RouterEvent));\n/**\n * \\@whatItDoes Represents the end of the Resolve phase of routing. See note on\n * {\\@link ResolveStart} for use of this experimental API.\n *\n * \\@experimental\n */\nexport { ResolveEnd };\nfunction ResolveEnd_tsickle_Closure_declarations() {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    ResolveEnd.prototype.urlAfterRedirects;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    ResolveEnd.prototype.state;\n}\n/**\n * \\@whatItDoes Represents an event triggered before lazy loading a route config.\n *\n * \\@experimental\n */\nvar /**\n * \\@whatItDoes Represents an event triggered before lazy loading a route config.\n *\n * \\@experimental\n */\nRouteConfigLoadStart = /** @class */ (function () {\n    function RouteConfigLoadStart(route) {\n        this.route = route;\n    }\n    /**\n     * @return {?}\n     */\n    RouteConfigLoadStart.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return \"RouteConfigLoadStart(path: \" + this.route.path + \")\"; };\n    return RouteConfigLoadStart;\n}());\n/**\n * \\@whatItDoes Represents an event triggered before lazy loading a route config.\n *\n * \\@experimental\n */\nexport { RouteConfigLoadStart };\nfunction RouteConfigLoadStart_tsickle_Closure_declarations() {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    RouteConfigLoadStart.prototype.route;\n}\n/**\n * \\@whatItDoes Represents an event triggered when a route has been lazy loaded.\n *\n * \\@experimental\n */\nvar /**\n * \\@whatItDoes Represents an event triggered when a route has been lazy loaded.\n *\n * \\@experimental\n */\nRouteConfigLoadEnd = /** @class */ (function () {\n    function RouteConfigLoadEnd(route) {\n        this.route = route;\n    }\n    /**\n     * @return {?}\n     */\n    RouteConfigLoadEnd.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return \"RouteConfigLoadEnd(path: \" + this.route.path + \")\"; };\n    return RouteConfigLoadEnd;\n}());\n/**\n * \\@whatItDoes Represents an event triggered when a route has been lazy loaded.\n *\n * \\@experimental\n */\nexport { RouteConfigLoadEnd };\nfunction RouteConfigLoadEnd_tsickle_Closure_declarations() {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    RouteConfigLoadEnd.prototype.route;\n}\n/**\n * \\@whatItDoes Represents the start of end of the Resolve phase of routing. See note on\n * {\\@link ChildActivationEnd} for use of this experimental API.\n *\n * \\@experimental\n */\nvar /**\n * \\@whatItDoes Represents the start of end of the Resolve phase of routing. See note on\n * {\\@link ChildActivationEnd} for use of this experimental API.\n *\n * \\@experimental\n */\nChildActivationStart = /** @class */ (function () {\n    function ChildActivationStart(snapshot) {\n        this.snapshot = snapshot;\n    }\n    /**\n     * @return {?}\n     */\n    ChildActivationStart.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n        return \"ChildActivationStart(path: '\" + path + \"')\";\n    };\n    return ChildActivationStart;\n}());\n/**\n * \\@whatItDoes Represents the start of end of the Resolve phase of routing. See note on\n * {\\@link ChildActivationEnd} for use of this experimental API.\n *\n * \\@experimental\n */\nexport { ChildActivationStart };\nfunction ChildActivationStart_tsickle_Closure_declarations() {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    ChildActivationStart.prototype.snapshot;\n}\n/**\n * \\@whatItDoes Represents the start of end of the Resolve phase of routing. See note on\n * {\\@link ChildActivationStart} for use of this experimental API.\n *\n * \\@experimental\n */\nvar /**\n * \\@whatItDoes Represents the start of end of the Resolve phase of routing. See note on\n * {\\@link ChildActivationStart} for use of this experimental API.\n *\n * \\@experimental\n */\nChildActivationEnd = /** @class */ (function () {\n    function ChildActivationEnd(snapshot) {\n        this.snapshot = snapshot;\n    }\n    /**\n     * @return {?}\n     */\n    ChildActivationEnd.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n        return \"ChildActivationEnd(path: '\" + path + \"')\";\n    };\n    return ChildActivationEnd;\n}());\n/**\n * \\@whatItDoes Represents the start of end of the Resolve phase of routing. See note on\n * {\\@link ChildActivationStart} for use of this experimental API.\n *\n * \\@experimental\n */\nexport { ChildActivationEnd };\nfunction ChildActivationEnd_tsickle_Closure_declarations() {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    ChildActivationEnd.prototype.snapshot;\n}\n/**\n * \\@whatItDoes Represents the start of end of the Resolve phase of routing. See note on\n * {\\@link ActivationEnd} for use of this experimental API.\n *\n * \\@experimental\n */\nvar /**\n * \\@whatItDoes Represents the start of end of the Resolve phase of routing. See note on\n * {\\@link ActivationEnd} for use of this experimental API.\n *\n * \\@experimental\n */\nActivationStart = /** @class */ (function () {\n    function ActivationStart(snapshot) {\n        this.snapshot = snapshot;\n    }\n    /**\n     * @return {?}\n     */\n    ActivationStart.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n        return \"ActivationStart(path: '\" + path + \"')\";\n    };\n    return ActivationStart;\n}());\n/**\n * \\@whatItDoes Represents the start of end of the Resolve phase of routing. See note on\n * {\\@link ActivationEnd} for use of this experimental API.\n *\n * \\@experimental\n */\nexport { ActivationStart };\nfunction ActivationStart_tsickle_Closure_declarations() {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    ActivationStart.prototype.snapshot;\n}\n/**\n * \\@whatItDoes Represents the start of end of the Resolve phase of routing. See note on\n * {\\@link ActivationStart} for use of this experimental API.\n *\n * \\@experimental\n */\nvar /**\n * \\@whatItDoes Represents the start of end of the Resolve phase of routing. See note on\n * {\\@link ActivationStart} for use of this experimental API.\n *\n * \\@experimental\n */\nActivationEnd = /** @class */ (function () {\n    function ActivationEnd(snapshot) {\n        this.snapshot = snapshot;\n    }\n    /**\n     * @return {?}\n     */\n    ActivationEnd.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n        return \"ActivationEnd(path: '\" + path + \"')\";\n    };\n    return ActivationEnd;\n}());\n/**\n * \\@whatItDoes Represents the start of end of the Resolve phase of routing. See note on\n * {\\@link ActivationStart} for use of this experimental API.\n *\n * \\@experimental\n */\nexport { ActivationEnd };\nfunction ActivationEnd_tsickle_Closure_declarations() {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    ActivationEnd.prototype.snapshot;\n}\n//# sourceMappingURL=events.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Name of the primary outlet.\n *\n * \\@stable\n */\nexport var /** @type {?} */ PRIMARY_OUTLET = 'primary';\n/**\n * Matrix and Query parameters.\n *\n * `ParamMap` makes it easier to work with parameters as they could have either a single value or\n * multiple value. Because this should be known by the user, calling `get` or `getAll` returns the\n * correct type (either `string` or `string[]`).\n *\n * The API is inspired by the URLSearchParams interface.\n * see https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\n *\n * \\@stable\n * @record\n */\nexport function ParamMap() { }\nfunction ParamMap_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ParamMap.prototype.has;\n    /**\n     * Return a single value for the given parameter name:\n     * - the value when the parameter has a single value,\n     * - the first value if the parameter has multiple values,\n     * - `null` when there is no such parameter.\n     * @type {?}\n     */\n    ParamMap.prototype.get;\n    /**\n     * Return an array of values for the given parameter name.\n     *\n     * If there is no such parameter, an empty array is returned.\n     * @type {?}\n     */\n    ParamMap.prototype.getAll;\n    /**\n     * Name of the parameters\n     * @type {?}\n     */\n    ParamMap.prototype.keys;\n}\nvar ParamsAsMap = /** @class */ (function () {\n    function ParamsAsMap(params) {\n        this.params = params || {};\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ParamsAsMap.prototype.has = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this.params.hasOwnProperty(name); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ParamsAsMap.prototype.get = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if (this.has(name)) {\n            var /** @type {?} */ v = this.params[name];\n            return Array.isArray(v) ? v[0] : v;\n        }\n        return null;\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ParamsAsMap.prototype.getAll = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if (this.has(name)) {\n            var /** @type {?} */ v = this.params[name];\n            return Array.isArray(v) ? v : [v];\n        }\n        return [];\n    };\n    Object.defineProperty(ParamsAsMap.prototype, \"keys\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return Object.keys(this.params); },\n        enumerable: true,\n        configurable: true\n    });\n    return ParamsAsMap;\n}());\nfunction ParamsAsMap_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ParamsAsMap.prototype.params;\n}\n/**\n * Convert a {\\@link Params} instance to a {\\@link ParamMap}.\n *\n * \\@stable\n * @param {?} params\n * @return {?}\n */\nexport function convertToParamMap(params) {\n    return new ParamsAsMap(params);\n}\nvar /** @type {?} */ NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';\n/**\n * @param {?} message\n * @return {?}\n */\nexport function navigationCancelingError(message) {\n    var /** @type {?} */ error = Error('NavigationCancelingError: ' + message);\n    (/** @type {?} */ (error))[NAVIGATION_CANCELING_ERROR] = true;\n    return error;\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function isNavigationCancelingError(error) {\n    return error && (/** @type {?} */ (error))[NAVIGATION_CANCELING_ERROR];\n}\n/**\n * @param {?} segments\n * @param {?} segmentGroup\n * @param {?} route\n * @return {?}\n */\nexport function defaultUrlMatcher(segments, segmentGroup, route) {\n    var /** @type {?} */ parts = /** @type {?} */ ((route.path)).split('/');\n    if (parts.length > segments.length) {\n        // The actual URL is shorter than the config, no match\n        return null;\n    }\n    if (route.pathMatch === 'full' &&\n        (segmentGroup.hasChildren() || parts.length < segments.length)) {\n        // The config is longer than the actual URL but we are looking for a full match, return null\n        return null;\n    }\n    var /** @type {?} */ posParams = {};\n    // Check each config part against the actual URL\n    for (var /** @type {?} */ index = 0; index < parts.length; index++) {\n        var /** @type {?} */ part = parts[index];\n        var /** @type {?} */ segment = segments[index];\n        var /** @type {?} */ isParameter = part.startsWith(':');\n        if (isParameter) {\n            posParams[part.substring(1)] = segment;\n        }\n        else if (part !== segment.path) {\n            // The actual URL part does not match the config, no match\n            return null;\n        }\n    }\n    return { consumed: segments.slice(0, parts.length), posParams: posParams };\n}\n//# sourceMappingURL=shared.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { PRIMARY_OUTLET } from './shared';\n/**\n * See {\\@link Routes} for more details.\n * \\@stable\n * @record\n */\nexport function Route() { }\nfunction Route_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    Route.prototype.path;\n    /** @type {?|undefined} */\n    Route.prototype.pathMatch;\n    /** @type {?|undefined} */\n    Route.prototype.matcher;\n    /** @type {?|undefined} */\n    Route.prototype.component;\n    /** @type {?|undefined} */\n    Route.prototype.redirectTo;\n    /** @type {?|undefined} */\n    Route.prototype.outlet;\n    /** @type {?|undefined} */\n    Route.prototype.canActivate;\n    /** @type {?|undefined} */\n    Route.prototype.canActivateChild;\n    /** @type {?|undefined} */\n    Route.prototype.canDeactivate;\n    /** @type {?|undefined} */\n    Route.prototype.canLoad;\n    /** @type {?|undefined} */\n    Route.prototype.data;\n    /** @type {?|undefined} */\n    Route.prototype.resolve;\n    /** @type {?|undefined} */\n    Route.prototype.children;\n    /** @type {?|undefined} */\n    Route.prototype.loadChildren;\n    /** @type {?|undefined} */\n    Route.prototype.runGuardsAndResolvers;\n    /**\n     * Filled for routes with `loadChildren` once the module has been loaded\n     * \\@internal\n     * @type {?|undefined}\n     */\n    Route.prototype._loadedConfig;\n}\nvar LoadedRouterConfig = /** @class */ (function () {\n    function LoadedRouterConfig(routes, module) {\n        this.routes = routes;\n        this.module = module;\n    }\n    return LoadedRouterConfig;\n}());\nexport { LoadedRouterConfig };\nfunction LoadedRouterConfig_tsickle_Closure_declarations() {\n    /** @type {?} */\n    LoadedRouterConfig.prototype.routes;\n    /** @type {?} */\n    LoadedRouterConfig.prototype.module;\n}\n/**\n * @param {?} config\n * @param {?=} parentPath\n * @return {?}\n */\nexport function validateConfig(config, parentPath) {\n    if (parentPath === void 0) { parentPath = ''; }\n    // forEach doesn't iterate undefined values\n    for (var /** @type {?} */ i = 0; i < config.length; i++) {\n        var /** @type {?} */ route = config[i];\n        var /** @type {?} */ fullPath = getFullPath(parentPath, route);\n        validateNode(route, fullPath);\n    }\n}\n/**\n * @param {?} route\n * @param {?} fullPath\n * @return {?}\n */\nfunction validateNode(route, fullPath) {\n    if (!route) {\n        throw new Error(\"\\n      Invalid configuration of route '\" + fullPath + \"': Encountered undefined route.\\n      The reason might be an extra comma.\\n\\n      Example:\\n      const routes: Routes = [\\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\\n        { path: 'detail/:id', component: HeroDetailComponent }\\n      ];\\n    \");\n    }\n    if (Array.isArray(route)) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': Array cannot be specified\");\n    }\n    if (!route.component && (route.outlet && route.outlet !== PRIMARY_OUTLET)) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': a componentless route cannot have a named outlet set\");\n    }\n    if (route.redirectTo && route.children) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': redirectTo and children cannot be used together\");\n    }\n    if (route.redirectTo && route.loadChildren) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': redirectTo and loadChildren cannot be used together\");\n    }\n    if (route.children && route.loadChildren) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': children and loadChildren cannot be used together\");\n    }\n    if (route.redirectTo && route.component) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': redirectTo and component cannot be used together\");\n    }\n    if (route.path && route.matcher) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': path and matcher cannot be used together\");\n    }\n    if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"'. One of the following must be provided: component, redirectTo, children or loadChildren\");\n    }\n    if (route.path === void 0 && route.matcher === void 0) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': routes must have either a path or a matcher specified\");\n    }\n    if (typeof route.path === 'string' && route.path.charAt(0) === '/') {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': path cannot start with a slash\");\n    }\n    if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {\n        var /** @type {?} */ exp = \"The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.\";\n        throw new Error(\"Invalid configuration of route '{path: \\\"\" + fullPath + \"\\\", redirectTo: \\\"\" + route.redirectTo + \"\\\"}': please provide 'pathMatch'. \" + exp);\n    }\n    if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': pathMatch can only be set to 'prefix' or 'full'\");\n    }\n    if (route.children) {\n        validateConfig(route.children, fullPath);\n    }\n}\n/**\n * @param {?} parentPath\n * @param {?} currentRoute\n * @return {?}\n */\nfunction getFullPath(parentPath, currentRoute) {\n    if (!currentRoute) {\n        return parentPath;\n    }\n    if (!parentPath && !currentRoute.path) {\n        return '';\n    }\n    else if (parentPath && !currentRoute.path) {\n        return parentPath + \"/\";\n    }\n    else if (!parentPath && currentRoute.path) {\n        return currentRoute.path;\n    }\n    else {\n        return parentPath + \"/\" + currentRoute.path;\n    }\n}\n/**\n * @param {?} r\n * @return {?}\n */\nexport function copyConfig(r) {\n    var /** @type {?} */ children = r.children && r.children.map(copyConfig);\n    return children ? tslib_1.__assign({}, r, { children: children }) : tslib_1.__assign({}, r);\n}\n//# sourceMappingURL=config.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ÉµisObservable as isObservable, ÉµisPromise as isPromise } from '@angular/core';\nimport { fromPromise } from 'rxjs/observable/fromPromise';\nimport { of } from 'rxjs/observable/of';\nimport { concatAll } from 'rxjs/operator/concatAll';\nimport { every } from 'rxjs/operator/every';\nimport * as l from 'rxjs/operator/last';\nimport { map } from 'rxjs/operator/map';\nimport { mergeAll } from 'rxjs/operator/mergeAll';\nimport { PRIMARY_OUTLET } from '../shared';\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function shallowEqualArrays(a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (var /** @type {?} */ i = 0; i < a.length; ++i) {\n        if (!shallowEqual(a[i], b[i]))\n            return false;\n    }\n    return true;\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function shallowEqual(a, b) {\n    var /** @type {?} */ k1 = Object.keys(a);\n    var /** @type {?} */ k2 = Object.keys(b);\n    if (k1.length != k2.length) {\n        return false;\n    }\n    var /** @type {?} */ key;\n    for (var /** @type {?} */ i = 0; i < k1.length; i++) {\n        key = k1[i];\n        if (a[key] !== b[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Flattens single-level nested arrays.\n * @template T\n * @param {?} arr\n * @return {?}\n */\nexport function flatten(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\n/**\n * Return the last element of an array.\n * @template T\n * @param {?} a\n * @return {?}\n */\nexport function last(a) {\n    return a.length > 0 ? a[a.length - 1] : null;\n}\n/**\n * Verifys all booleans in an array are `true`.\n * @param {?} bools\n * @return {?}\n */\nexport function and(bools) {\n    return !bools.some(function (v) { return !v; });\n}\n/**\n * @template K, V\n * @param {?} map\n * @param {?} callback\n * @return {?}\n */\nexport function forEach(map, callback) {\n    for (var /** @type {?} */ prop in map) {\n        if (map.hasOwnProperty(prop)) {\n            callback(map[prop], prop);\n        }\n    }\n}\n/**\n * @template A, B\n * @param {?} obj\n * @param {?} fn\n * @return {?}\n */\nexport function waitForMap(obj, fn) {\n    if (Object.keys(obj).length === 0) {\n        return of({});\n    }\n    var /** @type {?} */ waitHead = [];\n    var /** @type {?} */ waitTail = [];\n    var /** @type {?} */ res = {};\n    forEach(obj, function (a, k) {\n        var /** @type {?} */ mapped = map.call(fn(k, a), function (r) { return res[k] = r; });\n        if (k === PRIMARY_OUTLET) {\n            waitHead.push(mapped);\n        }\n        else {\n            waitTail.push(mapped);\n        }\n    });\n    var /** @type {?} */ concat$ = concatAll.call(of.apply(void 0, waitHead.concat(waitTail)));\n    var /** @type {?} */ last$ = l.last.call(concat$);\n    return map.call(last$, function () { return res; });\n}\n/**\n * ANDs Observables by merging all input observables, reducing to an Observable verifying all\n * input Observables return `true`.\n * @param {?} observables\n * @return {?}\n */\nexport function andObservables(observables) {\n    var /** @type {?} */ merged$ = mergeAll.call(observables);\n    return every.call(merged$, function (result) { return result === true; });\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nexport function wrapIntoObservable(value) {\n    if (isObservable(value)) {\n        return value;\n    }\n    if (isPromise(value)) {\n        // Use `Promise.resolve()` to wrap promise-like instances.\n        // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the\n        // change detection.\n        return fromPromise(Promise.resolve(value));\n    }\n    return of(/** @type {?} */ (value));\n}\n//# sourceMappingURL=collection.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { PRIMARY_OUTLET, convertToParamMap } from './shared';\nimport { forEach, shallowEqual } from './utils/collection';\n/**\n * @return {?}\n */\nexport function createEmptyUrlTree() {\n    return new UrlTree(new UrlSegmentGroup([], {}), {}, null);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @param {?} exact\n * @return {?}\n */\nexport function containsTree(container, containee, exact) {\n    if (exact) {\n        return equalQueryParams(container.queryParams, containee.queryParams) &&\n            equalSegmentGroups(container.root, containee.root);\n    }\n    return containsQueryParams(container.queryParams, containee.queryParams) &&\n        containsSegmentGroup(container.root, containee.root);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction equalQueryParams(container, containee) {\n    return shallowEqual(container, containee);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction equalSegmentGroups(container, containee) {\n    if (!equalPath(container.segments, containee.segments))\n        return false;\n    if (container.numberOfChildren !== containee.numberOfChildren)\n        return false;\n    for (var /** @type {?} */ c in containee.children) {\n        if (!container.children[c])\n            return false;\n        if (!equalSegmentGroups(container.children[c], containee.children[c]))\n            return false;\n    }\n    return true;\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction containsQueryParams(container, containee) {\n    return Object.keys(containee).length <= Object.keys(container).length &&\n        Object.keys(containee).every(function (key) { return containee[key] === container[key]; });\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction containsSegmentGroup(container, containee) {\n    return containsSegmentGroupHelper(container, containee, containee.segments);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @param {?} containeePaths\n * @return {?}\n */\nfunction containsSegmentGroupHelper(container, containee, containeePaths) {\n    if (container.segments.length > containeePaths.length) {\n        var /** @type {?} */ current = container.segments.slice(0, containeePaths.length);\n        if (!equalPath(current, containeePaths))\n            return false;\n        if (containee.hasChildren())\n            return false;\n        return true;\n    }\n    else if (container.segments.length === containeePaths.length) {\n        if (!equalPath(container.segments, containeePaths))\n            return false;\n        for (var /** @type {?} */ c in containee.children) {\n            if (!container.children[c])\n                return false;\n            if (!containsSegmentGroup(container.children[c], containee.children[c]))\n                return false;\n        }\n        return true;\n    }\n    else {\n        var /** @type {?} */ current = containeePaths.slice(0, container.segments.length);\n        var /** @type {?} */ next = containeePaths.slice(container.segments.length);\n        if (!equalPath(container.segments, current))\n            return false;\n        if (!container.children[PRIMARY_OUTLET])\n            return false;\n        return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);\n    }\n}\n/**\n * \\@whatItDoes Represents the parsed URL.\n *\n * \\@howToUse\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n *\n * \\@description\n *\n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n *\n * \\@stable\n */\nvar /**\n * \\@whatItDoes Represents the parsed URL.\n *\n * \\@howToUse\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n *\n * \\@description\n *\n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n *\n * \\@stable\n */\nUrlTree = /** @class */ (function () {\n    /** @internal */\n    function UrlTree(root, queryParams, fragment) {\n        this.root = root;\n        this.queryParams = queryParams;\n        this.fragment = fragment;\n    }\n    Object.defineProperty(UrlTree.prototype, \"queryParamMap\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            if (!this._queryParamMap) {\n                this._queryParamMap = convertToParamMap(this.queryParams);\n            }\n            return this._queryParamMap;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @docsNotRequired */\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    UrlTree.prototype.toString = /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    function () { return DEFAULT_SERIALIZER.serialize(this); };\n    return UrlTree;\n}());\n/**\n * \\@whatItDoes Represents the parsed URL.\n *\n * \\@howToUse\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n *\n * \\@description\n *\n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n *\n * \\@stable\n */\nexport { UrlTree };\nfunction UrlTree_tsickle_Closure_declarations() {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    UrlTree.prototype._queryParamMap;\n    /**\n     * The root segment group of the URL tree\n     * @type {?}\n     */\n    UrlTree.prototype.root;\n    /**\n     * The query params of the URL\n     * @type {?}\n     */\n    UrlTree.prototype.queryParams;\n    /**\n     * The fragment of the URL\n     * @type {?}\n     */\n    UrlTree.prototype.fragment;\n}\n/**\n * \\@whatItDoes Represents the parsed URL segment group.\n *\n * See {\\@link UrlTree} for more information.\n *\n * \\@stable\n */\nvar /**\n * \\@whatItDoes Represents the parsed URL segment group.\n *\n * See {\\@link UrlTree} for more information.\n *\n * \\@stable\n */\nUrlSegmentGroup = /** @class */ (function () {\n    function UrlSegmentGroup(segments, children) {\n        var _this = this;\n        this.segments = segments;\n        this.children = children;\n        /**\n         * The parent node in the url tree\n         */\n        this.parent = null;\n        forEach(children, function (v, k) { return v.parent = _this; });\n    }\n    /** Whether the segment has child segments */\n    /**\n     * Whether the segment has child segments\n     * @return {?}\n     */\n    UrlSegmentGroup.prototype.hasChildren = /**\n     * Whether the segment has child segments\n     * @return {?}\n     */\n    function () { return this.numberOfChildren > 0; };\n    Object.defineProperty(UrlSegmentGroup.prototype, \"numberOfChildren\", {\n        /** Number of child segments */\n        get: /**\n         * Number of child segments\n         * @return {?}\n         */\n        function () { return Object.keys(this.children).length; },\n        enumerable: true,\n        configurable: true\n    });\n    /** @docsNotRequired */\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    UrlSegmentGroup.prototype.toString = /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    function () { return serializePaths(this); };\n    return UrlSegmentGroup;\n}());\n/**\n * \\@whatItDoes Represents the parsed URL segment group.\n *\n * See {\\@link UrlTree} for more information.\n *\n * \\@stable\n */\nexport { UrlSegmentGroup };\nfunction UrlSegmentGroup_tsickle_Closure_declarations() {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    UrlSegmentGroup.prototype._sourceSegment;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    UrlSegmentGroup.prototype._segmentIndexShift;\n    /**\n     * The parent node in the url tree\n     * @type {?}\n     */\n    UrlSegmentGroup.prototype.parent;\n    /**\n     * The URL segments of this group. See {\\@link UrlSegment} for more information\n     * @type {?}\n     */\n    UrlSegmentGroup.prototype.segments;\n    /**\n     * The list of children of this group\n     * @type {?}\n     */\n    UrlSegmentGroup.prototype.children;\n}\n/**\n * \\@whatItDoes Represents a single URL segment.\n *\n * \\@howToUse\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n *\n * \\@description\n *\n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n *\n * \\@stable\n */\nvar /**\n * \\@whatItDoes Represents a single URL segment.\n *\n * \\@howToUse\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n *\n * \\@description\n *\n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n *\n * \\@stable\n */\nUrlSegment = /** @class */ (function () {\n    function UrlSegment(path, parameters) {\n        this.path = path;\n        this.parameters = parameters;\n    }\n    Object.defineProperty(UrlSegment.prototype, \"parameterMap\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            if (!this._parameterMap) {\n                this._parameterMap = convertToParamMap(this.parameters);\n            }\n            return this._parameterMap;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @docsNotRequired */\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    UrlSegment.prototype.toString = /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    function () { return serializePath(this); };\n    return UrlSegment;\n}());\n/**\n * \\@whatItDoes Represents a single URL segment.\n *\n * \\@howToUse\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n *\n * \\@description\n *\n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n *\n * \\@stable\n */\nexport { UrlSegment };\nfunction UrlSegment_tsickle_Closure_declarations() {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    UrlSegment.prototype._parameterMap;\n    /**\n     * The path part of a URL segment\n     * @type {?}\n     */\n    UrlSegment.prototype.path;\n    /**\n     * The matrix parameters associated with a segment\n     * @type {?}\n     */\n    UrlSegment.prototype.parameters;\n}\n/**\n * @param {?} as\n * @param {?} bs\n * @return {?}\n */\nexport function equalSegments(as, bs) {\n    return equalPath(as, bs) && as.every(function (a, i) { return shallowEqual(a.parameters, bs[i].parameters); });\n}\n/**\n * @param {?} as\n * @param {?} bs\n * @return {?}\n */\nexport function equalPath(as, bs) {\n    if (as.length !== bs.length)\n        return false;\n    return as.every(function (a, i) { return a.path === bs[i].path; });\n}\n/**\n * @template T\n * @param {?} segment\n * @param {?} fn\n * @return {?}\n */\nexport function mapChildrenIntoArray(segment, fn) {\n    var /** @type {?} */ res = [];\n    forEach(segment.children, function (child, childOutlet) {\n        if (childOutlet === PRIMARY_OUTLET) {\n            res = res.concat(fn(child, childOutlet));\n        }\n    });\n    forEach(segment.children, function (child, childOutlet) {\n        if (childOutlet !== PRIMARY_OUTLET) {\n            res = res.concat(fn(child, childOutlet));\n        }\n    });\n    return res;\n}\n/**\n * \\@whatItDoes Serializes and deserializes a URL string into a URL tree.\n *\n * \\@description The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n *\n * See {\\@link DefaultUrlSerializer} for an example of a URL serializer.\n *\n * \\@stable\n * @abstract\n */\nvar /**\n * \\@whatItDoes Serializes and deserializes a URL string into a URL tree.\n *\n * \\@description The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n *\n * See {\\@link DefaultUrlSerializer} for an example of a URL serializer.\n *\n * \\@stable\n * @abstract\n */\nUrlSerializer = /** @class */ (function () {\n    function UrlSerializer() {\n    }\n    return UrlSerializer;\n}());\n/**\n * \\@whatItDoes Serializes and deserializes a URL string into a URL tree.\n *\n * \\@description The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n *\n * See {\\@link DefaultUrlSerializer} for an example of a URL serializer.\n *\n * \\@stable\n * @abstract\n */\nexport { UrlSerializer };\nfunction UrlSerializer_tsickle_Closure_declarations() {\n    /**\n     * Parse a url into a {\\@link UrlTree}\n     * @abstract\n     * @param {?} url\n     * @return {?}\n     */\n    UrlSerializer.prototype.parse = function (url) { };\n    /**\n     * Converts a {\\@link UrlTree} into a url\n     * @abstract\n     * @param {?} tree\n     * @return {?}\n     */\n    UrlSerializer.prototype.serialize = function (tree) { };\n}\n/**\n * \\@whatItDoes A default implementation of the {\\@link UrlSerializer}.\n *\n * \\@description\n *\n * Example URLs:\n *\n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n *\n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n *\n * \\@stable\n */\nvar /**\n * \\@whatItDoes A default implementation of the {\\@link UrlSerializer}.\n *\n * \\@description\n *\n * Example URLs:\n *\n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n *\n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n *\n * \\@stable\n */\nDefaultUrlSerializer = /** @class */ (function () {\n    function DefaultUrlSerializer() {\n    }\n    /** Parses a url into a {@link UrlTree} */\n    /**\n     * Parses a url into a {\\@link UrlTree}\n     * @param {?} url\n     * @return {?}\n     */\n    DefaultUrlSerializer.prototype.parse = /**\n     * Parses a url into a {\\@link UrlTree}\n     * @param {?} url\n     * @return {?}\n     */\n    function (url) {\n        var /** @type {?} */ p = new UrlParser(url);\n        return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\n    };\n    /** Converts a {@link UrlTree} into a url */\n    /**\n     * Converts a {\\@link UrlTree} into a url\n     * @param {?} tree\n     * @return {?}\n     */\n    DefaultUrlSerializer.prototype.serialize = /**\n     * Converts a {\\@link UrlTree} into a url\n     * @param {?} tree\n     * @return {?}\n     */\n    function (tree) {\n        var /** @type {?} */ segment = \"/\" + serializeSegment(tree.root, true);\n        var /** @type {?} */ query = serializeQueryParams(tree.queryParams);\n        var /** @type {?} */ fragment = typeof tree.fragment === \"string\" ? \"#\" + encodeUriFragment((/** @type {?} */ ((tree.fragment)))) : '';\n        return \"\" + segment + query + fragment;\n    };\n    return DefaultUrlSerializer;\n}());\n/**\n * \\@whatItDoes A default implementation of the {\\@link UrlSerializer}.\n *\n * \\@description\n *\n * Example URLs:\n *\n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n *\n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n *\n * \\@stable\n */\nexport { DefaultUrlSerializer };\nvar /** @type {?} */ DEFAULT_SERIALIZER = new DefaultUrlSerializer();\n/**\n * @param {?} segment\n * @return {?}\n */\nexport function serializePaths(segment) {\n    return segment.segments.map(function (p) { return serializePath(p); }).join('/');\n}\n/**\n * @param {?} segment\n * @param {?} root\n * @return {?}\n */\nfunction serializeSegment(segment, root) {\n    if (!segment.hasChildren()) {\n        return serializePaths(segment);\n    }\n    if (root) {\n        var /** @type {?} */ primary = segment.children[PRIMARY_OUTLET] ?\n            serializeSegment(segment.children[PRIMARY_OUTLET], false) :\n            '';\n        var /** @type {?} */ children_1 = [];\n        forEach(segment.children, function (v, k) {\n            if (k !== PRIMARY_OUTLET) {\n                children_1.push(k + \":\" + serializeSegment(v, false));\n            }\n        });\n        return children_1.length > 0 ? primary + \"(\" + children_1.join('//') + \")\" : primary;\n    }\n    else {\n        var /** @type {?} */ children = mapChildrenIntoArray(segment, function (v, k) {\n            if (k === PRIMARY_OUTLET) {\n                return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];\n            }\n            return [k + \":\" + serializeSegment(v, false)];\n        });\n        return serializePaths(segment) + \"/(\" + children.join('//') + \")\";\n    }\n}\n/**\n * Encodes a URI string with the default encoding. This function will only ever be called from\n * `encodeUriQuery` or `encodeUriSegment` as it's the base set of encodings to be used. We need\n * a custom encoding because encodeURIComponent is too aggressive and encodes stuff that doesn't\n * have to be encoded per https://url.spec.whatwg.org.\n * @param {?} s\n * @return {?}\n */\nfunction encodeUriString(s) {\n    return encodeURIComponent(s)\n        .replace(/%40/g, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/g, '$')\n        .replace(/%2C/gi, ',');\n}\n/**\n * This function should be used to encode both keys and values in a query string key/value. In\n * the following URL, you need to call encodeUriQuery on \"k\" and \"v\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n * @param {?} s\n * @return {?}\n */\nexport function encodeUriQuery(s) {\n    return encodeUriString(s).replace(/%3B/gi, ';');\n}\n/**\n * This function should be used to encode a URL fragment. In the following URL, you need to call\n * encodeUriFragment on \"f\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n * @param {?} s\n * @return {?}\n */\nexport function encodeUriFragment(s) {\n    return encodeURI(s);\n}\n/**\n * This function should be run on any URI segment as well as the key and value in a key/value\n * pair for matrix params. In the following URL, you need to call encodeUriSegment on \"html\",\n * \"mk\", and \"mv\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n * @param {?} s\n * @return {?}\n */\nexport function encodeUriSegment(s) {\n    return encodeUriString(s).replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/%26/gi, '&');\n}\n/**\n * @param {?} s\n * @return {?}\n */\nexport function decode(s) {\n    return decodeURIComponent(s);\n}\n/**\n * @param {?} s\n * @return {?}\n */\nexport function decodeQuery(s) {\n    return decode(s.replace(/\\+/g, '%20'));\n}\n/**\n * @param {?} path\n * @return {?}\n */\nexport function serializePath(path) {\n    return \"\" + encodeUriSegment(path.path) + serializeMatrixParams(path.parameters);\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction serializeMatrixParams(params) {\n    return Object.keys(params)\n        .map(function (key) { return \";\" + encodeUriSegment(key) + \"=\" + encodeUriSegment(params[key]); })\n        .join('');\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction serializeQueryParams(params) {\n    var /** @type {?} */ strParams = Object.keys(params).map(function (name) {\n        var /** @type {?} */ value = params[name];\n        return Array.isArray(value) ?\n            value.map(function (v) { return encodeUriQuery(name) + \"=\" + encodeUriQuery(v); }).join('&') :\n            encodeUriQuery(name) + \"=\" + encodeUriQuery(value);\n    });\n    return strParams.length ? \"?\" + strParams.join(\"&\") : '';\n}\nvar /** @type {?} */ SEGMENT_RE = /^[^\\/()?;=&#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchSegments(str) {\n    var /** @type {?} */ match = str.match(SEGMENT_RE);\n    return match ? match[0] : '';\n}\nvar /** @type {?} */ QUERY_PARAM_RE = /^[^=?&#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchQueryParams(str) {\n    var /** @type {?} */ match = str.match(QUERY_PARAM_RE);\n    return match ? match[0] : '';\n}\nvar /** @type {?} */ QUERY_PARAM_VALUE_RE = /^[^?&#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchUrlQueryParamValue(str) {\n    var /** @type {?} */ match = str.match(QUERY_PARAM_VALUE_RE);\n    return match ? match[0] : '';\n}\nvar UrlParser = /** @class */ (function () {\n    function UrlParser(url) {\n        this.url = url;\n        this.remaining = url;\n    }\n    /**\n     * @return {?}\n     */\n    UrlParser.prototype.parseRootSegment = /**\n     * @return {?}\n     */\n    function () {\n        this.consumeOptional('/');\n        if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {\n            return new UrlSegmentGroup([], {});\n        }\n        // The root segment group never has segments\n        return new UrlSegmentGroup([], this.parseChildren());\n    };\n    /**\n     * @return {?}\n     */\n    UrlParser.prototype.parseQueryParams = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ params = {};\n        if (this.consumeOptional('?')) {\n            do {\n                this.parseQueryParam(params);\n            } while (this.consumeOptional('&'));\n        }\n        return params;\n    };\n    /**\n     * @return {?}\n     */\n    UrlParser.prototype.parseFragment = /**\n     * @return {?}\n     */\n    function () {\n        return this.consumeOptional('#') ? decodeURIComponent(this.remaining) : null;\n    };\n    /**\n     * @return {?}\n     */\n    UrlParser.prototype.parseChildren = /**\n     * @return {?}\n     */\n    function () {\n        if (this.remaining === '') {\n            return {};\n        }\n        this.consumeOptional('/');\n        var /** @type {?} */ segments = [];\n        if (!this.peekStartsWith('(')) {\n            segments.push(this.parseSegment());\n        }\n        while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {\n            this.capture('/');\n            segments.push(this.parseSegment());\n        }\n        var /** @type {?} */ children = {};\n        if (this.peekStartsWith('/(')) {\n            this.capture('/');\n            children = this.parseParens(true);\n        }\n        var /** @type {?} */ res = {};\n        if (this.peekStartsWith('(')) {\n            res = this.parseParens(false);\n        }\n        if (segments.length > 0 || Object.keys(children).length > 0) {\n            res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);\n        }\n        return res;\n    };\n    /**\n     * @return {?}\n     */\n    UrlParser.prototype.parseSegment = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ path = matchSegments(this.remaining);\n        if (path === '' && this.peekStartsWith(';')) {\n            throw new Error(\"Empty path url segment cannot have parameters: '\" + this.remaining + \"'.\");\n        }\n        this.capture(path);\n        return new UrlSegment(decode(path), this.parseMatrixParams());\n    };\n    /**\n     * @return {?}\n     */\n    UrlParser.prototype.parseMatrixParams = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ params = {};\n        while (this.consumeOptional(';')) {\n            this.parseParam(params);\n        }\n        return params;\n    };\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    UrlParser.prototype.parseParam = /**\n     * @param {?} params\n     * @return {?}\n     */\n    function (params) {\n        var /** @type {?} */ key = matchSegments(this.remaining);\n        if (!key) {\n            return;\n        }\n        this.capture(key);\n        var /** @type {?} */ value = '';\n        if (this.consumeOptional('=')) {\n            var /** @type {?} */ valueMatch = matchSegments(this.remaining);\n            if (valueMatch) {\n                value = valueMatch;\n                this.capture(value);\n            }\n        }\n        params[decode(key)] = decode(value);\n    };\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    UrlParser.prototype.parseQueryParam = /**\n     * @param {?} params\n     * @return {?}\n     */\n    function (params) {\n        var /** @type {?} */ key = matchQueryParams(this.remaining);\n        if (!key) {\n            return;\n        }\n        this.capture(key);\n        var /** @type {?} */ value = '';\n        if (this.consumeOptional('=')) {\n            var /** @type {?} */ valueMatch = matchUrlQueryParamValue(this.remaining);\n            if (valueMatch) {\n                value = valueMatch;\n                this.capture(value);\n            }\n        }\n        var /** @type {?} */ decodedKey = decodeQuery(key);\n        var /** @type {?} */ decodedVal = decodeQuery(value);\n        if (params.hasOwnProperty(decodedKey)) {\n            // Append to existing values\n            var /** @type {?} */ currentVal = params[decodedKey];\n            if (!Array.isArray(currentVal)) {\n                currentVal = [currentVal];\n                params[decodedKey] = currentVal;\n            }\n            currentVal.push(decodedVal);\n        }\n        else {\n            // Create a new value\n            params[decodedKey] = decodedVal;\n        }\n    };\n    /**\n     * @param {?} allowPrimary\n     * @return {?}\n     */\n    UrlParser.prototype.parseParens = /**\n     * @param {?} allowPrimary\n     * @return {?}\n     */\n    function (allowPrimary) {\n        var /** @type {?} */ segments = {};\n        this.capture('(');\n        while (!this.consumeOptional(')') && this.remaining.length > 0) {\n            var /** @type {?} */ path = matchSegments(this.remaining);\n            var /** @type {?} */ next = this.remaining[path.length];\n            // if is is not one of these characters, then the segment was unescaped\n            // or the group was not closed\n            if (next !== '/' && next !== ')' && next !== ';') {\n                throw new Error(\"Cannot parse url '\" + this.url + \"'\");\n            }\n            var /** @type {?} */ outletName = /** @type {?} */ ((undefined));\n            if (path.indexOf(':') > -1) {\n                outletName = path.substr(0, path.indexOf(':'));\n                this.capture(outletName);\n                this.capture(':');\n            }\n            else if (allowPrimary) {\n                outletName = PRIMARY_OUTLET;\n            }\n            var /** @type {?} */ children = this.parseChildren();\n            segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :\n                new UrlSegmentGroup([], children);\n            this.consumeOptional('//');\n        }\n        return segments;\n    };\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    UrlParser.prototype.peekStartsWith = /**\n     * @param {?} str\n     * @return {?}\n     */\n    function (str) { return this.remaining.startsWith(str); };\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    UrlParser.prototype.consumeOptional = /**\n     * @param {?} str\n     * @return {?}\n     */\n    function (str) {\n        if (this.peekStartsWith(str)) {\n            this.remaining = this.remaining.substring(str.length);\n            return true;\n        }\n        return false;\n    };\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    UrlParser.prototype.capture = /**\n     * @param {?} str\n     * @return {?}\n     */\n    function (str) {\n        if (!this.consumeOptional(str)) {\n            throw new Error(\"Expected \\\"\" + str + \"\\\".\");\n        }\n    };\n    return UrlParser;\n}());\nfunction UrlParser_tsickle_Closure_declarations() {\n    /** @type {?} */\n    UrlParser.prototype.remaining;\n    /** @type {?} */\n    UrlParser.prototype.url;\n}\n//# sourceMappingURL=url_tree.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { NgModuleRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { _catch } from 'rxjs/operator/catch';\nimport { concatAll } from 'rxjs/operator/concatAll';\nimport { first } from 'rxjs/operator/first';\nimport { map } from 'rxjs/operator/map';\nimport { mergeMap } from 'rxjs/operator/mergeMap';\nimport { EmptyError } from 'rxjs/util/EmptyError';\nimport { LoadedRouterConfig } from './config';\nimport { PRIMARY_OUTLET, defaultUrlMatcher, navigationCancelingError } from './shared';\nimport { UrlSegmentGroup, UrlTree } from './url_tree';\nimport { andObservables, forEach, waitForMap, wrapIntoObservable } from './utils/collection';\nvar NoMatch = /** @class */ (function () {\n    function NoMatch(segmentGroup) {\n        this.segmentGroup = segmentGroup || null;\n    }\n    return NoMatch;\n}());\nfunction NoMatch_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NoMatch.prototype.segmentGroup;\n}\nvar AbsoluteRedirect = /** @class */ (function () {\n    function AbsoluteRedirect(urlTree) {\n        this.urlTree = urlTree;\n    }\n    return AbsoluteRedirect;\n}());\nfunction AbsoluteRedirect_tsickle_Closure_declarations() {\n    /** @type {?} */\n    AbsoluteRedirect.prototype.urlTree;\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction noMatch(segmentGroup) {\n    return new Observable(function (obs) { return obs.error(new NoMatch(segmentGroup)); });\n}\n/**\n * @param {?} newTree\n * @return {?}\n */\nfunction absoluteRedirect(newTree) {\n    return new Observable(function (obs) { return obs.error(new AbsoluteRedirect(newTree)); });\n}\n/**\n * @param {?} redirectTo\n * @return {?}\n */\nfunction namedOutletsRedirect(redirectTo) {\n    return new Observable(function (obs) {\n        return obs.error(new Error(\"Only absolute redirects can have named outlets. redirectTo: '\" + redirectTo + \"'\"));\n    });\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction canLoadFails(route) {\n    return new Observable(function (obs) {\n        return obs.error(navigationCancelingError(\"Cannot load children because the guard of the route \\\"path: '\" + route.path + \"'\\\" returned false\"));\n    });\n}\n/**\n * Returns the `UrlTree` with the redirection applied.\n *\n * Lazy modules are loaded along the way.\n * @param {?} moduleInjector\n * @param {?} configLoader\n * @param {?} urlSerializer\n * @param {?} urlTree\n * @param {?} config\n * @return {?}\n */\nexport function applyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {\n    return new ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();\n}\nvar ApplyRedirects = /** @class */ (function () {\n    function ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {\n        this.configLoader = configLoader;\n        this.urlSerializer = urlSerializer;\n        this.urlTree = urlTree;\n        this.config = config;\n        this.allowRedirects = true;\n        this.ngModule = moduleInjector.get(NgModuleRef);\n    }\n    /**\n     * @return {?}\n     */\n    ApplyRedirects.prototype.apply = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ expanded$ = this.expandSegmentGroup(this.ngModule, this.config, this.urlTree.root, PRIMARY_OUTLET);\n        var /** @type {?} */ urlTrees$ = map.call(expanded$, function (rootSegmentGroup) {\n            return _this.createUrlTree(rootSegmentGroup, _this.urlTree.queryParams, /** @type {?} */ ((_this.urlTree.fragment)));\n        });\n        return _catch.call(urlTrees$, function (e) {\n            if (e instanceof AbsoluteRedirect) {\n                // after an absolute redirect we do not apply any more redirects!\n                // after an absolute redirect we do not apply any more redirects!\n                _this.allowRedirects = false;\n                // we need to run matching, so we can fetch all lazy-loaded modules\n                return _this.match(e.urlTree);\n            }\n            if (e instanceof NoMatch) {\n                throw _this.noMatchError(e);\n            }\n            throw e;\n        });\n    };\n    /**\n     * @param {?} tree\n     * @return {?}\n     */\n    ApplyRedirects.prototype.match = /**\n     * @param {?} tree\n     * @return {?}\n     */\n    function (tree) {\n        var _this = this;\n        var /** @type {?} */ expanded$ = this.expandSegmentGroup(this.ngModule, this.config, tree.root, PRIMARY_OUTLET);\n        var /** @type {?} */ mapped$ = map.call(expanded$, function (rootSegmentGroup) {\n            return _this.createUrlTree(rootSegmentGroup, tree.queryParams, /** @type {?} */ ((tree.fragment)));\n        });\n        return _catch.call(mapped$, function (e) {\n            if (e instanceof NoMatch) {\n                throw _this.noMatchError(e);\n            }\n            throw e;\n        });\n    };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    ApplyRedirects.prototype.noMatchError = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return new Error(\"Cannot match any routes. URL Segment: '\" + e.segmentGroup + \"'\");\n    };\n    /**\n     * @param {?} rootCandidate\n     * @param {?} queryParams\n     * @param {?} fragment\n     * @return {?}\n     */\n    ApplyRedirects.prototype.createUrlTree = /**\n     * @param {?} rootCandidate\n     * @param {?} queryParams\n     * @param {?} fragment\n     * @return {?}\n     */\n    function (rootCandidate, queryParams, fragment) {\n        var /** @type {?} */ root = rootCandidate.segments.length > 0 ?\n            new UrlSegmentGroup([], (_a = {}, _a[PRIMARY_OUTLET] = rootCandidate, _a)) :\n            rootCandidate;\n        return new UrlTree(root, queryParams, fragment);\n        var _a;\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} routes\n     * @param {?} segmentGroup\n     * @param {?} outlet\n     * @return {?}\n     */\n    ApplyRedirects.prototype.expandSegmentGroup = /**\n     * @param {?} ngModule\n     * @param {?} routes\n     * @param {?} segmentGroup\n     * @param {?} outlet\n     * @return {?}\n     */\n    function (ngModule, routes, segmentGroup, outlet) {\n        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n            return map.call(this.expandChildren(ngModule, routes, segmentGroup), function (children) { return new UrlSegmentGroup([], children); });\n        }\n        return this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, true);\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} routes\n     * @param {?} segmentGroup\n     * @return {?}\n     */\n    ApplyRedirects.prototype.expandChildren = /**\n     * @param {?} ngModule\n     * @param {?} routes\n     * @param {?} segmentGroup\n     * @return {?}\n     */\n    function (ngModule, routes, segmentGroup) {\n        var _this = this;\n        return waitForMap(segmentGroup.children, function (childOutlet, child) { return _this.expandSegmentGroup(ngModule, routes, child, childOutlet); });\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} segments\n     * @param {?} outlet\n     * @param {?} allowRedirects\n     * @return {?}\n     */\n    ApplyRedirects.prototype.expandSegment = /**\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} segments\n     * @param {?} outlet\n     * @param {?} allowRedirects\n     * @return {?}\n     */\n    function (ngModule, segmentGroup, routes, segments, outlet, allowRedirects) {\n        var _this = this;\n        var /** @type {?} */ routes$ = of.apply(void 0, routes);\n        var /** @type {?} */ processedRoutes$ = map.call(routes$, function (r) {\n            var /** @type {?} */ expanded$ = _this.expandSegmentAgainstRoute(ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);\n            return _catch.call(expanded$, function (e) {\n                if (e instanceof NoMatch) {\n                    return of(null);\n                }\n                throw e;\n            });\n        });\n        var /** @type {?} */ concattedProcessedRoutes$ = concatAll.call(processedRoutes$);\n        var /** @type {?} */ first$ = first.call(concattedProcessedRoutes$, function (s) { return !!s; });\n        return _catch.call(first$, function (e, _) {\n            if (e instanceof EmptyError || e.name === 'EmptyError') {\n                if (_this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n                    return of(new UrlSegmentGroup([], {}));\n                }\n                throw new NoMatch(segmentGroup);\n            }\n            throw e;\n        });\n    };\n    /**\n     * @param {?} segmentGroup\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    ApplyRedirects.prototype.noLeftoversInUrl = /**\n     * @param {?} segmentGroup\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    function (segmentGroup, segments, outlet) {\n        return segments.length === 0 && !segmentGroup.children[outlet];\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} paths\n     * @param {?} outlet\n     * @param {?} allowRedirects\n     * @return {?}\n     */\n    ApplyRedirects.prototype.expandSegmentAgainstRoute = /**\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} paths\n     * @param {?} outlet\n     * @param {?} allowRedirects\n     * @return {?}\n     */\n    function (ngModule, segmentGroup, routes, route, paths, outlet, allowRedirects) {\n        if (getOutlet(route) !== outlet) {\n            return noMatch(segmentGroup);\n        }\n        if (route.redirectTo === undefined) {\n            return this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths);\n        }\n        if (allowRedirects && this.allowRedirects) {\n            return this.expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, paths, outlet);\n        }\n        return noMatch(segmentGroup);\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    ApplyRedirects.prototype.expandSegmentAgainstRouteUsingRedirect = /**\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    function (ngModule, segmentGroup, routes, route, segments, outlet) {\n        if (route.path === '**') {\n            return this.expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet);\n        }\n        return this.expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet);\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} outlet\n     * @return {?}\n     */\n    ApplyRedirects.prototype.expandWildCardWithParamsAgainstRouteUsingRedirect = /**\n     * @param {?} ngModule\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} outlet\n     * @return {?}\n     */\n    function (ngModule, routes, route, outlet) {\n        var _this = this;\n        var /** @type {?} */ newTree = this.applyRedirectCommands([], /** @type {?} */ ((route.redirectTo)), {});\n        if (/** @type {?} */ ((route.redirectTo)).startsWith('/')) {\n            return absoluteRedirect(newTree);\n        }\n        return mergeMap.call(this.lineralizeSegments(route, newTree), function (newSegments) {\n            var /** @type {?} */ group = new UrlSegmentGroup(newSegments, {});\n            return _this.expandSegment(ngModule, group, routes, newSegments, outlet, false);\n        });\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    ApplyRedirects.prototype.expandRegularSegmentAgainstRouteUsingRedirect = /**\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    function (ngModule, segmentGroup, routes, route, segments, outlet) {\n        var _this = this;\n        var _a = match(segmentGroup, route, segments), matched = _a.matched, consumedSegments = _a.consumedSegments, lastChild = _a.lastChild, positionalParamSegments = _a.positionalParamSegments;\n        if (!matched)\n            return noMatch(segmentGroup);\n        var /** @type {?} */ newTree = this.applyRedirectCommands(consumedSegments, /** @type {?} */ ((route.redirectTo)), /** @type {?} */ (positionalParamSegments));\n        if (/** @type {?} */ ((route.redirectTo)).startsWith('/')) {\n            return absoluteRedirect(newTree);\n        }\n        return mergeMap.call(this.lineralizeSegments(route, newTree), function (newSegments) {\n            return _this.expandSegment(ngModule, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);\n        });\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} rawSegmentGroup\n     * @param {?} route\n     * @param {?} segments\n     * @return {?}\n     */\n    ApplyRedirects.prototype.matchSegmentAgainstRoute = /**\n     * @param {?} ngModule\n     * @param {?} rawSegmentGroup\n     * @param {?} route\n     * @param {?} segments\n     * @return {?}\n     */\n    function (ngModule, rawSegmentGroup, route, segments) {\n        var _this = this;\n        if (route.path === '**') {\n            if (route.loadChildren) {\n                return map.call(this.configLoader.load(ngModule.injector, route), function (cfg) {\n                    route._loadedConfig = cfg;\n                    return new UrlSegmentGroup(segments, {});\n                });\n            }\n            return of(new UrlSegmentGroup(segments, {}));\n        }\n        var _a = match(rawSegmentGroup, route, segments), matched = _a.matched, consumedSegments = _a.consumedSegments, lastChild = _a.lastChild;\n        if (!matched)\n            return noMatch(rawSegmentGroup);\n        var /** @type {?} */ rawSlicedSegments = segments.slice(lastChild);\n        var /** @type {?} */ childConfig$ = this.getChildConfig(ngModule, route);\n        return mergeMap.call(childConfig$, function (routerConfig) {\n            var /** @type {?} */ childModule = routerConfig.module;\n            var /** @type {?} */ childConfig = routerConfig.routes;\n            var _a = split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig), segmentGroup = _a.segmentGroup, slicedSegments = _a.slicedSegments;\n            if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n                var /** @type {?} */ expanded$_1 = _this.expandChildren(childModule, childConfig, segmentGroup);\n                return map.call(expanded$_1, function (children) { return new UrlSegmentGroup(consumedSegments, children); });\n            }\n            if (childConfig.length === 0 && slicedSegments.length === 0) {\n                return of(new UrlSegmentGroup(consumedSegments, {}));\n            }\n            var /** @type {?} */ expanded$ = _this.expandSegment(childModule, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);\n            return map.call(expanded$, function (cs) {\n                return new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children);\n            });\n        });\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} route\n     * @return {?}\n     */\n    ApplyRedirects.prototype.getChildConfig = /**\n     * @param {?} ngModule\n     * @param {?} route\n     * @return {?}\n     */\n    function (ngModule, route) {\n        var _this = this;\n        if (route.children) {\n            // The children belong to the same module\n            return of(new LoadedRouterConfig(route.children, ngModule));\n        }\n        if (route.loadChildren) {\n            // lazy children belong to the loaded module\n            if (route._loadedConfig !== undefined) {\n                return of(route._loadedConfig);\n            }\n            return mergeMap.call(runCanLoadGuard(ngModule.injector, route), function (shouldLoad) {\n                if (shouldLoad) {\n                    return map.call(_this.configLoader.load(ngModule.injector, route), function (cfg) {\n                        route._loadedConfig = cfg;\n                        return cfg;\n                    });\n                }\n                return canLoadFails(route);\n            });\n        }\n        return of(new LoadedRouterConfig([], ngModule));\n    };\n    /**\n     * @param {?} route\n     * @param {?} urlTree\n     * @return {?}\n     */\n    ApplyRedirects.prototype.lineralizeSegments = /**\n     * @param {?} route\n     * @param {?} urlTree\n     * @return {?}\n     */\n    function (route, urlTree) {\n        var /** @type {?} */ res = [];\n        var /** @type {?} */ c = urlTree.root;\n        while (true) {\n            res = res.concat(c.segments);\n            if (c.numberOfChildren === 0) {\n                return of(res);\n            }\n            if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\n                return namedOutletsRedirect(/** @type {?} */ ((route.redirectTo)));\n            }\n            c = c.children[PRIMARY_OUTLET];\n        }\n    };\n    /**\n     * @param {?} segments\n     * @param {?} redirectTo\n     * @param {?} posParams\n     * @return {?}\n     */\n    ApplyRedirects.prototype.applyRedirectCommands = /**\n     * @param {?} segments\n     * @param {?} redirectTo\n     * @param {?} posParams\n     * @return {?}\n     */\n    function (segments, redirectTo, posParams) {\n        return this.applyRedirectCreatreUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);\n    };\n    /**\n     * @param {?} redirectTo\n     * @param {?} urlTree\n     * @param {?} segments\n     * @param {?} posParams\n     * @return {?}\n     */\n    ApplyRedirects.prototype.applyRedirectCreatreUrlTree = /**\n     * @param {?} redirectTo\n     * @param {?} urlTree\n     * @param {?} segments\n     * @param {?} posParams\n     * @return {?}\n     */\n    function (redirectTo, urlTree, segments, posParams) {\n        var /** @type {?} */ newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\n        return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);\n    };\n    /**\n     * @param {?} redirectToParams\n     * @param {?} actualParams\n     * @return {?}\n     */\n    ApplyRedirects.prototype.createQueryParams = /**\n     * @param {?} redirectToParams\n     * @param {?} actualParams\n     * @return {?}\n     */\n    function (redirectToParams, actualParams) {\n        var /** @type {?} */ res = {};\n        forEach(redirectToParams, function (v, k) {\n            var /** @type {?} */ copySourceValue = typeof v === 'string' && v.startsWith(':');\n            if (copySourceValue) {\n                var /** @type {?} */ sourceName = v.substring(1);\n                res[k] = actualParams[sourceName];\n            }\n            else {\n                res[k] = v;\n            }\n        });\n        return res;\n    };\n    /**\n     * @param {?} redirectTo\n     * @param {?} group\n     * @param {?} segments\n     * @param {?} posParams\n     * @return {?}\n     */\n    ApplyRedirects.prototype.createSegmentGroup = /**\n     * @param {?} redirectTo\n     * @param {?} group\n     * @param {?} segments\n     * @param {?} posParams\n     * @return {?}\n     */\n    function (redirectTo, group, segments, posParams) {\n        var _this = this;\n        var /** @type {?} */ updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\n        var /** @type {?} */ children = {};\n        forEach(group.children, function (child, name) {\n            children[name] = _this.createSegmentGroup(redirectTo, child, segments, posParams);\n        });\n        return new UrlSegmentGroup(updatedSegments, children);\n    };\n    /**\n     * @param {?} redirectTo\n     * @param {?} redirectToSegments\n     * @param {?} actualSegments\n     * @param {?} posParams\n     * @return {?}\n     */\n    ApplyRedirects.prototype.createSegments = /**\n     * @param {?} redirectTo\n     * @param {?} redirectToSegments\n     * @param {?} actualSegments\n     * @param {?} posParams\n     * @return {?}\n     */\n    function (redirectTo, redirectToSegments, actualSegments, posParams) {\n        var _this = this;\n        return redirectToSegments.map(function (s) {\n            return s.path.startsWith(':') ? _this.findPosParam(redirectTo, s, posParams) :\n                _this.findOrReturn(s, actualSegments);\n        });\n    };\n    /**\n     * @param {?} redirectTo\n     * @param {?} redirectToUrlSegment\n     * @param {?} posParams\n     * @return {?}\n     */\n    ApplyRedirects.prototype.findPosParam = /**\n     * @param {?} redirectTo\n     * @param {?} redirectToUrlSegment\n     * @param {?} posParams\n     * @return {?}\n     */\n    function (redirectTo, redirectToUrlSegment, posParams) {\n        var /** @type {?} */ pos = posParams[redirectToUrlSegment.path.substring(1)];\n        if (!pos)\n            throw new Error(\"Cannot redirect to '\" + redirectTo + \"'. Cannot find '\" + redirectToUrlSegment.path + \"'.\");\n        return pos;\n    };\n    /**\n     * @param {?} redirectToUrlSegment\n     * @param {?} actualSegments\n     * @return {?}\n     */\n    ApplyRedirects.prototype.findOrReturn = /**\n     * @param {?} redirectToUrlSegment\n     * @param {?} actualSegments\n     * @return {?}\n     */\n    function (redirectToUrlSegment, actualSegments) {\n        var /** @type {?} */ idx = 0;\n        for (var _i = 0, actualSegments_1 = actualSegments; _i < actualSegments_1.length; _i++) {\n            var s = actualSegments_1[_i];\n            if (s.path === redirectToUrlSegment.path) {\n                actualSegments.splice(idx);\n                return s;\n            }\n            idx++;\n        }\n        return redirectToUrlSegment;\n    };\n    return ApplyRedirects;\n}());\nfunction ApplyRedirects_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ApplyRedirects.prototype.allowRedirects;\n    /** @type {?} */\n    ApplyRedirects.prototype.ngModule;\n    /** @type {?} */\n    ApplyRedirects.prototype.configLoader;\n    /** @type {?} */\n    ApplyRedirects.prototype.urlSerializer;\n    /** @type {?} */\n    ApplyRedirects.prototype.urlTree;\n    /** @type {?} */\n    ApplyRedirects.prototype.config;\n}\n/**\n * @param {?} moduleInjector\n * @param {?} route\n * @return {?}\n */\nfunction runCanLoadGuard(moduleInjector, route) {\n    var /** @type {?} */ canLoad = route.canLoad;\n    if (!canLoad || canLoad.length === 0)\n        return of(true);\n    var /** @type {?} */ obs = map.call(from(canLoad), function (injectionToken) {\n        var /** @type {?} */ guard = moduleInjector.get(injectionToken);\n        return wrapIntoObservable(guard.canLoad ? guard.canLoad(route) : guard(route));\n    });\n    return andObservables(obs);\n}\n/**\n * @param {?} segmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\nfunction match(segmentGroup, route, segments) {\n    if (route.path === '') {\n        if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {\n            return { matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };\n        }\n        return { matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };\n    }\n    var /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;\n    var /** @type {?} */ res = matcher(segments, segmentGroup, route);\n    if (!res) {\n        return {\n            matched: false,\n            consumedSegments: /** @type {?} */ ([]),\n            lastChild: 0,\n            positionalParamSegments: {},\n        };\n    }\n    return {\n        matched: true,\n        consumedSegments: /** @type {?} */ ((res.consumed)),\n        lastChild: /** @type {?} */ ((res.consumed.length)),\n        positionalParamSegments: /** @type {?} */ ((res.posParams)),\n    };\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} slicedSegments\n * @param {?} config\n * @return {?}\n */\nfunction split(segmentGroup, consumedSegments, slicedSegments, config) {\n    if (slicedSegments.length > 0 &&\n        containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n        var /** @type {?} */ s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n        return { segmentGroup: mergeTrivialChildren(s), slicedSegments: [] };\n    }\n    if (slicedSegments.length === 0 &&\n        containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {\n        var /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));\n        return { segmentGroup: mergeTrivialChildren(s), slicedSegments: slicedSegments };\n    }\n    return { segmentGroup: segmentGroup, slicedSegments: slicedSegments };\n}\n/**\n * @param {?} s\n * @return {?}\n */\nfunction mergeTrivialChildren(s) {\n    if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n        var /** @type {?} */ c = s.children[PRIMARY_OUTLET];\n        return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n    }\n    return s;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @param {?} children\n * @return {?}\n */\nfunction addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {\n    var /** @type {?} */ res = {};\n    for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {\n        var r = routes_1[_i];\n        if (isEmptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n            res[getOutlet(r)] = new UrlSegmentGroup([], {});\n        }\n    }\n    return tslib_1.__assign({}, children, res);\n}\n/**\n * @param {?} routes\n * @param {?} primarySegmentGroup\n * @return {?}\n */\nfunction createChildrenForEmptySegments(routes, primarySegmentGroup) {\n    var /** @type {?} */ res = {};\n    res[PRIMARY_OUTLET] = primarySegmentGroup;\n    for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {\n        var r = routes_2[_i];\n        if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n            res[getOutlet(r)] = new UrlSegmentGroup([], {});\n        }\n    }\n    return res;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, segments, routes) {\n    return routes.some(function (r) { return isEmptyPathRedirect(segmentGroup, segments, r) && getOutlet(r) !== PRIMARY_OUTLET; });\n}\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathRedirects(segmentGroup, segments, routes) {\n    return routes.some(function (r) { return isEmptyPathRedirect(segmentGroup, segments, r); });\n}\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} r\n * @return {?}\n */\nfunction isEmptyPathRedirect(segmentGroup, segments, r) {\n    if ((segmentGroup.hasChildren() || segments.length > 0) && r.pathMatch === 'full') {\n        return false;\n    }\n    return r.path === '' && r.redirectTo !== undefined;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getOutlet(route) {\n    return route.outlet || PRIMARY_OUTLET;\n}\n//# sourceMappingURL=apply_redirects.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar Tree = /** @class */ (function () {\n    function Tree(root) {\n        this._root = root;\n    }\n    Object.defineProperty(Tree.prototype, \"root\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._root.value; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    Tree.prototype.parent = /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    function (t) {\n        var /** @type {?} */ p = this.pathFromRoot(t);\n        return p.length > 1 ? p[p.length - 2] : null;\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    Tree.prototype.children = /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    function (t) {\n        var /** @type {?} */ n = findNode(t, this._root);\n        return n ? n.children.map(function (t) { return t.value; }) : [];\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    Tree.prototype.firstChild = /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    function (t) {\n        var /** @type {?} */ n = findNode(t, this._root);\n        return n && n.children.length > 0 ? n.children[0].value : null;\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    Tree.prototype.siblings = /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    function (t) {\n        var /** @type {?} */ p = findPath(t, this._root);\n        if (p.length < 2)\n            return [];\n        var /** @type {?} */ c = p[p.length - 2].children.map(function (c) { return c.value; });\n        return c.filter(function (cc) { return cc !== t; });\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    Tree.prototype.pathFromRoot = /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    function (t) { return findPath(t, this._root).map(function (s) { return s.value; }); };\n    return Tree;\n}());\nexport { Tree };\nfunction Tree_tsickle_Closure_declarations() {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    Tree.prototype._root;\n}\n/**\n * @template T\n * @param {?} value\n * @param {?} node\n * @return {?}\n */\nfunction findNode(value, node) {\n    if (value === node.value)\n        return node;\n    for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n        var /** @type {?} */ node_1 = findNode(value, child);\n        if (node_1)\n            return node_1;\n    }\n    return null;\n}\n/**\n * @template T\n * @param {?} value\n * @param {?} node\n * @return {?}\n */\nfunction findPath(value, node) {\n    if (value === node.value)\n        return [node];\n    for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n        var /** @type {?} */ path = findPath(value, child);\n        if (path.length) {\n            path.unshift(node);\n            return path;\n        }\n    }\n    return [];\n}\nvar TreeNode = /** @class */ (function () {\n    function TreeNode(value, children) {\n        this.value = value;\n        this.children = children;\n    }\n    /**\n     * @return {?}\n     */\n    TreeNode.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return \"TreeNode(\" + this.value + \")\"; };\n    return TreeNode;\n}());\nexport { TreeNode };\nfunction TreeNode_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TreeNode.prototype.value;\n    /** @type {?} */\n    TreeNode.prototype.children;\n}\n/**\n * @template T\n * @param {?} node\n * @return {?}\n */\nexport function nodeChildrenAsMap(node) {\n    var /** @type {?} */ map = {};\n    if (node) {\n        node.children.forEach(function (child) { return map[child.value.outlet] = child; });\n    }\n    return map;\n}\n//# sourceMappingURL=tree.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { map } from 'rxjs/operator/map';\nimport { PRIMARY_OUTLET, convertToParamMap } from './shared';\nimport { UrlSegment, equalSegments } from './url_tree';\nimport { shallowEqual, shallowEqualArrays } from './utils/collection';\nimport { Tree, TreeNode } from './utils/tree';\n/**\n * \\@whatItDoes Represents the state of the router.\n *\n * \\@howToUse\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * \\@description\n * RouterState is a tree of activated routes. Every node in this tree knows about the \"consumed\" URL\n * segments, the extracted parameters, and the resolved data.\n *\n * See {\\@link ActivatedRoute} for more information.\n *\n * \\@stable\n */\nvar /**\n * \\@whatItDoes Represents the state of the router.\n *\n * \\@howToUse\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * \\@description\n * RouterState is a tree of activated routes. Every node in this tree knows about the \"consumed\" URL\n * segments, the extracted parameters, and the resolved data.\n *\n * See {\\@link ActivatedRoute} for more information.\n *\n * \\@stable\n */\nRouterState = /** @class */ (function (_super) {\n    tslib_1.__extends(RouterState, _super);\n    /** @internal */\n    function RouterState(root, snapshot) {\n        var _this = _super.call(this, root) || this;\n        _this.snapshot = snapshot;\n        setRouterState(/** @type {?} */ (_this), root);\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    RouterState.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return this.snapshot.toString(); };\n    return RouterState;\n}(Tree));\n/**\n * \\@whatItDoes Represents the state of the router.\n *\n * \\@howToUse\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * \\@description\n * RouterState is a tree of activated routes. Every node in this tree knows about the \"consumed\" URL\n * segments, the extracted parameters, and the resolved data.\n *\n * See {\\@link ActivatedRoute} for more information.\n *\n * \\@stable\n */\nexport { RouterState };\nfunction RouterState_tsickle_Closure_declarations() {\n    /**\n     * The current snapshot of the router state\n     * @type {?}\n     */\n    RouterState.prototype.snapshot;\n}\n/**\n * @param {?} urlTree\n * @param {?} rootComponent\n * @return {?}\n */\nexport function createEmptyState(urlTree, rootComponent) {\n    var /** @type {?} */ snapshot = createEmptyStateSnapshot(urlTree, rootComponent);\n    var /** @type {?} */ emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);\n    var /** @type {?} */ emptyParams = new BehaviorSubject({});\n    var /** @type {?} */ emptyData = new BehaviorSubject({});\n    var /** @type {?} */ emptyQueryParams = new BehaviorSubject({});\n    var /** @type {?} */ fragment = new BehaviorSubject('');\n    var /** @type {?} */ activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);\n    activated.snapshot = snapshot.root;\n    return new RouterState(new TreeNode(activated, []), snapshot);\n}\n/**\n * @param {?} urlTree\n * @param {?} rootComponent\n * @return {?}\n */\nexport function createEmptyStateSnapshot(urlTree, rootComponent) {\n    var /** @type {?} */ emptyParams = {};\n    var /** @type {?} */ emptyData = {};\n    var /** @type {?} */ emptyQueryParams = {};\n    var /** @type {?} */ fragment = '';\n    var /** @type {?} */ activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});\n    return new RouterStateSnapshot('', new TreeNode(activated, []));\n}\n/**\n * \\@whatItDoes Contains the information about a route associated with a component loaded in an\n * outlet.\n * An `ActivatedRoute` can also be used to traverse the router state tree.\n *\n * \\@howToUse\n *\n * ```\n * \\@Component({...})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: Observable<string> = route.params.map(p => p.id);\n *     const url: Observable<string> = route.url.map(segments => segments.join(''));\n *     // route.data includes both `data` and `resolve`\n *     const user = route.data.map(d => d.user);\n *   }\n * }\n * ```\n *\n * \\@stable\n */\nvar /**\n * \\@whatItDoes Contains the information about a route associated with a component loaded in an\n * outlet.\n * An `ActivatedRoute` can also be used to traverse the router state tree.\n *\n * \\@howToUse\n *\n * ```\n * \\@Component({...})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: Observable<string> = route.params.map(p => p.id);\n *     const url: Observable<string> = route.url.map(segments => segments.join(''));\n *     // route.data includes both `data` and `resolve`\n *     const user = route.data.map(d => d.user);\n *   }\n * }\n * ```\n *\n * \\@stable\n */\nActivatedRoute = /** @class */ (function () {\n    /** @internal */\n    function ActivatedRoute(url, params, queryParams, fragment, data, outlet, component, futureSnapshot) {\n        this.url = url;\n        this.params = params;\n        this.queryParams = queryParams;\n        this.fragment = fragment;\n        this.data = data;\n        this.outlet = outlet;\n        this.component = component;\n        this._futureSnapshot = futureSnapshot;\n    }\n    Object.defineProperty(ActivatedRoute.prototype, \"routeConfig\", {\n        /** The configuration used to match this route */\n        get: /**\n         * The configuration used to match this route\n         * @return {?}\n         */\n        function () { return this._futureSnapshot.routeConfig; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRoute.prototype, \"root\", {\n        /** The root of the router state */\n        get: /**\n         * The root of the router state\n         * @return {?}\n         */\n        function () { return this._routerState.root; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRoute.prototype, \"parent\", {\n        /** The parent of this route in the router state tree */\n        get: /**\n         * The parent of this route in the router state tree\n         * @return {?}\n         */\n        function () { return this._routerState.parent(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRoute.prototype, \"firstChild\", {\n        /** The first child of this route in the router state tree */\n        get: /**\n         * The first child of this route in the router state tree\n         * @return {?}\n         */\n        function () { return this._routerState.firstChild(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRoute.prototype, \"children\", {\n        /** The children of this route in the router state tree */\n        get: /**\n         * The children of this route in the router state tree\n         * @return {?}\n         */\n        function () { return this._routerState.children(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRoute.prototype, \"pathFromRoot\", {\n        /** The path from the root of the router state tree to this route */\n        get: /**\n         * The path from the root of the router state tree to this route\n         * @return {?}\n         */\n        function () { return this._routerState.pathFromRoot(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRoute.prototype, \"paramMap\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            if (!this._paramMap) {\n                this._paramMap = map.call(this.params, function (p) { return convertToParamMap(p); });\n            }\n            return this._paramMap;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRoute.prototype, \"queryParamMap\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            if (!this._queryParamMap) {\n                this._queryParamMap =\n                    map.call(this.queryParams, function (p) { return convertToParamMap(p); });\n            }\n            return this._queryParamMap;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ActivatedRoute.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        return this.snapshot ? this.snapshot.toString() : \"Future(\" + this._futureSnapshot + \")\";\n    };\n    return ActivatedRoute;\n}());\n/**\n * \\@whatItDoes Contains the information about a route associated with a component loaded in an\n * outlet.\n * An `ActivatedRoute` can also be used to traverse the router state tree.\n *\n * \\@howToUse\n *\n * ```\n * \\@Component({...})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: Observable<string> = route.params.map(p => p.id);\n *     const url: Observable<string> = route.url.map(segments => segments.join(''));\n *     // route.data includes both `data` and `resolve`\n *     const user = route.data.map(d => d.user);\n *   }\n * }\n * ```\n *\n * \\@stable\n */\nexport { ActivatedRoute };\nfunction ActivatedRoute_tsickle_Closure_declarations() {\n    /**\n     * The current snapshot of this route\n     * @type {?}\n     */\n    ActivatedRoute.prototype.snapshot;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRoute.prototype._futureSnapshot;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRoute.prototype._routerState;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRoute.prototype._paramMap;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRoute.prototype._queryParamMap;\n    /**\n     * An observable of the URL segments matched by this route\n     * @type {?}\n     */\n    ActivatedRoute.prototype.url;\n    /**\n     * An observable of the matrix parameters scoped to this route\n     * @type {?}\n     */\n    ActivatedRoute.prototype.params;\n    /**\n     * An observable of the query parameters shared by all the routes\n     * @type {?}\n     */\n    ActivatedRoute.prototype.queryParams;\n    /**\n     * An observable of the URL fragment shared by all the routes\n     * @type {?}\n     */\n    ActivatedRoute.prototype.fragment;\n    /**\n     * An observable of the static and resolved data of this route.\n     * @type {?}\n     */\n    ActivatedRoute.prototype.data;\n    /**\n     * The outlet name of the route. It's a constant\n     * @type {?}\n     */\n    ActivatedRoute.prototype.outlet;\n    /**\n     * The component of the route. It's a constant\n     * @type {?}\n     */\n    ActivatedRoute.prototype.component;\n}\n/**\n * Returns the inherited params, data, and resolve for a given route.\n * By default, this only inherits values up to the nearest path-less or component-less route.\n * \\@internal\n * @param {?} route\n * @param {?=} paramsInheritanceStrategy\n * @return {?}\n */\nexport function inheritedParamsDataResolve(route, paramsInheritanceStrategy) {\n    if (paramsInheritanceStrategy === void 0) { paramsInheritanceStrategy = 'emptyOnly'; }\n    var /** @type {?} */ pathFromRoot = route.pathFromRoot;\n    var /** @type {?} */ inheritingStartingFrom = 0;\n    if (paramsInheritanceStrategy !== 'always') {\n        inheritingStartingFrom = pathFromRoot.length - 1;\n        while (inheritingStartingFrom >= 1) {\n            var /** @type {?} */ current = pathFromRoot[inheritingStartingFrom];\n            var /** @type {?} */ parent_1 = pathFromRoot[inheritingStartingFrom - 1];\n            // current route is an empty path => inherits its parent's params and data\n            if (current.routeConfig && current.routeConfig.path === '') {\n                inheritingStartingFrom--;\n                // parent is componentless => current route should inherit its params and data\n            }\n            else if (!parent_1.component) {\n                inheritingStartingFrom--;\n            }\n            else {\n                break;\n            }\n        }\n    }\n    return flattenInherited(pathFromRoot.slice(inheritingStartingFrom));\n}\n/**\n * \\@internal\n * @param {?} pathFromRoot\n * @return {?}\n */\nfunction flattenInherited(pathFromRoot) {\n    return pathFromRoot.reduce(function (res, curr) {\n        var /** @type {?} */ params = tslib_1.__assign({}, res.params, curr.params);\n        var /** @type {?} */ data = tslib_1.__assign({}, res.data, curr.data);\n        var /** @type {?} */ resolve = tslib_1.__assign({}, res.resolve, curr._resolvedData);\n        return { params: params, data: data, resolve: resolve };\n    }, /** @type {?} */ ({ params: {}, data: {}, resolve: {} }));\n}\n/**\n * \\@whatItDoes Contains the information about a route associated with a component loaded in an\n * outlet\n * at a particular moment in time. ActivatedRouteSnapshot can also be used to traverse the router\n * state tree.\n *\n * \\@howToUse\n *\n * ```\n * \\@Component({templateUrl:'./my-component.html'})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n *\n * \\@stable\n */\nvar /**\n * \\@whatItDoes Contains the information about a route associated with a component loaded in an\n * outlet\n * at a particular moment in time. ActivatedRouteSnapshot can also be used to traverse the router\n * state tree.\n *\n * \\@howToUse\n *\n * ```\n * \\@Component({templateUrl:'./my-component.html'})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n *\n * \\@stable\n */\nActivatedRouteSnapshot = /** @class */ (function () {\n    /** @internal */\n    function ActivatedRouteSnapshot(url, params, queryParams, fragment, data, outlet, component, routeConfig, urlSegment, lastPathIndex, resolve) {\n        this.url = url;\n        this.params = params;\n        this.queryParams = queryParams;\n        this.fragment = fragment;\n        this.data = data;\n        this.outlet = outlet;\n        this.component = component;\n        this.routeConfig = routeConfig;\n        this._urlSegment = urlSegment;\n        this._lastPathIndex = lastPathIndex;\n        this._resolve = resolve;\n    }\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"root\", {\n        /** The root of the router state */\n        get: /**\n         * The root of the router state\n         * @return {?}\n         */\n        function () { return this._routerState.root; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"parent\", {\n        /** The parent of this route in the router state tree */\n        get: /**\n         * The parent of this route in the router state tree\n         * @return {?}\n         */\n        function () { return this._routerState.parent(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"firstChild\", {\n        /** The first child of this route in the router state tree */\n        get: /**\n         * The first child of this route in the router state tree\n         * @return {?}\n         */\n        function () { return this._routerState.firstChild(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"children\", {\n        /** The children of this route in the router state tree */\n        get: /**\n         * The children of this route in the router state tree\n         * @return {?}\n         */\n        function () { return this._routerState.children(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"pathFromRoot\", {\n        /** The path from the root of the router state tree to this route */\n        get: /**\n         * The path from the root of the router state tree to this route\n         * @return {?}\n         */\n        function () { return this._routerState.pathFromRoot(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"paramMap\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            if (!this._paramMap) {\n                this._paramMap = convertToParamMap(this.params);\n            }\n            return this._paramMap;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"queryParamMap\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            if (!this._queryParamMap) {\n                this._queryParamMap = convertToParamMap(this.queryParams);\n            }\n            return this._queryParamMap;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ActivatedRouteSnapshot.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ url = this.url.map(function (segment) { return segment.toString(); }).join('/');\n        var /** @type {?} */ matched = this.routeConfig ? this.routeConfig.path : '';\n        return \"Route(url:'\" + url + \"', path:'\" + matched + \"')\";\n    };\n    return ActivatedRouteSnapshot;\n}());\n/**\n * \\@whatItDoes Contains the information about a route associated with a component loaded in an\n * outlet\n * at a particular moment in time. ActivatedRouteSnapshot can also be used to traverse the router\n * state tree.\n *\n * \\@howToUse\n *\n * ```\n * \\@Component({templateUrl:'./my-component.html'})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n *\n * \\@stable\n */\nexport { ActivatedRouteSnapshot };\nfunction ActivatedRouteSnapshot_tsickle_Closure_declarations() {\n    /**\n     * The configuration used to match this route *\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype.routeConfig;\n    /**\n     * \\@internal *\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype._urlSegment;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype._lastPathIndex;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype._resolve;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype._resolvedData;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype._routerState;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype._paramMap;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype._queryParamMap;\n    /**\n     * The URL segments matched by this route\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype.url;\n    /**\n     * The matrix parameters scoped to this route\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype.params;\n    /**\n     * The query parameters shared by all the routes\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype.queryParams;\n    /**\n     * The URL fragment shared by all the routes\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype.fragment;\n    /**\n     * The static and resolved data of this route\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype.data;\n    /**\n     * The outlet name of the route\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype.outlet;\n    /**\n     * The component of the route\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype.component;\n}\n/**\n * \\@whatItDoes Represents the state of the router at a moment in time.\n *\n * \\@howToUse\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * \\@description\n * RouterStateSnapshot is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n *\n * \\@stable\n */\nvar /**\n * \\@whatItDoes Represents the state of the router at a moment in time.\n *\n * \\@howToUse\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * \\@description\n * RouterStateSnapshot is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n *\n * \\@stable\n */\nRouterStateSnapshot = /** @class */ (function (_super) {\n    tslib_1.__extends(RouterStateSnapshot, _super);\n    /** @internal */\n    function RouterStateSnapshot(url, root) {\n        var _this = _super.call(this, root) || this;\n        _this.url = url;\n        setRouterState(/** @type {?} */ (_this), root);\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    RouterStateSnapshot.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return serializeNode(this._root); };\n    return RouterStateSnapshot;\n}(Tree));\n/**\n * \\@whatItDoes Represents the state of the router at a moment in time.\n *\n * \\@howToUse\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * \\@description\n * RouterStateSnapshot is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n *\n * \\@stable\n */\nexport { RouterStateSnapshot };\nfunction RouterStateSnapshot_tsickle_Closure_declarations() {\n    /**\n     * The url from which this snapshot was created\n     * @type {?}\n     */\n    RouterStateSnapshot.prototype.url;\n}\n/**\n * @template U, T\n * @param {?} state\n * @param {?} node\n * @return {?}\n */\nfunction setRouterState(state, node) {\n    node.value._routerState = state;\n    node.children.forEach(function (c) { return setRouterState(state, c); });\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction serializeNode(node) {\n    var /** @type {?} */ c = node.children.length > 0 ? \" { \" + node.children.map(serializeNode).join(', ') + \" } \" : '';\n    return \"\" + node.value + c;\n}\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n * @param {?} route\n * @return {?}\n */\nexport function advanceActivatedRoute(route) {\n    if (route.snapshot) {\n        var /** @type {?} */ currentSnapshot = route.snapshot;\n        var /** @type {?} */ nextSnapshot = route._futureSnapshot;\n        route.snapshot = nextSnapshot;\n        if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {\n            (/** @type {?} */ (route.queryParams)).next(nextSnapshot.queryParams);\n        }\n        if (currentSnapshot.fragment !== nextSnapshot.fragment) {\n            (/** @type {?} */ (route.fragment)).next(nextSnapshot.fragment);\n        }\n        if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {\n            (/** @type {?} */ (route.params)).next(nextSnapshot.params);\n        }\n        if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {\n            (/** @type {?} */ (route.url)).next(nextSnapshot.url);\n        }\n        if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {\n            (/** @type {?} */ (route.data)).next(nextSnapshot.data);\n        }\n    }\n    else {\n        route.snapshot = route._futureSnapshot;\n        // this is for resolved data\n        (/** @type {?} */ (route.data)).next(route._futureSnapshot.data);\n    }\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function equalParamsAndUrlSegments(a, b) {\n    var /** @type {?} */ equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n    var /** @type {?} */ parentsMismatch = !a.parent !== !b.parent;\n    return equalUrlParams && !parentsMismatch &&\n        (!a.parent || equalParamsAndUrlSegments(a.parent, /** @type {?} */ ((b.parent))));\n}\n//# sourceMappingURL=router_state.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { ActivatedRoute, RouterState } from './router_state';\nimport { TreeNode } from './utils/tree';\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?} prevState\n * @return {?}\n */\nexport function createRouterState(routeReuseStrategy, curr, prevState) {\n    var /** @type {?} */ root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);\n    return new RouterState(root, curr);\n}\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?=} prevState\n * @return {?}\n */\nfunction createNode(routeReuseStrategy, curr, prevState) {\n    // reuse an activated route that is currently displayed on the screen\n    if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {\n        var /** @type {?} */ value = prevState.value;\n        value._futureSnapshot = curr.value;\n        var /** @type {?} */ children = createOrReuseChildren(routeReuseStrategy, curr, prevState);\n        return new TreeNode(value, children);\n        // retrieve an activated route that is used to be displayed, but is not currently displayed\n    }\n    else if (routeReuseStrategy.retrieve(curr.value)) {\n        var /** @type {?} */ tree = (/** @type {?} */ (routeReuseStrategy.retrieve(curr.value))).route;\n        setFutureSnapshotsOfActivatedRoutes(curr, tree);\n        return tree;\n    }\n    else {\n        var /** @type {?} */ value = createActivatedRoute(curr.value);\n        var /** @type {?} */ children = curr.children.map(function (c) { return createNode(routeReuseStrategy, c); });\n        return new TreeNode(value, children);\n    }\n}\n/**\n * @param {?} curr\n * @param {?} result\n * @return {?}\n */\nfunction setFutureSnapshotsOfActivatedRoutes(curr, result) {\n    if (curr.value.routeConfig !== result.value.routeConfig) {\n        throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');\n    }\n    if (curr.children.length !== result.children.length) {\n        throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');\n    }\n    result.value._futureSnapshot = curr.value;\n    for (var /** @type {?} */ i = 0; i < curr.children.length; ++i) {\n        setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);\n    }\n}\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?} prevState\n * @return {?}\n */\nfunction createOrReuseChildren(routeReuseStrategy, curr, prevState) {\n    return curr.children.map(function (child) {\n        for (var _i = 0, _a = prevState.children; _i < _a.length; _i++) {\n            var p = _a[_i];\n            if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) {\n                return createNode(routeReuseStrategy, child, p);\n            }\n        }\n        return createNode(routeReuseStrategy, child);\n    });\n}\n/**\n * @param {?} c\n * @return {?}\n */\nfunction createActivatedRoute(c) {\n    return new ActivatedRoute(new BehaviorSubject(c.url), new BehaviorSubject(c.params), new BehaviorSubject(c.queryParams), new BehaviorSubject(c.fragment), new BehaviorSubject(c.data), c.outlet, c.component, c);\n}\n//# sourceMappingURL=create_router_state.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { PRIMARY_OUTLET } from './shared';\nimport { UrlSegment, UrlSegmentGroup, UrlTree } from './url_tree';\nimport { forEach, last, shallowEqual } from './utils/collection';\n/**\n * @param {?} route\n * @param {?} urlTree\n * @param {?} commands\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\nexport function createUrlTree(route, urlTree, commands, queryParams, fragment) {\n    if (commands.length === 0) {\n        return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);\n    }\n    var /** @type {?} */ nav = computeNavigation(commands);\n    if (nav.toRoot()) {\n        return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);\n    }\n    var /** @type {?} */ startingPosition = findStartingPosition(nav, urlTree, route);\n    var /** @type {?} */ segmentGroup = startingPosition.processChildren ?\n        updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, nav.commands) :\n        updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);\n    return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);\n}\n/**\n * @param {?} command\n * @return {?}\n */\nfunction isMatrixParams(command) {\n    return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;\n}\n/**\n * @param {?} oldSegmentGroup\n * @param {?} newSegmentGroup\n * @param {?} urlTree\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\nfunction tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {\n    var /** @type {?} */ qp = {};\n    if (queryParams) {\n        forEach(queryParams, function (value, name) {\n            qp[name] = Array.isArray(value) ? value.map(function (v) { return \"\" + v; }) : \"\" + value;\n        });\n    }\n    if (urlTree.root === oldSegmentGroup) {\n        return new UrlTree(newSegmentGroup, qp, fragment);\n    }\n    return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), qp, fragment);\n}\n/**\n * @param {?} current\n * @param {?} oldSegment\n * @param {?} newSegment\n * @return {?}\n */\nfunction replaceSegment(current, oldSegment, newSegment) {\n    var /** @type {?} */ children = {};\n    forEach(current.children, function (c, outletName) {\n        if (c === oldSegment) {\n            children[outletName] = newSegment;\n        }\n        else {\n            children[outletName] = replaceSegment(c, oldSegment, newSegment);\n        }\n    });\n    return new UrlSegmentGroup(current.segments, children);\n}\nvar Navigation = /** @class */ (function () {\n    function Navigation(isAbsolute, numberOfDoubleDots, commands) {\n        this.isAbsolute = isAbsolute;\n        this.numberOfDoubleDots = numberOfDoubleDots;\n        this.commands = commands;\n        if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {\n            throw new Error('Root segment cannot have matrix parameters');\n        }\n        var /** @type {?} */ cmdWithOutlet = commands.find(function (c) { return typeof c === 'object' && c != null && c.outlets; });\n        if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {\n            throw new Error('{outlets:{}} has to be the last command');\n        }\n    }\n    /**\n     * @return {?}\n     */\n    Navigation.prototype.toRoot = /**\n     * @return {?}\n     */\n    function () {\n        return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';\n    };\n    return Navigation;\n}());\nfunction Navigation_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Navigation.prototype.isAbsolute;\n    /** @type {?} */\n    Navigation.prototype.numberOfDoubleDots;\n    /** @type {?} */\n    Navigation.prototype.commands;\n}\n/**\n * Transforms commands to a normalized `Navigation`\n * @param {?} commands\n * @return {?}\n */\nfunction computeNavigation(commands) {\n    if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {\n        return new Navigation(true, 0, commands);\n    }\n    var /** @type {?} */ numberOfDoubleDots = 0;\n    var /** @type {?} */ isAbsolute = false;\n    var /** @type {?} */ res = commands.reduce(function (res, cmd, cmdIdx) {\n        if (typeof cmd === 'object' && cmd != null) {\n            if (cmd.outlets) {\n                var /** @type {?} */ outlets_1 = {};\n                forEach(cmd.outlets, function (commands, name) {\n                    outlets_1[name] = typeof commands === 'string' ? commands.split('/') : commands;\n                });\n                return res.concat([{ outlets: outlets_1 }]);\n            }\n            if (cmd.segmentPath) {\n                return res.concat([cmd.segmentPath]);\n            }\n        }\n        if (!(typeof cmd === 'string')) {\n            return res.concat([cmd]);\n        }\n        if (cmdIdx === 0) {\n            cmd.split('/').forEach(function (urlPart, partIndex) {\n                if (partIndex == 0 && urlPart === '.') {\n                    // skip './a'\n                }\n                else if (partIndex == 0 && urlPart === '') {\n                    //  '/a'\n                    isAbsolute = true;\n                }\n                else if (urlPart === '..') {\n                    //  '../a'\n                    numberOfDoubleDots++;\n                }\n                else if (urlPart != '') {\n                    res.push(urlPart);\n                }\n            });\n            return res;\n        }\n        return res.concat([cmd]);\n    }, []);\n    return new Navigation(isAbsolute, numberOfDoubleDots, res);\n}\nvar Position = /** @class */ (function () {\n    function Position(segmentGroup, processChildren, index) {\n        this.segmentGroup = segmentGroup;\n        this.processChildren = processChildren;\n        this.index = index;\n    }\n    return Position;\n}());\nfunction Position_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Position.prototype.segmentGroup;\n    /** @type {?} */\n    Position.prototype.processChildren;\n    /** @type {?} */\n    Position.prototype.index;\n}\n/**\n * @param {?} nav\n * @param {?} tree\n * @param {?} route\n * @return {?}\n */\nfunction findStartingPosition(nav, tree, route) {\n    if (nav.isAbsolute) {\n        return new Position(tree.root, true, 0);\n    }\n    if (route.snapshot._lastPathIndex === -1) {\n        return new Position(route.snapshot._urlSegment, true, 0);\n    }\n    var /** @type {?} */ modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;\n    var /** @type {?} */ index = route.snapshot._lastPathIndex + modifier;\n    return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, nav.numberOfDoubleDots);\n}\n/**\n * @param {?} group\n * @param {?} index\n * @param {?} numberOfDoubleDots\n * @return {?}\n */\nfunction createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {\n    var /** @type {?} */ g = group;\n    var /** @type {?} */ ci = index;\n    var /** @type {?} */ dd = numberOfDoubleDots;\n    while (dd > ci) {\n        dd -= ci;\n        g = /** @type {?} */ ((g.parent));\n        if (!g) {\n            throw new Error('Invalid number of \\'../\\'');\n        }\n        ci = g.segments.length;\n    }\n    return new Position(g, false, ci - dd);\n}\n/**\n * @param {?} command\n * @return {?}\n */\nfunction getPath(command) {\n    if (typeof command === 'object' && command != null && command.outlets) {\n        return command.outlets[PRIMARY_OUTLET];\n    }\n    return \"\" + command;\n}\n/**\n * @param {?} commands\n * @return {?}\n */\nfunction getOutlets(commands) {\n    if (!(typeof commands[0] === 'object'))\n        return _a = {}, _a[PRIMARY_OUTLET] = commands, _a;\n    if (commands[0].outlets === undefined)\n        return _b = {}, _b[PRIMARY_OUTLET] = commands, _b;\n    return commands[0].outlets;\n    var _a, _b;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction updateSegmentGroup(segmentGroup, startIndex, commands) {\n    if (!segmentGroup) {\n        segmentGroup = new UrlSegmentGroup([], {});\n    }\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n        return updateSegmentGroupChildren(segmentGroup, startIndex, commands);\n    }\n    var /** @type {?} */ m = prefixedWith(segmentGroup, startIndex, commands);\n    var /** @type {?} */ slicedCommands = commands.slice(m.commandIndex);\n    if (m.match && m.pathIndex < segmentGroup.segments.length) {\n        var /** @type {?} */ g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});\n        g.children[PRIMARY_OUTLET] =\n            new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);\n        return updateSegmentGroupChildren(g, 0, slicedCommands);\n    }\n    else if (m.match && slicedCommands.length === 0) {\n        return new UrlSegmentGroup(segmentGroup.segments, {});\n    }\n    else if (m.match && !segmentGroup.hasChildren()) {\n        return createNewSegmentGroup(segmentGroup, startIndex, commands);\n    }\n    else if (m.match) {\n        return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);\n    }\n    else {\n        return createNewSegmentGroup(segmentGroup, startIndex, commands);\n    }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction updateSegmentGroupChildren(segmentGroup, startIndex, commands) {\n    if (commands.length === 0) {\n        return new UrlSegmentGroup(segmentGroup.segments, {});\n    }\n    else {\n        var /** @type {?} */ outlets_2 = getOutlets(commands);\n        var /** @type {?} */ children_1 = {};\n        forEach(outlets_2, function (commands, outlet) {\n            if (commands !== null) {\n                children_1[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);\n            }\n        });\n        forEach(segmentGroup.children, function (child, childOutlet) {\n            if (outlets_2[childOutlet] === undefined) {\n                children_1[childOutlet] = child;\n            }\n        });\n        return new UrlSegmentGroup(segmentGroup.segments, children_1);\n    }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction prefixedWith(segmentGroup, startIndex, commands) {\n    var /** @type {?} */ currentCommandIndex = 0;\n    var /** @type {?} */ currentPathIndex = startIndex;\n    var /** @type {?} */ noMatch = { match: false, pathIndex: 0, commandIndex: 0 };\n    while (currentPathIndex < segmentGroup.segments.length) {\n        if (currentCommandIndex >= commands.length)\n            return noMatch;\n        var /** @type {?} */ path = segmentGroup.segments[currentPathIndex];\n        var /** @type {?} */ curr = getPath(commands[currentCommandIndex]);\n        var /** @type {?} */ next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\n        if (currentPathIndex > 0 && curr === undefined)\n            break;\n        if (curr && next && (typeof next === 'object') && next.outlets === undefined) {\n            if (!compare(curr, next, path))\n                return noMatch;\n            currentCommandIndex += 2;\n        }\n        else {\n            if (!compare(curr, {}, path))\n                return noMatch;\n            currentCommandIndex++;\n        }\n        currentPathIndex++;\n    }\n    return { match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex };\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction createNewSegmentGroup(segmentGroup, startIndex, commands) {\n    var /** @type {?} */ paths = segmentGroup.segments.slice(0, startIndex);\n    var /** @type {?} */ i = 0;\n    while (i < commands.length) {\n        if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {\n            var /** @type {?} */ children = createNewSegmentChildren(commands[i].outlets);\n            return new UrlSegmentGroup(paths, children);\n        }\n        // if we start with an object literal, we need to reuse the path part from the segment\n        if (i === 0 && isMatrixParams(commands[0])) {\n            var /** @type {?} */ p = segmentGroup.segments[startIndex];\n            paths.push(new UrlSegment(p.path, commands[0]));\n            i++;\n            continue;\n        }\n        var /** @type {?} */ curr = getPath(commands[i]);\n        var /** @type {?} */ next = (i < commands.length - 1) ? commands[i + 1] : null;\n        if (curr && next && isMatrixParams(next)) {\n            paths.push(new UrlSegment(curr, stringify(next)));\n            i += 2;\n        }\n        else {\n            paths.push(new UrlSegment(curr, {}));\n            i++;\n        }\n    }\n    return new UrlSegmentGroup(paths, {});\n}\n/**\n * @param {?} outlets\n * @return {?}\n */\nfunction createNewSegmentChildren(outlets) {\n    var /** @type {?} */ children = {};\n    forEach(outlets, function (commands, outlet) {\n        if (commands !== null) {\n            children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);\n        }\n    });\n    return children;\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction stringify(params) {\n    var /** @type {?} */ res = {};\n    forEach(params, function (v, k) { return res[k] = \"\" + v; });\n    return res;\n}\n/**\n * @param {?} path\n * @param {?} params\n * @param {?} segment\n * @return {?}\n */\nfunction compare(path, params, segment) {\n    return path == segment.path && shallowEqual(params, segment.parameters);\n}\n//# sourceMappingURL=create_url_tree.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { concatMap } from 'rxjs/operator/concatMap';\nimport { every } from 'rxjs/operator/every';\nimport { first } from 'rxjs/operator/first';\nimport { last } from 'rxjs/operator/last';\nimport { map } from 'rxjs/operator/map';\nimport { mergeMap } from 'rxjs/operator/mergeMap';\nimport { reduce } from 'rxjs/operator/reduce';\nimport { ActivationStart, ChildActivationStart } from './events';\nimport { equalParamsAndUrlSegments, inheritedParamsDataResolve } from './router_state';\nimport { andObservables, forEach, shallowEqual, wrapIntoObservable } from './utils/collection';\nimport { nodeChildrenAsMap } from './utils/tree';\nvar CanActivate = /** @class */ (function () {\n    function CanActivate(path) {\n        this.path = path;\n        this.route = this.path[this.path.length - 1];\n    }\n    return CanActivate;\n}());\nfunction CanActivate_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CanActivate.prototype.route;\n    /** @type {?} */\n    CanActivate.prototype.path;\n}\nvar CanDeactivate = /** @class */ (function () {\n    function CanDeactivate(component, route) {\n        this.component = component;\n        this.route = route;\n    }\n    return CanDeactivate;\n}());\nfunction CanDeactivate_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CanDeactivate.prototype.component;\n    /** @type {?} */\n    CanDeactivate.prototype.route;\n}\n/**\n * This class bundles the actions involved in preactivation of a route.\n */\nvar /**\n * This class bundles the actions involved in preactivation of a route.\n */\nPreActivation = /** @class */ (function () {\n    function PreActivation(future, curr, moduleInjector, forwardEvent) {\n        this.future = future;\n        this.curr = curr;\n        this.moduleInjector = moduleInjector;\n        this.forwardEvent = forwardEvent;\n        this.canActivateChecks = [];\n        this.canDeactivateChecks = [];\n    }\n    /**\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    PreActivation.prototype.initialize = /**\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    function (parentContexts) {\n        var /** @type {?} */ futureRoot = this.future._root;\n        var /** @type {?} */ currRoot = this.curr ? this.curr._root : null;\n        this.setupChildRouteGuards(futureRoot, currRoot, parentContexts, [futureRoot.value]);\n    };\n    /**\n     * @return {?}\n     */\n    PreActivation.prototype.checkGuards = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this.isDeactivating() && !this.isActivating()) {\n            return of(true);\n        }\n        var /** @type {?} */ canDeactivate$ = this.runCanDeactivateChecks();\n        return mergeMap.call(canDeactivate$, function (canDeactivate) { return canDeactivate ? _this.runCanActivateChecks() : of(false); });\n    };\n    /**\n     * @param {?} paramsInheritanceStrategy\n     * @return {?}\n     */\n    PreActivation.prototype.resolveData = /**\n     * @param {?} paramsInheritanceStrategy\n     * @return {?}\n     */\n    function (paramsInheritanceStrategy) {\n        var _this = this;\n        if (!this.isActivating())\n            return of(null);\n        var /** @type {?} */ checks$ = from(this.canActivateChecks);\n        var /** @type {?} */ runningChecks$ = concatMap.call(checks$, function (check) { return _this.runResolve(check.route, paramsInheritanceStrategy); });\n        return reduce.call(runningChecks$, function (_, __) { return _; });\n    };\n    /**\n     * @return {?}\n     */\n    PreActivation.prototype.isDeactivating = /**\n     * @return {?}\n     */\n    function () { return this.canDeactivateChecks.length !== 0; };\n    /**\n     * @return {?}\n     */\n    PreActivation.prototype.isActivating = /**\n     * @return {?}\n     */\n    function () { return this.canActivateChecks.length !== 0; };\n    /**\n     * Iterates over child routes and calls recursive `setupRouteGuards` to get `this` instance in\n     * proper state to run `checkGuards()` method.\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} contexts\n     * @param {?} futurePath\n     * @return {?}\n     */\n    PreActivation.prototype.setupChildRouteGuards = /**\n     * Iterates over child routes and calls recursive `setupRouteGuards` to get `this` instance in\n     * proper state to run `checkGuards()` method.\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} contexts\n     * @param {?} futurePath\n     * @return {?}\n     */\n    function (futureNode, currNode, contexts, futurePath) {\n        var _this = this;\n        var /** @type {?} */ prevChildren = nodeChildrenAsMap(currNode);\n        // Process the children of the future route\n        futureNode.children.forEach(function (c) {\n            _this.setupRouteGuards(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]));\n            delete prevChildren[c.value.outlet];\n        });\n        // Process any children left from the current route (not active for the future route)\n        forEach(prevChildren, function (v, k) {\n            return _this.deactivateRouteAndItsChildren(v, /** @type {?} */ ((contexts)).getContext(k));\n        });\n    };\n    /**\n     * Iterates over child routes and calls recursive `setupRouteGuards` to get `this` instance in\n     * proper state to run `checkGuards()` method.\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} parentContexts\n     * @param {?} futurePath\n     * @return {?}\n     */\n    PreActivation.prototype.setupRouteGuards = /**\n     * Iterates over child routes and calls recursive `setupRouteGuards` to get `this` instance in\n     * proper state to run `checkGuards()` method.\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} parentContexts\n     * @param {?} futurePath\n     * @return {?}\n     */\n    function (futureNode, currNode, parentContexts, futurePath) {\n        var /** @type {?} */ future = futureNode.value;\n        var /** @type {?} */ curr = currNode ? currNode.value : null;\n        var /** @type {?} */ context = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null;\n        // reusing the node\n        if (curr && future.routeConfig === curr.routeConfig) {\n            var /** @type {?} */ shouldRunGuardsAndResolvers = this.shouldRunGuardsAndResolvers(curr, future, /** @type {?} */ ((future.routeConfig)).runGuardsAndResolvers);\n            if (shouldRunGuardsAndResolvers) {\n                this.canActivateChecks.push(new CanActivate(futurePath));\n            }\n            else {\n                // we need to set the data\n                future.data = curr.data;\n                future._resolvedData = curr._resolvedData;\n            }\n            // If we have a component, we need to go through an outlet.\n            if (future.component) {\n                this.setupChildRouteGuards(futureNode, currNode, context ? context.children : null, futurePath);\n                // if we have a componentless route, we recurse but keep the same outlet map.\n            }\n            else {\n                this.setupChildRouteGuards(futureNode, currNode, parentContexts, futurePath);\n            }\n            if (shouldRunGuardsAndResolvers) {\n                var /** @type {?} */ outlet = /** @type {?} */ ((/** @type {?} */ ((context)).outlet));\n                this.canDeactivateChecks.push(new CanDeactivate(outlet.component, curr));\n            }\n        }\n        else {\n            if (curr) {\n                this.deactivateRouteAndItsChildren(currNode, context);\n            }\n            this.canActivateChecks.push(new CanActivate(futurePath));\n            // If we have a component, we need to go through an outlet.\n            if (future.component) {\n                this.setupChildRouteGuards(futureNode, null, context ? context.children : null, futurePath);\n                // if we have a componentless route, we recurse but keep the same outlet map.\n            }\n            else {\n                this.setupChildRouteGuards(futureNode, null, parentContexts, futurePath);\n            }\n        }\n    };\n    /**\n     * @param {?} curr\n     * @param {?} future\n     * @param {?} mode\n     * @return {?}\n     */\n    PreActivation.prototype.shouldRunGuardsAndResolvers = /**\n     * @param {?} curr\n     * @param {?} future\n     * @param {?} mode\n     * @return {?}\n     */\n    function (curr, future, mode) {\n        switch (mode) {\n            case 'always':\n                return true;\n            case 'paramsOrQueryParamsChange':\n                return !equalParamsAndUrlSegments(curr, future) ||\n                    !shallowEqual(curr.queryParams, future.queryParams);\n            case 'paramsChange':\n            default:\n                return !equalParamsAndUrlSegments(curr, future);\n        }\n    };\n    /**\n     * @param {?} route\n     * @param {?} context\n     * @return {?}\n     */\n    PreActivation.prototype.deactivateRouteAndItsChildren = /**\n     * @param {?} route\n     * @param {?} context\n     * @return {?}\n     */\n    function (route, context) {\n        var _this = this;\n        var /** @type {?} */ children = nodeChildrenAsMap(route);\n        var /** @type {?} */ r = route.value;\n        forEach(children, function (node, childName) {\n            if (!r.component) {\n                _this.deactivateRouteAndItsChildren(node, context);\n            }\n            else if (context) {\n                _this.deactivateRouteAndItsChildren(node, context.children.getContext(childName));\n            }\n            else {\n                _this.deactivateRouteAndItsChildren(node, null);\n            }\n        });\n        if (!r.component) {\n            this.canDeactivateChecks.push(new CanDeactivate(null, r));\n        }\n        else if (context && context.outlet && context.outlet.isActivated) {\n            this.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, r));\n        }\n        else {\n            this.canDeactivateChecks.push(new CanDeactivate(null, r));\n        }\n    };\n    /**\n     * @return {?}\n     */\n    PreActivation.prototype.runCanDeactivateChecks = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ checks$ = from(this.canDeactivateChecks);\n        var /** @type {?} */ runningChecks$ = mergeMap.call(checks$, function (check) { return _this.runCanDeactivate(check.component, check.route); });\n        return every.call(runningChecks$, function (result) { return result === true; });\n    };\n    /**\n     * @return {?}\n     */\n    PreActivation.prototype.runCanActivateChecks = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ checks$ = from(this.canActivateChecks);\n        var /** @type {?} */ runningChecks$ = concatMap.call(checks$, function (check) {\n            return andObservables(from([\n                _this.fireChildActivationStart(check.route.parent), _this.fireActivationStart(check.route),\n                _this.runCanActivateChild(check.path), _this.runCanActivate(check.route)\n            ]));\n        });\n        return every.call(runningChecks$, function (result) { return result === true; });\n        // this.fireChildActivationStart(check.path),\n    };\n    /**\n     * This should fire off `ActivationStart` events for each route being activated at this\n     * level.\n     * In other words, if you're activating `a` and `b` below, `path` will contain the\n     * `ActivatedRouteSnapshot`s for both and we will fire `ActivationStart` for both. Always\n     * return\n     * `true` so checks continue to run.\n     * @param {?} snapshot\n     * @return {?}\n     */\n    PreActivation.prototype.fireActivationStart = /**\n     * This should fire off `ActivationStart` events for each route being activated at this\n     * level.\n     * In other words, if you're activating `a` and `b` below, `path` will contain the\n     * `ActivatedRouteSnapshot`s for both and we will fire `ActivationStart` for both. Always\n     * return\n     * `true` so checks continue to run.\n     * @param {?} snapshot\n     * @return {?}\n     */\n    function (snapshot) {\n        if (snapshot !== null && this.forwardEvent) {\n            this.forwardEvent(new ActivationStart(snapshot));\n        }\n        return of(true);\n    };\n    /**\n     * This should fire off `ChildActivationStart` events for each route being activated at this\n     * level.\n     * In other words, if you're activating `a` and `b` below, `path` will contain the\n     * `ActivatedRouteSnapshot`s for both and we will fire `ChildActivationStart` for both. Always\n     * return\n     * `true` so checks continue to run.\n     * @param {?} snapshot\n     * @return {?}\n     */\n    PreActivation.prototype.fireChildActivationStart = /**\n     * This should fire off `ChildActivationStart` events for each route being activated at this\n     * level.\n     * In other words, if you're activating `a` and `b` below, `path` will contain the\n     * `ActivatedRouteSnapshot`s for both and we will fire `ChildActivationStart` for both. Always\n     * return\n     * `true` so checks continue to run.\n     * @param {?} snapshot\n     * @return {?}\n     */\n    function (snapshot) {\n        if (snapshot !== null && this.forwardEvent) {\n            this.forwardEvent(new ChildActivationStart(snapshot));\n        }\n        return of(true);\n    };\n    /**\n     * @param {?} future\n     * @return {?}\n     */\n    PreActivation.prototype.runCanActivate = /**\n     * @param {?} future\n     * @return {?}\n     */\n    function (future) {\n        var _this = this;\n        var /** @type {?} */ canActivate = future.routeConfig ? future.routeConfig.canActivate : null;\n        if (!canActivate || canActivate.length === 0)\n            return of(true);\n        var /** @type {?} */ obs = map.call(from(canActivate), function (c) {\n            var /** @type {?} */ guard = _this.getToken(c, future);\n            var /** @type {?} */ observable;\n            if (guard.canActivate) {\n                observable = wrapIntoObservable(guard.canActivate(future, _this.future));\n            }\n            else {\n                observable = wrapIntoObservable(guard(future, _this.future));\n            }\n            return first.call(observable);\n        });\n        return andObservables(obs);\n    };\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    PreActivation.prototype.runCanActivateChild = /**\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        var _this = this;\n        var /** @type {?} */ future = path[path.length - 1];\n        var /** @type {?} */ canActivateChildGuards = path.slice(0, path.length - 1)\n            .reverse()\n            .map(function (p) { return _this.extractCanActivateChild(p); })\n            .filter(function (_) { return _ !== null; });\n        return andObservables(map.call(from(canActivateChildGuards), function (d) {\n            var /** @type {?} */ obs = map.call(from(d.guards), function (c) {\n                var /** @type {?} */ guard = _this.getToken(c, d.node);\n                var /** @type {?} */ observable;\n                if (guard.canActivateChild) {\n                    observable = wrapIntoObservable(guard.canActivateChild(future, _this.future));\n                }\n                else {\n                    observable = wrapIntoObservable(guard(future, _this.future));\n                }\n                return first.call(observable);\n            });\n            return andObservables(obs);\n        }));\n    };\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    PreActivation.prototype.extractCanActivateChild = /**\n     * @param {?} p\n     * @return {?}\n     */\n    function (p) {\n        var /** @type {?} */ canActivateChild = p.routeConfig ? p.routeConfig.canActivateChild : null;\n        if (!canActivateChild || canActivateChild.length === 0)\n            return null;\n        return { node: p, guards: canActivateChild };\n    };\n    /**\n     * @param {?} component\n     * @param {?} curr\n     * @return {?}\n     */\n    PreActivation.prototype.runCanDeactivate = /**\n     * @param {?} component\n     * @param {?} curr\n     * @return {?}\n     */\n    function (component, curr) {\n        var _this = this;\n        var /** @type {?} */ canDeactivate = curr && curr.routeConfig ? curr.routeConfig.canDeactivate : null;\n        if (!canDeactivate || canDeactivate.length === 0)\n            return of(true);\n        var /** @type {?} */ canDeactivate$ = mergeMap.call(from(canDeactivate), function (c) {\n            var /** @type {?} */ guard = _this.getToken(c, curr);\n            var /** @type {?} */ observable;\n            if (guard.canDeactivate) {\n                observable =\n                    wrapIntoObservable(guard.canDeactivate(component, curr, _this.curr, _this.future));\n            }\n            else {\n                observable = wrapIntoObservable(guard(component, curr, _this.curr, _this.future));\n            }\n            return first.call(observable);\n        });\n        return every.call(canDeactivate$, function (result) { return result === true; });\n    };\n    /**\n     * @param {?} future\n     * @param {?} paramsInheritanceStrategy\n     * @return {?}\n     */\n    PreActivation.prototype.runResolve = /**\n     * @param {?} future\n     * @param {?} paramsInheritanceStrategy\n     * @return {?}\n     */\n    function (future, paramsInheritanceStrategy) {\n        var /** @type {?} */ resolve = future._resolve;\n        return map.call(this.resolveNode(resolve, future), function (resolvedData) {\n            future._resolvedData = resolvedData;\n            future.data = tslib_1.__assign({}, future.data, inheritedParamsDataResolve(future, paramsInheritanceStrategy).resolve);\n            return null;\n        });\n    };\n    /**\n     * @param {?} resolve\n     * @param {?} future\n     * @return {?}\n     */\n    PreActivation.prototype.resolveNode = /**\n     * @param {?} resolve\n     * @param {?} future\n     * @return {?}\n     */\n    function (resolve, future) {\n        var _this = this;\n        var /** @type {?} */ keys = Object.keys(resolve);\n        if (keys.length === 0) {\n            return of({});\n        }\n        if (keys.length === 1) {\n            var /** @type {?} */ key_1 = keys[0];\n            return map.call(this.getResolver(resolve[key_1], future), function (value) {\n                return _a = {}, _a[key_1] = value, _a;\n                var _a;\n            });\n        }\n        var /** @type {?} */ data = {};\n        var /** @type {?} */ runningResolvers$ = mergeMap.call(from(keys), function (key) {\n            return map.call(_this.getResolver(resolve[key], future), function (value) {\n                data[key] = value;\n                return value;\n            });\n        });\n        return map.call(last.call(runningResolvers$), function () { return data; });\n    };\n    /**\n     * @param {?} injectionToken\n     * @param {?} future\n     * @return {?}\n     */\n    PreActivation.prototype.getResolver = /**\n     * @param {?} injectionToken\n     * @param {?} future\n     * @return {?}\n     */\n    function (injectionToken, future) {\n        var /** @type {?} */ resolver = this.getToken(injectionToken, future);\n        return resolver.resolve ? wrapIntoObservable(resolver.resolve(future, this.future)) :\n            wrapIntoObservable(resolver(future, this.future));\n    };\n    /**\n     * @param {?} token\n     * @param {?} snapshot\n     * @return {?}\n     */\n    PreActivation.prototype.getToken = /**\n     * @param {?} token\n     * @param {?} snapshot\n     * @return {?}\n     */\n    function (token, snapshot) {\n        var /** @type {?} */ config = closestLoadedConfig(snapshot);\n        var /** @type {?} */ injector = config ? config.module.injector : this.moduleInjector;\n        return injector.get(token);\n    };\n    return PreActivation;\n}());\n/**\n * This class bundles the actions involved in preactivation of a route.\n */\nexport { PreActivation };\nfunction PreActivation_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PreActivation.prototype.canActivateChecks;\n    /** @type {?} */\n    PreActivation.prototype.canDeactivateChecks;\n    /** @type {?} */\n    PreActivation.prototype.future;\n    /** @type {?} */\n    PreActivation.prototype.curr;\n    /** @type {?} */\n    PreActivation.prototype.moduleInjector;\n    /** @type {?} */\n    PreActivation.prototype.forwardEvent;\n}\n/**\n * @param {?} snapshot\n * @return {?}\n */\nfunction closestLoadedConfig(snapshot) {\n    if (!snapshot)\n        return null;\n    for (var /** @type {?} */ s = snapshot.parent; s; s = s.parent) {\n        var /** @type {?} */ route = s.routeConfig;\n        if (route && route._loadedConfig)\n            return route._loadedConfig;\n    }\n    return null;\n}\n//# sourceMappingURL=pre_activation.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot, inheritedParamsDataResolve } from './router_state';\nimport { PRIMARY_OUTLET, defaultUrlMatcher } from './shared';\nimport { UrlSegmentGroup, mapChildrenIntoArray } from './url_tree';\nimport { forEach, last } from './utils/collection';\nimport { TreeNode } from './utils/tree';\nvar NoMatch = /** @class */ (function () {\n    function NoMatch() {\n    }\n    return NoMatch;\n}());\n/**\n * @param {?} rootComponentType\n * @param {?} config\n * @param {?} urlTree\n * @param {?} url\n * @param {?=} paramsInheritanceStrategy\n * @return {?}\n */\nexport function recognize(rootComponentType, config, urlTree, url, paramsInheritanceStrategy) {\n    if (paramsInheritanceStrategy === void 0) { paramsInheritanceStrategy = 'emptyOnly'; }\n    return new Recognizer(rootComponentType, config, urlTree, url, paramsInheritanceStrategy)\n        .recognize();\n}\nvar Recognizer = /** @class */ (function () {\n    function Recognizer(rootComponentType, config, urlTree, url, paramsInheritanceStrategy) {\n        this.rootComponentType = rootComponentType;\n        this.config = config;\n        this.urlTree = urlTree;\n        this.url = url;\n        this.paramsInheritanceStrategy = paramsInheritanceStrategy;\n    }\n    /**\n     * @return {?}\n     */\n    Recognizer.prototype.recognize = /**\n     * @return {?}\n     */\n    function () {\n        try {\n            var /** @type {?} */ rootSegmentGroup = split(this.urlTree.root, [], [], this.config).segmentGroup;\n            var /** @type {?} */ children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);\n            var /** @type {?} */ root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(this.urlTree.queryParams), /** @type {?} */ ((this.urlTree.fragment)), {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});\n            var /** @type {?} */ rootNode = new TreeNode(root, children);\n            var /** @type {?} */ routeState = new RouterStateSnapshot(this.url, rootNode);\n            this.inheritParamsAndData(routeState._root);\n            return of(routeState);\n        }\n        catch (/** @type {?} */ e) {\n            return new Observable(function (obs) { return obs.error(e); });\n        }\n    };\n    /**\n     * @param {?} routeNode\n     * @return {?}\n     */\n    Recognizer.prototype.inheritParamsAndData = /**\n     * @param {?} routeNode\n     * @return {?}\n     */\n    function (routeNode) {\n        var _this = this;\n        var /** @type {?} */ route = routeNode.value;\n        var /** @type {?} */ i = inheritedParamsDataResolve(route, this.paramsInheritanceStrategy);\n        route.params = Object.freeze(i.params);\n        route.data = Object.freeze(i.data);\n        routeNode.children.forEach(function (n) { return _this.inheritParamsAndData(n); });\n    };\n    /**\n     * @param {?} config\n     * @param {?} segmentGroup\n     * @param {?} outlet\n     * @return {?}\n     */\n    Recognizer.prototype.processSegmentGroup = /**\n     * @param {?} config\n     * @param {?} segmentGroup\n     * @param {?} outlet\n     * @return {?}\n     */\n    function (config, segmentGroup, outlet) {\n        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n            return this.processChildren(config, segmentGroup);\n        }\n        return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);\n    };\n    /**\n     * @param {?} config\n     * @param {?} segmentGroup\n     * @return {?}\n     */\n    Recognizer.prototype.processChildren = /**\n     * @param {?} config\n     * @param {?} segmentGroup\n     * @return {?}\n     */\n    function (config, segmentGroup) {\n        var _this = this;\n        var /** @type {?} */ children = mapChildrenIntoArray(segmentGroup, function (child, childOutlet) { return _this.processSegmentGroup(config, child, childOutlet); });\n        checkOutletNameUniqueness(children);\n        sortActivatedRouteSnapshots(children);\n        return children;\n    };\n    /**\n     * @param {?} config\n     * @param {?} segmentGroup\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    Recognizer.prototype.processSegment = /**\n     * @param {?} config\n     * @param {?} segmentGroup\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    function (config, segmentGroup, segments, outlet) {\n        for (var _i = 0, config_1 = config; _i < config_1.length; _i++) {\n            var r = config_1[_i];\n            try {\n                return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);\n            }\n            catch (/** @type {?} */ e) {\n                if (!(e instanceof NoMatch))\n                    throw e;\n            }\n        }\n        if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n            return [];\n        }\n        throw new NoMatch();\n    };\n    /**\n     * @param {?} segmentGroup\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    Recognizer.prototype.noLeftoversInUrl = /**\n     * @param {?} segmentGroup\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    function (segmentGroup, segments, outlet) {\n        return segments.length === 0 && !segmentGroup.children[outlet];\n    };\n    /**\n     * @param {?} route\n     * @param {?} rawSegment\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    Recognizer.prototype.processSegmentAgainstRoute = /**\n     * @param {?} route\n     * @param {?} rawSegment\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    function (route, rawSegment, segments, outlet) {\n        if (route.redirectTo)\n            throw new NoMatch();\n        if ((route.outlet || PRIMARY_OUTLET) !== outlet)\n            throw new NoMatch();\n        var /** @type {?} */ snapshot;\n        var /** @type {?} */ consumedSegments = [];\n        var /** @type {?} */ rawSlicedSegments = [];\n        if (route.path === '**') {\n            var /** @type {?} */ params = segments.length > 0 ? /** @type {?} */ ((last(segments))).parameters : {};\n            snapshot = new ActivatedRouteSnapshot(segments, params, Object.freeze(this.urlTree.queryParams), /** @type {?} */ ((this.urlTree.fragment)), getData(route), outlet, /** @type {?} */ ((route.component)), route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));\n        }\n        else {\n            var /** @type {?} */ result = match(rawSegment, route, segments);\n            consumedSegments = result.consumedSegments;\n            rawSlicedSegments = segments.slice(result.lastChild);\n            snapshot = new ActivatedRouteSnapshot(consumedSegments, result.parameters, Object.freeze(this.urlTree.queryParams), /** @type {?} */ ((this.urlTree.fragment)), getData(route), outlet, /** @type {?} */ ((route.component)), route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));\n        }\n        var /** @type {?} */ childConfig = getChildConfig(route);\n        var _a = split(rawSegment, consumedSegments, rawSlicedSegments, childConfig), segmentGroup = _a.segmentGroup, slicedSegments = _a.slicedSegments;\n        if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n            var /** @type {?} */ children_1 = this.processChildren(childConfig, segmentGroup);\n            return [new TreeNode(snapshot, children_1)];\n        }\n        if (childConfig.length === 0 && slicedSegments.length === 0) {\n            return [new TreeNode(snapshot, [])];\n        }\n        var /** @type {?} */ children = this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);\n        return [new TreeNode(snapshot, children)];\n    };\n    return Recognizer;\n}());\nfunction Recognizer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Recognizer.prototype.rootComponentType;\n    /** @type {?} */\n    Recognizer.prototype.config;\n    /** @type {?} */\n    Recognizer.prototype.urlTree;\n    /** @type {?} */\n    Recognizer.prototype.url;\n    /** @type {?} */\n    Recognizer.prototype.paramsInheritanceStrategy;\n}\n/**\n * @param {?} nodes\n * @return {?}\n */\nfunction sortActivatedRouteSnapshots(nodes) {\n    nodes.sort(function (a, b) {\n        if (a.value.outlet === PRIMARY_OUTLET)\n            return -1;\n        if (b.value.outlet === PRIMARY_OUTLET)\n            return 1;\n        return a.value.outlet.localeCompare(b.value.outlet);\n    });\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getChildConfig(route) {\n    if (route.children) {\n        return route.children;\n    }\n    if (route.loadChildren) {\n        return /** @type {?} */ ((route._loadedConfig)).routes;\n    }\n    return [];\n}\n/**\n * @record\n */\nfunction MatchResult() { }\nfunction MatchResult_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatchResult.prototype.consumedSegments;\n    /** @type {?} */\n    MatchResult.prototype.lastChild;\n    /** @type {?} */\n    MatchResult.prototype.parameters;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\nfunction match(segmentGroup, route, segments) {\n    if (route.path === '') {\n        if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {\n            throw new NoMatch();\n        }\n        return { consumedSegments: [], lastChild: 0, parameters: {} };\n    }\n    var /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;\n    var /** @type {?} */ res = matcher(segments, segmentGroup, route);\n    if (!res)\n        throw new NoMatch();\n    var /** @type {?} */ posParams = {};\n    forEach(/** @type {?} */ ((res.posParams)), function (v, k) { posParams[k] = v.path; });\n    var /** @type {?} */ parameters = res.consumed.length > 0 ? tslib_1.__assign({}, posParams, res.consumed[res.consumed.length - 1].parameters) :\n        posParams;\n    return { consumedSegments: res.consumed, lastChild: res.consumed.length, parameters: parameters };\n}\n/**\n * @param {?} nodes\n * @return {?}\n */\nfunction checkOutletNameUniqueness(nodes) {\n    var /** @type {?} */ names = {};\n    nodes.forEach(function (n) {\n        var /** @type {?} */ routeWithSameOutletName = names[n.value.outlet];\n        if (routeWithSameOutletName) {\n            var /** @type {?} */ p = routeWithSameOutletName.url.map(function (s) { return s.toString(); }).join('/');\n            var /** @type {?} */ c = n.value.url.map(function (s) { return s.toString(); }).join('/');\n            throw new Error(\"Two segments cannot have the same outlet name: '\" + p + \"' and '\" + c + \"'.\");\n        }\n        names[n.value.outlet] = n.value;\n    });\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction getSourceSegmentGroup(segmentGroup) {\n    var /** @type {?} */ s = segmentGroup;\n    while (s._sourceSegment) {\n        s = s._sourceSegment;\n    }\n    return s;\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction getPathIndexShift(segmentGroup) {\n    var /** @type {?} */ s = segmentGroup;\n    var /** @type {?} */ res = (s._segmentIndexShift ? s._segmentIndexShift : 0);\n    while (s._sourceSegment) {\n        s = s._sourceSegment;\n        res += (s._segmentIndexShift ? s._segmentIndexShift : 0);\n    }\n    return res - 1;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} slicedSegments\n * @param {?} config\n * @return {?}\n */\nfunction split(segmentGroup, consumedSegments, slicedSegments, config) {\n    if (slicedSegments.length > 0 &&\n        containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n        var /** @type {?} */ s_1 = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n        s_1._sourceSegment = segmentGroup;\n        s_1._segmentIndexShift = consumedSegments.length;\n        return { segmentGroup: s_1, slicedSegments: [] };\n    }\n    if (slicedSegments.length === 0 &&\n        containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {\n        var /** @type {?} */ s_2 = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));\n        s_2._sourceSegment = segmentGroup;\n        s_2._segmentIndexShift = consumedSegments.length;\n        return { segmentGroup: s_2, slicedSegments: slicedSegments };\n    }\n    var /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return { segmentGroup: s, slicedSegments: slicedSegments };\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @param {?} children\n * @return {?}\n */\nfunction addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {\n    var /** @type {?} */ res = {};\n    for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {\n        var r = routes_1[_i];\n        if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n            var /** @type {?} */ s = new UrlSegmentGroup([], {});\n            s._sourceSegment = segmentGroup;\n            s._segmentIndexShift = segmentGroup.segments.length;\n            res[getOutlet(r)] = s;\n        }\n    }\n    return tslib_1.__assign({}, children, res);\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} routes\n * @param {?} primarySegment\n * @return {?}\n */\nfunction createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {\n    var /** @type {?} */ res = {};\n    res[PRIMARY_OUTLET] = primarySegment;\n    primarySegment._sourceSegment = segmentGroup;\n    primarySegment._segmentIndexShift = consumedSegments.length;\n    for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {\n        var r = routes_2[_i];\n        if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n            var /** @type {?} */ s = new UrlSegmentGroup([], {});\n            s._sourceSegment = segmentGroup;\n            s._segmentIndexShift = consumedSegments.length;\n            res[getOutlet(r)] = s;\n        }\n    }\n    return res;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {\n    return routes.some(function (r) { return emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet(r) !== PRIMARY_OUTLET; });\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {\n    return routes.some(function (r) { return emptyPathMatch(segmentGroup, slicedSegments, r); });\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} r\n * @return {?}\n */\nfunction emptyPathMatch(segmentGroup, slicedSegments, r) {\n    if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {\n        return false;\n    }\n    return r.path === '' && r.redirectTo === undefined;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getOutlet(route) {\n    return route.outlet || PRIMARY_OUTLET;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getData(route) {\n    return route.data || {};\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getResolve(route) {\n    return route.resolve || {};\n}\n//# sourceMappingURL=recognize.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Provides a way to customize when activated routes get reused.\n *\n * \\@experimental\n * @abstract\n */\nvar /**\n * \\@whatItDoes Provides a way to customize when activated routes get reused.\n *\n * \\@experimental\n * @abstract\n */\nRouteReuseStrategy = /** @class */ (function () {\n    function RouteReuseStrategy() {\n    }\n    return RouteReuseStrategy;\n}());\n/**\n * \\@whatItDoes Provides a way to customize when activated routes get reused.\n *\n * \\@experimental\n * @abstract\n */\nexport { RouteReuseStrategy };\nfunction RouteReuseStrategy_tsickle_Closure_declarations() {\n    /**\n     * Determines if this route (and its subtree) should be detached to be reused later\n     * @abstract\n     * @param {?} route\n     * @return {?}\n     */\n    RouteReuseStrategy.prototype.shouldDetach = function (route) { };\n    /**\n     * Stores the detached route.\n     *\n     * Storing a `null` value should erase the previously stored value.\n     * @abstract\n     * @param {?} route\n     * @param {?} handle\n     * @return {?}\n     */\n    RouteReuseStrategy.prototype.store = function (route, handle) { };\n    /**\n     * Determines if this route (and its subtree) should be reattached\n     * @abstract\n     * @param {?} route\n     * @return {?}\n     */\n    RouteReuseStrategy.prototype.shouldAttach = function (route) { };\n    /**\n     * Retrieves the previously stored route\n     * @abstract\n     * @param {?} route\n     * @return {?}\n     */\n    RouteReuseStrategy.prototype.retrieve = function (route) { };\n    /**\n     * Determines if a route should be reused\n     * @abstract\n     * @param {?} future\n     * @param {?} curr\n     * @return {?}\n     */\n    RouteReuseStrategy.prototype.shouldReuseRoute = function (future, curr) { };\n}\n/**\n * Does not detach any subtrees. Reuses routes as long as their route config is the same.\n */\nvar /**\n * Does not detach any subtrees. Reuses routes as long as their route config is the same.\n */\nDefaultRouteReuseStrategy = /** @class */ (function () {\n    function DefaultRouteReuseStrategy() {\n    }\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    DefaultRouteReuseStrategy.prototype.shouldDetach = /**\n     * @param {?} route\n     * @return {?}\n     */\n    function (route) { return false; };\n    /**\n     * @param {?} route\n     * @param {?} detachedTree\n     * @return {?}\n     */\n    DefaultRouteReuseStrategy.prototype.store = /**\n     * @param {?} route\n     * @param {?} detachedTree\n     * @return {?}\n     */\n    function (route, detachedTree) { };\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    DefaultRouteReuseStrategy.prototype.shouldAttach = /**\n     * @param {?} route\n     * @return {?}\n     */\n    function (route) { return false; };\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    DefaultRouteReuseStrategy.prototype.retrieve = /**\n     * @param {?} route\n     * @return {?}\n     */\n    function (route) { return null; };\n    /**\n     * @param {?} future\n     * @param {?} curr\n     * @return {?}\n     */\n    DefaultRouteReuseStrategy.prototype.shouldReuseRoute = /**\n     * @param {?} future\n     * @param {?} curr\n     * @return {?}\n     */\n    function (future, curr) {\n        return future.routeConfig === curr.routeConfig;\n    };\n    return DefaultRouteReuseStrategy;\n}());\n/**\n * Does not detach any subtrees. Reuses routes as long as their route config is the same.\n */\nexport { DefaultRouteReuseStrategy };\n//# sourceMappingURL=route_reuse_strategy.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, NgModuleFactory } from '@angular/core';\nimport { fromPromise } from 'rxjs/observable/fromPromise';\nimport { of } from 'rxjs/observable/of';\nimport { map } from 'rxjs/operator/map';\nimport { mergeMap } from 'rxjs/operator/mergeMap';\nimport { LoadedRouterConfig, copyConfig } from './config';\nimport { flatten, wrapIntoObservable } from './utils/collection';\n/**\n * \\@docsNotRequired\n * \\@experimental\n */\nexport var /** @type {?} */ ROUTES = new InjectionToken('ROUTES');\nvar RouterConfigLoader = /** @class */ (function () {\n    function RouterConfigLoader(loader, compiler, onLoadStartListener, onLoadEndListener) {\n        this.loader = loader;\n        this.compiler = compiler;\n        this.onLoadStartListener = onLoadStartListener;\n        this.onLoadEndListener = onLoadEndListener;\n    }\n    /**\n     * @param {?} parentInjector\n     * @param {?} route\n     * @return {?}\n     */\n    RouterConfigLoader.prototype.load = /**\n     * @param {?} parentInjector\n     * @param {?} route\n     * @return {?}\n     */\n    function (parentInjector, route) {\n        var _this = this;\n        if (this.onLoadStartListener) {\n            this.onLoadStartListener(route);\n        }\n        var /** @type {?} */ moduleFactory$ = this.loadModuleFactory(/** @type {?} */ ((route.loadChildren)));\n        return map.call(moduleFactory$, function (factory) {\n            if (_this.onLoadEndListener) {\n                _this.onLoadEndListener(route);\n            }\n            var /** @type {?} */ module = factory.create(parentInjector);\n            return new LoadedRouterConfig(flatten(module.injector.get(ROUTES)).map(copyConfig), module);\n        });\n    };\n    /**\n     * @param {?} loadChildren\n     * @return {?}\n     */\n    RouterConfigLoader.prototype.loadModuleFactory = /**\n     * @param {?} loadChildren\n     * @return {?}\n     */\n    function (loadChildren) {\n        var _this = this;\n        if (typeof loadChildren === 'string') {\n            return fromPromise(this.loader.load(loadChildren));\n        }\n        else {\n            return mergeMap.call(wrapIntoObservable(loadChildren()), function (t) {\n                if (t instanceof NgModuleFactory) {\n                    return of(t);\n                }\n                else {\n                    return fromPromise(_this.compiler.compileModuleAsync(t));\n                }\n            });\n        }\n    };\n    return RouterConfigLoader;\n}());\nexport { RouterConfigLoader };\nfunction RouterConfigLoader_tsickle_Closure_declarations() {\n    /** @type {?} */\n    RouterConfigLoader.prototype.loader;\n    /** @type {?} */\n    RouterConfigLoader.prototype.compiler;\n    /** @type {?} */\n    RouterConfigLoader.prototype.onLoadStartListener;\n    /** @type {?} */\n    RouterConfigLoader.prototype.onLoadEndListener;\n}\n//# sourceMappingURL=router_config_loader.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Provides a way to migrate AngularJS applications to Angular.\n *\n * \\@experimental\n * @abstract\n */\nvar /**\n * \\@whatItDoes Provides a way to migrate AngularJS applications to Angular.\n *\n * \\@experimental\n * @abstract\n */\nUrlHandlingStrategy = /** @class */ (function () {\n    function UrlHandlingStrategy() {\n    }\n    return UrlHandlingStrategy;\n}());\n/**\n * \\@whatItDoes Provides a way to migrate AngularJS applications to Angular.\n *\n * \\@experimental\n * @abstract\n */\nexport { UrlHandlingStrategy };\nfunction UrlHandlingStrategy_tsickle_Closure_declarations() {\n    /**\n     * Tells the router if this URL should be processed.\n     *\n     * When it returns true, the router will execute the regular navigation.\n     * When it returns false, the router will set the router state to an empty state.\n     * As a result, all the active components will be destroyed.\n     *\n     * @abstract\n     * @param {?} url\n     * @return {?}\n     */\n    UrlHandlingStrategy.prototype.shouldProcessUrl = function (url) { };\n    /**\n     * Extracts the part of the URL that should be handled by the router.\n     * The rest of the URL will remain untouched.\n     * @abstract\n     * @param {?} url\n     * @return {?}\n     */\n    UrlHandlingStrategy.prototype.extract = function (url) { };\n    /**\n     * Merges the URL fragment with the rest of the URL.\n     * @abstract\n     * @param {?} newUrlPart\n     * @param {?} rawUrl\n     * @return {?}\n     */\n    UrlHandlingStrategy.prototype.merge = function (newUrlPart, rawUrl) { };\n}\n/**\n * \\@experimental\n */\nvar /**\n * \\@experimental\n */\nDefaultUrlHandlingStrategy = /** @class */ (function () {\n    function DefaultUrlHandlingStrategy() {\n    }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    DefaultUrlHandlingStrategy.prototype.shouldProcessUrl = /**\n     * @param {?} url\n     * @return {?}\n     */\n    function (url) { return true; };\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    DefaultUrlHandlingStrategy.prototype.extract = /**\n     * @param {?} url\n     * @return {?}\n     */\n    function (url) { return url; };\n    /**\n     * @param {?} newUrlPart\n     * @param {?} wholeUrl\n     * @return {?}\n     */\n    DefaultUrlHandlingStrategy.prototype.merge = /**\n     * @param {?} newUrlPart\n     * @param {?} wholeUrl\n     * @return {?}\n     */\n    function (newUrlPart, wholeUrl) { return newUrlPart; };\n    return DefaultUrlHandlingStrategy;\n}());\n/**\n * \\@experimental\n */\nexport { DefaultUrlHandlingStrategy };\n//# sourceMappingURL=url_handling_strategy.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { NgModuleRef, isDevMode } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subject } from 'rxjs/Subject';\nimport { of } from 'rxjs/observable/of';\nimport { concatMap } from 'rxjs/operator/concatMap';\nimport { map } from 'rxjs/operator/map';\nimport { mergeMap } from 'rxjs/operator/mergeMap';\nimport { applyRedirects } from './apply_redirects';\nimport { copyConfig, validateConfig } from './config';\nimport { createRouterState } from './create_router_state';\nimport { createUrlTree } from './create_url_tree';\nimport { ActivationEnd, ChildActivationEnd, GuardsCheckEnd, GuardsCheckStart, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, ResolveEnd, ResolveStart, RouteConfigLoadEnd, RouteConfigLoadStart, RoutesRecognized } from './events';\nimport { PreActivation } from './pre_activation';\nimport { recognize } from './recognize';\nimport { DefaultRouteReuseStrategy } from './route_reuse_strategy';\nimport { RouterConfigLoader } from './router_config_loader';\nimport { advanceActivatedRoute, createEmptyState } from './router_state';\nimport { isNavigationCancelingError } from './shared';\nimport { DefaultUrlHandlingStrategy } from './url_handling_strategy';\nimport { UrlTree, containsTree, createEmptyUrlTree } from './url_tree';\nimport { forEach } from './utils/collection';\nimport { nodeChildrenAsMap } from './utils/tree';\n/**\n * \\@whatItDoes Represents the extra options used during navigation.\n *\n * \\@stable\n * @record\n */\nexport function NavigationExtras() { }\nfunction NavigationExtras_tsickle_Closure_declarations() {\n    /**\n     * Enables relative navigation from the current ActivatedRoute.\n     *\n     * Configuration:\n     *\n     * ```\n     * [{\n     *   path: 'parent',\n     *   component: ParentComponent,\n     *   children: [{\n     *     path: 'list',\n     *     component: ListComponent\n     *   },{\n     *     path: 'child',\n     *     component: ChildComponent\n     *   }]\n     * }]\n     * ```\n     *\n     * Navigate to list route from child route:\n     *\n     * ```\n     *  \\@Component({...})\n     *  class ChildComponent {\n     *    constructor(private router: Router, private route: ActivatedRoute) {}\n     *\n     *    go() {\n     *      this.router.navigate(['../list'], { relativeTo: this.route });\n     *    }\n     *  }\n     * ```\n     * @type {?|undefined}\n     */\n    NavigationExtras.prototype.relativeTo;\n    /**\n     * Sets query parameters to the URL.\n     *\n     * ```\n     * // Navigate to /results?page=1\n     * this.router.navigate(['/results'], { queryParams: { page: 1 } });\n     * ```\n     * @type {?|undefined}\n     */\n    NavigationExtras.prototype.queryParams;\n    /**\n     * Sets the hash fragment for the URL.\n     *\n     * ```\n     * // Navigate to /results#top\n     * this.router.navigate(['/results'], { fragment: 'top' });\n     * ```\n     * @type {?|undefined}\n     */\n    NavigationExtras.prototype.fragment;\n    /**\n     * Preserves the query parameters for the next navigation.\n     *\n     * deprecated, use `queryParamsHandling` instead\n     *\n     * ```\n     * // Preserve query params from /results?page=1 to /view?page=1\n     * this.router.navigate(['/view'], { preserveQueryParams: true });\n     * ```\n     *\n     * @deprecated since v4\n     * @type {?|undefined}\n     */\n    NavigationExtras.prototype.preserveQueryParams;\n    /**\n     *  config strategy to handle the query parameters for the next navigation.\n     *\n     * ```\n     * // from /results?page=1 to /view?page=1&page=2\n     * this.router.navigate(['/view'], { queryParams: { page: 2 },  queryParamsHandling: \"merge\" });\n     * ```\n     * @type {?|undefined}\n     */\n    NavigationExtras.prototype.queryParamsHandling;\n    /**\n     * Preserves the fragment for the next navigation\n     *\n     * ```\n     * // Preserve fragment from /results#top to /view#top\n     * this.router.navigate(['/view'], { preserveFragment: true });\n     * ```\n     * @type {?|undefined}\n     */\n    NavigationExtras.prototype.preserveFragment;\n    /**\n     * Navigates without pushing a new state into history.\n     *\n     * ```\n     * // Navigate silently to /view\n     * this.router.navigate(['/view'], { skipLocationChange: true });\n     * ```\n     * @type {?|undefined}\n     */\n    NavigationExtras.prototype.skipLocationChange;\n    /**\n     * Navigates while replacing the current state in history.\n     *\n     * ```\n     * // Navigate to /view\n     * this.router.navigate(['/view'], { replaceUrl: true });\n     * ```\n     * @type {?|undefined}\n     */\n    NavigationExtras.prototype.replaceUrl;\n}\n/**\n * @param {?} error\n * @return {?}\n */\nfunction defaultErrorHandler(error) {\n    throw error;\n}\n/**\n * \\@internal\n * @param {?} snapshot\n * @return {?}\n */\nfunction defaultRouterHook(snapshot) {\n    return /** @type {?} */ (of(null));\n}\n/**\n * \\@whatItDoes Provides the navigation and url manipulation capabilities.\n *\n * See {\\@link Routes} for more details and examples.\n *\n * \\@ngModule RouterModule\n *\n * \\@stable\n */\nvar /**\n * \\@whatItDoes Provides the navigation and url manipulation capabilities.\n *\n * See {\\@link Routes} for more details and examples.\n *\n * \\@ngModule RouterModule\n *\n * \\@stable\n */\nRouter = /** @class */ (function () {\n    /**\n     * Creates the router service.\n     */\n    // TODO: vsavkin make internal after the final is out.\n    function Router(rootComponentType, urlSerializer, rootContexts, location, injector, loader, compiler, config) {\n        var _this = this;\n        this.rootComponentType = rootComponentType;\n        this.urlSerializer = urlSerializer;\n        this.rootContexts = rootContexts;\n        this.location = location;\n        this.config = config;\n        this.navigations = new BehaviorSubject(/** @type {?} */ ((null)));\n        this.navigationId = 0;\n        this.events = new Subject();\n        /**\n         * Error handler that is invoked when a navigation errors.\n         *\n         * See {\\@link ErrorHandler} for more information.\n         */\n        this.errorHandler = defaultErrorHandler;\n        /**\n         * Indicates if at least one navigation happened.\n         */\n        this.navigated = false;\n        this.lastSuccessfulId = -1;\n        /**\n         * Used by RouterModule. This allows us to\n         * pause the navigation either before preactivation or after it.\n         * \\@internal\n         */\n        this.hooks = {\n            beforePreactivation: defaultRouterHook,\n            afterPreactivation: defaultRouterHook\n        };\n        /**\n         * Extracts and merges URLs. Used for AngularJS to Angular migrations.\n         */\n        this.urlHandlingStrategy = new DefaultUrlHandlingStrategy();\n        this.routeReuseStrategy = new DefaultRouteReuseStrategy();\n        /**\n         * Define what the router should do if it receives a navigation request to the current URL.\n         * By default, the router will ignore this navigation. However, this prevents features such\n         * as a \"refresh\" button. Use this option to configure the behavior when navigating to the\n         * current URL. Default is 'ignore'.\n         */\n        this.onSameUrlNavigation = 'ignore';\n        /**\n         * Defines how the router merges params, data and resolved data from parent to child\n         * routes. Available options are:\n         *\n         * - `'emptyOnly'`, the default, only inherits parent params for path-less or component-less\n         *   routes.\n         * - `'always'`, enables unconditional inheritance of parent params.\n         */\n        this.paramsInheritanceStrategy = 'emptyOnly';\n        var /** @type {?} */ onLoadStart = function (r) { return _this.triggerEvent(new RouteConfigLoadStart(r)); };\n        var /** @type {?} */ onLoadEnd = function (r) { return _this.triggerEvent(new RouteConfigLoadEnd(r)); };\n        this.ngModule = injector.get(NgModuleRef);\n        this.resetConfig(config);\n        this.currentUrlTree = createEmptyUrlTree();\n        this.rawUrlTree = this.currentUrlTree;\n        this.configLoader = new RouterConfigLoader(loader, compiler, onLoadStart, onLoadEnd);\n        this.routerState = createEmptyState(this.currentUrlTree, this.rootComponentType);\n        this.processNavigations();\n    }\n    /**\n     * @internal\n     * TODO: this should be removed once the constructor of the router made internal\n     */\n    /**\n     * \\@internal\n     * TODO: this should be removed once the constructor of the router made internal\n     * @param {?} rootComponentType\n     * @return {?}\n     */\n    Router.prototype.resetRootComponentType = /**\n     * \\@internal\n     * TODO: this should be removed once the constructor of the router made internal\n     * @param {?} rootComponentType\n     * @return {?}\n     */\n    function (rootComponentType) {\n        this.rootComponentType = rootComponentType;\n        // TODO: vsavkin router 4.0 should make the root component set to null\n        // this will simplify the lifecycle of the router.\n        this.routerState.root.component = this.rootComponentType;\n    };\n    /**\n     * Sets up the location change listener and performs the initial navigation.\n     */\n    /**\n     * Sets up the location change listener and performs the initial navigation.\n     * @return {?}\n     */\n    Router.prototype.initialNavigation = /**\n     * Sets up the location change listener and performs the initial navigation.\n     * @return {?}\n     */\n    function () {\n        this.setUpLocationChangeListener();\n        if (this.navigationId === 0) {\n            this.navigateByUrl(this.location.path(true), { replaceUrl: true });\n        }\n    };\n    /**\n     * Sets up the location change listener.\n     */\n    /**\n     * Sets up the location change listener.\n     * @return {?}\n     */\n    Router.prototype.setUpLocationChangeListener = /**\n     * Sets up the location change listener.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // Don't need to use Zone.wrap any more, because zone.js\n        // already patch onPopState, so location change callback will\n        // run into ngZone\n        if (!this.locationSubscription) {\n            this.locationSubscription = /** @type {?} */ (this.location.subscribe(function (change) {\n                var /** @type {?} */ rawUrlTree = _this.urlSerializer.parse(change['url']);\n                var /** @type {?} */ source = change['type'] === 'popstate' ? 'popstate' : 'hashchange';\n                var /** @type {?} */ state = change.state && change.state.navigationId ?\n                    { navigationId: change.state.navigationId } :\n                    null;\n                setTimeout(function () { _this.scheduleNavigation(rawUrlTree, source, state, { replaceUrl: true }); }, 0);\n            }));\n        }\n    };\n    Object.defineProperty(Router.prototype, \"url\", {\n        /** The current url */\n        get: /**\n         * The current url\n         * @return {?}\n         */\n        function () { return this.serializeUrl(this.currentUrlTree); },\n        enumerable: true,\n        configurable: true\n    });\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} e\n     * @return {?}\n     */\n    Router.prototype.triggerEvent = /**\n     * \\@internal\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) { (/** @type {?} */ (this.events)).next(e); };\n    /**\n     * Resets the configuration used for navigation and generating links.\n     *\n     * ### Usage\n     *\n     * ```\n     * router.resetConfig([\n     *  { path: 'team/:id', component: TeamCmp, children: [\n     *    { path: 'simple', component: SimpleCmp },\n     *    { path: 'user/:name', component: UserCmp }\n     *  ]}\n     * ]);\n     * ```\n     */\n    /**\n     * Resets the configuration used for navigation and generating links.\n     *\n     * ### Usage\n     *\n     * ```\n     * router.resetConfig([\n     *  { path: 'team/:id', component: TeamCmp, children: [\n     *    { path: 'simple', component: SimpleCmp },\n     *    { path: 'user/:name', component: UserCmp }\n     *  ]}\n     * ]);\n     * ```\n     * @param {?} config\n     * @return {?}\n     */\n    Router.prototype.resetConfig = /**\n     * Resets the configuration used for navigation and generating links.\n     *\n     * ### Usage\n     *\n     * ```\n     * router.resetConfig([\n     *  { path: 'team/:id', component: TeamCmp, children: [\n     *    { path: 'simple', component: SimpleCmp },\n     *    { path: 'user/:name', component: UserCmp }\n     *  ]}\n     * ]);\n     * ```\n     * @param {?} config\n     * @return {?}\n     */\n    function (config) {\n        validateConfig(config);\n        this.config = config.map(copyConfig);\n        this.navigated = false;\n        this.lastSuccessfulId = -1;\n    };\n    /** @docsNotRequired */\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    Router.prototype.ngOnDestroy = /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    function () { this.dispose(); };\n    /** Disposes of the router */\n    /**\n     * Disposes of the router\n     * @return {?}\n     */\n    Router.prototype.dispose = /**\n     * Disposes of the router\n     * @return {?}\n     */\n    function () {\n        if (this.locationSubscription) {\n            this.locationSubscription.unsubscribe();\n            this.locationSubscription = /** @type {?} */ ((null));\n        }\n    };\n    /**\n     * Applies an array of commands to the current url tree and creates a new url tree.\n     *\n     * When given an activate route, applies the given commands starting from the route.\n     * When not given a route, applies the given command starting from the root.\n     *\n     * ### Usage\n     *\n     * ```\n     * // create /team/33/user/11\n     * router.createUrlTree(['/team', 33, 'user', 11]);\n     *\n     * // create /team/33;expand=true/user/11\n     * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n     *\n     * // you can collapse static segments like this (this works only with the first passed-in value):\n     * router.createUrlTree(['/team/33/user', userId]);\n     *\n     * // If the first segment can contain slashes, and you do not want the router to split it, you\n     * // can do the following:\n     *\n     * router.createUrlTree([{segmentPath: '/one/two'}]);\n     *\n     * // create /team/33/(user/11//right:chat)\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n     *\n     * // remove the right secondary node\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n     *\n     * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n     *\n     * // navigate to /team/33/user/11/details\n     * router.createUrlTree(['details'], {relativeTo: route});\n     *\n     * // navigate to /team/33/user/22\n     * router.createUrlTree(['../22'], {relativeTo: route});\n     *\n     * // navigate to /team/44/user/22\n     * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n     * ```\n     */\n    /**\n     * Applies an array of commands to the current url tree and creates a new url tree.\n     *\n     * When given an activate route, applies the given commands starting from the route.\n     * When not given a route, applies the given command starting from the root.\n     *\n     * ### Usage\n     *\n     * ```\n     * // create /team/33/user/11\n     * router.createUrlTree(['/team', 33, 'user', 11]);\n     *\n     * // create /team/33;expand=true/user/11\n     * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n     *\n     * // you can collapse static segments like this (this works only with the first passed-in value):\n     * router.createUrlTree(['/team/33/user', userId]);\n     *\n     * // If the first segment can contain slashes, and you do not want the router to split it, you\n     * // can do the following:\n     *\n     * router.createUrlTree([{segmentPath: '/one/two'}]);\n     *\n     * // create /team/33/(user/11//right:chat)\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n     *\n     * // remove the right secondary node\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n     *\n     * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n     *\n     * // navigate to /team/33/user/11/details\n     * router.createUrlTree(['details'], {relativeTo: route});\n     *\n     * // navigate to /team/33/user/22\n     * router.createUrlTree(['../22'], {relativeTo: route});\n     *\n     * // navigate to /team/44/user/22\n     * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n     * ```\n     * @param {?} commands\n     * @param {?=} navigationExtras\n     * @return {?}\n     */\n    Router.prototype.createUrlTree = /**\n     * Applies an array of commands to the current url tree and creates a new url tree.\n     *\n     * When given an activate route, applies the given commands starting from the route.\n     * When not given a route, applies the given command starting from the root.\n     *\n     * ### Usage\n     *\n     * ```\n     * // create /team/33/user/11\n     * router.createUrlTree(['/team', 33, 'user', 11]);\n     *\n     * // create /team/33;expand=true/user/11\n     * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n     *\n     * // you can collapse static segments like this (this works only with the first passed-in value):\n     * router.createUrlTree(['/team/33/user', userId]);\n     *\n     * // If the first segment can contain slashes, and you do not want the router to split it, you\n     * // can do the following:\n     *\n     * router.createUrlTree([{segmentPath: '/one/two'}]);\n     *\n     * // create /team/33/(user/11//right:chat)\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n     *\n     * // remove the right secondary node\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n     *\n     * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n     *\n     * // navigate to /team/33/user/11/details\n     * router.createUrlTree(['details'], {relativeTo: route});\n     *\n     * // navigate to /team/33/user/22\n     * router.createUrlTree(['../22'], {relativeTo: route});\n     *\n     * // navigate to /team/44/user/22\n     * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n     * ```\n     * @param {?} commands\n     * @param {?=} navigationExtras\n     * @return {?}\n     */\n    function (commands, navigationExtras) {\n        if (navigationExtras === void 0) { navigationExtras = {}; }\n        var relativeTo = navigationExtras.relativeTo, queryParams = navigationExtras.queryParams, fragment = navigationExtras.fragment, preserveQueryParams = navigationExtras.preserveQueryParams, queryParamsHandling = navigationExtras.queryParamsHandling, preserveFragment = navigationExtras.preserveFragment;\n        if (isDevMode() && preserveQueryParams && /** @type {?} */ (console) && /** @type {?} */ (console.warn)) {\n            console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\n        }\n        var /** @type {?} */ a = relativeTo || this.routerState.root;\n        var /** @type {?} */ f = preserveFragment ? this.currentUrlTree.fragment : fragment;\n        var /** @type {?} */ q = null;\n        if (queryParamsHandling) {\n            switch (queryParamsHandling) {\n                case 'merge':\n                    q = tslib_1.__assign({}, this.currentUrlTree.queryParams, queryParams);\n                    break;\n                case 'preserve':\n                    q = this.currentUrlTree.queryParams;\n                    break;\n                default:\n                    q = queryParams || null;\n            }\n        }\n        else {\n            q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams || null;\n        }\n        if (q !== null) {\n            q = this.removeEmptyProps(q);\n        }\n        return createUrlTree(a, this.currentUrlTree, commands, /** @type {?} */ ((q)), /** @type {?} */ ((f)));\n    };\n    /**\n     * Navigate based on the provided url. This navigation is always absolute.\n     *\n     * Returns a promise that:\n     * - resolves to 'true' when navigation succeeds,\n     * - resolves to 'false' when navigation fails,\n     * - is rejected when an error happens.\n     *\n     * ### Usage\n     *\n     * ```\n     * router.navigateByUrl(\"/team/33/user/11\");\n     *\n     * // Navigate without updating the URL\n     * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n     * ```\n     *\n     * In opposite to `navigate`, `navigateByUrl` takes a whole URL\n     * and does not apply any delta to the current one.\n     */\n    /**\n     * Navigate based on the provided url. This navigation is always absolute.\n     *\n     * Returns a promise that:\n     * - resolves to 'true' when navigation succeeds,\n     * - resolves to 'false' when navigation fails,\n     * - is rejected when an error happens.\n     *\n     * ### Usage\n     *\n     * ```\n     * router.navigateByUrl(\"/team/33/user/11\");\n     *\n     * // Navigate without updating the URL\n     * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n     * ```\n     *\n     * In opposite to `navigate`, `navigateByUrl` takes a whole URL\n     * and does not apply any delta to the current one.\n     * @param {?} url\n     * @param {?=} extras\n     * @return {?}\n     */\n    Router.prototype.navigateByUrl = /**\n     * Navigate based on the provided url. This navigation is always absolute.\n     *\n     * Returns a promise that:\n     * - resolves to 'true' when navigation succeeds,\n     * - resolves to 'false' when navigation fails,\n     * - is rejected when an error happens.\n     *\n     * ### Usage\n     *\n     * ```\n     * router.navigateByUrl(\"/team/33/user/11\");\n     *\n     * // Navigate without updating the URL\n     * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n     * ```\n     *\n     * In opposite to `navigate`, `navigateByUrl` takes a whole URL\n     * and does not apply any delta to the current one.\n     * @param {?} url\n     * @param {?=} extras\n     * @return {?}\n     */\n    function (url, extras) {\n        if (extras === void 0) { extras = { skipLocationChange: false }; }\n        var /** @type {?} */ urlTree = url instanceof UrlTree ? url : this.parseUrl(url);\n        var /** @type {?} */ mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);\n        return this.scheduleNavigation(mergedTree, 'imperative', null, extras);\n    };\n    /**\n     * Navigate based on the provided array of commands and a starting point.\n     * If no starting route is provided, the navigation is absolute.\n     *\n     * Returns a promise that:\n     * - resolves to 'true' when navigation succeeds,\n     * - resolves to 'false' when navigation fails,\n     * - is rejected when an error happens.\n     *\n     * ### Usage\n     *\n     * ```\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n     *\n     * // Navigate without updating the URL\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n     * ```\n     *\n     * In opposite to `navigateByUrl`, `navigate` always takes a delta that is applied to the current\n     * URL.\n     */\n    /**\n     * Navigate based on the provided array of commands and a starting point.\n     * If no starting route is provided, the navigation is absolute.\n     *\n     * Returns a promise that:\n     * - resolves to 'true' when navigation succeeds,\n     * - resolves to 'false' when navigation fails,\n     * - is rejected when an error happens.\n     *\n     * ### Usage\n     *\n     * ```\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n     *\n     * // Navigate without updating the URL\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n     * ```\n     *\n     * In opposite to `navigateByUrl`, `navigate` always takes a delta that is applied to the current\n     * URL.\n     * @param {?} commands\n     * @param {?=} extras\n     * @return {?}\n     */\n    Router.prototype.navigate = /**\n     * Navigate based on the provided array of commands and a starting point.\n     * If no starting route is provided, the navigation is absolute.\n     *\n     * Returns a promise that:\n     * - resolves to 'true' when navigation succeeds,\n     * - resolves to 'false' when navigation fails,\n     * - is rejected when an error happens.\n     *\n     * ### Usage\n     *\n     * ```\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n     *\n     * // Navigate without updating the URL\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n     * ```\n     *\n     * In opposite to `navigateByUrl`, `navigate` always takes a delta that is applied to the current\n     * URL.\n     * @param {?} commands\n     * @param {?=} extras\n     * @return {?}\n     */\n    function (commands, extras) {\n        if (extras === void 0) { extras = { skipLocationChange: false }; }\n        validateCommands(commands);\n        return this.navigateByUrl(this.createUrlTree(commands, extras), extras);\n    };\n    /** Serializes a {@link UrlTree} into a string */\n    /**\n     * Serializes a {\\@link UrlTree} into a string\n     * @param {?} url\n     * @return {?}\n     */\n    Router.prototype.serializeUrl = /**\n     * Serializes a {\\@link UrlTree} into a string\n     * @param {?} url\n     * @return {?}\n     */\n    function (url) { return this.urlSerializer.serialize(url); };\n    /** Parses a string into a {@link UrlTree} */\n    /**\n     * Parses a string into a {\\@link UrlTree}\n     * @param {?} url\n     * @return {?}\n     */\n    Router.prototype.parseUrl = /**\n     * Parses a string into a {\\@link UrlTree}\n     * @param {?} url\n     * @return {?}\n     */\n    function (url) { return this.urlSerializer.parse(url); };\n    /** Returns whether the url is activated */\n    /**\n     * Returns whether the url is activated\n     * @param {?} url\n     * @param {?} exact\n     * @return {?}\n     */\n    Router.prototype.isActive = /**\n     * Returns whether the url is activated\n     * @param {?} url\n     * @param {?} exact\n     * @return {?}\n     */\n    function (url, exact) {\n        if (url instanceof UrlTree) {\n            return containsTree(this.currentUrlTree, url, exact);\n        }\n        var /** @type {?} */ urlTree = this.urlSerializer.parse(url);\n        return containsTree(this.currentUrlTree, urlTree, exact);\n    };\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    Router.prototype.removeEmptyProps = /**\n     * @param {?} params\n     * @return {?}\n     */\n    function (params) {\n        return Object.keys(params).reduce(function (result, key) {\n            var /** @type {?} */ value = params[key];\n            if (value !== null && value !== undefined) {\n                result[key] = value;\n            }\n            return result;\n        }, {});\n    };\n    /**\n     * @return {?}\n     */\n    Router.prototype.processNavigations = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        concatMap\n            .call(this.navigations, function (nav) {\n            if (nav) {\n                _this.executeScheduledNavigation(nav);\n                // a failed navigation should not stop the router from processing\n                // further navigations => the catch\n                return nav.promise.catch(function () { });\n            }\n            else {\n                return /** @type {?} */ (of(null));\n            }\n        })\n            .subscribe(function () { });\n    };\n    /**\n     * @param {?} rawUrl\n     * @param {?} source\n     * @param {?} state\n     * @param {?} extras\n     * @return {?}\n     */\n    Router.prototype.scheduleNavigation = /**\n     * @param {?} rawUrl\n     * @param {?} source\n     * @param {?} state\n     * @param {?} extras\n     * @return {?}\n     */\n    function (rawUrl, source, state, extras) {\n        var /** @type {?} */ lastNavigation = this.navigations.value;\n        // If the user triggers a navigation imperatively (e.g., by using navigateByUrl),\n        // and that navigation results in 'replaceState' that leads to the same URL,\n        // we should skip those.\n        if (lastNavigation && source !== 'imperative' && lastNavigation.source === 'imperative' &&\n            lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n            return Promise.resolve(true); // return value is not used\n        }\n        // Because of a bug in IE and Edge, the location class fires two events (popstate and\n        // hashchange) every single time. The second one should be ignored. Otherwise, the URL will\n        // flicker. Handles the case when a popstate was emitted first.\n        if (lastNavigation && source == 'hashchange' && lastNavigation.source === 'popstate' &&\n            lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n            return Promise.resolve(true); // return value is not used\n        }\n        // Because of a bug in IE and Edge, the location class fires two events (popstate and\n        // hashchange) every single time. The second one should be ignored. Otherwise, the URL will\n        // flicker. Handles the case when a hashchange was emitted first.\n        if (lastNavigation && source == 'popstate' && lastNavigation.source === 'hashchange' &&\n            lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n            return Promise.resolve(true); // return value is not used\n        }\n        var /** @type {?} */ resolve = null;\n        var /** @type {?} */ reject = null;\n        var /** @type {?} */ promise = new Promise(function (res, rej) {\n            resolve = res;\n            reject = rej;\n        });\n        var /** @type {?} */ id = ++this.navigationId;\n        this.navigations.next({ id: id, source: source, state: state, rawUrl: rawUrl, extras: extras, resolve: resolve, reject: reject, promise: promise });\n        // Make sure that the error is propagated even though `processNavigations` catch\n        // handler does not rethrow\n        return promise.catch(function (e) { return Promise.reject(e); });\n    };\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    Router.prototype.executeScheduledNavigation = /**\n     * @param {?} __0\n     * @return {?}\n     */\n    function (_a) {\n        var _this = this;\n        var id = _a.id, rawUrl = _a.rawUrl, extras = _a.extras, resolve = _a.resolve, reject = _a.reject, source = _a.source, state = _a.state;\n        var /** @type {?} */ url = this.urlHandlingStrategy.extract(rawUrl);\n        var /** @type {?} */ urlTransition = !this.navigated || url.toString() !== this.currentUrlTree.toString();\n        if ((this.onSameUrlNavigation === 'reload' ? true : urlTransition) &&\n            this.urlHandlingStrategy.shouldProcessUrl(rawUrl)) {\n            (/** @type {?} */ (this.events))\n                .next(new NavigationStart(id, this.serializeUrl(url), source, state));\n            Promise.resolve()\n                .then(function (_) {\n                return _this.runNavigate(url, rawUrl, !!extras.skipLocationChange, !!extras.replaceUrl, id, null);\n            })\n                .then(resolve, reject);\n            // we cannot process the current URL, but we could process the previous one =>\n            // we need to do some cleanup\n        }\n        else if (urlTransition && this.rawUrlTree &&\n            this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree)) {\n            (/** @type {?} */ (this.events))\n                .next(new NavigationStart(id, this.serializeUrl(url), source, state));\n            Promise.resolve()\n                .then(function (_) {\n                return _this.runNavigate(url, rawUrl, false, false, id, createEmptyState(url, _this.rootComponentType).snapshot);\n            })\n                .then(resolve, reject);\n        }\n        else {\n            this.rawUrlTree = rawUrl;\n            resolve(null);\n        }\n    };\n    /**\n     * @param {?} url\n     * @param {?} rawUrl\n     * @param {?} skipLocationChange\n     * @param {?} replaceUrl\n     * @param {?} id\n     * @param {?} precreatedState\n     * @return {?}\n     */\n    Router.prototype.runNavigate = /**\n     * @param {?} url\n     * @param {?} rawUrl\n     * @param {?} skipLocationChange\n     * @param {?} replaceUrl\n     * @param {?} id\n     * @param {?} precreatedState\n     * @return {?}\n     */\n    function (url, rawUrl, skipLocationChange, replaceUrl, id, precreatedState) {\n        var _this = this;\n        if (id !== this.navigationId) {\n            (/** @type {?} */ (this.events))\n                .next(new NavigationCancel(id, this.serializeUrl(url), \"Navigation ID \" + id + \" is not equal to the current navigation id \" + this.navigationId));\n            return Promise.resolve(false);\n        }\n        return new Promise(function (resolvePromise, rejectPromise) {\n            // create an observable of the url and route state snapshot\n            // this operation do not result in any side effects\n            var /** @type {?} */ urlAndSnapshot$;\n            if (!precreatedState) {\n                var /** @type {?} */ moduleInjector = _this.ngModule.injector;\n                var /** @type {?} */ redirectsApplied$ = applyRedirects(moduleInjector, _this.configLoader, _this.urlSerializer, url, _this.config);\n                urlAndSnapshot$ = mergeMap.call(redirectsApplied$, function (appliedUrl) {\n                    return map.call(recognize(_this.rootComponentType, _this.config, appliedUrl, _this.serializeUrl(appliedUrl), _this.paramsInheritanceStrategy), function (snapshot) {\n                        (/** @type {?} */ (_this.events))\n                            .next(new RoutesRecognized(id, _this.serializeUrl(url), _this.serializeUrl(appliedUrl), snapshot));\n                        return { appliedUrl: appliedUrl, snapshot: snapshot };\n                    });\n                });\n            }\n            else {\n                urlAndSnapshot$ = of({ appliedUrl: url, snapshot: precreatedState });\n            }\n            var /** @type {?} */ beforePreactivationDone$ = mergeMap.call(urlAndSnapshot$, function (p) {\n                return map.call(_this.hooks.beforePreactivation(p.snapshot), function () { return p; });\n            });\n            // run preactivation: guards and data resolvers\n            var /** @type {?} */ preActivation;\n            var /** @type {?} */ preactivationSetup$ = map.call(beforePreactivationDone$, function (_a) {\n                var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot;\n                var /** @type {?} */ moduleInjector = _this.ngModule.injector;\n                preActivation = new PreActivation(snapshot, _this.routerState.snapshot, moduleInjector, function (evt) { return _this.triggerEvent(evt); });\n                preActivation.initialize(_this.rootContexts);\n                return { appliedUrl: appliedUrl, snapshot: snapshot };\n            });\n            var /** @type {?} */ preactivationCheckGuards$ = mergeMap.call(preactivationSetup$, function (_a) {\n                var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot;\n                if (_this.navigationId !== id)\n                    return of(false);\n                _this.triggerEvent(new GuardsCheckStart(id, _this.serializeUrl(url), appliedUrl, snapshot));\n                return map.call(preActivation.checkGuards(), function (shouldActivate) {\n                    _this.triggerEvent(new GuardsCheckEnd(id, _this.serializeUrl(url), appliedUrl, snapshot, shouldActivate));\n                    return { appliedUrl: appliedUrl, snapshot: snapshot, shouldActivate: shouldActivate };\n                });\n            });\n            var /** @type {?} */ preactivationResolveData$ = mergeMap.call(preactivationCheckGuards$, function (p) {\n                if (_this.navigationId !== id)\n                    return of(false);\n                if (p.shouldActivate && preActivation.isActivating()) {\n                    _this.triggerEvent(new ResolveStart(id, _this.serializeUrl(url), p.appliedUrl, p.snapshot));\n                    return map.call(preActivation.resolveData(_this.paramsInheritanceStrategy), function () {\n                        _this.triggerEvent(new ResolveEnd(id, _this.serializeUrl(url), p.appliedUrl, p.snapshot));\n                        return p;\n                    });\n                }\n                else {\n                    return of(p);\n                }\n            });\n            var /** @type {?} */ preactivationDone$ = mergeMap.call(preactivationResolveData$, function (p) {\n                return map.call(_this.hooks.afterPreactivation(p.snapshot), function () { return p; });\n            });\n            // create router state\n            // this operation has side effects => route state is being affected\n            var /** @type {?} */ routerState$ = map.call(preactivationDone$, function (_a) {\n                var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot, shouldActivate = _a.shouldActivate;\n                if (shouldActivate) {\n                    var /** @type {?} */ state = createRouterState(_this.routeReuseStrategy, snapshot, _this.routerState);\n                    return { appliedUrl: appliedUrl, state: state, shouldActivate: shouldActivate };\n                }\n                else {\n                    return { appliedUrl: appliedUrl, state: null, shouldActivate: shouldActivate };\n                }\n            });\n            _this.activateRoutes(routerState$, _this.routerState, _this.currentUrlTree, id, url, rawUrl, skipLocationChange, replaceUrl, resolvePromise, rejectPromise);\n        });\n    };\n    /**\n     * Performs the logic of activating routes. This is a synchronous process by default. While this\n     * is a private method, it could be overridden to make activation asynchronous.\n     * @param {?} state\n     * @param {?} storedState\n     * @param {?} storedUrl\n     * @param {?} id\n     * @param {?} url\n     * @param {?} rawUrl\n     * @param {?} skipLocationChange\n     * @param {?} replaceUrl\n     * @param {?} resolvePromise\n     * @param {?} rejectPromise\n     * @return {?}\n     */\n    Router.prototype.activateRoutes = /**\n     * Performs the logic of activating routes. This is a synchronous process by default. While this\n     * is a private method, it could be overridden to make activation asynchronous.\n     * @param {?} state\n     * @param {?} storedState\n     * @param {?} storedUrl\n     * @param {?} id\n     * @param {?} url\n     * @param {?} rawUrl\n     * @param {?} skipLocationChange\n     * @param {?} replaceUrl\n     * @param {?} resolvePromise\n     * @param {?} rejectPromise\n     * @return {?}\n     */\n    function (state, storedState, storedUrl, id, url, rawUrl, skipLocationChange, replaceUrl, resolvePromise, rejectPromise) {\n        var _this = this;\n        // applied the new router state\n        // this operation has side effects\n        var /** @type {?} */ navigationIsSuccessful;\n        state\n            .forEach(function (_a) {\n            var appliedUrl = _a.appliedUrl, state = _a.state, shouldActivate = _a.shouldActivate;\n            if (!shouldActivate || id !== _this.navigationId) {\n                navigationIsSuccessful = false;\n                return;\n            }\n            _this.currentUrlTree = appliedUrl;\n            _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);\n            (/** @type {?} */ (_this)).routerState = state;\n            if (!skipLocationChange) {\n                var /** @type {?} */ path = _this.urlSerializer.serialize(_this.rawUrlTree);\n                if (_this.location.isCurrentPathEqualTo(path) || replaceUrl) {\n                    _this.location.replaceState(path, '', { navigationId: id });\n                }\n                else {\n                    _this.location.go(path, '', { navigationId: id });\n                }\n            }\n            new ActivateRoutes(_this.routeReuseStrategy, state, storedState, function (evt) { return _this.triggerEvent(evt); })\n                .activate(_this.rootContexts);\n            navigationIsSuccessful = true;\n        })\n            .then(function () {\n            if (navigationIsSuccessful) {\n                _this.navigated = true;\n                _this.lastSuccessfulId = id;\n                (/** @type {?} */ (_this.events))\n                    .next(new NavigationEnd(id, _this.serializeUrl(url), _this.serializeUrl(_this.currentUrlTree)));\n                resolvePromise(true);\n            }\n            else {\n                _this.resetUrlToCurrentUrlTree();\n                (/** @type {?} */ (_this.events))\n                    .next(new NavigationCancel(id, _this.serializeUrl(url), ''));\n                resolvePromise(false);\n            }\n        }, function (e) {\n            if (isNavigationCancelingError(e)) {\n                _this.navigated = true;\n                _this.resetStateAndUrl(storedState, storedUrl, rawUrl);\n                (/** @type {?} */ (_this.events))\n                    .next(new NavigationCancel(id, _this.serializeUrl(url), e.message));\n                resolvePromise(false);\n            }\n            else {\n                _this.resetStateAndUrl(storedState, storedUrl, rawUrl);\n                (/** @type {?} */ (_this.events))\n                    .next(new NavigationError(id, _this.serializeUrl(url), e));\n                try {\n                    resolvePromise(_this.errorHandler(e));\n                }\n                catch (/** @type {?} */ ee) {\n                    rejectPromise(ee);\n                }\n            }\n        });\n    };\n    /**\n     * @param {?} storedState\n     * @param {?} storedUrl\n     * @param {?} rawUrl\n     * @return {?}\n     */\n    Router.prototype.resetStateAndUrl = /**\n     * @param {?} storedState\n     * @param {?} storedUrl\n     * @param {?} rawUrl\n     * @return {?}\n     */\n    function (storedState, storedUrl, rawUrl) {\n        (/** @type {?} */ (this)).routerState = storedState;\n        this.currentUrlTree = storedUrl;\n        this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, rawUrl);\n        this.resetUrlToCurrentUrlTree();\n    };\n    /**\n     * @return {?}\n     */\n    Router.prototype.resetUrlToCurrentUrlTree = /**\n     * @return {?}\n     */\n    function () {\n        this.location.replaceState(this.urlSerializer.serialize(this.rawUrlTree), '', { navigationId: this.lastSuccessfulId });\n    };\n    return Router;\n}());\n/**\n * \\@whatItDoes Provides the navigation and url manipulation capabilities.\n *\n * See {\\@link Routes} for more details and examples.\n *\n * \\@ngModule RouterModule\n *\n * \\@stable\n */\nexport { Router };\nfunction Router_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Router.prototype.currentUrlTree;\n    /** @type {?} */\n    Router.prototype.rawUrlTree;\n    /** @type {?} */\n    Router.prototype.navigations;\n    /** @type {?} */\n    Router.prototype.locationSubscription;\n    /** @type {?} */\n    Router.prototype.navigationId;\n    /** @type {?} */\n    Router.prototype.configLoader;\n    /** @type {?} */\n    Router.prototype.ngModule;\n    /** @type {?} */\n    Router.prototype.events;\n    /** @type {?} */\n    Router.prototype.routerState;\n    /**\n     * Error handler that is invoked when a navigation errors.\n     *\n     * See {\\@link ErrorHandler} for more information.\n     * @type {?}\n     */\n    Router.prototype.errorHandler;\n    /**\n     * Indicates if at least one navigation happened.\n     * @type {?}\n     */\n    Router.prototype.navigated;\n    /** @type {?} */\n    Router.prototype.lastSuccessfulId;\n    /**\n     * Used by RouterModule. This allows us to\n     * pause the navigation either before preactivation or after it.\n     * \\@internal\n     * @type {?}\n     */\n    Router.prototype.hooks;\n    /**\n     * Extracts and merges URLs. Used for AngularJS to Angular migrations.\n     * @type {?}\n     */\n    Router.prototype.urlHandlingStrategy;\n    /** @type {?} */\n    Router.prototype.routeReuseStrategy;\n    /**\n     * Define what the router should do if it receives a navigation request to the current URL.\n     * By default, the router will ignore this navigation. However, this prevents features such\n     * as a \"refresh\" button. Use this option to configure the behavior when navigating to the\n     * current URL. Default is 'ignore'.\n     * @type {?}\n     */\n    Router.prototype.onSameUrlNavigation;\n    /**\n     * Defines how the router merges params, data and resolved data from parent to child\n     * routes. Available options are:\n     *\n     * - `'emptyOnly'`, the default, only inherits parent params for path-less or component-less\n     *   routes.\n     * - `'always'`, enables unconditional inheritance of parent params.\n     * @type {?}\n     */\n    Router.prototype.paramsInheritanceStrategy;\n    /** @type {?} */\n    Router.prototype.rootComponentType;\n    /** @type {?} */\n    Router.prototype.urlSerializer;\n    /** @type {?} */\n    Router.prototype.rootContexts;\n    /** @type {?} */\n    Router.prototype.location;\n    /** @type {?} */\n    Router.prototype.config;\n}\nvar ActivateRoutes = /** @class */ (function () {\n    function ActivateRoutes(routeReuseStrategy, futureState, currState, forwardEvent) {\n        this.routeReuseStrategy = routeReuseStrategy;\n        this.futureState = futureState;\n        this.currState = currState;\n        this.forwardEvent = forwardEvent;\n    }\n    /**\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    ActivateRoutes.prototype.activate = /**\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    function (parentContexts) {\n        var /** @type {?} */ futureRoot = this.futureState._root;\n        var /** @type {?} */ currRoot = this.currState ? this.currState._root : null;\n        this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);\n        advanceActivatedRoute(this.futureState.root);\n        this.activateChildRoutes(futureRoot, currRoot, parentContexts);\n    };\n    /**\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} contexts\n     * @return {?}\n     */\n    ActivateRoutes.prototype.deactivateChildRoutes = /**\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} contexts\n     * @return {?}\n     */\n    function (futureNode, currNode, contexts) {\n        var _this = this;\n        var /** @type {?} */ children = nodeChildrenAsMap(currNode);\n        // Recurse on the routes active in the future state to de-activate deeper children\n        futureNode.children.forEach(function (futureChild) {\n            var /** @type {?} */ childOutletName = futureChild.value.outlet;\n            _this.deactivateRoutes(futureChild, children[childOutletName], contexts);\n            delete children[childOutletName];\n        });\n        // De-activate the routes that will not be re-used\n        forEach(children, function (v, childName) {\n            _this.deactivateRouteAndItsChildren(v, contexts);\n        });\n    };\n    /**\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} parentContext\n     * @return {?}\n     */\n    ActivateRoutes.prototype.deactivateRoutes = /**\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} parentContext\n     * @return {?}\n     */\n    function (futureNode, currNode, parentContext) {\n        var /** @type {?} */ future = futureNode.value;\n        var /** @type {?} */ curr = currNode ? currNode.value : null;\n        if (future === curr) {\n            // Reusing the node, check to see if the children need to be de-activated\n            if (future.component) {\n                // If we have a normal route, we need to go through an outlet.\n                var /** @type {?} */ context = parentContext.getContext(future.outlet);\n                if (context) {\n                    this.deactivateChildRoutes(futureNode, currNode, context.children);\n                }\n            }\n            else {\n                // if we have a componentless route, we recurse but keep the same outlet map.\n                this.deactivateChildRoutes(futureNode, currNode, parentContext);\n            }\n        }\n        else {\n            if (curr) {\n                // Deactivate the current route which will not be re-used\n                this.deactivateRouteAndItsChildren(currNode, parentContext);\n            }\n        }\n    };\n    /**\n     * @param {?} route\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    ActivateRoutes.prototype.deactivateRouteAndItsChildren = /**\n     * @param {?} route\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    function (route, parentContexts) {\n        if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {\n            this.detachAndStoreRouteSubtree(route, parentContexts);\n        }\n        else {\n            this.deactivateRouteAndOutlet(route, parentContexts);\n        }\n    };\n    /**\n     * @param {?} route\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    ActivateRoutes.prototype.detachAndStoreRouteSubtree = /**\n     * @param {?} route\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    function (route, parentContexts) {\n        var /** @type {?} */ context = parentContexts.getContext(route.value.outlet);\n        if (context && context.outlet) {\n            var /** @type {?} */ componentRef = context.outlet.detach();\n            var /** @type {?} */ contexts = context.children.onOutletDeactivated();\n            this.routeReuseStrategy.store(route.value.snapshot, { componentRef: componentRef, route: route, contexts: contexts });\n        }\n    };\n    /**\n     * @param {?} route\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    ActivateRoutes.prototype.deactivateRouteAndOutlet = /**\n     * @param {?} route\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    function (route, parentContexts) {\n        var _this = this;\n        var /** @type {?} */ context = parentContexts.getContext(route.value.outlet);\n        if (context) {\n            var /** @type {?} */ children = nodeChildrenAsMap(route);\n            var /** @type {?} */ contexts_1 = route.value.component ? context.children : parentContexts;\n            forEach(children, function (v, k) { return _this.deactivateRouteAndItsChildren(v, contexts_1); });\n            if (context.outlet) {\n                // Destroy the component\n                context.outlet.deactivate();\n                // Destroy the contexts for all the outlets that were in the component\n                context.children.onOutletDeactivated();\n            }\n        }\n    };\n    /**\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} contexts\n     * @return {?}\n     */\n    ActivateRoutes.prototype.activateChildRoutes = /**\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} contexts\n     * @return {?}\n     */\n    function (futureNode, currNode, contexts) {\n        var _this = this;\n        var /** @type {?} */ children = nodeChildrenAsMap(currNode);\n        futureNode.children.forEach(function (c) {\n            _this.activateRoutes(c, children[c.value.outlet], contexts);\n            _this.forwardEvent(new ActivationEnd(c.value.snapshot));\n        });\n        if (futureNode.children.length) {\n            this.forwardEvent(new ChildActivationEnd(futureNode.value.snapshot));\n        }\n    };\n    /**\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    ActivateRoutes.prototype.activateRoutes = /**\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    function (futureNode, currNode, parentContexts) {\n        var /** @type {?} */ future = futureNode.value;\n        var /** @type {?} */ curr = currNode ? currNode.value : null;\n        advanceActivatedRoute(future);\n        // reusing the node\n        if (future === curr) {\n            if (future.component) {\n                // If we have a normal route, we need to go through an outlet.\n                var /** @type {?} */ context = parentContexts.getOrCreateContext(future.outlet);\n                this.activateChildRoutes(futureNode, currNode, context.children);\n            }\n            else {\n                // if we have a componentless route, we recurse but keep the same outlet map.\n                this.activateChildRoutes(futureNode, currNode, parentContexts);\n            }\n        }\n        else {\n            if (future.component) {\n                // if we have a normal route, we need to place the component into the outlet and recurse.\n                var /** @type {?} */ context = parentContexts.getOrCreateContext(future.outlet);\n                if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {\n                    var /** @type {?} */ stored = (/** @type {?} */ (this.routeReuseStrategy.retrieve(future.snapshot)));\n                    this.routeReuseStrategy.store(future.snapshot, null);\n                    context.children.onOutletReAttached(stored.contexts);\n                    context.attachRef = stored.componentRef;\n                    context.route = stored.route.value;\n                    if (context.outlet) {\n                        // Attach right away when the outlet has already been instantiated\n                        // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated\n                        context.outlet.attach(stored.componentRef, stored.route.value);\n                    }\n                    advanceActivatedRouteNodeAndItsChildren(stored.route);\n                }\n                else {\n                    var /** @type {?} */ config = parentLoadedConfig(future.snapshot);\n                    var /** @type {?} */ cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;\n                    context.route = future;\n                    context.resolver = cmpFactoryResolver;\n                    if (context.outlet) {\n                        // Activate the outlet when it has already been instantiated\n                        // Otherwise it will get activated from its `ngOnInit` when instantiated\n                        context.outlet.activateWith(future, cmpFactoryResolver);\n                    }\n                    this.activateChildRoutes(futureNode, null, context.children);\n                }\n            }\n            else {\n                // if we have a componentless route, we recurse but keep the same outlet map.\n                this.activateChildRoutes(futureNode, null, parentContexts);\n            }\n        }\n    };\n    return ActivateRoutes;\n}());\nfunction ActivateRoutes_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ActivateRoutes.prototype.routeReuseStrategy;\n    /** @type {?} */\n    ActivateRoutes.prototype.futureState;\n    /** @type {?} */\n    ActivateRoutes.prototype.currState;\n    /** @type {?} */\n    ActivateRoutes.prototype.forwardEvent;\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction advanceActivatedRouteNodeAndItsChildren(node) {\n    advanceActivatedRoute(node.value);\n    node.children.forEach(advanceActivatedRouteNodeAndItsChildren);\n}\n/**\n * @param {?} snapshot\n * @return {?}\n */\nfunction parentLoadedConfig(snapshot) {\n    for (var /** @type {?} */ s = snapshot.parent; s; s = s.parent) {\n        var /** @type {?} */ route = s.routeConfig;\n        if (route && route._loadedConfig)\n            return route._loadedConfig;\n        if (route && route.component)\n            return null;\n    }\n    return null;\n}\n/**\n * @param {?} commands\n * @return {?}\n */\nfunction validateCommands(commands) {\n    for (var /** @type {?} */ i = 0; i < commands.length; i++) {\n        var /** @type {?} */ cmd = commands[i];\n        if (cmd == null) {\n            throw new Error(\"The requested path contains \" + cmd + \" segment at index \" + i);\n        }\n    }\n}\n//# sourceMappingURL=router.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { LocationStrategy } from '@angular/common';\nimport { Attribute, Directive, ElementRef, HostBinding, HostListener, Input, Renderer2, isDevMode } from '@angular/core';\nimport { NavigationEnd } from '../events';\nimport { Router } from '../router';\nimport { ActivatedRoute } from '../router_state';\n/**\n * \\@whatItDoes Lets you link to specific parts of your app.\n *\n * \\@howToUse\n *\n * Consider the following route configuration:\n * `[{ path: 'user/:name', component: UserCmp }]`\n *\n * When linking to this `user/:name` route, you can write:\n * `<a routerLink='/user/bob'>link to user component</a>`\n *\n * \\@description\n *\n * The RouterLink directives let you link to specific parts of your app.\n *\n * When the link is static, you can use the directive as follows:\n * `<a routerLink=\"/user/bob\">link to user component</a>`\n *\n * If you use dynamic values to generate the link, you can pass an array of path\n * segments, followed by the params for each segment.\n *\n * For instance `['/team', teamId, 'user', userName, {details: true}]`\n * means that we want to generate a link to `/team/11/user/bob;details=true`.\n *\n * Multiple static segments can be merged into one\n * (e.g., `['/team/11/user', userName, {details: true}]`).\n *\n * The first segment name can be prepended with `/`, `./`, or `../`:\n * * If the first segment begins with `/`, the router will look up the route from the root of the\n *   app.\n * * If the first segment begins with `./`, or doesn't begin with a slash, the router will\n *   instead look in the children of the current activated route.\n * * And if the first segment begins with `../`, the router will go up one level.\n *\n * You can set query params and fragment as follows:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n *   link to user component\n * </a>\n * ```\n * RouterLink will use these to generate this link: `/user/bob#education?debug=true`.\n *\n * (Deprecated in v4.0.0 use `queryParamsHandling` instead) You can also tell the\n * directive to preserve the current query params and fragment:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" preserveQueryParams preserveFragment>\n *   link to user component\n * </a>\n * ```\n *\n * You can tell the directive to how to handle queryParams, available options are:\n *  - `'merge'`: merge the queryParams into the current queryParams\n *  - `'preserve'`: preserve the current queryParams\n *  - default/`''`: use the queryParams only\n *\n * Same options for {\\@link NavigationExtras#queryParamsHandling\n * NavigationExtras#queryParamsHandling}.\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\">\n *   link to user component\n * </a>\n * ```\n *\n * The router link directive always treats the provided input as a delta to the current url.\n *\n * For instance, if the current url is `/user/(box//aux:team)`.\n *\n * Then the following link `<a [routerLink]=\"['/user/jim']\">Jim</a>` will generate the link\n * `/user/(jim//aux:team)`.\n *\n * See {\\@link Router#createUrlTree createUrlTree} for more information.\n *\n * \\@ngModule RouterModule\n *\n * \\@stable\n */\nvar RouterLink = /** @class */ (function () {\n    function RouterLink(router, route, tabIndex, renderer, el) {\n        this.router = router;\n        this.route = route;\n        this.commands = [];\n        if (tabIndex == null) {\n            renderer.setAttribute(el.nativeElement, 'tabindex', '0');\n        }\n    }\n    Object.defineProperty(RouterLink.prototype, \"routerLink\", {\n        set: /**\n         * @param {?} commands\n         * @return {?}\n         */\n        function (commands) {\n            if (commands != null) {\n                this.commands = Array.isArray(commands) ? commands : [commands];\n            }\n            else {\n                this.commands = [];\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RouterLink.prototype, \"preserveQueryParams\", {\n        set: /**\n         * @deprecated 4.0.0 use `queryParamsHandling` instead.\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (isDevMode() && /** @type {?} */ (console) && /** @type {?} */ (console.warn)) {\n                console.warn('preserveQueryParams is deprecated!, use queryParamsHandling instead.');\n            }\n            this.preserve = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    RouterLink.prototype.onClick = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ extras = {\n            skipLocationChange: attrBoolValue(this.skipLocationChange),\n            replaceUrl: attrBoolValue(this.replaceUrl),\n        };\n        this.router.navigateByUrl(this.urlTree, extras);\n        return true;\n    };\n    Object.defineProperty(RouterLink.prototype, \"urlTree\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.router.createUrlTree(this.commands, {\n                relativeTo: this.route,\n                queryParams: this.queryParams,\n                fragment: this.fragment,\n                preserveQueryParams: attrBoolValue(this.preserve),\n                queryParamsHandling: this.queryParamsHandling,\n                preserveFragment: attrBoolValue(this.preserveFragment),\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    RouterLink.decorators = [\n        { type: Directive, args: [{ selector: ':not(a)[routerLink]' },] },\n    ];\n    /** @nocollapse */\n    RouterLink.ctorParameters = function () { return [\n        { type: Router, },\n        { type: ActivatedRoute, },\n        { type: undefined, decorators: [{ type: Attribute, args: ['tabindex',] },] },\n        { type: Renderer2, },\n        { type: ElementRef, },\n    ]; };\n    RouterLink.propDecorators = {\n        \"queryParams\": [{ type: Input },],\n        \"fragment\": [{ type: Input },],\n        \"queryParamsHandling\": [{ type: Input },],\n        \"preserveFragment\": [{ type: Input },],\n        \"skipLocationChange\": [{ type: Input },],\n        \"replaceUrl\": [{ type: Input },],\n        \"routerLink\": [{ type: Input },],\n        \"preserveQueryParams\": [{ type: Input },],\n        \"onClick\": [{ type: HostListener, args: ['click',] },],\n    };\n    return RouterLink;\n}());\nexport { RouterLink };\nfunction RouterLink_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    RouterLink.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    RouterLink.ctorParameters;\n    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\n    RouterLink.propDecorators;\n    /** @type {?} */\n    RouterLink.prototype.queryParams;\n    /** @type {?} */\n    RouterLink.prototype.fragment;\n    /** @type {?} */\n    RouterLink.prototype.queryParamsHandling;\n    /** @type {?} */\n    RouterLink.prototype.preserveFragment;\n    /** @type {?} */\n    RouterLink.prototype.skipLocationChange;\n    /** @type {?} */\n    RouterLink.prototype.replaceUrl;\n    /** @type {?} */\n    RouterLink.prototype.commands;\n    /** @type {?} */\n    RouterLink.prototype.preserve;\n    /** @type {?} */\n    RouterLink.prototype.router;\n    /** @type {?} */\n    RouterLink.prototype.route;\n}\n/**\n * \\@whatItDoes Lets you link to specific parts of your app.\n *\n * See {\\@link RouterLink} for more information.\n *\n * \\@ngModule RouterModule\n *\n * \\@stable\n */\nvar RouterLinkWithHref = /** @class */ (function () {\n    function RouterLinkWithHref(router, route, locationStrategy) {\n        var _this = this;\n        this.router = router;\n        this.route = route;\n        this.locationStrategy = locationStrategy;\n        this.commands = [];\n        this.subscription = router.events.subscribe(function (s) {\n            if (s instanceof NavigationEnd) {\n                _this.updateTargetUrlAndHref();\n            }\n        });\n    }\n    Object.defineProperty(RouterLinkWithHref.prototype, \"routerLink\", {\n        set: /**\n         * @param {?} commands\n         * @return {?}\n         */\n        function (commands) {\n            if (commands != null) {\n                this.commands = Array.isArray(commands) ? commands : [commands];\n            }\n            else {\n                this.commands = [];\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RouterLinkWithHref.prototype, \"preserveQueryParams\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (isDevMode() && /** @type {?} */ (console) && /** @type {?} */ (console.warn)) {\n                console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\n            }\n            this.preserve = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    RouterLinkWithHref.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) { this.updateTargetUrlAndHref(); };\n    /**\n     * @return {?}\n     */\n    RouterLinkWithHref.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () { this.subscription.unsubscribe(); };\n    /**\n     * @param {?} button\n     * @param {?} ctrlKey\n     * @param {?} metaKey\n     * @param {?} shiftKey\n     * @return {?}\n     */\n    RouterLinkWithHref.prototype.onClick = /**\n     * @param {?} button\n     * @param {?} ctrlKey\n     * @param {?} metaKey\n     * @param {?} shiftKey\n     * @return {?}\n     */\n    function (button, ctrlKey, metaKey, shiftKey) {\n        if (button !== 0 || ctrlKey || metaKey || shiftKey) {\n            return true;\n        }\n        if (typeof this.target === 'string' && this.target != '_self') {\n            return true;\n        }\n        var /** @type {?} */ extras = {\n            skipLocationChange: attrBoolValue(this.skipLocationChange),\n            replaceUrl: attrBoolValue(this.replaceUrl),\n        };\n        this.router.navigateByUrl(this.urlTree, extras);\n        return false;\n    };\n    /**\n     * @return {?}\n     */\n    RouterLinkWithHref.prototype.updateTargetUrlAndHref = /**\n     * @return {?}\n     */\n    function () {\n        this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));\n    };\n    Object.defineProperty(RouterLinkWithHref.prototype, \"urlTree\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.router.createUrlTree(this.commands, {\n                relativeTo: this.route,\n                queryParams: this.queryParams,\n                fragment: this.fragment,\n                preserveQueryParams: attrBoolValue(this.preserve),\n                queryParamsHandling: this.queryParamsHandling,\n                preserveFragment: attrBoolValue(this.preserveFragment),\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    RouterLinkWithHref.decorators = [\n        { type: Directive, args: [{ selector: 'a[routerLink]' },] },\n    ];\n    /** @nocollapse */\n    RouterLinkWithHref.ctorParameters = function () { return [\n        { type: Router, },\n        { type: ActivatedRoute, },\n        { type: LocationStrategy, },\n    ]; };\n    RouterLinkWithHref.propDecorators = {\n        \"target\": [{ type: HostBinding, args: ['attr.target',] }, { type: Input },],\n        \"queryParams\": [{ type: Input },],\n        \"fragment\": [{ type: Input },],\n        \"queryParamsHandling\": [{ type: Input },],\n        \"preserveFragment\": [{ type: Input },],\n        \"skipLocationChange\": [{ type: Input },],\n        \"replaceUrl\": [{ type: Input },],\n        \"href\": [{ type: HostBinding },],\n        \"routerLink\": [{ type: Input },],\n        \"preserveQueryParams\": [{ type: Input },],\n        \"onClick\": [{ type: HostListener, args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey'],] },],\n    };\n    return RouterLinkWithHref;\n}());\nexport { RouterLinkWithHref };\nfunction RouterLinkWithHref_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    RouterLinkWithHref.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    RouterLinkWithHref.ctorParameters;\n    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\n    RouterLinkWithHref.propDecorators;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.target;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.queryParams;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.fragment;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.queryParamsHandling;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.preserveFragment;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.skipLocationChange;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.replaceUrl;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.commands;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.subscription;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.preserve;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.href;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.router;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.route;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.locationStrategy;\n}\n/**\n * @param {?} s\n * @return {?}\n */\nfunction attrBoolValue(s) {\n    return s === '' || !!s;\n}\n//# sourceMappingURL=router_link.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, ContentChildren, Directive, ElementRef, Input, QueryList, Renderer2 } from '@angular/core';\nimport { NavigationEnd } from '../events';\nimport { Router } from '../router';\nimport { RouterLink, RouterLinkWithHref } from './router_link';\n/**\n * \\@whatItDoes Lets you add a CSS class to an element when the link's route becomes active.\n *\n * \\@howToUse\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n * ```\n *\n * \\@description\n *\n * The RouterLinkActive directive lets you add a CSS class to an element when the link's route\n * becomes active.\n *\n * Consider the following example:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n * ```\n *\n * When the url is either '/user' or '/user/bob', the active-link class will\n * be added to the `a` tag. If the url changes, the class will be removed.\n *\n * You can set more than one class, as follows:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\n * <a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob</a>\n * ```\n *\n * You can configure RouterLinkActive by passing `exact: true`. This will add the classes\n * only when the url matches the link exactly.\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\n * true}\">Bob</a>\n * ```\n *\n * You can assign the RouterLinkActive instance to a template variable and directly check\n * the `isActive` status.\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\n *   Bob {{ rla.isActive ? '(already open)' : ''}}\n * </a>\n * ```\n *\n * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.\n *\n * ```\n * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\n *   <a routerLink=\"/user/jim\">Jim</a>\n *   <a routerLink=\"/user/bob\">Bob</a>\n * </div>\n * ```\n *\n * This will set the active-link class on the div tag if the url is either '/user/jim' or\n * '/user/bob'.\n *\n * \\@ngModule RouterModule\n *\n * \\@stable\n */\nvar RouterLinkActive = /** @class */ (function () {\n    function RouterLinkActive(router, element, renderer, cdr) {\n        var _this = this;\n        this.router = router;\n        this.element = element;\n        this.renderer = renderer;\n        this.cdr = cdr;\n        this.classes = [];\n        this.isActive = false;\n        this.routerLinkActiveOptions = { exact: false };\n        this.subscription = router.events.subscribe(function (s) {\n            if (s instanceof NavigationEnd) {\n                _this.update();\n            }\n        });\n    }\n    /**\n     * @return {?}\n     */\n    RouterLinkActive.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.links.changes.subscribe(function (_) { return _this.update(); });\n        this.linksWithHrefs.changes.subscribe(function (_) { return _this.update(); });\n        this.update();\n    };\n    Object.defineProperty(RouterLinkActive.prototype, \"routerLinkActive\", {\n        set: /**\n         * @param {?} data\n         * @return {?}\n         */\n        function (data) {\n            var /** @type {?} */ classes = Array.isArray(data) ? data : data.split(' ');\n            this.classes = classes.filter(function (c) { return !!c; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    RouterLinkActive.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) { this.update(); };\n    /**\n     * @return {?}\n     */\n    RouterLinkActive.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () { this.subscription.unsubscribe(); };\n    /**\n     * @return {?}\n     */\n    RouterLinkActive.prototype.update = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this.links || !this.linksWithHrefs || !this.router.navigated)\n            return;\n        Promise.resolve().then(function () {\n            var /** @type {?} */ hasActiveLinks = _this.hasActiveLinks();\n            if (_this.isActive !== hasActiveLinks) {\n                (/** @type {?} */ (_this)).isActive = hasActiveLinks;\n                _this.classes.forEach(function (c) {\n                    if (hasActiveLinks) {\n                        _this.renderer.addClass(_this.element.nativeElement, c);\n                    }\n                    else {\n                        _this.renderer.removeClass(_this.element.nativeElement, c);\n                    }\n                });\n            }\n        });\n    };\n    /**\n     * @param {?} router\n     * @return {?}\n     */\n    RouterLinkActive.prototype.isLinkActive = /**\n     * @param {?} router\n     * @return {?}\n     */\n    function (router) {\n        var _this = this;\n        return function (link) {\n            return router.isActive(link.urlTree, _this.routerLinkActiveOptions.exact);\n        };\n    };\n    /**\n     * @return {?}\n     */\n    RouterLinkActive.prototype.hasActiveLinks = /**\n     * @return {?}\n     */\n    function () {\n        return this.links.some(this.isLinkActive(this.router)) ||\n            this.linksWithHrefs.some(this.isLinkActive(this.router));\n    };\n    RouterLinkActive.decorators = [\n        { type: Directive, args: [{\n                    selector: '[routerLinkActive]',\n                    exportAs: 'routerLinkActive',\n                },] },\n    ];\n    /** @nocollapse */\n    RouterLinkActive.ctorParameters = function () { return [\n        { type: Router, },\n        { type: ElementRef, },\n        { type: Renderer2, },\n        { type: ChangeDetectorRef, },\n    ]; };\n    RouterLinkActive.propDecorators = {\n        \"links\": [{ type: ContentChildren, args: [RouterLink, { descendants: true },] },],\n        \"linksWithHrefs\": [{ type: ContentChildren, args: [RouterLinkWithHref, { descendants: true },] },],\n        \"routerLinkActiveOptions\": [{ type: Input },],\n        \"routerLinkActive\": [{ type: Input },],\n    };\n    return RouterLinkActive;\n}());\nexport { RouterLinkActive };\nfunction RouterLinkActive_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    RouterLinkActive.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    RouterLinkActive.ctorParameters;\n    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\n    RouterLinkActive.propDecorators;\n    /** @type {?} */\n    RouterLinkActive.prototype.links;\n    /** @type {?} */\n    RouterLinkActive.prototype.linksWithHrefs;\n    /** @type {?} */\n    RouterLinkActive.prototype.classes;\n    /** @type {?} */\n    RouterLinkActive.prototype.subscription;\n    /** @type {?} */\n    RouterLinkActive.prototype.isActive;\n    /** @type {?} */\n    RouterLinkActive.prototype.routerLinkActiveOptions;\n    /** @type {?} */\n    RouterLinkActive.prototype.router;\n    /** @type {?} */\n    RouterLinkActive.prototype.element;\n    /** @type {?} */\n    RouterLinkActive.prototype.renderer;\n    /** @type {?} */\n    RouterLinkActive.prototype.cdr;\n}\n//# sourceMappingURL=router_link_active.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Store contextual information about a {\\@link RouterOutlet}\n *\n * \\@stable\n */\nvar /**\n * Store contextual information about a {\\@link RouterOutlet}\n *\n * \\@stable\n */\nOutletContext = /** @class */ (function () {\n    function OutletContext() {\n        this.outlet = null;\n        this.route = null;\n        this.resolver = null;\n        this.children = new ChildrenOutletContexts();\n        this.attachRef = null;\n    }\n    return OutletContext;\n}());\n/**\n * Store contextual information about a {\\@link RouterOutlet}\n *\n * \\@stable\n */\nexport { OutletContext };\nfunction OutletContext_tsickle_Closure_declarations() {\n    /** @type {?} */\n    OutletContext.prototype.outlet;\n    /** @type {?} */\n    OutletContext.prototype.route;\n    /** @type {?} */\n    OutletContext.prototype.resolver;\n    /** @type {?} */\n    OutletContext.prototype.children;\n    /** @type {?} */\n    OutletContext.prototype.attachRef;\n}\n/**\n * Store contextual information about the children (= nested) {\\@link RouterOutlet}\n *\n * \\@stable\n */\nvar /**\n * Store contextual information about the children (= nested) {\\@link RouterOutlet}\n *\n * \\@stable\n */\nChildrenOutletContexts = /** @class */ (function () {\n    function ChildrenOutletContexts() {\n        this.contexts = new Map();\n    }\n    /** Called when a `RouterOutlet` directive is instantiated */\n    /**\n     * Called when a `RouterOutlet` directive is instantiated\n     * @param {?} childName\n     * @param {?} outlet\n     * @return {?}\n     */\n    ChildrenOutletContexts.prototype.onChildOutletCreated = /**\n     * Called when a `RouterOutlet` directive is instantiated\n     * @param {?} childName\n     * @param {?} outlet\n     * @return {?}\n     */\n    function (childName, outlet) {\n        var /** @type {?} */ context = this.getOrCreateContext(childName);\n        context.outlet = outlet;\n        this.contexts.set(childName, context);\n    };\n    /**\n     * Called when a `RouterOutlet` directive is destroyed.\n     * We need to keep the context as the outlet could be destroyed inside a NgIf and might be\n     * re-created later.\n     */\n    /**\n     * Called when a `RouterOutlet` directive is destroyed.\n     * We need to keep the context as the outlet could be destroyed inside a NgIf and might be\n     * re-created later.\n     * @param {?} childName\n     * @return {?}\n     */\n    ChildrenOutletContexts.prototype.onChildOutletDestroyed = /**\n     * Called when a `RouterOutlet` directive is destroyed.\n     * We need to keep the context as the outlet could be destroyed inside a NgIf and might be\n     * re-created later.\n     * @param {?} childName\n     * @return {?}\n     */\n    function (childName) {\n        var /** @type {?} */ context = this.getContext(childName);\n        if (context) {\n            context.outlet = null;\n        }\n    };\n    /**\n     * Called when the corresponding route is deactivated during navigation.\n     * Because the component get destroyed, all children outlet are destroyed.\n     */\n    /**\n     * Called when the corresponding route is deactivated during navigation.\n     * Because the component get destroyed, all children outlet are destroyed.\n     * @return {?}\n     */\n    ChildrenOutletContexts.prototype.onOutletDeactivated = /**\n     * Called when the corresponding route is deactivated during navigation.\n     * Because the component get destroyed, all children outlet are destroyed.\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ contexts = this.contexts;\n        this.contexts = new Map();\n        return contexts;\n    };\n    /**\n     * @param {?} contexts\n     * @return {?}\n     */\n    ChildrenOutletContexts.prototype.onOutletReAttached = /**\n     * @param {?} contexts\n     * @return {?}\n     */\n    function (contexts) { this.contexts = contexts; };\n    /**\n     * @param {?} childName\n     * @return {?}\n     */\n    ChildrenOutletContexts.prototype.getOrCreateContext = /**\n     * @param {?} childName\n     * @return {?}\n     */\n    function (childName) {\n        var /** @type {?} */ context = this.getContext(childName);\n        if (!context) {\n            context = new OutletContext();\n            this.contexts.set(childName, context);\n        }\n        return context;\n    };\n    /**\n     * @param {?} childName\n     * @return {?}\n     */\n    ChildrenOutletContexts.prototype.getContext = /**\n     * @param {?} childName\n     * @return {?}\n     */\n    function (childName) { return this.contexts.get(childName) || null; };\n    return ChildrenOutletContexts;\n}());\n/**\n * Store contextual information about the children (= nested) {\\@link RouterOutlet}\n *\n * \\@stable\n */\nexport { ChildrenOutletContexts };\nfunction ChildrenOutletContexts_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ChildrenOutletContexts.prototype.contexts;\n}\n//# sourceMappingURL=router_outlet_context.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Attribute, ChangeDetectorRef, ComponentFactoryResolver, Directive, EventEmitter, Output, ViewContainerRef } from '@angular/core';\nimport { ChildrenOutletContexts } from '../router_outlet_context';\nimport { ActivatedRoute } from '../router_state';\nimport { PRIMARY_OUTLET } from '../shared';\n/**\n * \\@whatItDoes Acts as a placeholder that Angular dynamically fills based on the current router\n * state.\n *\n * \\@howToUse\n *\n * ```\n * <router-outlet></router-outlet>\n * <router-outlet name='left'></router-outlet>\n * <router-outlet name='right'></router-outlet>\n * ```\n *\n * A router outlet will emit an activate event any time a new component is being instantiated,\n * and a deactivate event when it is being destroyed.\n *\n * ```\n * <router-outlet\n *   (activate)='onActivate($event)'\n *   (deactivate)='onDeactivate($event)'></router-outlet>\n * ```\n * \\@ngModule RouterModule\n *\n * \\@stable\n */\nvar RouterOutlet = /** @class */ (function () {\n    function RouterOutlet(parentContexts, location, resolver, name, changeDetector) {\n        this.parentContexts = parentContexts;\n        this.location = location;\n        this.resolver = resolver;\n        this.changeDetector = changeDetector;\n        this.activated = null;\n        this._activatedRoute = null;\n        this.activateEvents = new EventEmitter();\n        this.deactivateEvents = new EventEmitter();\n        this.name = name || PRIMARY_OUTLET;\n        parentContexts.onChildOutletCreated(this.name, this);\n    }\n    /**\n     * @return {?}\n     */\n    RouterOutlet.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () { this.parentContexts.onChildOutletDestroyed(this.name); };\n    /**\n     * @return {?}\n     */\n    RouterOutlet.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.activated) {\n            // If the outlet was not instantiated at the time the route got activated we need to populate\n            // the outlet when it is initialized (ie inside a NgIf)\n            var /** @type {?} */ context = this.parentContexts.getContext(this.name);\n            if (context && context.route) {\n                if (context.attachRef) {\n                    // `attachRef` is populated when there is an existing component to mount\n                    this.attach(context.attachRef, context.route);\n                }\n                else {\n                    // otherwise the component defined in the configuration is created\n                    this.activateWith(context.route, context.resolver || null);\n                }\n            }\n        }\n    };\n    Object.defineProperty(RouterOutlet.prototype, \"isActivated\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return !!this.activated; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RouterOutlet.prototype, \"component\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            if (!this.activated)\n                throw new Error('Outlet is not activated');\n            return this.activated.instance;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RouterOutlet.prototype, \"activatedRoute\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            if (!this.activated)\n                throw new Error('Outlet is not activated');\n            return /** @type {?} */ (this._activatedRoute);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RouterOutlet.prototype, \"activatedRouteData\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            if (this._activatedRoute) {\n                return this._activatedRoute.snapshot.data;\n            }\n            return {};\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Called when the `RouteReuseStrategy` instructs to detach the subtree\n     */\n    /**\n     * Called when the `RouteReuseStrategy` instructs to detach the subtree\n     * @return {?}\n     */\n    RouterOutlet.prototype.detach = /**\n     * Called when the `RouteReuseStrategy` instructs to detach the subtree\n     * @return {?}\n     */\n    function () {\n        if (!this.activated)\n            throw new Error('Outlet is not activated');\n        this.location.detach();\n        var /** @type {?} */ cmp = this.activated;\n        this.activated = null;\n        this._activatedRoute = null;\n        return cmp;\n    };\n    /**\n     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n     */\n    /**\n     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n     * @param {?} ref\n     * @param {?} activatedRoute\n     * @return {?}\n     */\n    RouterOutlet.prototype.attach = /**\n     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n     * @param {?} ref\n     * @param {?} activatedRoute\n     * @return {?}\n     */\n    function (ref, activatedRoute) {\n        this.activated = ref;\n        this._activatedRoute = activatedRoute;\n        this.location.insert(ref.hostView);\n    };\n    /**\n     * @return {?}\n     */\n    RouterOutlet.prototype.deactivate = /**\n     * @return {?}\n     */\n    function () {\n        if (this.activated) {\n            var /** @type {?} */ c = this.component;\n            this.activated.destroy();\n            this.activated = null;\n            this._activatedRoute = null;\n            this.deactivateEvents.emit(c);\n        }\n    };\n    /**\n     * @param {?} activatedRoute\n     * @param {?} resolver\n     * @return {?}\n     */\n    RouterOutlet.prototype.activateWith = /**\n     * @param {?} activatedRoute\n     * @param {?} resolver\n     * @return {?}\n     */\n    function (activatedRoute, resolver) {\n        if (this.isActivated) {\n            throw new Error('Cannot activate an already activated outlet');\n        }\n        this._activatedRoute = activatedRoute;\n        var /** @type {?} */ snapshot = activatedRoute._futureSnapshot;\n        var /** @type {?} */ component = /** @type {?} */ (/** @type {?} */ ((snapshot.routeConfig)).component);\n        resolver = resolver || this.resolver;\n        var /** @type {?} */ factory = resolver.resolveComponentFactory(component);\n        var /** @type {?} */ childContexts = this.parentContexts.getOrCreateContext(this.name).children;\n        var /** @type {?} */ injector = new OutletInjector(activatedRoute, childContexts, this.location.injector);\n        this.activated = this.location.createComponent(factory, this.location.length, injector);\n        // Calling `markForCheck` to make sure we will run the change detection when the\n        // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.\n        this.changeDetector.markForCheck();\n        this.activateEvents.emit(this.activated.instance);\n    };\n    RouterOutlet.decorators = [\n        { type: Directive, args: [{ selector: 'router-outlet', exportAs: 'outlet' },] },\n    ];\n    /** @nocollapse */\n    RouterOutlet.ctorParameters = function () { return [\n        { type: ChildrenOutletContexts, },\n        { type: ViewContainerRef, },\n        { type: ComponentFactoryResolver, },\n        { type: undefined, decorators: [{ type: Attribute, args: ['name',] },] },\n        { type: ChangeDetectorRef, },\n    ]; };\n    RouterOutlet.propDecorators = {\n        \"activateEvents\": [{ type: Output, args: ['activate',] },],\n        \"deactivateEvents\": [{ type: Output, args: ['deactivate',] },],\n    };\n    return RouterOutlet;\n}());\nexport { RouterOutlet };\nfunction RouterOutlet_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    RouterOutlet.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    RouterOutlet.ctorParameters;\n    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\n    RouterOutlet.propDecorators;\n    /** @type {?} */\n    RouterOutlet.prototype.activated;\n    /** @type {?} */\n    RouterOutlet.prototype._activatedRoute;\n    /** @type {?} */\n    RouterOutlet.prototype.name;\n    /** @type {?} */\n    RouterOutlet.prototype.activateEvents;\n    /** @type {?} */\n    RouterOutlet.prototype.deactivateEvents;\n    /** @type {?} */\n    RouterOutlet.prototype.parentContexts;\n    /** @type {?} */\n    RouterOutlet.prototype.location;\n    /** @type {?} */\n    RouterOutlet.prototype.resolver;\n    /** @type {?} */\n    RouterOutlet.prototype.changeDetector;\n}\nvar OutletInjector = /** @class */ (function () {\n    function OutletInjector(route, childContexts, parent) {\n        this.route = route;\n        this.childContexts = childContexts;\n        this.parent = parent;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    OutletInjector.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        if (token === ActivatedRoute) {\n            return this.route;\n        }\n        if (token === ChildrenOutletContexts) {\n            return this.childContexts;\n        }\n        return this.parent.get(token, notFoundValue);\n    };\n    return OutletInjector;\n}());\nfunction OutletInjector_tsickle_Closure_declarations() {\n    /** @type {?} */\n    OutletInjector.prototype.route;\n    /** @type {?} */\n    OutletInjector.prototype.childContexts;\n    /** @type {?} */\n    OutletInjector.prototype.parent;\n}\n//# sourceMappingURL=router_outlet.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n*@license\n*Copyright Google Inc. All Rights Reserved.\n*\n*Use of this source code is governed by an MIT-style license that can be\n*found in the LICENSE file at https://angular.io/license\n*/\nimport { Compiler, Injectable, Injector, NgModuleFactoryLoader, NgModuleRef } from '@angular/core';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { _catch } from 'rxjs/operator/catch';\nimport { concatMap } from 'rxjs/operator/concatMap';\nimport { filter } from 'rxjs/operator/filter';\nimport { mergeAll } from 'rxjs/operator/mergeAll';\nimport { mergeMap } from 'rxjs/operator/mergeMap';\nimport { NavigationEnd, RouteConfigLoadEnd, RouteConfigLoadStart } from './events';\nimport { Router } from './router';\nimport { RouterConfigLoader } from './router_config_loader';\n/**\n * \\@whatItDoes Provides a preloading strategy.\n *\n * \\@experimental\n * @abstract\n */\nvar /**\n * \\@whatItDoes Provides a preloading strategy.\n *\n * \\@experimental\n * @abstract\n */\nPreloadingStrategy = /** @class */ (function () {\n    function PreloadingStrategy() {\n    }\n    return PreloadingStrategy;\n}());\n/**\n * \\@whatItDoes Provides a preloading strategy.\n *\n * \\@experimental\n * @abstract\n */\nexport { PreloadingStrategy };\nfunction PreloadingStrategy_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @param {?} route\n     * @param {?} fn\n     * @return {?}\n     */\n    PreloadingStrategy.prototype.preload = function (route, fn) { };\n}\n/**\n * \\@whatItDoes Provides a preloading strategy that preloads all modules as quickly as possible.\n *\n * \\@howToUse\n *\n * ```\n * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n *\n * \\@experimental\n */\nvar /**\n * \\@whatItDoes Provides a preloading strategy that preloads all modules as quickly as possible.\n *\n * \\@howToUse\n *\n * ```\n * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n *\n * \\@experimental\n */\nPreloadAllModules = /** @class */ (function () {\n    function PreloadAllModules() {\n    }\n    /**\n     * @param {?} route\n     * @param {?} fn\n     * @return {?}\n     */\n    PreloadAllModules.prototype.preload = /**\n     * @param {?} route\n     * @param {?} fn\n     * @return {?}\n     */\n    function (route, fn) {\n        return _catch.call(fn(), function () { return of(null); });\n    };\n    return PreloadAllModules;\n}());\n/**\n * \\@whatItDoes Provides a preloading strategy that preloads all modules as quickly as possible.\n *\n * \\@howToUse\n *\n * ```\n * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n *\n * \\@experimental\n */\nexport { PreloadAllModules };\n/**\n * \\@whatItDoes Provides a preloading strategy that does not preload any modules.\n *\n * \\@description\n *\n * This strategy is enabled by default.\n *\n * \\@experimental\n */\nvar /**\n * \\@whatItDoes Provides a preloading strategy that does not preload any modules.\n *\n * \\@description\n *\n * This strategy is enabled by default.\n *\n * \\@experimental\n */\nNoPreloading = /** @class */ (function () {\n    function NoPreloading() {\n    }\n    /**\n     * @param {?} route\n     * @param {?} fn\n     * @return {?}\n     */\n    NoPreloading.prototype.preload = /**\n     * @param {?} route\n     * @param {?} fn\n     * @return {?}\n     */\n    function (route, fn) { return of(null); };\n    return NoPreloading;\n}());\n/**\n * \\@whatItDoes Provides a preloading strategy that does not preload any modules.\n *\n * \\@description\n *\n * This strategy is enabled by default.\n *\n * \\@experimental\n */\nexport { NoPreloading };\n/**\n * The preloader optimistically loads all router configurations to\n * make navigations into lazily-loaded sections of the application faster.\n *\n * The preloader runs in the background. When the router bootstraps, the preloader\n * starts listening to all navigation events. After every such event, the preloader\n * will check if any configurations can be loaded lazily.\n *\n * If a route is protected by `canLoad` guards, the preloaded will not load it.\n *\n * \\@stable\n */\nvar RouterPreloader = /** @class */ (function () {\n    function RouterPreloader(router, moduleLoader, compiler, injector, preloadingStrategy) {\n        this.router = router;\n        this.injector = injector;\n        this.preloadingStrategy = preloadingStrategy;\n        var /** @type {?} */ onStartLoad = function (r) { return router.triggerEvent(new RouteConfigLoadStart(r)); };\n        var /** @type {?} */ onEndLoad = function (r) { return router.triggerEvent(new RouteConfigLoadEnd(r)); };\n        this.loader = new RouterConfigLoader(moduleLoader, compiler, onStartLoad, onEndLoad);\n    }\n    /**\n     * @return {?}\n     */\n    RouterPreloader.prototype.setUpPreloading = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ navigations$ = filter.call(this.router.events, function (e) { return e instanceof NavigationEnd; });\n        this.subscription = concatMap.call(navigations$, function () { return _this.preload(); }).subscribe(function () { });\n    };\n    /**\n     * @return {?}\n     */\n    RouterPreloader.prototype.preload = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ ngModule = this.injector.get(NgModuleRef);\n        return this.processRoutes(ngModule, this.router.config);\n    };\n    // TODO(jasonaden): This class relies on code external to the class to call setUpPreloading. If\n    // this hasn't been done, ngOnDestroy will fail as this.subscription will be undefined. This\n    // should be refactored.\n    /**\n     * @return {?}\n     */\n    RouterPreloader.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () { this.subscription.unsubscribe(); };\n    /**\n     * @param {?} ngModule\n     * @param {?} routes\n     * @return {?}\n     */\n    RouterPreloader.prototype.processRoutes = /**\n     * @param {?} ngModule\n     * @param {?} routes\n     * @return {?}\n     */\n    function (ngModule, routes) {\n        var /** @type {?} */ res = [];\n        for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {\n            var route = routes_1[_i];\n            // we already have the config loaded, just recurse\n            if (route.loadChildren && !route.canLoad && route._loadedConfig) {\n                var /** @type {?} */ childConfig = route._loadedConfig;\n                res.push(this.processRoutes(childConfig.module, childConfig.routes));\n                // no config loaded, fetch the config\n            }\n            else if (route.loadChildren && !route.canLoad) {\n                res.push(this.preloadConfig(ngModule, route));\n                // recurse into children\n            }\n            else if (route.children) {\n                res.push(this.processRoutes(ngModule, route.children));\n            }\n        }\n        return mergeAll.call(from(res));\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} route\n     * @return {?}\n     */\n    RouterPreloader.prototype.preloadConfig = /**\n     * @param {?} ngModule\n     * @param {?} route\n     * @return {?}\n     */\n    function (ngModule, route) {\n        var _this = this;\n        return this.preloadingStrategy.preload(route, function () {\n            var /** @type {?} */ loaded$ = _this.loader.load(ngModule.injector, route);\n            return mergeMap.call(loaded$, function (config) {\n                route._loadedConfig = config;\n                return _this.processRoutes(config.module, config.routes);\n            });\n        });\n    };\n    RouterPreloader.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    RouterPreloader.ctorParameters = function () { return [\n        { type: Router, },\n        { type: NgModuleFactoryLoader, },\n        { type: Compiler, },\n        { type: Injector, },\n        { type: PreloadingStrategy, },\n    ]; };\n    return RouterPreloader;\n}());\nexport { RouterPreloader };\nfunction RouterPreloader_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    RouterPreloader.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    RouterPreloader.ctorParameters;\n    /** @type {?} */\n    RouterPreloader.prototype.loader;\n    /** @type {?} */\n    RouterPreloader.prototype.subscription;\n    /** @type {?} */\n    RouterPreloader.prototype.router;\n    /** @type {?} */\n    RouterPreloader.prototype.injector;\n    /** @type {?} */\n    RouterPreloader.prototype.preloadingStrategy;\n}\n//# sourceMappingURL=router_preloader.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { APP_BASE_HREF, HashLocationStrategy, LOCATION_INITIALIZED, Location, LocationStrategy, PathLocationStrategy, PlatformLocation } from '@angular/common';\nimport { ANALYZE_FOR_ENTRY_COMPONENTS, APP_BOOTSTRAP_LISTENER, APP_INITIALIZER, ApplicationRef, Compiler, Inject, Injectable, InjectionToken, Injector, NgModule, NgModuleFactoryLoader, NgProbeToken, Optional, SkipSelf, SystemJsNgModuleLoader } from '@angular/core';\nimport { ÉµgetDOM as getDOM } from '@angular/platform-browser';\nimport { Subject } from 'rxjs/Subject';\nimport { of } from 'rxjs/observable/of';\nimport { RouterLink, RouterLinkWithHref } from './directives/router_link';\nimport { RouterLinkActive } from './directives/router_link_active';\nimport { RouterOutlet } from './directives/router_outlet';\nimport { RouteReuseStrategy } from './route_reuse_strategy';\nimport { Router } from './router';\nimport { ROUTES } from './router_config_loader';\nimport { ChildrenOutletContexts } from './router_outlet_context';\nimport { NoPreloading, PreloadAllModules, PreloadingStrategy, RouterPreloader } from './router_preloader';\nimport { ActivatedRoute } from './router_state';\nimport { UrlHandlingStrategy } from './url_handling_strategy';\nimport { DefaultUrlSerializer, UrlSerializer } from './url_tree';\nimport { flatten } from './utils/collection';\n/**\n * \\@whatItDoes Contains a list of directives\n * \\@stable\n */\nvar /** @type {?} */ ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive];\n/**\n * \\@whatItDoes Is used in DI to configure the router.\n * \\@stable\n */\nexport var /** @type {?} */ ROUTER_CONFIGURATION = new InjectionToken('ROUTER_CONFIGURATION');\n/**\n * \\@docsNotRequired\n */\nexport var /** @type {?} */ ROUTER_FORROOT_GUARD = new InjectionToken('ROUTER_FORROOT_GUARD');\nexport var /** @type {?} */ ROUTER_PROVIDERS = [\n    Location,\n    { provide: UrlSerializer, useClass: DefaultUrlSerializer },\n    {\n        provide: Router,\n        useFactory: setupRouter,\n        deps: [\n            ApplicationRef, UrlSerializer, ChildrenOutletContexts, Location, Injector,\n            NgModuleFactoryLoader, Compiler, ROUTES, ROUTER_CONFIGURATION,\n            [UrlHandlingStrategy, new Optional()], [RouteReuseStrategy, new Optional()]\n        ]\n    },\n    ChildrenOutletContexts,\n    { provide: ActivatedRoute, useFactory: rootRoute, deps: [Router] },\n    { provide: NgModuleFactoryLoader, useClass: SystemJsNgModuleLoader },\n    RouterPreloader,\n    NoPreloading,\n    PreloadAllModules,\n    { provide: ROUTER_CONFIGURATION, useValue: { enableTracing: false } },\n];\n/**\n * @return {?}\n */\nexport function routerNgProbeToken() {\n    return new NgProbeToken('Router', Router);\n}\n/**\n * \\@whatItDoes Adds router directives and providers.\n *\n * \\@howToUse\n *\n * RouterModule can be imported multiple times: once per lazily-loaded bundle.\n * Since the router deals with a global shared resource--location, we cannot have\n * more than one router service active.\n *\n * That is why there are two ways to create the module: `RouterModule.forRoot` and\n * `RouterModule.forChild`.\n *\n * * `forRoot` creates a module that contains all the directives, the given routes, and the router\n *   service itself.\n * * `forChild` creates a module that contains all the directives and the given routes, but does not\n *   include the router service.\n *\n * When registered at the root, the module should be used as follows\n *\n * ```\n * \\@NgModule({\n *   imports: [RouterModule.forRoot(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * For submodules and lazy loaded submodules the module should be used as follows:\n *\n * ```\n * \\@NgModule({\n *   imports: [RouterModule.forChild(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * \\@description\n *\n * Managing state transitions is one of the hardest parts of building applications. This is\n * especially true on the web, where you also need to ensure that the state is reflected in the URL.\n * In addition, we often want to split applications into multiple bundles and load them on demand.\n * Doing this transparently is not trivial.\n *\n * The Angular router solves these problems. Using the router, you can declaratively specify\n * application states, manage state transitions while taking care of the URL, and load bundles on\n * demand.\n *\n * [Read this developer guide](https://angular.io/docs/ts/latest/guide/router.html) to get an\n * overview of how the router should be used.\n *\n * \\@stable\n */\nvar RouterModule = /** @class */ (function () {\n    // Note: We are injecting the Router so it gets created eagerly...\n    function RouterModule(guard, router) {\n    }\n    /**\n     * Creates a module with all the router providers and directives. It also optionally sets up an\n     * application listener to perform an initial navigation.\n     *\n     * Options (see {@link ExtraOptions}):\n     * * `enableTracing` makes the router log all its internal events to the console.\n     * * `useHash` enables the location strategy that uses the URL fragment instead of the history\n     * API.\n     * * `initialNavigation` disables the initial navigation.\n     * * `errorHandler` provides a custom error handler.\n     * * `preloadingStrategy` configures a preloading strategy (see {@link PreloadAllModules}).\n     * * `onSameUrlNavigation` configures how the router handles navigation to the current URL. See\n     * {@link ExtraOptions} for more details.\n     */\n    /**\n     * Creates a module with all the router providers and directives. It also optionally sets up an\n     * application listener to perform an initial navigation.\n     *\n     * Options (see {\\@link ExtraOptions}):\n     * * `enableTracing` makes the router log all its internal events to the console.\n     * * `useHash` enables the location strategy that uses the URL fragment instead of the history\n     * API.\n     * * `initialNavigation` disables the initial navigation.\n     * * `errorHandler` provides a custom error handler.\n     * * `preloadingStrategy` configures a preloading strategy (see {\\@link PreloadAllModules}).\n     * * `onSameUrlNavigation` configures how the router handles navigation to the current URL. See\n     * {\\@link ExtraOptions} for more details.\n     * @param {?} routes\n     * @param {?=} config\n     * @return {?}\n     */\n    RouterModule.forRoot = /**\n     * Creates a module with all the router providers and directives. It also optionally sets up an\n     * application listener to perform an initial navigation.\n     *\n     * Options (see {\\@link ExtraOptions}):\n     * * `enableTracing` makes the router log all its internal events to the console.\n     * * `useHash` enables the location strategy that uses the URL fragment instead of the history\n     * API.\n     * * `initialNavigation` disables the initial navigation.\n     * * `errorHandler` provides a custom error handler.\n     * * `preloadingStrategy` configures a preloading strategy (see {\\@link PreloadAllModules}).\n     * * `onSameUrlNavigation` configures how the router handles navigation to the current URL. See\n     * {\\@link ExtraOptions} for more details.\n     * @param {?} routes\n     * @param {?=} config\n     * @return {?}\n     */\n    function (routes, config) {\n        return {\n            ngModule: RouterModule,\n            providers: [\n                ROUTER_PROVIDERS,\n                provideRoutes(routes),\n                {\n                    provide: ROUTER_FORROOT_GUARD,\n                    useFactory: provideForRootGuard,\n                    deps: [[Router, new Optional(), new SkipSelf()]]\n                },\n                { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },\n                {\n                    provide: LocationStrategy,\n                    useFactory: provideLocationStrategy,\n                    deps: [\n                        PlatformLocation, [new Inject(APP_BASE_HREF), new Optional()], ROUTER_CONFIGURATION\n                    ]\n                },\n                {\n                    provide: PreloadingStrategy,\n                    useExisting: config && config.preloadingStrategy ? config.preloadingStrategy :\n                        NoPreloading\n                },\n                { provide: NgProbeToken, multi: true, useFactory: routerNgProbeToken },\n                provideRouterInitializer(),\n            ],\n        };\n    };\n    /**\n     * Creates a module with all the router directives and a provider registering routes.\n     */\n    /**\n     * Creates a module with all the router directives and a provider registering routes.\n     * @param {?} routes\n     * @return {?}\n     */\n    RouterModule.forChild = /**\n     * Creates a module with all the router directives and a provider registering routes.\n     * @param {?} routes\n     * @return {?}\n     */\n    function (routes) {\n        return { ngModule: RouterModule, providers: [provideRoutes(routes)] };\n    };\n    RouterModule.decorators = [\n        { type: NgModule, args: [{ declarations: ROUTER_DIRECTIVES, exports: ROUTER_DIRECTIVES },] },\n    ];\n    /** @nocollapse */\n    RouterModule.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ROUTER_FORROOT_GUARD,] },] },\n        { type: Router, decorators: [{ type: Optional },] },\n    ]; };\n    return RouterModule;\n}());\nexport { RouterModule };\nfunction RouterModule_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    RouterModule.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    RouterModule.ctorParameters;\n}\n/**\n * @param {?} platformLocationStrategy\n * @param {?} baseHref\n * @param {?=} options\n * @return {?}\n */\nexport function provideLocationStrategy(platformLocationStrategy, baseHref, options) {\n    if (options === void 0) { options = {}; }\n    return options.useHash ? new HashLocationStrategy(platformLocationStrategy, baseHref) :\n        new PathLocationStrategy(platformLocationStrategy, baseHref);\n}\n/**\n * @param {?} router\n * @return {?}\n */\nexport function provideForRootGuard(router) {\n    if (router) {\n        throw new Error(\"RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.\");\n    }\n    return 'guarded';\n}\n/**\n * \\@whatItDoes Registers routes.\n *\n * \\@howToUse\n *\n * ```\n * \\@NgModule({\n *   imports: [RouterModule.forChild(ROUTES)],\n *   providers: [provideRoutes(EXTRA_ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * \\@stable\n * @param {?} routes\n * @return {?}\n */\nexport function provideRoutes(routes) {\n    return [\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: routes },\n        { provide: ROUTES, multi: true, useValue: routes },\n    ];\n}\n/**\n * \\@whatItDoes Represents options to configure the router.\n *\n * \\@stable\n * @record\n */\nexport function ExtraOptions() { }\nfunction ExtraOptions_tsickle_Closure_declarations() {\n    /**\n     * Makes the router log all its internal events to the console.\n     * @type {?|undefined}\n     */\n    ExtraOptions.prototype.enableTracing;\n    /**\n     * Enables the location strategy that uses the URL fragment instead of the history API.\n     * @type {?|undefined}\n     */\n    ExtraOptions.prototype.useHash;\n    /**\n     * Disables the initial navigation.\n     * @type {?|undefined}\n     */\n    ExtraOptions.prototype.initialNavigation;\n    /**\n     * A custom error handler.\n     * @type {?|undefined}\n     */\n    ExtraOptions.prototype.errorHandler;\n    /**\n     * Configures a preloading strategy. See {\\@link PreloadAllModules}.\n     * @type {?|undefined}\n     */\n    ExtraOptions.prototype.preloadingStrategy;\n    /**\n     * Define what the router should do if it receives a navigation request to the current URL.\n     * By default, the router will ignore this navigation. However, this prevents features such\n     * as a \"refresh\" button. Use this option to configure the behavior when navigating to the\n     * current URL. Default is 'ignore'.\n     * @type {?|undefined}\n     */\n    ExtraOptions.prototype.onSameUrlNavigation;\n    /**\n     * Defines how the router merges params, data and resolved data from parent to child\n     * routes. Available options are:\n     *\n     * - `'emptyOnly'`, the default, only inherits parent params for path-less or component-less\n     *   routes.\n     * - `'always'`, enables unconditional inheritance of parent params.\n     * @type {?|undefined}\n     */\n    ExtraOptions.prototype.paramsInheritanceStrategy;\n}\n/**\n * @param {?} ref\n * @param {?} urlSerializer\n * @param {?} contexts\n * @param {?} location\n * @param {?} injector\n * @param {?} loader\n * @param {?} compiler\n * @param {?} config\n * @param {?=} opts\n * @param {?=} urlHandlingStrategy\n * @param {?=} routeReuseStrategy\n * @return {?}\n */\nexport function setupRouter(ref, urlSerializer, contexts, location, injector, loader, compiler, config, opts, urlHandlingStrategy, routeReuseStrategy) {\n    if (opts === void 0) { opts = {}; }\n    var /** @type {?} */ router = new Router(null, urlSerializer, contexts, location, injector, loader, compiler, flatten(config));\n    if (urlHandlingStrategy) {\n        router.urlHandlingStrategy = urlHandlingStrategy;\n    }\n    if (routeReuseStrategy) {\n        router.routeReuseStrategy = routeReuseStrategy;\n    }\n    if (opts.errorHandler) {\n        router.errorHandler = opts.errorHandler;\n    }\n    if (opts.enableTracing) {\n        var /** @type {?} */ dom_1 = getDOM();\n        router.events.subscribe(function (e) {\n            dom_1.logGroup(\"Router Event: \" + ((/** @type {?} */ (e.constructor))).name);\n            dom_1.log(e.toString());\n            dom_1.log(e);\n            dom_1.logGroupEnd();\n        });\n    }\n    if (opts.onSameUrlNavigation) {\n        router.onSameUrlNavigation = opts.onSameUrlNavigation;\n    }\n    if (opts.paramsInheritanceStrategy) {\n        router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;\n    }\n    return router;\n}\n/**\n * @param {?} router\n * @return {?}\n */\nexport function rootRoute(router) {\n    return router.routerState.root;\n}\n/**\n * To initialize the router properly we need to do in two steps:\n *\n * We need to start the navigation in a APP_INITIALIZER to block the bootstrap if\n * a resolver or a guards executes asynchronously. Second, we need to actually run\n * activation in a BOOTSTRAP_LISTENER. We utilize the afterPreactivation\n * hook provided by the router to do that.\n *\n * The router navigation starts, reaches the point when preactivation is done, and then\n * pauses. It waits for the hook to be resolved. We then resolve it only in a bootstrap listener.\n */\nvar RouterInitializer = /** @class */ (function () {\n    function RouterInitializer(injector) {\n        this.injector = injector;\n        this.initNavigation = false;\n        this.resultOfPreactivationDone = new Subject();\n    }\n    /**\n     * @return {?}\n     */\n    RouterInitializer.prototype.appInitializer = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ p = this.injector.get(LOCATION_INITIALIZED, Promise.resolve(null));\n        return p.then(function () {\n            var /** @type {?} */ resolve = /** @type {?} */ ((null));\n            var /** @type {?} */ res = new Promise(function (r) { return resolve = r; });\n            var /** @type {?} */ router = _this.injector.get(Router);\n            var /** @type {?} */ opts = _this.injector.get(ROUTER_CONFIGURATION);\n            if (_this.isLegacyDisabled(opts) || _this.isLegacyEnabled(opts)) {\n                resolve(true);\n            }\n            else if (opts.initialNavigation === 'disabled') {\n                router.setUpLocationChangeListener();\n                resolve(true);\n            }\n            else if (opts.initialNavigation === 'enabled') {\n                router.hooks.afterPreactivation = function () {\n                    // only the initial navigation should be delayed\n                    if (!_this.initNavigation) {\n                        _this.initNavigation = true;\n                        resolve(true);\n                        return _this.resultOfPreactivationDone;\n                        // subsequent navigations should not be delayed\n                    }\n                    else {\n                        return /** @type {?} */ (of(null));\n                    }\n                };\n                router.initialNavigation();\n            }\n            else {\n                throw new Error(\"Invalid initialNavigation options: '\" + opts.initialNavigation + \"'\");\n            }\n            return res;\n        });\n    };\n    /**\n     * @param {?} bootstrappedComponentRef\n     * @return {?}\n     */\n    RouterInitializer.prototype.bootstrapListener = /**\n     * @param {?} bootstrappedComponentRef\n     * @return {?}\n     */\n    function (bootstrappedComponentRef) {\n        var /** @type {?} */ opts = this.injector.get(ROUTER_CONFIGURATION);\n        var /** @type {?} */ preloader = this.injector.get(RouterPreloader);\n        var /** @type {?} */ router = this.injector.get(Router);\n        var /** @type {?} */ ref = this.injector.get(ApplicationRef);\n        if (bootstrappedComponentRef !== ref.components[0]) {\n            return;\n        }\n        if (this.isLegacyEnabled(opts)) {\n            router.initialNavigation();\n        }\n        else if (this.isLegacyDisabled(opts)) {\n            router.setUpLocationChangeListener();\n        }\n        preloader.setUpPreloading();\n        router.resetRootComponentType(ref.componentTypes[0]);\n        this.resultOfPreactivationDone.next(/** @type {?} */ ((null)));\n        this.resultOfPreactivationDone.complete();\n    };\n    /**\n     * @param {?} opts\n     * @return {?}\n     */\n    RouterInitializer.prototype.isLegacyEnabled = /**\n     * @param {?} opts\n     * @return {?}\n     */\n    function (opts) {\n        return opts.initialNavigation === 'legacy_enabled' || opts.initialNavigation === true ||\n            opts.initialNavigation === undefined;\n    };\n    /**\n     * @param {?} opts\n     * @return {?}\n     */\n    RouterInitializer.prototype.isLegacyDisabled = /**\n     * @param {?} opts\n     * @return {?}\n     */\n    function (opts) {\n        return opts.initialNavigation === 'legacy_disabled' || opts.initialNavigation === false;\n    };\n    RouterInitializer.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    RouterInitializer.ctorParameters = function () { return [\n        { type: Injector, },\n    ]; };\n    return RouterInitializer;\n}());\nexport { RouterInitializer };\nfunction RouterInitializer_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    RouterInitializer.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    RouterInitializer.ctorParameters;\n    /** @type {?} */\n    RouterInitializer.prototype.initNavigation;\n    /** @type {?} */\n    RouterInitializer.prototype.resultOfPreactivationDone;\n    /** @type {?} */\n    RouterInitializer.prototype.injector;\n}\n/**\n * @param {?} r\n * @return {?}\n */\nexport function getAppInitializer(r) {\n    return r.appInitializer.bind(r);\n}\n/**\n * @param {?} r\n * @return {?}\n */\nexport function getBootstrapListener(r) {\n    return r.bootstrapListener.bind(r);\n}\n/**\n * A token for the router initializer that will be called after the app is bootstrapped.\n *\n * \\@experimental\n */\nexport var /** @type {?} */ ROUTER_INITIALIZER = new InjectionToken('Router Initializer');\n/**\n * @return {?}\n */\nexport function provideRouterInitializer() {\n    return [\n        RouterInitializer,\n        {\n            provide: APP_INITIALIZER,\n            multi: true,\n            useFactory: getAppInitializer,\n            deps: [RouterInitializer]\n        },\n        { provide: ROUTER_INITIALIZER, useFactory: getBootstrapListener, deps: [RouterInitializer] },\n        { provide: APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER },\n    ];\n}\n//# sourceMappingURL=router_module.js.map"]}