{"version":3,"file":"upgrade.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/router/upgrade/src/upgrade.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Location} from '@angular/common';\nimport {APP_BOOTSTRAP_LISTENER, ComponentRef, inject} from '@angular/core';\nimport {Router, ÉµRestoredState as RestoredState} from '../../index';\nimport {UpgradeModule} from '@angular/upgrade/static';\n\n/**\n * Creates an initializer that sets up `ngRoute` integration\n * along with setting up the Angular router.\n *\n * @usageNotes\n *\n * For standalone applications:\n * ```ts\n * export const appConfig: ApplicationConfig = {\n *   providers: [RouterUpgradeInitializer],\n * };\n * ```\n *\n * For NgModule based applications:\n * ```ts\n * @NgModule({\n *  imports: [\n *   RouterModule.forRoot(SOME_ROUTES),\n *   UpgradeModule\n * ],\n * providers: [\n *   RouterUpgradeInitializer\n * ]\n * })\n * export class AppModule {\n *   ngDoBootstrap() {}\n * }\n * ```\n *\n * @publicApi\n */\nexport const RouterUpgradeInitializer = {\n  provide: APP_BOOTSTRAP_LISTENER,\n  multi: true,\n  useFactory: locationSyncBootstrapListener as () => () => void,\n};\n\n/**\n * @internal\n */\nexport function locationSyncBootstrapListener() {\n  const ngUpgrade = inject(UpgradeModule);\n\n  return () => {\n    setUpLocationSync(ngUpgrade);\n  };\n}\n\n/**\n * Sets up a location change listener to trigger `history.pushState`.\n * Works around the problem that `onPopState` does not trigger `history.pushState`.\n * Must be called *after* calling `UpgradeModule.bootstrap`.\n *\n * @param ngUpgrade The upgrade NgModule.\n * @param urlType The location strategy.\n * @see {@link /api/common/HashLocationStrategy HashLocationStrategy}\n * @see {@link /api/common/PathLocationStrategy PathLocationStrategy}\n *\n * @publicApi\n */\nexport function setUpLocationSync(\n  ngUpgrade: UpgradeModule,\n  urlType: 'path' | 'hash' = 'path',\n): void {\n  if (!ngUpgrade.$injector) {\n    throw new Error(`\n        RouterUpgradeInitializer can be used only after UpgradeModule.bootstrap has been called.\n        Remove RouterUpgradeInitializer and call setUpLocationSync after UpgradeModule.bootstrap.\n      `);\n  }\n\n  const router: Router = ngUpgrade.injector.get(Router);\n  const location: Location = ngUpgrade.injector.get(Location);\n\n  ngUpgrade.$injector\n    .get('$rootScope')\n    .$on(\n      '$locationChangeStart',\n      (\n        event: any,\n        newUrl: string,\n        oldUrl: string,\n        newState?: {[k: string]: unknown} | RestoredState,\n        oldState?: {[k: string]: unknown} | RestoredState,\n      ) => {\n        // Navigations coming from Angular router have a navigationId state\n        // property. Don't trigger Angular router navigation again if it is\n        // caused by a URL change from the current Angular router\n        // navigation.\n        const currentNavigationId = router.getCurrentNavigation()?.id;\n        const newStateNavigationId = newState?.navigationId;\n        if (newStateNavigationId !== undefined && newStateNavigationId === currentNavigationId) {\n          return;\n        }\n\n        let url;\n        if (urlType === 'path') {\n          url = resolveUrl(newUrl);\n        } else if (urlType === 'hash') {\n          // Remove the first hash from the URL\n          const hashIdx = newUrl.indexOf('#');\n          url = resolveUrl(newUrl.substring(0, hashIdx) + newUrl.substring(hashIdx + 1));\n        } else {\n          throw 'Invalid URLType passed to setUpLocationSync: ' + urlType;\n        }\n        const path = location.normalize(url.pathname);\n        router.navigateByUrl(path + url.search + url.hash);\n      },\n    );\n}\n\n/**\n * Normalizes and parses a URL.\n *\n * - Normalizing means that a relative URL will be resolved into an absolute URL in the context of\n *   the application document.\n * - Parsing means that the anchor's `protocol`, `hostname`, `port`, `pathname` and related\n *   properties are all populated to reflect the normalized URL.\n *\n * While this approach has wide compatibility, it doesn't work as expected on IE. On IE, normalizing\n * happens similar to other browsers, but the parsed components will not be set. (E.g. if you assign\n * `a.href = 'foo'`, then `a.protocol`, `a.host`, etc. will not be correctly updated.)\n * We work around that by performing the parsing in a 2nd step by taking a previously normalized URL\n * and assigning it again. This correctly populates all properties.\n *\n * See\n * https://github.com/angular/angular.js/blob/2c7400e7d07b0f6cec1817dab40b9250ce8ebce6/src/ng/urlUtils.js#L26-L33\n * for more info.\n */\nlet anchor: HTMLAnchorElement | undefined;\nfunction resolveUrl(url: string): {pathname: string; search: string; hash: string} {\n  anchor ??= document.createElement('a');\n\n  anchor.setAttribute('href', url);\n  anchor.setAttribute('href', anchor.href);\n\n  return {\n    // IE does not start `pathname` with `/` like other browsers.\n    pathname: `/${anchor.pathname.replace(/^\\//, '')}`,\n    search: anchor.search,\n    hash: anchor.hash,\n  };\n}\n"],"names":["locationSyncBootstrapListener","inject","UpgradeModule","setUpLocationSync","ngUpgrade","injector","get","Location","$injector","currentNavigationId","router","getCurrentNavigation","id","newState","navigationId","newStateNavigationId"],"mappings":";;;;;;;;;;;;;;;;;;;AAwDE,SAAOA,6BAAKA,GAAA;iBACO,GAAAC,MAAA,CAAAC,aAAA,CAAA;EACnB,OAAC,MAAA;AACHC,IAAAA,iBAAA,CAAAC,SAAA,CAAA;;;;;;;;;AA8BK;cASsE,GAAAA,SAAA,CAAAC;gBAI7D,GAAAD,SAAA,CAAAC,QAAA,CAAAC,GAAA,CAAAC,QAAA,CAAA;AACN,EAAA,SAAA,CAAAC,SAA0B;UASxBC,mBAAqC,GAAAC,MAAA,CAAAC,oBAAA,IAAAC,EAAA;8BAC/B,GAAAC,QAAA,EAAAC,YAAA;0CAIR,IAAAC,oBAEiD,KAEpDN,mBACL,EAAA;AAEA,MAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}