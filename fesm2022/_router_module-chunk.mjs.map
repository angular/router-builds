{"version":3,"file":"_router_module-chunk.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/router/src/directives/router_link.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/router/src/directives/router_link_active.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/router/src/router_preloader.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/router/src/router_scroller.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/router/src/router_devtools.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/router/src/statemanager/navigation_state_manager.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/router/src/provide_router.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/router/src/router_module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {LocationStrategy} from '@angular/common';\nimport {\n  Attribute,\n  booleanAttribute,\n  Directive,\n  ElementRef,\n  HostAttributeToken,\n  HostBinding,\n  HostListener,\n  inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Renderer2,\n  ɵRuntimeError as RuntimeError,\n  signal,\n  SimpleChanges,\n  untracked,\n  ɵINTERNAL_APPLICATION_ERROR_HANDLER,\n} from '@angular/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {RuntimeErrorCode} from '../errors';\nimport {Event, NavigationEnd} from '../events';\nimport {QueryParamsHandling} from '../models';\nimport {Router} from '../router';\nimport {ROUTER_CONFIGURATION} from '../router_config';\nimport {ActivatedRoute} from '../router_state';\nimport {Params} from '../shared';\nimport {isUrlTree, UrlTree} from '../url_tree';\n\n/**\n * @description\n *\n * When applied to an element in a template, makes that element a link\n * that initiates navigation to a route. Navigation opens one or more routed components\n * in one or more `<router-outlet>` locations on the page.\n *\n * Given a route configuration `[{ path: 'user/:name', component: UserCmp }]`,\n * the following creates a static link to the route:\n * `<a routerLink=\"/user/bob\">link to user component</a>`\n *\n * You can use dynamic values to generate the link.\n * For a dynamic link, pass an array of path segments,\n * followed by the params for each segment.\n * For example, `['/team', teamId, 'user', userName, {details: true}]`\n * generates a link to `/team/11/user/bob;details=true`.\n *\n * Multiple static segments can be merged into one term and combined with dynamic segments.\n * For example, `['/team/11/user', userName, {details: true}]`\n *\n * The input that you provide to the link is treated as a delta to the current URL.\n * For instance, suppose the current URL is `/user/(box//aux:team)`.\n * The link `<a [routerLink]=\"['/user/jim']\">Jim</a>` creates the URL\n * `/user/(jim//aux:team)`.\n * See {@link Router#createUrlTree} for more information.\n *\n * @usageNotes\n *\n * You can use absolute or relative paths in a link, set query parameters,\n * control how parameters are handled, and keep a history of navigation states.\n *\n * ### Relative link paths\n *\n * The first segment name can be prepended with `/`, `./`, or `../`.\n * * If the first segment begins with `/`, the router looks up the route from the root of the\n *   app.\n * * If the first segment begins with `./`, or doesn't begin with a slash, the router\n *   looks in the children of the current activated route.\n * * If the first segment begins with `../`, the router goes up one level in the route tree.\n *\n * ### Setting and handling query params and fragments\n *\n * The following link adds a query parameter and a fragment to the generated URL:\n *\n * ```html\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n *   link to user component\n * </a>\n * ```\n * By default, the directive constructs the new URL using the given query parameters.\n * The example generates the link: `/user/bob?debug=true#education`.\n *\n * You can instruct the directive to handle query parameters differently\n * by specifying the `queryParamsHandling` option in the link.\n * Allowed values are:\n *\n *  - `'merge'`: Merge the given `queryParams` into the current query params.\n *  - `'preserve'`: Preserve the current query params.\n *\n * For example:\n *\n * ```html\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\">\n *   link to user component\n * </a>\n * ```\n *\n * `queryParams`, `fragment`, `queryParamsHandling`, `preserveFragment`, and `relativeTo`\n * cannot be used when the `routerLink` input is a `UrlTree`.\n *\n * See {@link UrlCreationOptions#queryParamsHandling}.\n *\n * ### Preserving navigation history\n *\n * You can provide a `state` value to be persisted to the browser's\n * [`History.state` property](https://developer.mozilla.org/en-US/docs/Web/API/History#Properties).\n * For example:\n *\n * ```html\n * <a [routerLink]=\"['/user/bob']\" [state]=\"{tracingId: 123}\">\n *   link to user component\n * </a>\n * ```\n *\n * Use {@link Router#getCurrentNavigation} to retrieve a saved\n * navigation-state value. For example, to capture the `tracingId` during the `NavigationStart`\n * event:\n *\n * ```ts\n * // Get NavigationStart events\n * router.events.pipe(filter(e => e instanceof NavigationStart)).subscribe(e => {\n *   const navigation = router.getCurrentNavigation();\n *   tracingService.trace({id: navigation.extras.state.tracingId});\n * });\n * ```\n *\n * ### RouterLink compatible custom elements\n *\n * In order to make a custom element work with routerLink, the corresponding custom\n * element must implement the `href` attribute and must list `href` in the array of\n * the static property/getter `observedAttributes`.\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\n@Directive({\n  selector: '[routerLink]',\n  host: {\n    '[attr.href]': 'reactiveHref()',\n  },\n})\nexport class RouterLink implements OnChanges, OnDestroy {\n  /** @nodoc */\n  protected readonly reactiveHref = signal<string | null>(null);\n  /**\n   * Represents an `href` attribute value applied to a host element,\n   * when a host element is an `<a>`/`<area>` tag or a compatible custom element.\n   * For other tags, the value is `null`.\n   */\n  get href() {\n    return untracked(this.reactiveHref);\n  }\n  /** @deprecated */\n  set href(value: string | null) {\n    this.reactiveHref.set(value);\n  }\n\n  /**\n   * Represents the `target` attribute on a host element.\n   * This is only used when the host element is\n   * an `<a>`/`<area>` tag or a compatible custom element.\n   */\n  @HostBinding('attr.target') @Input() target?: string;\n\n  /**\n   * Passed to {@link Router#createUrlTree} as part of the\n   * `UrlCreationOptions`.\n   * @see {@link UrlCreationOptions#queryParams}\n   * @see {@link Router#createUrlTree}\n   */\n  @Input() queryParams?: Params | null;\n  /**\n   * Passed to {@link Router#createUrlTree} as part of the\n   * `UrlCreationOptions`.\n   * @see {@link UrlCreationOptions#fragment}\n   * @see {@link Router#createUrlTree}\n   */\n  @Input() fragment?: string;\n  /**\n   * Passed to {@link Router#createUrlTree} as part of the\n   * `UrlCreationOptions`.\n   * @see {@link UrlCreationOptions#queryParamsHandling}\n   * @see {@link Router#createUrlTree}\n   */\n  @Input() queryParamsHandling?: QueryParamsHandling | null;\n  /**\n   * Passed to {@link Router#navigateByUrl} as part of the\n   * `NavigationBehaviorOptions`.\n   * @see {@link NavigationBehaviorOptions#state}\n   * @see {@link Router#navigateByUrl}\n   */\n  @Input() state?: {[k: string]: any};\n  /**\n   * Passed to {@link Router#navigateByUrl} as part of the\n   * `NavigationBehaviorOptions`.\n   * @see {@link NavigationBehaviorOptions#info}\n   * @see {@link Router#navigateByUrl}\n   */\n  @Input() info?: unknown;\n  /**\n   * Passed to {@link Router#createUrlTree} as part of the\n   * `UrlCreationOptions`.\n   * Specify a value here when you do not want to use the default value\n   * for `routerLink`, which is the current activated route.\n   * Note that a value of `undefined` here will use the `routerLink` default.\n   * @see {@link UrlCreationOptions#relativeTo}\n   * @see {@link Router#createUrlTree}\n   */\n  @Input() relativeTo?: ActivatedRoute | null;\n\n  /** Whether a host element is an `<a>`/`<area>` tag or a compatible custom element. */\n  private isAnchorElement: boolean;\n\n  private subscription?: Subscription;\n\n  /** @internal */\n  onChanges = new Subject<RouterLink>();\n\n  private readonly applicationErrorHandler = inject(ɵINTERNAL_APPLICATION_ERROR_HANDLER);\n  private readonly options = inject(ROUTER_CONFIGURATION, {optional: true});\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    @Attribute('tabindex') private readonly tabIndexAttribute: string | null | undefined,\n    private readonly renderer: Renderer2,\n    private readonly el: ElementRef,\n    private locationStrategy?: LocationStrategy,\n  ) {\n    // Set the initial href value to whatever exists on the host element already\n    this.reactiveHref.set(inject(new HostAttributeToken('href'), {optional: true}));\n    const tagName = el.nativeElement.tagName?.toLowerCase();\n    this.isAnchorElement =\n      tagName === 'a' ||\n      tagName === 'area' ||\n      !!(\n        // Avoid breaking in an SSR context where customElements might not be defined.\n        (\n          typeof customElements === 'object' &&\n          // observedAttributes is an optional static property/getter on a custom element.\n          // The spec states that this must be an array of strings.\n          (\n            customElements.get(tagName) as {observedAttributes?: string[]} | undefined\n          )?.observedAttributes?.includes?.('href')\n        )\n      );\n\n    if (!this.isAnchorElement) {\n      this.subscribeToNavigationEventsIfNecessary();\n    } else {\n      this.setTabIndexIfNotOnNativeEl('0');\n    }\n  }\n\n  private subscribeToNavigationEventsIfNecessary() {\n    if (this.subscription !== undefined || !this.isAnchorElement) {\n      return;\n    }\n\n    // preserving fragment in router state\n    let createSubcription = this.preserveFragment;\n    // preserving or merging with query params in router state\n    const dependsOnRouterState = (handling?: QueryParamsHandling | null) =>\n      handling === 'merge' || handling === 'preserve';\n    createSubcription ||= dependsOnRouterState(this.queryParamsHandling);\n    createSubcription ||=\n      !this.queryParamsHandling && !dependsOnRouterState(this.options?.defaultQueryParamsHandling);\n    if (!createSubcription) {\n      return;\n    }\n\n    this.subscription = this.router.events.subscribe((s: Event) => {\n      if (s instanceof NavigationEnd) {\n        this.updateHref();\n      }\n    });\n  }\n\n  /**\n   * Passed to {@link Router#createUrlTree} as part of the\n   * `UrlCreationOptions`.\n   * @see {@link UrlCreationOptions#preserveFragment}\n   * @see {@link Router#createUrlTree}\n   */\n  @Input({transform: booleanAttribute}) preserveFragment: boolean = false;\n\n  /**\n   * Passed to {@link Router#navigateByUrl} as part of the\n   * `NavigationBehaviorOptions`.\n   * @see {@link NavigationBehaviorOptions#skipLocationChange}\n   * @see {@link Router#navigateByUrl}\n   */\n  @Input({transform: booleanAttribute}) skipLocationChange: boolean = false;\n\n  /**\n   * Passed to {@link Router#navigateByUrl} as part of the\n   * `NavigationBehaviorOptions`.\n   * @see {@link NavigationBehaviorOptions#replaceUrl}\n   * @see {@link Router#navigateByUrl}\n   */\n  @Input({transform: booleanAttribute}) replaceUrl: boolean = false;\n\n  /**\n   * Modifies the tab index if there was not a tabindex attribute on the element during\n   * instantiation.\n   */\n  private setTabIndexIfNotOnNativeEl(newTabIndex: string | null) {\n    if (this.tabIndexAttribute != null /* both `null` and `undefined` */ || this.isAnchorElement) {\n      return;\n    }\n    this.applyAttributeValue('tabindex', newTabIndex);\n  }\n\n  /** @docs-private */\n  // TODO(atscott): Remove changes parameter in major version as a breaking change.\n  ngOnChanges(changes?: SimpleChanges): void {\n    if (\n      ngDevMode &&\n      isUrlTree(this.routerLinkInput) &&\n      (this.fragment !== undefined ||\n        this.queryParams ||\n        this.queryParamsHandling ||\n        this.preserveFragment ||\n        this.relativeTo)\n    ) {\n      throw new RuntimeError(\n        RuntimeErrorCode.INVALID_ROUTER_LINK_INPUTS,\n        'Cannot configure queryParams or fragment when using a UrlTree as the routerLink input value.',\n      );\n    }\n    if (this.isAnchorElement) {\n      this.updateHref();\n      this.subscribeToNavigationEventsIfNecessary();\n    }\n    // This is subscribed to by `RouterLinkActive` so that it knows to update when there are changes\n    // to the RouterLinks it's tracking.\n    this.onChanges.next(this);\n  }\n\n  private routerLinkInput: readonly any[] | UrlTree | null = null;\n\n  /**\n   * Commands to pass to {@link Router#createUrlTree} or a `UrlTree`.\n   *   - **array**: commands to pass to {@link Router#createUrlTree}.\n   *   - **string**: shorthand for array of commands with just the string, i.e. `['/route']`\n   *   - **UrlTree**: a `UrlTree` for this link rather than creating one from the commands\n   *     and other inputs that correspond to properties of `UrlCreationOptions`.\n   *   - **null|undefined**: effectively disables the `routerLink`\n   * @see {@link Router#createUrlTree}\n   */\n  @Input()\n  set routerLink(commandsOrUrlTree: readonly any[] | string | UrlTree | null | undefined) {\n    if (commandsOrUrlTree == null) {\n      this.routerLinkInput = null;\n      this.setTabIndexIfNotOnNativeEl(null);\n    } else {\n      if (isUrlTree(commandsOrUrlTree)) {\n        this.routerLinkInput = commandsOrUrlTree;\n      } else {\n        this.routerLinkInput = Array.isArray(commandsOrUrlTree)\n          ? commandsOrUrlTree\n          : [commandsOrUrlTree];\n      }\n      this.setTabIndexIfNotOnNativeEl('0');\n    }\n  }\n\n  /** @docs-private */\n  @HostListener('click', [\n    '$event.button',\n    '$event.ctrlKey',\n    '$event.shiftKey',\n    '$event.altKey',\n    '$event.metaKey',\n  ])\n  onClick(\n    button: number,\n    ctrlKey: boolean,\n    shiftKey: boolean,\n    altKey: boolean,\n    metaKey: boolean,\n  ): boolean {\n    const urlTree = this.urlTree;\n\n    if (urlTree === null) {\n      return true;\n    }\n\n    if (this.isAnchorElement) {\n      if (button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {\n        return true;\n      }\n\n      if (typeof this.target === 'string' && this.target != '_self') {\n        return true;\n      }\n    }\n\n    const extras = {\n      skipLocationChange: this.skipLocationChange,\n      replaceUrl: this.replaceUrl,\n      state: this.state,\n      info: this.info,\n    };\n    // navigateByUrl is mocked frequently in tests... Reduce breakages when adding `catch`\n    this.router.navigateByUrl(urlTree, extras)?.catch((e) => {\n      this.applicationErrorHandler(e);\n    });\n\n    // Return `false` for `<a>` elements to prevent default action\n    // and cancel the native behavior, since the navigation is handled\n    // by the Router.\n    return !this.isAnchorElement;\n  }\n\n  /** @docs-private */\n  ngOnDestroy(): any {\n    this.subscription?.unsubscribe();\n  }\n\n  private updateHref(): void {\n    const urlTree = this.urlTree;\n    this.reactiveHref.set(\n      urlTree !== null && this.locationStrategy\n        ? (this.locationStrategy?.prepareExternalUrl(this.router.serializeUrl(urlTree)) ?? '')\n        : null,\n    );\n  }\n\n  private applyAttributeValue(attrName: string, attrValue: string | null) {\n    const renderer = this.renderer;\n    const nativeElement = this.el.nativeElement;\n    if (attrValue !== null) {\n      renderer.setAttribute(nativeElement, attrName, attrValue);\n    } else {\n      renderer.removeAttribute(nativeElement, attrName);\n    }\n  }\n\n  get urlTree(): UrlTree | null {\n    if (this.routerLinkInput === null) {\n      return null;\n    } else if (isUrlTree(this.routerLinkInput)) {\n      return this.routerLinkInput;\n    }\n    return this.router.createUrlTree(this.routerLinkInput, {\n      // If the `relativeTo` input is not defined, we want to use `this.route` by default.\n      // Otherwise, we should use the value provided by the user in the input.\n      relativeTo: this.relativeTo !== undefined ? this.relativeTo : this.route,\n      queryParams: this.queryParams,\n      fragment: this.fragment,\n      queryParamsHandling: this.queryParamsHandling,\n      preserveFragment: this.preserveFragment,\n    });\n  }\n}\n\n/**\n * @description\n * An alias for the `RouterLink` directive.\n * Deprecated since v15, use `RouterLink` directive instead.\n *\nexport { RouterLink as RouterLinkWithHref };\nnstead.\n * @publicApi\n */\nexport {RouterLink as RouterLinkWithHref};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectorRef,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\nimport {from, of, Subscription} from 'rxjs';\nimport {mergeAll} from 'rxjs/operators';\n\nimport {Event, NavigationEnd} from '../events';\nimport {Router} from '../router';\nimport {IsActiveMatchOptions} from '../url_tree';\n\nimport {RouterLink} from './router_link';\n\n/**\n *\n * @description\n *\n * Tracks whether the linked route of an element is currently active, and allows you\n * to specify one or more CSS classes to add to the element when the linked route\n * is active.\n *\n * Use this directive to create a visual distinction for elements associated with an active route.\n * For example, the following code highlights the word \"Bob\" when the router\n * activates the associated route:\n *\n * ```html\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n * ```\n *\n * Whenever the URL is either '/user' or '/user/bob', the \"active-link\" class is\n * added to the anchor tag. If the URL changes, the class is removed.\n *\n * You can set more than one class using a space-separated string or an array.\n * For example:\n *\n * ```html\n * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\n * <a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob</a>\n * ```\n *\n * To add the classes only when the URL matches the link exactly, add the option `exact: true`:\n *\n * ```html\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\n * true}\">Bob</a>\n * ```\n *\n * To directly check the `isActive` status of the link, assign the `RouterLinkActive`\n * instance to a template variable.\n * For example, the following checks the status without assigning any CSS classes:\n *\n * ```html\n * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\n *   Bob {{ rla.isActive ? '(already open)' : ''}}\n * </a>\n * ```\n *\n * You can apply the `RouterLinkActive` directive to an ancestor of linked elements.\n * For example, the following sets the active-link class on the `<div>`  parent tag\n * when the URL is either '/user/jim' or '/user/bob'.\n *\n * ```html\n * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\n *   <a routerLink=\"/user/jim\">Jim</a>\n *   <a routerLink=\"/user/bob\">Bob</a>\n * </div>\n * ```\n *\n * The `RouterLinkActive` directive can also be used to set the aria-current attribute\n * to provide an alternative distinction for active elements to visually impaired users.\n *\n * For example, the following code adds the 'active' class to the Home Page link when it is\n * indeed active and in such case also sets its aria-current attribute to 'page':\n *\n * ```html\n * <a routerLink=\"/\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">Home Page</a>\n * ```\n *\n * NOTE: RouterLinkActive is a `ContentChildren` query.\n * Content children queries do not retrieve elements or directives that are in other components' templates, since a component's template is always a black box to its ancestors.\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\n@Directive({\n  selector: '[routerLinkActive]',\n  exportAs: 'routerLinkActive',\n})\nexport class RouterLinkActive implements OnChanges, OnDestroy, AfterContentInit {\n  @ContentChildren(RouterLink, {descendants: true}) links!: QueryList<RouterLink>;\n\n  private classes: string[] = [];\n  private routerEventsSubscription: Subscription;\n  private linkInputChangesSubscription?: Subscription;\n  private _isActive = false;\n\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  /**\n   * Options to configure how to determine if the router link is active.\n   *\n   * These options are passed to the `Router.isActive()` function.\n   *\n   * @see {@link Router#isActive}\n   */\n  @Input() routerLinkActiveOptions: {exact: boolean} | IsActiveMatchOptions = {exact: false};\n\n  /**\n   * Aria-current attribute to apply when the router link is active.\n   *\n   * Possible values: `'page'` | `'step'` | `'location'` | `'date'` | `'time'` | `true` | `false`.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current}\n   */\n  @Input() ariaCurrentWhenActive?: 'page' | 'step' | 'location' | 'date' | 'time' | true | false;\n\n  /**\n   *\n   * You can use the output `isActiveChange` to get notified each time the link becomes\n   * active or inactive.\n   *\n   * Emits:\n   * true  -> Route is active\n   * false -> Route is inactive\n   *\n   * ```html\n   * <a\n   *  routerLink=\"/user/bob\"\n   *  routerLinkActive=\"active-link\"\n   *  (isActiveChange)=\"this.onRouterLinkActive($event)\">Bob</a>\n   * ```\n   */\n  @Output() readonly isActiveChange: EventEmitter<boolean> = new EventEmitter();\n\n  constructor(\n    private router: Router,\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private readonly cdr: ChangeDetectorRef,\n    @Optional() private link?: RouterLink,\n  ) {\n    this.routerEventsSubscription = router.events.subscribe((s: Event) => {\n      if (s instanceof NavigationEnd) {\n        this.update();\n      }\n    });\n  }\n\n  /** @docs-private */\n  ngAfterContentInit(): void {\n    // `of(null)` is used to force subscribe body to execute once immediately (like `startWith`).\n    of(this.links.changes, of(null))\n      .pipe(mergeAll())\n      .subscribe((_) => {\n        this.update();\n        this.subscribeToEachLinkOnChanges();\n      });\n  }\n\n  private subscribeToEachLinkOnChanges() {\n    this.linkInputChangesSubscription?.unsubscribe();\n    const allLinkChanges = [...this.links.toArray(), this.link]\n      .filter((link): link is RouterLink => !!link)\n      .map((link) => link.onChanges);\n    this.linkInputChangesSubscription = from(allLinkChanges)\n      .pipe(mergeAll())\n      .subscribe((link) => {\n        if (this._isActive !== this.isLinkActive(this.router)(link)) {\n          this.update();\n        }\n      });\n  }\n\n  @Input()\n  set routerLinkActive(data: string[] | string) {\n    const classes = Array.isArray(data) ? data : data.split(' ');\n    this.classes = classes.filter((c) => !!c);\n  }\n\n  /** @docs-private */\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n  /** @docs-private */\n  ngOnDestroy(): void {\n    this.routerEventsSubscription.unsubscribe();\n    this.linkInputChangesSubscription?.unsubscribe();\n  }\n\n  private update(): void {\n    if (!this.links || !this.router.navigated) return;\n\n    queueMicrotask(() => {\n      const hasActiveLinks = this.hasActiveLinks();\n      this.classes.forEach((c) => {\n        if (hasActiveLinks) {\n          this.renderer.addClass(this.element.nativeElement, c);\n        } else {\n          this.renderer.removeClass(this.element.nativeElement, c);\n        }\n      });\n      if (hasActiveLinks && this.ariaCurrentWhenActive !== undefined) {\n        this.renderer.setAttribute(\n          this.element.nativeElement,\n          'aria-current',\n          this.ariaCurrentWhenActive.toString(),\n        );\n      } else {\n        this.renderer.removeAttribute(this.element.nativeElement, 'aria-current');\n      }\n\n      // Only emit change if the active state changed.\n      if (this._isActive !== hasActiveLinks) {\n        this._isActive = hasActiveLinks;\n        this.cdr.markForCheck();\n        // Emit on isActiveChange after classes are updated\n        this.isActiveChange.emit(hasActiveLinks);\n      }\n    });\n  }\n\n  private isLinkActive(router: Router): (link: RouterLink) => boolean {\n    const options: boolean | IsActiveMatchOptions = isActiveMatchOptions(\n      this.routerLinkActiveOptions,\n    )\n      ? this.routerLinkActiveOptions\n      : // While the types should disallow `undefined` here, it's possible without strict inputs\n        this.routerLinkActiveOptions.exact || false;\n    return (link: RouterLink) => {\n      const urlTree = link.urlTree;\n      return urlTree ? router.isActive(urlTree, options) : false;\n    };\n  }\n\n  private hasActiveLinks(): boolean {\n    const isActiveCheckFn = this.isLinkActive(this.router);\n    return (this.link && isActiveCheckFn(this.link)) || this.links.some(isActiveCheckFn);\n  }\n}\n\n/**\n * Use instead of `'paths' in options` to be compatible with property renaming\n */\nfunction isActiveMatchOptions(\n  options: {exact: boolean} | IsActiveMatchOptions,\n): options is IsActiveMatchOptions {\n  return !!(options as IsActiveMatchOptions).paths;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {createEnvironmentInjector, EnvironmentInjector, Injectable, OnDestroy} from '@angular/core';\nimport {from, Observable, of, Subscription} from 'rxjs';\nimport {catchError, concatMap, filter, mergeAll, mergeMap} from 'rxjs/operators';\n\nimport {Event, NavigationEnd} from './events';\nimport {LoadedRouterConfig, Route, Routes} from './models';\nimport {Router} from './router';\nimport {RouterConfigLoader} from './router_config_loader';\n\n/**\n * @description\n *\n * Provides a preloading strategy.\n *\n * @publicApi\n */\nexport abstract class PreloadingStrategy {\n  abstract preload(route: Route, fn: () => Observable<any>): Observable<any>;\n}\n\n/**\n * @description\n *\n * Provides a preloading strategy that preloads all modules as quickly as possible.\n *\n * ```ts\n * RouterModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root'})\nexport class PreloadAllModules implements PreloadingStrategy {\n  preload(route: Route, fn: () => Observable<any>): Observable<any> {\n    return fn().pipe(catchError(() => of(null)));\n  }\n}\n\n/**\n * @description\n *\n * Provides a preloading strategy that does not preload any modules.\n *\n * This strategy is enabled by default.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root'})\nexport class NoPreloading implements PreloadingStrategy {\n  preload(route: Route, fn: () => Observable<any>): Observable<any> {\n    return of(null);\n  }\n}\n\n/**\n * The preloader optimistically loads all router configurations to\n * make navigations into lazily-loaded sections of the application faster.\n *\n * The preloader runs in the background. When the router bootstraps, the preloader\n * starts listening to all navigation events. After every such event, the preloader\n * will check if any configurations can be loaded lazily.\n *\n * If a route is protected by `canLoad` guards, the preloaded will not load it.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root'})\nexport class RouterPreloader implements OnDestroy {\n  private subscription?: Subscription;\n\n  constructor(\n    private router: Router,\n    private injector: EnvironmentInjector,\n    private preloadingStrategy: PreloadingStrategy,\n    private loader: RouterConfigLoader,\n  ) {}\n\n  setUpPreloading(): void {\n    this.subscription = this.router.events\n      .pipe(\n        filter((e: Event) => e instanceof NavigationEnd),\n        concatMap(() => this.preload()),\n      )\n      .subscribe(() => {});\n  }\n\n  preload(): Observable<any> {\n    return this.processRoutes(this.injector, this.router.config);\n  }\n\n  /** @docs-private */\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  private processRoutes(injector: EnvironmentInjector, routes: Routes): Observable<void> {\n    const res: Observable<any>[] = [];\n    for (const route of routes) {\n      if (route.providers && !route._injector) {\n        route._injector = createEnvironmentInjector(\n          route.providers,\n          injector,\n          `Route: ${route.path}`,\n        );\n      }\n\n      const injectorForCurrentRoute = route._injector ?? injector;\n      const injectorForChildren = route._loadedInjector ?? injectorForCurrentRoute;\n\n      // Note that `canLoad` is only checked as a condition that prevents `loadChildren` and not\n      // `loadComponent`. `canLoad` guards only block loading of child routes by design. This\n      // happens as a consequence of needing to descend into children for route matching immediately\n      // while component loading is deferred until route activation. Because `canLoad` guards can\n      // have side effects, we cannot execute them here so we instead skip preloading altogether\n      // when present. Lastly, it remains to be decided whether `canLoad` should behave this way\n      // at all. Code splitting and lazy loading is separate from client-side authorization checks\n      // and should not be used as a security measure to prevent loading of code.\n      if (\n        (route.loadChildren && !route._loadedRoutes && route.canLoad === undefined) ||\n        (route.loadComponent && !route._loadedComponent)\n      ) {\n        res.push(this.preloadConfig(injectorForCurrentRoute, route));\n      }\n      if (route.children || route._loadedRoutes) {\n        res.push(this.processRoutes(injectorForChildren, (route.children ?? route._loadedRoutes)!));\n      }\n    }\n    return from(res).pipe(mergeAll());\n  }\n\n  private preloadConfig(injector: EnvironmentInjector, route: Route): Observable<void> {\n    return this.preloadingStrategy.preload(route, () => {\n      let loadedChildren$: Observable<LoadedRouterConfig | null>;\n      if (route.loadChildren && route.canLoad === undefined) {\n        loadedChildren$ = from(this.loader.loadChildren(injector, route));\n      } else {\n        loadedChildren$ = of(null);\n      }\n\n      const recursiveLoadChildren$ = loadedChildren$.pipe(\n        mergeMap((config: LoadedRouterConfig | null) => {\n          if (config === null) {\n            return of(void 0);\n          }\n          route._loadedRoutes = config.routes;\n          route._loadedInjector = config.injector;\n          // If the loaded config was a module, use that as the module/module injector going\n          // forward. Otherwise, continue using the current module/module injector.\n          return this.processRoutes(config.injector ?? injector, config.routes);\n        }),\n      );\n      if (route.loadComponent && !route._loadedComponent) {\n        const loadComponent$ = this.loader.loadComponent(injector, route);\n        return from([recursiveLoadChildren$, loadComponent$]).pipe(mergeAll());\n      } else {\n        return recursiveLoadChildren$;\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ViewportScroller} from '@angular/common';\nimport {Injectable, InjectionToken, NgZone, OnDestroy} from '@angular/core';\nimport {Unsubscribable} from 'rxjs';\n\nimport {\n  IMPERATIVE_NAVIGATION,\n  NavigationEnd,\n  NavigationSkipped,\n  NavigationSkippedCode,\n  NavigationStart,\n  NavigationTrigger,\n  Scroll,\n} from './events';\nimport {NavigationTransitions} from './navigation_transition';\nimport {UrlSerializer} from './url_tree';\n\nexport const ROUTER_SCROLLER = new InjectionToken<RouterScroller>('');\n\n@Injectable()\nexport class RouterScroller implements OnDestroy {\n  private routerEventsSubscription?: Unsubscribable;\n  private scrollEventsSubscription?: Unsubscribable;\n\n  private lastId = 0;\n  private lastSource: NavigationTrigger | undefined = IMPERATIVE_NAVIGATION;\n  private restoredId = 0;\n  private store: {[key: string]: [number, number]} = {};\n\n  /** @docs-private */\n  constructor(\n    readonly urlSerializer: UrlSerializer,\n    private transitions: NavigationTransitions,\n    public readonly viewportScroller: ViewportScroller,\n    private readonly zone: NgZone,\n    private options: {\n      scrollPositionRestoration?: 'disabled' | 'enabled' | 'top';\n      anchorScrolling?: 'disabled' | 'enabled';\n    } = {},\n  ) {\n    // Default both options to 'disabled'\n    options.scrollPositionRestoration ||= 'disabled';\n    options.anchorScrolling ||= 'disabled';\n  }\n\n  init(): void {\n    // we want to disable the automatic scrolling because having two places\n    // responsible for scrolling results race conditions, especially given\n    // that browser don't implement this behavior consistently\n    if (this.options.scrollPositionRestoration !== 'disabled') {\n      this.viewportScroller.setHistoryScrollRestoration('manual');\n    }\n    this.routerEventsSubscription = this.createScrollEvents();\n    this.scrollEventsSubscription = this.consumeScrollEvents();\n  }\n\n  private createScrollEvents() {\n    return this.transitions.events.subscribe((e) => {\n      if (e instanceof NavigationStart) {\n        // store the scroll position of the current stable navigations.\n        this.store[this.lastId] = this.viewportScroller.getScrollPosition();\n        this.lastSource = e.navigationTrigger;\n        this.restoredId = e.restoredState ? e.restoredState.navigationId : 0;\n      } else if (e instanceof NavigationEnd) {\n        this.lastId = e.id;\n        this.scheduleScrollEvent(e, this.urlSerializer.parse(e.urlAfterRedirects).fragment);\n      } else if (\n        e instanceof NavigationSkipped &&\n        e.code === NavigationSkippedCode.IgnoredSameUrlNavigation\n      ) {\n        this.lastSource = undefined;\n        this.restoredId = 0;\n        this.scheduleScrollEvent(e, this.urlSerializer.parse(e.url).fragment);\n      }\n    });\n  }\n\n  private consumeScrollEvents() {\n    return this.transitions.events.subscribe((e) => {\n      if (!(e instanceof Scroll)) return;\n      const instantScroll: ScrollOptions = {behavior: 'instant'};\n      // a popstate event. The pop state event will always ignore anchor scrolling.\n      if (e.position) {\n        if (this.options.scrollPositionRestoration === 'top') {\n          this.viewportScroller.scrollToPosition([0, 0], instantScroll);\n        } else if (this.options.scrollPositionRestoration === 'enabled') {\n          this.viewportScroller.scrollToPosition(e.position, instantScroll);\n        }\n        // imperative navigation \"forward\"\n      } else {\n        if (e.anchor && this.options.anchorScrolling === 'enabled') {\n          this.viewportScroller.scrollToAnchor(e.anchor);\n        } else if (this.options.scrollPositionRestoration !== 'disabled') {\n          this.viewportScroller.scrollToPosition([0, 0]);\n        }\n      }\n    });\n  }\n\n  private scheduleScrollEvent(\n    routerEvent: NavigationEnd | NavigationSkipped,\n    anchor: string | null,\n  ): void {\n    this.zone.runOutsideAngular(async () => {\n      // The scroll event needs to be delayed until after change detection. Otherwise, we may\n      // attempt to restore the scroll position before the router outlet has fully rendered the\n      // component by executing its update block of the template function.\n      //\n      // #57109 (we need to wait at least a macrotask before scrolling. AfterNextRender resolves in microtask event loop with Zones)\n      // We could consider _also_ waiting for a render promise though one should have already happened or been scheduled by this point\n      // and should definitely happen before rAF/setTimeout.\n      // #53985 (cannot rely solely on setTimeout because a frame may paint before the timeout)\n      await new Promise((resolve) => {\n        setTimeout(resolve);\n        if (typeof requestAnimationFrame !== 'undefined') {\n          requestAnimationFrame(resolve);\n        }\n      });\n      this.zone.run(() => {\n        this.transitions.events.next(\n          new Scroll(\n            routerEvent,\n            this.lastSource === 'popstate' ? this.store[this.restoredId] : null,\n            anchor,\n          ),\n        );\n      });\n    });\n  }\n\n  /** @docs-private */\n  ngOnDestroy(): void {\n    this.routerEventsSubscription?.unsubscribe();\n    this.scrollEventsSubscription?.unsubscribe();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injector} from '@angular/core';\nimport {Router} from './router';\nimport {Route} from './models';\n\n/**\n * Returns the loaded routes for a given route.\n */\nexport function getLoadedRoutes(route: Route): Route[] | undefined {\n  return route._loadedRoutes;\n}\n\n/**\n * Returns the Router instance from the given injector, or null if not available.\n */\nexport function getRouterInstance(injector: Injector): Router | null {\n  return injector.get(Router, null, {optional: true});\n}\n\n/**\n * Navigates the given router to the specified URL.\n * Throws if the provided router is not an Angular Router.\n */\nexport function navigateByUrl(router: Router, url: string): Promise<boolean> {\n  if (!(router instanceof Router)) {\n    throw new Error('The provided router is not an Angular Router.');\n  }\n  return router.navigateByUrl(url);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {inject, Injectable} from '@angular/core';\n\nimport {PlatformNavigation} from '@angular/common';\nimport {HistoryStateManager} from './state_manager';\nimport {RestoredState} from '../navigation_transition';\nimport {NavigationTrigger} from '../events';\nimport {SubscriptionLike} from 'rxjs';\n\n@Injectable({providedIn: 'root'})\n/**\n * A `StateManager` that uses the browser's Navigation API to get the state of a `popstate`\n * event.\n *\n * This class is currently an extension of `HistoryStateManager` and is used when the\n * Navigation API is available. It overrides the behavior of listening to `popstate` events\n * to retrieve the state from `navigation.currentEntry` instead of `history.state` since\n * history and navigation states are separate.\n *\n * This implementation is not complete - it does not integrate at all with navigation API other than\n * providing the right state on popstate. It needs to manage the whole lifecycle of the navigation\n * by intercepting the navigation event.\n */\nexport class NavigationStateManager extends HistoryStateManager {\n  private readonly navigation = inject(PlatformNavigation);\n\n  override registerNonRouterCurrentEntryChangeListener(\n    listener: (\n      url: string,\n      state: RestoredState | null | undefined,\n      trigger: NavigationTrigger,\n    ) => void,\n  ): SubscriptionLike {\n    return this.location.subscribe((event) => {\n      if (event['type'] === 'popstate') {\n        // Pass the state from navigation API rather than from history\n        const state = this.navigation.currentEntry?.getState() as RestoredState;\n        listener(event['url']!, state, 'popstate');\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  HashLocationStrategy,\n  LOCATION_INITIALIZED,\n  LocationStrategy,\n  ViewportScroller,\n  Location,\n  ɵNavigationAdapterForLocation,\n} from '@angular/common';\nimport {\n  APP_BOOTSTRAP_LISTENER,\n  ApplicationRef,\n  ComponentRef,\n  ENVIRONMENT_INITIALIZER,\n  EnvironmentProviders,\n  inject,\n  InjectionToken,\n  Injector,\n  makeEnvironmentProviders,\n  NgZone,\n  provideAppInitializer,\n  Provider,\n  runInInjectionContext,\n  ɵperformanceMarkFeature as performanceMarkFeature,\n  ɵIS_ENABLED_BLOCKING_INITIAL_NAVIGATION as IS_ENABLED_BLOCKING_INITIAL_NAVIGATION,\n  ɵpublishExternalGlobalUtil,\n  provideEnvironmentInitializer,\n  Type,\n} from '@angular/core';\nimport {of, Subject} from 'rxjs';\n\nimport {INPUT_BINDER, RoutedComponentInputBinder} from './directives/router_outlet';\nimport {Event, NavigationError, stringifyEvent} from './events';\nimport {RedirectCommand, Route, Routes} from './models';\nimport {NAVIGATION_ERROR_HANDLER, NavigationTransitions} from './navigation_transition';\nimport {Router} from './router';\nimport {InMemoryScrollingOptions, ROUTER_CONFIGURATION, RouterConfigOptions} from './router_config';\nimport {ROUTES} from './router_config_loader';\nimport {PreloadingStrategy, RouterPreloader} from './router_preloader';\nimport {ROUTER_SCROLLER, RouterScroller} from './router_scroller';\nimport {ActivatedRoute} from './router_state';\nimport {UrlSerializer} from './url_tree';\nimport {afterNextNavigation} from './utils/navigations';\nimport {\n  CREATE_VIEW_TRANSITION,\n  createViewTransition,\n  VIEW_TRANSITION_OPTIONS,\n  ViewTransitionsFeatureOptions,\n} from './utils/view_transition';\nimport {getLoadedRoutes, getRouterInstance, navigateByUrl} from './router_devtools';\nimport {StateManager} from './statemanager/state_manager';\nimport {NavigationStateManager} from './statemanager/navigation_state_manager';\n\n/**\n * Sets up providers necessary to enable `Router` functionality for the application.\n * Allows to configure a set of routes as well as extra features that should be enabled.\n *\n * @usageNotes\n *\n * Basic example of how you can add a Router to your application:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent, {\n *   providers: [provideRouter(appRoutes)]\n * });\n * ```\n *\n * You can also enable optional features in the Router by adding functions from the `RouterFeatures`\n * type:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes,\n *         withDebugTracing(),\n *         withRouterConfig({paramsInheritanceStrategy: 'always'}))\n *     ]\n *   }\n * );\n * ```\n * @see [Router](guide/routing)\n *\n * @see {@link RouterFeatures}\n *\n * @publicApi\n * @param routes A set of `Route`s to use for the application routing table.\n * @param features Optional features to configure additional router behaviors.\n * @returns A set of providers to setup a Router.\n */\nexport function provideRouter(routes: Routes, ...features: RouterFeatures[]): EnvironmentProviders {\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    // Publish this util when the router is provided so that the devtools can use it.\n    ɵpublishExternalGlobalUtil('ɵgetLoadedRoutes', getLoadedRoutes);\n    ɵpublishExternalGlobalUtil('ɵgetRouterInstance', getRouterInstance);\n    ɵpublishExternalGlobalUtil('ɵnavigateByUrl', navigateByUrl);\n  }\n\n  return makeEnvironmentProviders([\n    {provide: ROUTES, multi: true, useValue: routes},\n    typeof ngDevMode === 'undefined' || ngDevMode\n      ? {provide: ROUTER_IS_PROVIDED, useValue: true}\n      : [],\n    {provide: ActivatedRoute, useFactory: rootRoute},\n    {provide: APP_BOOTSTRAP_LISTENER, multi: true, useFactory: getBootstrapListener},\n    features.map((feature) => feature.ɵproviders),\n  ]);\n}\n\nexport function rootRoute(): ActivatedRoute {\n  return inject(Router).routerState.root;\n}\n\n/**\n * Helper type to represent a Router feature.\n *\n * @publicApi\n */\nexport interface RouterFeature<FeatureKind extends RouterFeatureKind> {\n  ɵkind: FeatureKind;\n  ɵproviders: Array<Provider | EnvironmentProviders>;\n}\n\n/**\n * Helper function to create an object that represents a Router feature.\n */\nfunction routerFeature<FeatureKind extends RouterFeatureKind>(\n  kind: FeatureKind,\n  providers: Array<Provider | EnvironmentProviders>,\n): RouterFeature<FeatureKind> {\n  return {ɵkind: kind, ɵproviders: providers};\n}\n\n/**\n * An Injection token used to indicate whether `provideRouter` or `RouterModule.forRoot` was ever\n * called.\n */\nexport const ROUTER_IS_PROVIDED = new InjectionToken<boolean>('', {\n  providedIn: 'root',\n  factory: () => false,\n});\n\nconst routerIsProvidedDevModeCheck = {\n  provide: ENVIRONMENT_INITIALIZER,\n  multi: true,\n  useFactory() {\n    return () => {\n      if (!inject(ROUTER_IS_PROVIDED)) {\n        console.warn(\n          '`provideRoutes` was called without `provideRouter` or `RouterModule.forRoot`. ' +\n            'This is likely a mistake.',\n        );\n      }\n    };\n  },\n};\n\n/**\n * Registers a DI provider for a set of routes.\n * @param routes The route configuration to provide.\n *\n * @usageNotes\n *\n * ```ts\n * @NgModule({\n *   providers: [provideRoutes(ROUTES)]\n * })\n * class LazyLoadedChildModule {}\n * ```\n *\n * @deprecated If necessary, provide routes using the `ROUTES` `InjectionToken`.\n * @see {@link ROUTES}\n * @publicApi\n */\nexport function provideRoutes(routes: Routes): Provider[] {\n  return [\n    {provide: ROUTES, multi: true, useValue: routes},\n    typeof ngDevMode === 'undefined' || ngDevMode ? routerIsProvidedDevModeCheck : [],\n  ];\n}\n\n/**\n * A type alias for providers returned by `withInMemoryScrolling` for use with `provideRouter`.\n *\n * @see {@link withInMemoryScrolling}\n * @see {@link provideRouter}\n *\n * @publicApi\n */\nexport type InMemoryScrollingFeature = RouterFeature<RouterFeatureKind.InMemoryScrollingFeature>;\n\n/**\n * Enables customizable scrolling behavior for router navigations.\n *\n * @usageNotes\n *\n * Basic example of how you can enable scrolling feature:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withInMemoryScrolling())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n * @see {@link ViewportScroller}\n *\n * @publicApi\n * @param options Set of configuration parameters to customize scrolling behavior, see\n *     `InMemoryScrollingOptions` for additional information.\n * @returns A set of providers for use with `provideRouter`.\n */\nexport function withInMemoryScrolling(\n  options: InMemoryScrollingOptions = {},\n): InMemoryScrollingFeature {\n  const providers = [\n    {\n      provide: ROUTER_SCROLLER,\n      useFactory: () => {\n        const viewportScroller = inject(ViewportScroller);\n        const zone = inject(NgZone);\n        const transitions = inject(NavigationTransitions);\n        const urlSerializer = inject(UrlSerializer);\n        return new RouterScroller(urlSerializer, transitions, viewportScroller, zone, options);\n      },\n    },\n  ];\n  return routerFeature(RouterFeatureKind.InMemoryScrollingFeature, providers);\n}\n\n/**\n * Enables the use of the browser's `History` API for navigation.\n *\n * @description\n * This function provides a `Location` strategy that uses the browser's `History` API.\n * It is required when using features that rely on `history.state`. For example, the\n * `state` object in `NavigationExtras` is passed to `history.pushState` or\n * `history.replaceState`.\n *\n * @usageNotes\n *\n * ```typescript\n * const appRoutes: Routes = [\n *   { path: 'page', component: PageComponent },\n * ];\n *\n * bootstrapApplication(AppComponent, {\n *   providers: [\n *     provideRouter(appRoutes, withPlatformNavigation())\n *   ]\n * });\n * ```\n *\n * @returns A `RouterFeature` that enables the platform navigation.\n */\nexport function withPlatformNavigation() {\n  const devModeLocationCheck =\n    typeof ngDevMode === 'undefined' || ngDevMode\n      ? [\n          provideEnvironmentInitializer(() => {\n            const locationInstance = inject(Location);\n            if (!(locationInstance instanceof ɵNavigationAdapterForLocation)) {\n              const locationConstructorName = (locationInstance as any).constructor.name;\n              let message =\n                `'withPlatformNavigation' provides a 'Location' implementation that ensures navigation APIs are consistently used.` +\n                ` An instance of ${locationConstructorName} was found instead.`;\n              if (locationConstructorName === 'SpyLocation') {\n                message += ` One of 'RouterTestingModule' or 'provideLocationMocks' was likely used. 'withPlatformNavigation' does not work with these because they override the Location implementation.`;\n              }\n              throw new Error(message);\n            }\n          }),\n        ]\n      : [];\n  const providers = [\n    {provide: StateManager, useExisting: NavigationStateManager},\n    {provide: Location, useClass: ɵNavigationAdapterForLocation},\n    devModeLocationCheck,\n  ];\n  return routerFeature(RouterFeatureKind.InMemoryScrollingFeature, providers);\n}\n\nexport function getBootstrapListener() {\n  const injector = inject(Injector);\n  return (bootstrappedComponentRef: ComponentRef<unknown>) => {\n    const ref = injector.get(ApplicationRef);\n\n    if (bootstrappedComponentRef !== ref.components[0]) {\n      return;\n    }\n\n    const router = injector.get(Router);\n    const bootstrapDone = injector.get(BOOTSTRAP_DONE);\n\n    if (injector.get(INITIAL_NAVIGATION) === InitialNavigation.EnabledNonBlocking) {\n      router.initialNavigation();\n    }\n\n    injector.get(ROUTER_PRELOADER, null, {optional: true})?.setUpPreloading();\n    injector.get(ROUTER_SCROLLER, null, {optional: true})?.init();\n    router.resetRootComponentType(ref.componentTypes[0]);\n    if (!bootstrapDone.closed) {\n      bootstrapDone.next();\n      bootstrapDone.complete();\n      bootstrapDone.unsubscribe();\n    }\n  };\n}\n\n/**\n * A subject used to indicate that the bootstrapping phase is done. When initial navigation is\n * `enabledBlocking`, the first navigation waits until bootstrapping is finished before continuing\n * to the activation phase.\n */\nconst BOOTSTRAP_DONE = new InjectionToken<Subject<void>>(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'bootstrap done indicator' : '',\n  {\n    factory: () => {\n      return new Subject<void>();\n    },\n  },\n);\n\n/**\n * This and the INITIAL_NAVIGATION token are used internally only. The public API side of this is\n * configured through the `ExtraOptions`.\n *\n * When set to `EnabledBlocking`, the initial navigation starts before the root\n * component is created. The bootstrap is blocked until the initial navigation is complete. This\n * value should be set in case you use [server-side rendering](guide/ssr), but do not enable\n * [hydration](guide/hydration) for your application.\n *\n * When set to `EnabledNonBlocking`, the initial navigation starts after the root component has been\n * created. The bootstrap is not blocked on the completion of the initial navigation.\n *\n * When set to `Disabled`, the initial navigation is not performed. The location listener is set up\n * before the root component gets created. Use if there is a reason to have more control over when\n * the router starts its initial navigation due to some complex initialization logic.\n *\n * @see {@link ExtraOptions}\n */\nconst enum InitialNavigation {\n  EnabledBlocking,\n  EnabledNonBlocking,\n  Disabled,\n}\n\nconst INITIAL_NAVIGATION = new InjectionToken<InitialNavigation>(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'initial navigation' : '',\n  {providedIn: 'root', factory: () => InitialNavigation.EnabledNonBlocking},\n);\n\n/**\n * A type alias for providers returned by `withEnabledBlockingInitialNavigation` for use with\n * `provideRouter`.\n *\n * @see {@link withEnabledBlockingInitialNavigation}\n * @see {@link provideRouter}\n *\n * @publicApi\n */\nexport type EnabledBlockingInitialNavigationFeature =\n  RouterFeature<RouterFeatureKind.EnabledBlockingInitialNavigationFeature>;\n\n/**\n * A type alias for providers returned by `withEnabledBlockingInitialNavigation` or\n * `withDisabledInitialNavigation` functions for use with `provideRouter`.\n *\n * @see {@link withEnabledBlockingInitialNavigation}\n * @see {@link withDisabledInitialNavigation}\n * @see {@link provideRouter}\n *\n * @publicApi\n */\nexport type InitialNavigationFeature =\n  | EnabledBlockingInitialNavigationFeature\n  | DisabledInitialNavigationFeature;\n\n/**\n * Configures initial navigation to start before the root component is created.\n *\n * The bootstrap is blocked until the initial navigation is complete. This should be set in case\n * you use [server-side rendering](guide/ssr), but do not enable [hydration](guide/hydration) for\n * your application.\n *\n * @usageNotes\n *\n * Basic example of how you can enable this navigation behavior:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withEnabledBlockingInitialNavigation())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @publicApi\n * @returns A set of providers for use with `provideRouter`.\n */\nexport function withEnabledBlockingInitialNavigation(): EnabledBlockingInitialNavigationFeature {\n  const providers = [\n    {provide: IS_ENABLED_BLOCKING_INITIAL_NAVIGATION, useValue: true},\n    {provide: INITIAL_NAVIGATION, useValue: InitialNavigation.EnabledBlocking},\n    provideAppInitializer(() => {\n      const injector = inject(Injector);\n      const locationInitialized: Promise<any> = injector.get(\n        LOCATION_INITIALIZED,\n        Promise.resolve(),\n      );\n\n      return locationInitialized.then(() => {\n        return new Promise((resolve) => {\n          const router = injector.get(Router);\n          const bootstrapDone = injector.get(BOOTSTRAP_DONE);\n          afterNextNavigation(router, () => {\n            // Unblock APP_INITIALIZER in case the initial navigation was canceled or errored\n            // without a redirect.\n            resolve(true);\n          });\n\n          injector.get(NavigationTransitions).afterPreactivation = () => {\n            // Unblock APP_INITIALIZER once we get to `afterPreactivation`. At this point, we\n            // assume activation will complete successfully (even though this is not\n            // guaranteed).\n            resolve(true);\n            return bootstrapDone.closed ? of(void 0) : bootstrapDone;\n          };\n          router.initialNavigation();\n        });\n      });\n    }),\n  ];\n  return routerFeature(RouterFeatureKind.EnabledBlockingInitialNavigationFeature, providers);\n}\n\n/**\n * A type alias for providers returned by `withDisabledInitialNavigation` for use with\n * `provideRouter`.\n *\n * @see {@link withDisabledInitialNavigation}\n * @see {@link provideRouter}\n *\n * @publicApi\n */\nexport type DisabledInitialNavigationFeature =\n  RouterFeature<RouterFeatureKind.DisabledInitialNavigationFeature>;\n\n/**\n * Disables initial navigation.\n *\n * Use if there is a reason to have more control over when the router starts its initial navigation\n * due to some complex initialization logic.\n *\n * @usageNotes\n *\n * Basic example of how you can disable initial navigation:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withDisabledInitialNavigation())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nexport function withDisabledInitialNavigation(): DisabledInitialNavigationFeature {\n  const providers = [\n    provideAppInitializer(() => {\n      inject(Router).setUpLocationChangeListener();\n    }),\n    {provide: INITIAL_NAVIGATION, useValue: InitialNavigation.Disabled},\n  ];\n  return routerFeature(RouterFeatureKind.DisabledInitialNavigationFeature, providers);\n}\n\n/**\n * A type alias for providers returned by `withDebugTracing` for use with `provideRouter`.\n *\n * @see {@link withDebugTracing}\n * @see {@link provideRouter}\n *\n * @publicApi\n */\nexport type DebugTracingFeature = RouterFeature<RouterFeatureKind.DebugTracingFeature>;\n\n/**\n * Enables logging of all internal navigation events to the console.\n * Extra logging might be useful for debugging purposes to inspect Router event sequence.\n *\n * @usageNotes\n *\n * Basic example of how you can enable debug tracing:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withDebugTracing())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nexport function withDebugTracing(): DebugTracingFeature {\n  let providers: Provider[] = [];\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    providers = [\n      {\n        provide: ENVIRONMENT_INITIALIZER,\n        multi: true,\n        useFactory: () => {\n          const router = inject(Router);\n          return () =>\n            router.events.subscribe((e: Event) => {\n              // tslint:disable:no-console\n              console.group?.(`Router Event: ${(<any>e.constructor).name}`);\n              console.log(stringifyEvent(e));\n              console.log(e);\n              console.groupEnd?.();\n              // tslint:enable:no-console\n            });\n        },\n      },\n    ];\n  } else {\n    providers = [];\n  }\n  return routerFeature(RouterFeatureKind.DebugTracingFeature, providers);\n}\n\nconst ROUTER_PRELOADER = new InjectionToken<RouterPreloader>(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'router preloader' : '',\n);\n\n/**\n * A type alias that represents a feature which enables preloading in Router.\n * The type is used to describe the return value of the `withPreloading` function.\n *\n * @see {@link withPreloading}\n * @see {@link provideRouter}\n *\n * @publicApi\n */\nexport type PreloadingFeature = RouterFeature<RouterFeatureKind.PreloadingFeature>;\n\n/**\n * Allows to configure a preloading strategy to use. The strategy is configured by providing a\n * reference to a class that implements a `PreloadingStrategy`.\n *\n * @usageNotes\n *\n * Basic example of how you can configure preloading:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withPreloading(PreloadAllModules))\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @param preloadingStrategy A reference to a class that implements a `PreloadingStrategy` that\n *     should be used.\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nexport function withPreloading(preloadingStrategy: Type<PreloadingStrategy>): PreloadingFeature {\n  const providers = [\n    {provide: ROUTER_PRELOADER, useExisting: RouterPreloader},\n    {provide: PreloadingStrategy, useExisting: preloadingStrategy},\n  ];\n  return routerFeature(RouterFeatureKind.PreloadingFeature, providers);\n}\n\n/**\n * A type alias for providers returned by `withRouterConfig` for use with `provideRouter`.\n *\n * @see {@link withRouterConfig}\n * @see {@link provideRouter}\n *\n * @publicApi\n */\nexport type RouterConfigurationFeature =\n  RouterFeature<RouterFeatureKind.RouterConfigurationFeature>;\n\n/**\n * Allows to provide extra parameters to configure Router.\n *\n * @usageNotes\n *\n * Basic example of how you can provide extra configuration options:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withRouterConfig({\n *          onSameUrlNavigation: 'reload'\n *       }))\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @param options A set of parameters to configure Router, see `RouterConfigOptions` for\n *     additional information.\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nexport function withRouterConfig(options: RouterConfigOptions): RouterConfigurationFeature {\n  const providers = [{provide: ROUTER_CONFIGURATION, useValue: options}];\n  return routerFeature(RouterFeatureKind.RouterConfigurationFeature, providers);\n}\n\n/**\n * A type alias for providers returned by `withHashLocation` for use with `provideRouter`.\n *\n * @see {@link withHashLocation}\n * @see {@link provideRouter}\n *\n * @publicApi\n */\nexport type RouterHashLocationFeature = RouterFeature<RouterFeatureKind.RouterHashLocationFeature>;\n\n/**\n * Provides the location strategy that uses the URL fragment instead of the history API.\n *\n * @usageNotes\n *\n * Basic example of how you can use the hash location option:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withHashLocation())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n * @see {@link /api/common/HashLocationStrategy HashLocationStrategy}\n *\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nexport function withHashLocation(): RouterHashLocationFeature {\n  const providers = [{provide: LocationStrategy, useClass: HashLocationStrategy}];\n  return routerFeature(RouterFeatureKind.RouterHashLocationFeature, providers);\n}\n\n/**\n * A type alias for providers returned by `withNavigationErrorHandler` for use with `provideRouter`.\n *\n * @see {@link withNavigationErrorHandler}\n * @see {@link provideRouter}\n *\n * @publicApi\n */\nexport type NavigationErrorHandlerFeature =\n  RouterFeature<RouterFeatureKind.NavigationErrorHandlerFeature>;\n\n/**\n * Provides a function which is called when a navigation error occurs.\n *\n * This function is run inside application's [injection context](guide/di/dependency-injection-context)\n * so you can use the [`inject`](api/core/inject) function.\n *\n * This function can return a `RedirectCommand` to convert the error to a redirect, similar to returning\n * a `UrlTree` or `RedirectCommand` from a guard. This will also prevent the `Router` from emitting\n * `NavigationError`; it will instead emit `NavigationCancel` with code NavigationCancellationCode.Redirect.\n * Return values other than `RedirectCommand` are ignored and do not change any behavior with respect to\n * how the `Router` handles the error.\n *\n * @usageNotes\n *\n * Basic example of how you can use the error handler option:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withNavigationErrorHandler((e: NavigationError) =>\n * inject(MyErrorTracker).trackError(e)))\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link NavigationError}\n * @see {@link /api/core/inject inject}\n * @see {@link runInInjectionContext}\n *\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nexport function withNavigationErrorHandler(\n  handler: (error: NavigationError) => unknown | RedirectCommand,\n): NavigationErrorHandlerFeature {\n  const providers = [\n    {\n      provide: NAVIGATION_ERROR_HANDLER,\n      useValue: handler,\n    },\n  ];\n  return routerFeature(RouterFeatureKind.NavigationErrorHandlerFeature, providers);\n}\n\n/**\n * A type alias for providers returned by `withComponentInputBinding` for use with `provideRouter`.\n *\n * @see {@link withComponentInputBinding}\n * @see {@link provideRouter}\n *\n * @publicApi\n */\nexport type ComponentInputBindingFeature =\n  RouterFeature<RouterFeatureKind.ComponentInputBindingFeature>;\n\n/**\n * A type alias for providers returned by `withViewTransitions` for use with `provideRouter`.\n *\n * @see {@link withViewTransitions}\n * @see {@link provideRouter}\n *\n * @publicApi\n */\nexport type ViewTransitionsFeature = RouterFeature<RouterFeatureKind.ViewTransitionsFeature>;\n\n/**\n * Enables binding information from the `Router` state directly to the inputs of the component in\n * `Route` configurations.\n *\n * @usageNotes\n *\n * Basic example of how you can enable the feature:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withComponentInputBinding())\n *     ]\n *   }\n * );\n * ```\n *\n * The router bindings information from any of the following sources:\n *\n *  - query parameters\n *  - path and matrix parameters\n *  - static route data\n *  - data from resolvers\n *\n * Duplicate keys are resolved in the same order from above, from least to greatest,\n * meaning that resolvers have the highest precedence and override any of the other information\n * from the route.\n *\n * Importantly, when an input does not have an item in the route data with a matching key, this\n * input is set to `undefined`. This prevents previous information from being\n * retained if the data got removed from the route (i.e. if a query parameter is removed).\n * Default values can be provided with a resolver on the route to ensure the value is always present\n * or an input and use an input transform in the component.\n *\n * @see {@link /guide/components/inputs#input-transforms Input Transforms}\n * @returns A set of providers for use with `provideRouter`.\n */\nexport function withComponentInputBinding(): ComponentInputBindingFeature {\n  const providers = [\n    RoutedComponentInputBinder,\n    {provide: INPUT_BINDER, useExisting: RoutedComponentInputBinder},\n  ];\n\n  return routerFeature(RouterFeatureKind.ComponentInputBindingFeature, providers);\n}\n\n/**\n * Enables view transitions in the Router by running the route activation and deactivation inside of\n * `document.startViewTransition`.\n *\n * Note: The View Transitions API is not available in all browsers. If the browser does not support\n * view transitions, the Router will not attempt to start a view transition and continue processing\n * the navigation as usual.\n *\n * @usageNotes\n *\n * Basic example of how you can enable the feature:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withViewTransitions())\n *     ]\n *   }\n * );\n * ```\n *\n * @returns A set of providers for use with `provideRouter`.\n * @see https://developer.chrome.com/docs/web-platform/view-transitions/\n * @see https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API\n * @developerPreview 19.0\n */\nexport function withViewTransitions(\n  options?: ViewTransitionsFeatureOptions,\n): ViewTransitionsFeature {\n  performanceMarkFeature('NgRouterViewTransitions');\n  const providers = [\n    {provide: CREATE_VIEW_TRANSITION, useValue: createViewTransition},\n    {\n      provide: VIEW_TRANSITION_OPTIONS,\n      useValue: {skipNextTransition: !!options?.skipInitialTransition, ...options},\n    },\n  ];\n  return routerFeature(RouterFeatureKind.ViewTransitionsFeature, providers);\n}\n\n/**\n * A type alias that represents all Router features available for use with `provideRouter`.\n * Features can be enabled by adding special functions to the `provideRouter` call.\n * See documentation for each symbol to find corresponding function name. See also `provideRouter`\n * documentation on how to use those functions.\n *\n * @see {@link provideRouter}\n *\n * @publicApi\n */\nexport type RouterFeatures =\n  | PreloadingFeature\n  | DebugTracingFeature\n  | InitialNavigationFeature\n  | InMemoryScrollingFeature\n  | RouterConfigurationFeature\n  | NavigationErrorHandlerFeature\n  | ComponentInputBindingFeature\n  | ViewTransitionsFeature\n  | RouterHashLocationFeature;\n\n/**\n * The list of features as an enum to uniquely type each feature.\n */\nexport const enum RouterFeatureKind {\n  PreloadingFeature,\n  DebugTracingFeature,\n  EnabledBlockingInitialNavigationFeature,\n  DisabledInitialNavigationFeature,\n  InMemoryScrollingFeature,\n  RouterConfigurationFeature,\n  RouterHashLocationFeature,\n  NavigationErrorHandlerFeature,\n  ComponentInputBindingFeature,\n  ViewTransitionsFeature,\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  HashLocationStrategy,\n  Location,\n  LocationStrategy,\n  PathLocationStrategy,\n  ViewportScroller,\n} from '@angular/common';\nimport {\n  APP_BOOTSTRAP_LISTENER,\n  ComponentRef,\n  inject,\n  Inject,\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  NgZone,\n  Optional,\n  Provider,\n  SkipSelf,\n  ɵRuntimeError as RuntimeError,\n} from '@angular/core';\n\nimport {EmptyOutletComponent} from './components/empty_outlet';\nimport {RouterLink} from './directives/router_link';\nimport {RouterLinkActive} from './directives/router_link_active';\nimport {RouterOutlet} from './directives/router_outlet';\nimport {RuntimeErrorCode} from './errors';\nimport {Routes} from './models';\nimport {NAVIGATION_ERROR_HANDLER, NavigationTransitions} from './navigation_transition';\nimport {\n  getBootstrapListener,\n  rootRoute,\n  ROUTER_IS_PROVIDED,\n  withComponentInputBinding,\n  withDebugTracing,\n  withDisabledInitialNavigation,\n  withEnabledBlockingInitialNavigation,\n  withPreloading,\n  withViewTransitions,\n} from './provide_router';\nimport {Router} from './router';\nimport {ExtraOptions, ROUTER_CONFIGURATION} from './router_config';\nimport {RouterConfigLoader, ROUTES} from './router_config_loader';\nimport {ChildrenOutletContexts} from './router_outlet_context';\nimport {ROUTER_SCROLLER, RouterScroller} from './router_scroller';\nimport {ActivatedRoute} from './router_state';\nimport {DefaultUrlSerializer, UrlSerializer} from './url_tree';\n\n/**\n * The directives defined in the `RouterModule`.\n */\nconst ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkActive, EmptyOutletComponent];\n\n/**\n * @docsNotRequired\n */\nexport const ROUTER_FORROOT_GUARD = new InjectionToken<void>(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'router duplicate forRoot guard' : '',\n);\n\n// TODO(atscott): All of these except `ActivatedRoute` are `providedIn: 'root'`. They are only kept\n// here to avoid a breaking change whereby the provider order matters based on where the\n// `RouterModule`/`RouterTestingModule` is imported. These can/should be removed as a \"breaking\"\n// change in a major version.\nexport const ROUTER_PROVIDERS: Provider[] = [\n  Location,\n  {provide: UrlSerializer, useClass: DefaultUrlSerializer},\n  Router,\n  ChildrenOutletContexts,\n  {provide: ActivatedRoute, useFactory: rootRoute},\n  RouterConfigLoader,\n  // Only used to warn when `provideRoutes` is used without `RouterModule` or `provideRouter`. Can\n  // be removed when `provideRoutes` is removed.\n  typeof ngDevMode === 'undefined' || ngDevMode\n    ? {provide: ROUTER_IS_PROVIDED, useValue: true}\n    : [],\n];\n\n/**\n * @description\n *\n * Adds directives and providers for in-app navigation among views defined in an application.\n * Use the Angular `Router` service to declaratively specify application states and manage state\n * transitions.\n *\n * You can import this NgModule multiple times, once for each lazy-loaded bundle.\n * However, only one `Router` service can be active.\n * To ensure this, there are two ways to register routes when importing this module:\n *\n * * The `forRoot()` method creates an `NgModule` that contains all the directives, the given\n * routes, and the `Router` service itself.\n * * The `forChild()` method creates an `NgModule` that contains all the directives and the given\n * routes, but does not include the `Router` service.\n *\n * @see [Routing and Navigation guide](guide/routing/common-router-tasks) for an\n * overview of how the `Router` service should be used.\n *\n * @publicApi\n */\n@NgModule({\n  imports: ROUTER_DIRECTIVES,\n  exports: ROUTER_DIRECTIVES,\n})\nexport class RouterModule {\n  constructor() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      inject(ROUTER_FORROOT_GUARD, {optional: true});\n    }\n  }\n\n  /**\n   * Creates and configures a module with all the router providers and directives.\n   * Optionally sets up an application listener to perform an initial navigation.\n   *\n   * When registering the NgModule at the root, import as follows:\n   *\n   * ```ts\n   * @NgModule({\n   *   imports: [RouterModule.forRoot(ROUTES)]\n   * })\n   * class MyNgModule {}\n   * ```\n   *\n   * @param routes An array of `Route` objects that define the navigation paths for the application.\n   * @param config An `ExtraOptions` configuration object that controls how navigation is performed.\n   * @return The new `NgModule`.\n   *\n   */\n  static forRoot(routes: Routes, config?: ExtraOptions): ModuleWithProviders<RouterModule> {\n    return {\n      ngModule: RouterModule,\n      providers: [\n        ROUTER_PROVIDERS,\n        typeof ngDevMode === 'undefined' || ngDevMode\n          ? config?.enableTracing\n            ? withDebugTracing().ɵproviders\n            : []\n          : [],\n        {provide: ROUTES, multi: true, useValue: routes},\n        typeof ngDevMode === 'undefined' || ngDevMode\n          ? {\n              provide: ROUTER_FORROOT_GUARD,\n              useFactory: provideForRootGuard,\n            }\n          : [],\n        config?.errorHandler\n          ? {\n              provide: NAVIGATION_ERROR_HANDLER,\n              useValue: config.errorHandler,\n            }\n          : [],\n        {provide: ROUTER_CONFIGURATION, useValue: config ? config : {}},\n        config?.useHash ? provideHashLocationStrategy() : providePathLocationStrategy(),\n        provideRouterScroller(),\n        config?.preloadingStrategy ? withPreloading(config.preloadingStrategy).ɵproviders : [],\n        config?.initialNavigation ? provideInitialNavigation(config) : [],\n        config?.bindToComponentInputs ? withComponentInputBinding().ɵproviders : [],\n        config?.enableViewTransitions ? withViewTransitions().ɵproviders : [],\n        provideRouterInitializer(),\n      ],\n    };\n  }\n\n  /**\n   * Creates a module with all the router directives and a provider registering routes,\n   * without creating a new Router service.\n   * When registering for submodules and lazy-loaded submodules, create the NgModule as follows:\n   *\n   * ```ts\n   * @NgModule({\n   *   imports: [RouterModule.forChild(ROUTES)]\n   * })\n   * class MyNgModule {}\n   * ```\n   *\n   * @param routes An array of `Route` objects that define the navigation paths for the submodule.\n   * @return The new NgModule.\n   *\n   */\n  static forChild(routes: Routes): ModuleWithProviders<RouterModule> {\n    return {\n      ngModule: RouterModule,\n      providers: [{provide: ROUTES, multi: true, useValue: routes}],\n    };\n  }\n}\n\n/**\n * For internal use by `RouterModule` only. Note that this differs from `withInMemoryRouterScroller`\n * because it reads from the `ExtraOptions` which should not be used in the standalone world.\n */\nexport function provideRouterScroller(): Provider {\n  return {\n    provide: ROUTER_SCROLLER,\n    useFactory: () => {\n      const viewportScroller = inject(ViewportScroller);\n      const zone = inject(NgZone);\n      const config: ExtraOptions = inject(ROUTER_CONFIGURATION);\n      const transitions = inject(NavigationTransitions);\n      const urlSerializer = inject(UrlSerializer);\n      if (config.scrollOffset) {\n        viewportScroller.setOffset(config.scrollOffset);\n      }\n      return new RouterScroller(urlSerializer, transitions, viewportScroller, zone, config);\n    },\n  };\n}\n\n// Note: For internal use only with `RouterModule`. Standalone setup via `provideRouter` should\n// provide hash location directly via `{provide: LocationStrategy, useClass: HashLocationStrategy}`.\nfunction provideHashLocationStrategy(): Provider {\n  return {provide: LocationStrategy, useClass: HashLocationStrategy};\n}\n\n// Note: For internal use only with `RouterModule`. Standalone setup via `provideRouter` does not\n// need this at all because `PathLocationStrategy` is the default factory for `LocationStrategy`.\nfunction providePathLocationStrategy(): Provider {\n  return {provide: LocationStrategy, useClass: PathLocationStrategy};\n}\n\nexport function provideForRootGuard(): any {\n  const router = inject(Router, {optional: true, skipSelf: true});\n\n  if (router) {\n    throw new RuntimeError(\n      RuntimeErrorCode.FOR_ROOT_CALLED_TWICE,\n      `The Router was provided more than once. This can happen if 'forRoot' is used outside of the root injector.` +\n        ` Lazy loaded modules should use RouterModule.forChild() instead.`,\n    );\n  }\n  return 'guarded';\n}\n\n// Note: For internal use only with `RouterModule`. Standalone router setup with `provideRouter`\n// users call `withXInitialNavigation` directly.\nfunction provideInitialNavigation(config: Pick<ExtraOptions, 'initialNavigation'>): Provider[] {\n  return [\n    config.initialNavigation === 'disabled' ? withDisabledInitialNavigation().ɵproviders : [],\n    config.initialNavigation === 'enabledBlocking'\n      ? withEnabledBlockingInitialNavigation().ɵproviders\n      : [],\n  ];\n}\n\n// TODO(atscott): This should not be in the public API\n/**\n * A DI token for the router initializer that\n * is called after the app is bootstrapped.\n *\n * @publicApi\n */\nexport const ROUTER_INITIALIZER = new InjectionToken<(compRef: ComponentRef<any>) => void>(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'Router Initializer' : '',\n);\n\nfunction provideRouterInitializer(): Provider[] {\n  return [\n    // ROUTER_INITIALIZER token should be removed. It's public API but shouldn't be. We can just\n    // have `getBootstrapListener` directly attached to APP_BOOTSTRAP_LISTENER.\n    {provide: ROUTER_INITIALIZER, useFactory: getBootstrapListener},\n    {provide: APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER},\n  ];\n}\n"],"names":["locationStrategy","reactiveHref","signal","ngDevMode","debugName","href","untracked","queryParams","fragment","state","info","inject","ɵINTERNAL_APPLICATION_ERROR_HANDLER","ROUTER_CONFIGURATION","optional","router","route","tabIndexAttribute","renderer","el","set","tagName","nativeElement","toLowerCase","isAnchorElement","customElements","get","observedAttributes","includes","subscribeToNavigationEventsIfNecessary","subscription","undefined","dependsOnRouterState","handling","createSubcription","queryParamsHandling","events","subscribe","s","NavigationEnd","updateHref","skipLocationChange","ngOnChanges","changes","isUrlTree","routerLinkInput","preserveFragment","relativeTo","RuntimeError","commandsOrUrlTree","Array","isArray","ctrlKey","shiftKey","altKey","metaKey","urlTree","target","attrValue","attrName","createUrlTree","ctorParameters","type","i1","i2","decorators","Attribute","args","Input","booleanAttribute","classes","routerEventsSubscription","_isActive","isActive","ngAfterContentInit","links","of","pipe","mergeAll","_","subscribeToEachLinkOnChanges","linkInputChangesSubscription","unsubscribe","allLinkChanges","toArray","link","filter","onChanges","from","isLinkActive","routerLinkActive","data","split","c","update","navigated","queueMicrotask","hasActiveLinks","forEach","addClass","element","removeClass","setAttribute","ariaCurrentWhenActive","toString","isActiveChange","emit","routerLinkActiveOptions","options","Output","isActiveMatchOptions","PreloadingStrategy","i0","ɵɵngDeclareClassMetadata","minVersion","version","ngImport","PreloadAllModules","Injectable","constructor","injector","preloadingStrategy","loader","setUpPreloading","e","preload","processRoutes","config","ngOnDestroy","routes","providers","_injector","createEnvironmentInjector","path","children","_loadedRoutes","loadedChildren$","loadChildren","canLoad","mergeMap","loadComponent","_loadedComponent","ROUTER_SCROLLER","InjectionToken","RouterScroller","lastId","lastSource","IMPERATIVE_NAVIGATION","restoredId","store","urlSerializer","transitions","viewportScroller","zone","scrollPositionRestoration","anchorScrolling","init","setHistoryScrollRestoration","createScrollEvents","scrollEventsSubscription","consumeScrollEvents","NavigationStart","getScrollPosition","restoredState","navigationId","id","NavigationSkipped","code","NavigationSkippedCode","IgnoredSameUrlNavigation","scheduleScrollEvent","parse","url","Scroll","scrollToPosition","instantScroll","position","scrollToAnchor","anchor","Promise","resolve","setTimeout","navigateByUrl","listener","event","provide","ROUTES","multi","useValue","ROUTER_IS_PROVIDED","UrlSerializer","Error","message","useExisting","NavigationStateManager","useClass","ɵNavigationAdapterForLocation","routerFeature","bootstrappedComponentRef","ApplicationRef","Router","bootstrapDone","BOOTSTRAP_DONE","initialNavigation","ROUTER_PRELOADER","resetRootComponentType","ref","componentTypes","locationInitialized","LOCATION_INITIALIZED","afterNextNavigation","Location","enableTracing","withDebugTracing","ɵproviders","useFactory","provideForRootGuard","NAVIGATION_ERROR_HANDLER","errorHandler","useHash","provideHashLocationStrategy","providePathLocationStrategy","provideInitialNavigation","enableViewTransitions","withViewTransitions","provideRouterInitializer","ɵmod","ɵɵngDeclareNgModule","RouterModule","imports","RouterOutlet","RouterLink","RouterLinkActive","EmptyOutletComponent","exports","ɵinj","ɵɵngDeclareInjector","NgModule","provideRouterScroller","NavigationTransitions","scrollOffset","setOffset","LocationStrategy","HashLocationStrategy"],"mappings":"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"}