{"version":3,"file":"apply_redirects.js","sourceRoot":"","sources":["../../../../packages/router/src/apply_redirects.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector, NgModuleRef} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {from} from 'rxjs/observable/from';\nimport {of } from 'rxjs/observable/of';\nimport {_catch} from 'rxjs/operator/catch';\nimport {concatAll} from 'rxjs/operator/concatAll';\nimport {first} from 'rxjs/operator/first';\nimport {map} from 'rxjs/operator/map';\nimport {mergeMap} from 'rxjs/operator/mergeMap';\nimport {EmptyError} from 'rxjs/util/EmptyError';\n\nimport {LoadedRouterConfig, Route, Routes} from './config';\nimport {RouterConfigLoader} from './router_config_loader';\nimport {PRIMARY_OUTLET, Params, defaultUrlMatcher, navigationCancelingError} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree} from './url_tree';\nimport {andObservables, forEach, waitForMap, wrapIntoObservable} from './utils/collection';\n\nclass NoMatch {\n  public segmentGroup: UrlSegmentGroup|null;\n\n  constructor(segmentGroup?: UrlSegmentGroup) { this.segmentGroup = segmentGroup || null; }\n}\n\nclass AbsoluteRedirect {\n  constructor(public urlTree: UrlTree) {}\n}\n\nfunction noMatch(segmentGroup: UrlSegmentGroup): Observable<UrlSegmentGroup> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new NoMatch(segmentGroup)));\n}\n\nfunction absoluteRedirect(newTree: UrlTree): Observable<any> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new AbsoluteRedirect(newTree)));\n}\n\nfunction namedOutletsRedirect(redirectTo: string): Observable<any> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new Error(\n          `Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`)));\n}\n\nfunction canLoadFails(route: Route): Observable<LoadedRouterConfig> {\n  return new Observable<LoadedRouterConfig>(\n      (obs: Observer<LoadedRouterConfig>) => obs.error(navigationCancelingError(\n          `Cannot load children because the guard of the route \"path: '${route.path}'\" returned false`)));\n}\n\n/**\n * Returns the `UrlTree` with the redirection applied.\n *\n * Lazy modules are loaded along the way.\n */\nexport function applyRedirects(\n    moduleInjector: Injector, configLoader: RouterConfigLoader, urlSerializer: UrlSerializer,\n    urlTree: UrlTree, config: Routes): Observable<UrlTree> {\n  return new ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();\n}\n\nclass ApplyRedirects {\n  private allowRedirects: boolean = true;\n  private ngModule: NgModuleRef<any>;\n\n  constructor(\n      moduleInjector: Injector, private configLoader: RouterConfigLoader,\n      private urlSerializer: UrlSerializer, private urlTree: UrlTree, private config: Routes) {\n    this.ngModule = moduleInjector.get(NgModuleRef);\n  }\n\n  apply(): Observable<UrlTree> {\n    const expanded$ =\n        this.expandSegmentGroup(this.ngModule, this.config, this.urlTree.root, PRIMARY_OUTLET);\n    const urlTrees$ = map.call(\n        expanded$, (rootSegmentGroup: UrlSegmentGroup) => this.createUrlTree(\n                       rootSegmentGroup, this.urlTree.queryParams, this.urlTree.fragment !));\n    return _catch.call(urlTrees$, (e: any) => {\n      if (e instanceof AbsoluteRedirect) {\n        // after an absolute redirect we do not apply any more redirects!\n        this.allowRedirects = false;\n        // we need to run matching, so we can fetch all lazy-loaded modules\n        return this.match(e.urlTree);\n      }\n\n      if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      }\n\n      throw e;\n    });\n  }\n\n  private match(tree: UrlTree): Observable<UrlTree> {\n    const expanded$ =\n        this.expandSegmentGroup(this.ngModule, this.config, tree.root, PRIMARY_OUTLET);\n    const mapped$ = map.call(\n        expanded$, (rootSegmentGroup: UrlSegmentGroup) =>\n                       this.createUrlTree(rootSegmentGroup, tree.queryParams, tree.fragment !));\n    return _catch.call(mapped$, (e: any): Observable<UrlTree> => {\n      if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      }\n\n      throw e;\n    });\n  }\n\n  private noMatchError(e: NoMatch): any {\n    return new Error(`Cannot match any routes. URL Segment: '${e.segmentGroup}'`);\n  }\n\n  private createUrlTree(rootCandidate: UrlSegmentGroup, queryParams: Params, fragment: string):\n      UrlTree {\n    const root = rootCandidate.segments.length > 0 ?\n        new UrlSegmentGroup([], {[PRIMARY_OUTLET]: rootCandidate}) :\n        rootCandidate;\n    return new UrlTree(root, queryParams, fragment);\n  }\n\n  private expandSegmentGroup(\n      ngModule: NgModuleRef<any>, routes: Route[], segmentGroup: UrlSegmentGroup,\n      outlet: string): Observable<UrlSegmentGroup> {\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n      return map.call(\n          this.expandChildren(ngModule, routes, segmentGroup),\n          (children: any) => new UrlSegmentGroup([], children));\n    }\n\n    return this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, true);\n  }\n\n  // Recursively expand segment groups for all the child outlets\n  private expandChildren(\n      ngModule: NgModuleRef<any>, routes: Route[],\n      segmentGroup: UrlSegmentGroup): Observable<{[name: string]: UrlSegmentGroup}> {\n    return waitForMap(\n        segmentGroup.children,\n        (childOutlet, child) => this.expandSegmentGroup(ngModule, routes, child, childOutlet));\n  }\n\n  private expandSegment(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[],\n      segments: UrlSegment[], outlet: string,\n      allowRedirects: boolean): Observable<UrlSegmentGroup> {\n    const routes$ = of (...routes);\n    const processedRoutes$ = map.call(routes$, (r: any) => {\n      const expanded$ = this.expandSegmentAgainstRoute(\n          ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);\n      return _catch.call(expanded$, (e: any) => {\n        if (e instanceof NoMatch) {\n          return of (null);\n        }\n\n        throw e;\n      });\n    });\n    const concattedProcessedRoutes$ = concatAll.call(processedRoutes$);\n    const first$ = first.call(concattedProcessedRoutes$, (s: any) => !!s);\n    return _catch.call(first$, (e: any, _: any): Observable<UrlSegmentGroup> => {\n      if (e instanceof EmptyError || e.name === 'EmptyError') {\n        if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n          return of (new UrlSegmentGroup([], {}));\n        }\n\n        throw new NoMatch(segmentGroup);\n      }\n\n      throw e;\n    });\n  }\n\n  private noLeftoversInUrl(segmentGroup: UrlSegmentGroup, segments: UrlSegment[], outlet: string):\n      boolean {\n    return segments.length === 0 && !segmentGroup.children[outlet];\n  }\n\n  private expandSegmentAgainstRoute(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      paths: UrlSegment[], outlet: string, allowRedirects: boolean): Observable<UrlSegmentGroup> {\n    if (getOutlet(route) !== outlet) {\n      return noMatch(segmentGroup);\n    }\n\n    if (route.redirectTo === undefined) {\n      return this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths);\n    }\n\n    if (allowRedirects && this.allowRedirects) {\n      return this.expandSegmentAgainstRouteUsingRedirect(\n          ngModule, segmentGroup, routes, route, paths, outlet);\n    }\n\n    return noMatch(segmentGroup);\n  }\n\n  private expandSegmentAgainstRouteUsingRedirect(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      segments: UrlSegment[], outlet: string): Observable<UrlSegmentGroup> {\n    if (route.path === '**') {\n      return this.expandWildCardWithParamsAgainstRouteUsingRedirect(\n          ngModule, routes, route, outlet);\n    }\n\n    return this.expandRegularSegmentAgainstRouteUsingRedirect(\n        ngModule, segmentGroup, routes, route, segments, outlet);\n  }\n\n  private expandWildCardWithParamsAgainstRouteUsingRedirect(\n      ngModule: NgModuleRef<any>, routes: Route[], route: Route,\n      outlet: string): Observable<UrlSegmentGroup> {\n    const newTree = this.applyRedirectCommands([], route.redirectTo !, {});\n    if (route.redirectTo !.startsWith('/')) {\n      return absoluteRedirect(newTree);\n    }\n\n    return mergeMap.call(this.lineralizeSegments(route, newTree), (newSegments: UrlSegment[]) => {\n      const group = new UrlSegmentGroup(newSegments, {});\n      return this.expandSegment(ngModule, group, routes, newSegments, outlet, false);\n    });\n  }\n\n  private expandRegularSegmentAgainstRouteUsingRedirect(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      segments: UrlSegment[], outlet: string): Observable<UrlSegmentGroup> {\n    const {matched, consumedSegments, lastChild, positionalParamSegments} =\n        match(segmentGroup, route, segments);\n    if (!matched) return noMatch(segmentGroup);\n\n    const newTree = this.applyRedirectCommands(\n        consumedSegments, route.redirectTo !, <any>positionalParamSegments);\n    if (route.redirectTo !.startsWith('/')) {\n      return absoluteRedirect(newTree);\n    }\n\n    return mergeMap.call(this.lineralizeSegments(route, newTree), (newSegments: UrlSegment[]) => {\n      return this.expandSegment(\n          ngModule, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet,\n          false);\n    });\n  }\n\n  private matchSegmentAgainstRoute(\n      ngModule: NgModuleRef<any>, rawSegmentGroup: UrlSegmentGroup, route: Route,\n      segments: UrlSegment[]): Observable<UrlSegmentGroup> {\n    if (route.path === '**') {\n      if (route.loadChildren) {\n        return map.call(\n            this.configLoader.load(ngModule.injector, route), (cfg: LoadedRouterConfig) => {\n              route._loadedConfig = cfg;\n              return new UrlSegmentGroup(segments, {});\n            });\n      }\n\n      return of (new UrlSegmentGroup(segments, {}));\n    }\n\n    const {matched, consumedSegments, lastChild} = match(rawSegmentGroup, route, segments);\n    if (!matched) return noMatch(rawSegmentGroup);\n\n    const rawSlicedSegments = segments.slice(lastChild);\n    const childConfig$ = this.getChildConfig(ngModule, route);\n\n    return mergeMap.call(childConfig$, (routerConfig: LoadedRouterConfig) => {\n      const childModule = routerConfig.module;\n      const childConfig = routerConfig.routes;\n\n      const {segmentGroup, slicedSegments} =\n          split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig);\n\n      if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n        const expanded$ = this.expandChildren(childModule, childConfig, segmentGroup);\n        return map.call(\n            expanded$, (children: any) => new UrlSegmentGroup(consumedSegments, children));\n      }\n\n      if (childConfig.length === 0 && slicedSegments.length === 0) {\n        return of (new UrlSegmentGroup(consumedSegments, {}));\n      }\n\n      const expanded$ = this.expandSegment(\n          childModule, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);\n      return map.call(\n          expanded$, (cs: UrlSegmentGroup) =>\n                         new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children));\n    });\n  }\n\n  private getChildConfig(ngModule: NgModuleRef<any>, route: Route): Observable<LoadedRouterConfig> {\n    if (route.children) {\n      // The children belong to the same module\n      return of (new LoadedRouterConfig(route.children, ngModule));\n    }\n\n    if (route.loadChildren) {\n      // lazy children belong to the loaded module\n      if (route._loadedConfig !== undefined) {\n        return of (route._loadedConfig);\n      }\n\n      return mergeMap.call(runCanLoadGuard(ngModule.injector, route), (shouldLoad: boolean) => {\n\n        if (shouldLoad) {\n          return map.call(\n              this.configLoader.load(ngModule.injector, route), (cfg: LoadedRouterConfig) => {\n                route._loadedConfig = cfg;\n                return cfg;\n              });\n        }\n\n        return canLoadFails(route);\n      });\n    }\n\n    return of (new LoadedRouterConfig([], ngModule));\n  }\n\n  private lineralizeSegments(route: Route, urlTree: UrlTree): Observable<UrlSegment[]> {\n    let res: UrlSegment[] = [];\n    let c = urlTree.root;\n    while (true) {\n      res = res.concat(c.segments);\n      if (c.numberOfChildren === 0) {\n        return of (res);\n      }\n\n      if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\n        return namedOutletsRedirect(route.redirectTo !);\n      }\n\n      c = c.children[PRIMARY_OUTLET];\n    }\n  }\n\n  private applyRedirectCommands(\n      segments: UrlSegment[], redirectTo: string, posParams: {[k: string]: UrlSegment}): UrlTree {\n    return this.applyRedirectCreatreUrlTree(\n        redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);\n  }\n\n  private applyRedirectCreatreUrlTree(\n      redirectTo: string, urlTree: UrlTree, segments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlTree {\n    const newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\n    return new UrlTree(\n        newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams),\n        urlTree.fragment);\n  }\n\n  private createQueryParams(redirectToParams: Params, actualParams: Params): Params {\n    const res: Params = {};\n    forEach(redirectToParams, (v: any, k: string) => {\n      const copySourceValue = typeof v === 'string' && v.startsWith(':');\n      if (copySourceValue) {\n        const sourceName = v.substring(1);\n        res[k] = actualParams[sourceName];\n      } else {\n        res[k] = v;\n      }\n    });\n    return res;\n  }\n\n  private createSegmentGroup(\n      redirectTo: string, group: UrlSegmentGroup, segments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlSegmentGroup {\n    const updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\n\n    let children: {[n: string]: UrlSegmentGroup} = {};\n    forEach(group.children, (child: UrlSegmentGroup, name: string) => {\n      children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);\n    });\n\n    return new UrlSegmentGroup(updatedSegments, children);\n  }\n\n  private createSegments(\n      redirectTo: string, redirectToSegments: UrlSegment[], actualSegments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlSegment[] {\n    return redirectToSegments.map(\n        s => s.path.startsWith(':') ? this.findPosParam(redirectTo, s, posParams) :\n                                      this.findOrReturn(s, actualSegments));\n  }\n\n  private findPosParam(\n      redirectTo: string, redirectToUrlSegment: UrlSegment,\n      posParams: {[k: string]: UrlSegment}): UrlSegment {\n    const pos = posParams[redirectToUrlSegment.path.substring(1)];\n    if (!pos)\n      throw new Error(\n          `Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`);\n    return pos;\n  }\n\n  private findOrReturn(redirectToUrlSegment: UrlSegment, actualSegments: UrlSegment[]): UrlSegment {\n    let idx = 0;\n    for (const s of actualSegments) {\n      if (s.path === redirectToUrlSegment.path) {\n        actualSegments.splice(idx);\n        return s;\n      }\n      idx++;\n    }\n    return redirectToUrlSegment;\n  }\n}\n\nfunction runCanLoadGuard(moduleInjector: Injector, route: Route): Observable<boolean> {\n  const canLoad = route.canLoad;\n  if (!canLoad || canLoad.length === 0) return of (true);\n\n  const obs = map.call(from(canLoad), (injectionToken: any) => {\n    const guard = moduleInjector.get(injectionToken);\n    return wrapIntoObservable(guard.canLoad ? guard.canLoad(route) : guard(route));\n  });\n\n  return andObservables(obs);\n}\n\nfunction match(segmentGroup: UrlSegmentGroup, route: Route, segments: UrlSegment[]): {\n  matched: boolean,\n  consumedSegments: UrlSegment[],\n  lastChild: number,\n  positionalParamSegments: {[k: string]: UrlSegment}\n} {\n  if (route.path === '') {\n    if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {\n      return {matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {}};\n    }\n\n    return {matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {}};\n  }\n\n  const matcher = route.matcher || defaultUrlMatcher;\n  const res = matcher(segments, segmentGroup, route);\n\n  if (!res) {\n    return {\n      matched: false,\n      consumedSegments: <any[]>[],\n      lastChild: 0,\n      positionalParamSegments: {},\n    };\n  }\n\n  return {\n    matched: true,\n    consumedSegments: res.consumed !,\n    lastChild: res.consumed.length !,\n    positionalParamSegments: res.posParams !,\n  };\n}\n\nfunction split(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], slicedSegments: UrlSegment[],\n    config: Route[]) {\n  if (slicedSegments.length > 0 &&\n      containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n    const s = new UrlSegmentGroup(\n        consumedSegments, createChildrenForEmptySegments(\n                              config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n    return {segmentGroup: mergeTrivialChildren(s), slicedSegments: []};\n  }\n\n  if (slicedSegments.length === 0 &&\n      containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {\n    const s = new UrlSegmentGroup(\n        segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(\n                                   segmentGroup, slicedSegments, config, segmentGroup.children));\n    return {segmentGroup: mergeTrivialChildren(s), slicedSegments};\n  }\n\n  return {segmentGroup, slicedSegments};\n}\n\nfunction mergeTrivialChildren(s: UrlSegmentGroup): UrlSegmentGroup {\n  if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n    const c = s.children[PRIMARY_OUTLET];\n    return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n  }\n\n  return s;\n}\n\nfunction addEmptySegmentsToChildrenIfNeeded(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[],\n    children: {[name: string]: UrlSegmentGroup}): {[name: string]: UrlSegmentGroup} {\n  const res: {[name: string]: UrlSegmentGroup} = {};\n  for (const r of routes) {\n    if (isEmptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n      res[getOutlet(r)] = new UrlSegmentGroup([], {});\n    }\n  }\n  return {...children, ...res};\n}\n\nfunction createChildrenForEmptySegments(\n    routes: Route[], primarySegmentGroup: UrlSegmentGroup): {[name: string]: UrlSegmentGroup} {\n  const res: {[name: string]: UrlSegmentGroup} = {};\n  res[PRIMARY_OUTLET] = primarySegmentGroup;\n  for (const r of routes) {\n    if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n      res[getOutlet(r)] = new UrlSegmentGroup([], {});\n    }\n  }\n  return res;\n}\n\nfunction containsEmptyPathRedirectsWithNamedOutlets(\n    segmentGroup: UrlSegmentGroup, segments: UrlSegment[], routes: Route[]): boolean {\n  return routes.some(\n      r => isEmptyPathRedirect(segmentGroup, segments, r) && getOutlet(r) !== PRIMARY_OUTLET);\n}\n\nfunction containsEmptyPathRedirects(\n    segmentGroup: UrlSegmentGroup, segments: UrlSegment[], routes: Route[]): boolean {\n  return routes.some(r => isEmptyPathRedirect(segmentGroup, segments, r));\n}\n\nfunction isEmptyPathRedirect(\n    segmentGroup: UrlSegmentGroup, segments: UrlSegment[], r: Route): boolean {\n  if ((segmentGroup.hasChildren() || segments.length > 0) && r.pathMatch === 'full') {\n    return false;\n  }\n\n  return r.path === '' && r.redirectTo !== undefined;\n}\n\nfunction getOutlet(route: Route): string {\n  return route.outlet || PRIMARY_OUTLET;\n}\n"]}