/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { filter, map, take } from 'rxjs/operators';
import { NavigationCancel, NavigationCancellationCode, NavigationEnd, NavigationError, NavigationSkipped } from '../events';
var NavigationResult;
(function (NavigationResult) {
    NavigationResult[NavigationResult["COMPLETE"] = 0] = "COMPLETE";
    NavigationResult[NavigationResult["FAILED"] = 1] = "FAILED";
    NavigationResult[NavigationResult["REDIRECTING"] = 2] = "REDIRECTING";
})(NavigationResult || (NavigationResult = {}));
/**
 * Performs the given action once the router finishes its next/current navigation.
 *
 * The navigation is considered complete under the following conditions:
 * - `NavigationCancel` event emits and the code is not `NavigationCancellationCode.Redirect` or
 * `NavigationCancellationCode.SupersededByNewNavigation`. In these cases, the
 * redirecting/superseding navigation must finish.
 * - `NavigationError`, `NavigationEnd`, or `NavigationSkipped` event emits
 */
export function afterNextNavigation(router, action) {
    router.events
        .pipe(filter((e) => e instanceof NavigationEnd || e instanceof NavigationCancel ||
        e instanceof NavigationError || e instanceof NavigationSkipped), map(e => {
        if (e instanceof NavigationEnd || e instanceof NavigationSkipped) {
            return NavigationResult.COMPLETE;
        }
        const redirecting = e instanceof NavigationCancel ?
            (e.code === NavigationCancellationCode.Redirect ||
                e.code === NavigationCancellationCode.SupersededByNewNavigation) :
            false;
        return redirecting ? NavigationResult.REDIRECTING : NavigationResult.FAILED;
    }), filter((result) => result !== NavigationResult.REDIRECTING), take(1))
        .subscribe(() => {
        action();
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWdhdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9yb3V0ZXIvc3JjL3V0aWxzL25hdmlnYXRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUdILE9BQU8sRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRWpELE9BQU8sRUFBUSxnQkFBZ0IsRUFBRSwwQkFBMEIsRUFBRSxhQUFhLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFDLE1BQU0sV0FBVyxDQUFDO0FBRWpJLElBQUssZ0JBSUo7QUFKRCxXQUFLLGdCQUFnQjtJQUNuQiwrREFBUSxDQUFBO0lBQ1IsMkRBQU0sQ0FBQTtJQUNOLHFFQUFXLENBQUE7QUFDYixDQUFDLEVBSkksZ0JBQWdCLEtBQWhCLGdCQUFnQixRQUlwQjtBQUVEOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxVQUFVLG1CQUFtQixDQUFDLE1BQW1DLEVBQUUsTUFBa0I7SUFDekYsTUFBTSxDQUFDLE1BQU07U0FDUixJQUFJLENBQ0QsTUFBTSxDQUNGLENBQUMsQ0FBQyxFQUF5RSxFQUFFLENBQ3pFLENBQUMsWUFBWSxhQUFhLElBQUksQ0FBQyxZQUFZLGdCQUFnQjtRQUMzRCxDQUFDLFlBQVksZUFBZSxJQUFJLENBQUMsWUFBWSxpQkFBaUIsQ0FBQyxFQUN2RSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDTixJQUFJLENBQUMsWUFBWSxhQUFhLElBQUksQ0FBQyxZQUFZLGlCQUFpQixFQUFFO1lBQ2hFLE9BQU8sZ0JBQWdCLENBQUMsUUFBUSxDQUFDO1NBQ2xDO1FBQ0QsTUFBTSxXQUFXLEdBQUcsQ0FBQyxZQUFZLGdCQUFnQixDQUFDLENBQUM7WUFDL0MsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLDBCQUEwQixDQUFDLFFBQVE7Z0JBQzlDLENBQUMsQ0FBQyxJQUFJLEtBQUssMEJBQTBCLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDO1lBQ25FLEtBQUssQ0FBQztRQUNWLE9BQU8sV0FBVyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQztJQUM5RSxDQUFDLENBQUMsRUFDRixNQUFNLENBQ0YsQ0FBQyxNQUFNLEVBQStELEVBQUUsQ0FDcEUsTUFBTSxLQUFLLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxFQUNoRCxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ047U0FDSixTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUM7SUFDWCxDQUFDLENBQUMsQ0FBQztBQUNULENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZmlsdGVyLCBtYXAsIHRha2V9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtFdmVudCwgTmF2aWdhdGlvbkNhbmNlbCwgTmF2aWdhdGlvbkNhbmNlbGxhdGlvbkNvZGUsIE5hdmlnYXRpb25FbmQsIE5hdmlnYXRpb25FcnJvciwgTmF2aWdhdGlvblNraXBwZWR9IGZyb20gJy4uL2V2ZW50cyc7XG5cbmVudW0gTmF2aWdhdGlvblJlc3VsdCB7XG4gIENPTVBMRVRFLFxuICBGQUlMRUQsXG4gIFJFRElSRUNUSU5HLFxufVxuXG4vKipcbiAqIFBlcmZvcm1zIHRoZSBnaXZlbiBhY3Rpb24gb25jZSB0aGUgcm91dGVyIGZpbmlzaGVzIGl0cyBuZXh0L2N1cnJlbnQgbmF2aWdhdGlvbi5cbiAqXG4gKiBUaGUgbmF2aWdhdGlvbiBpcyBjb25zaWRlcmVkIGNvbXBsZXRlIHVuZGVyIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqIC0gYE5hdmlnYXRpb25DYW5jZWxgIGV2ZW50IGVtaXRzIGFuZCB0aGUgY29kZSBpcyBub3QgYE5hdmlnYXRpb25DYW5jZWxsYXRpb25Db2RlLlJlZGlyZWN0YCBvclxuICogYE5hdmlnYXRpb25DYW5jZWxsYXRpb25Db2RlLlN1cGVyc2VkZWRCeU5ld05hdmlnYXRpb25gLiBJbiB0aGVzZSBjYXNlcywgdGhlXG4gKiByZWRpcmVjdGluZy9zdXBlcnNlZGluZyBuYXZpZ2F0aW9uIG11c3QgZmluaXNoLlxuICogLSBgTmF2aWdhdGlvbkVycm9yYCwgYE5hdmlnYXRpb25FbmRgLCBvciBgTmF2aWdhdGlvblNraXBwZWRgIGV2ZW50IGVtaXRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZnRlck5leHROYXZpZ2F0aW9uKHJvdXRlcjoge2V2ZW50czogT2JzZXJ2YWJsZTxFdmVudD59LCBhY3Rpb246ICgpID0+IHZvaWQpIHtcbiAgcm91dGVyLmV2ZW50c1xuICAgICAgLnBpcGUoXG4gICAgICAgICAgZmlsdGVyKFxuICAgICAgICAgICAgICAoZSk6IGUgaXMgTmF2aWdhdGlvbkVuZHxOYXZpZ2F0aW9uQ2FuY2VsfE5hdmlnYXRpb25FcnJvcnxOYXZpZ2F0aW9uU2tpcHBlZCA9PlxuICAgICAgICAgICAgICAgICAgZSBpbnN0YW5jZW9mIE5hdmlnYXRpb25FbmQgfHwgZSBpbnN0YW5jZW9mIE5hdmlnYXRpb25DYW5jZWwgfHxcbiAgICAgICAgICAgICAgICAgIGUgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRXJyb3IgfHwgZSBpbnN0YW5jZW9mIE5hdmlnYXRpb25Ta2lwcGVkKSxcbiAgICAgICAgICBtYXAoZSA9PiB7XG4gICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIE5hdmlnYXRpb25FbmQgfHwgZSBpbnN0YW5jZW9mIE5hdmlnYXRpb25Ta2lwcGVkKSB7XG4gICAgICAgICAgICAgIHJldHVybiBOYXZpZ2F0aW9uUmVzdWx0LkNPTVBMRVRFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVkaXJlY3RpbmcgPSBlIGluc3RhbmNlb2YgTmF2aWdhdGlvbkNhbmNlbCA/XG4gICAgICAgICAgICAgICAgKGUuY29kZSA9PT0gTmF2aWdhdGlvbkNhbmNlbGxhdGlvbkNvZGUuUmVkaXJlY3QgfHxcbiAgICAgICAgICAgICAgICAgZS5jb2RlID09PSBOYXZpZ2F0aW9uQ2FuY2VsbGF0aW9uQ29kZS5TdXBlcnNlZGVkQnlOZXdOYXZpZ2F0aW9uKSA6XG4gICAgICAgICAgICAgICAgZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gcmVkaXJlY3RpbmcgPyBOYXZpZ2F0aW9uUmVzdWx0LlJFRElSRUNUSU5HIDogTmF2aWdhdGlvblJlc3VsdC5GQUlMRUQ7XG4gICAgICAgICAgfSksXG4gICAgICAgICAgZmlsdGVyKFxuICAgICAgICAgICAgICAocmVzdWx0KTogcmVzdWx0IGlzIE5hdmlnYXRpb25SZXN1bHQuQ09NUExFVEV8TmF2aWdhdGlvblJlc3VsdC5GQUlMRUQgPT5cbiAgICAgICAgICAgICAgICAgIHJlc3VsdCAhPT0gTmF2aWdhdGlvblJlc3VsdC5SRURJUkVDVElORyksXG4gICAgICAgICAgdGFrZSgxKSxcbiAgICAgICAgICApXG4gICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgYWN0aW9uKCk7XG4gICAgICB9KTtcbn1cbiJdfQ==