/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/// <reference types="dom-view-transitions" />
import { DOCUMENT } from '@angular/common';
import { afterNextRender, InjectionToken, NgZone, runInInjectionContext } from '@angular/core';
export const CREATE_VIEW_TRANSITION = new InjectionToken(ngDevMode ? 'view transition helper' : '');
export const VIEW_TRANSITION_OPTIONS = new InjectionToken(ngDevMode ? 'view transition options' : '');
/**
 * A helper function for using browser view transitions. This function skips the call to
 * `startViewTransition` if the browser does not support it.
 *
 * @returns A Promise that resolves when the view transition callback begins.
 */
export function createViewTransition(injector, from, to) {
    const transitionOptions = injector.get(VIEW_TRANSITION_OPTIONS);
    const document = injector.get(DOCUMENT);
    // Create promises outside the Angular zone to avoid causing extra change detections
    return injector.get(NgZone).runOutsideAngular(() => {
        if (!document.startViewTransition || transitionOptions.skipNextTransition) {
            transitionOptions.skipNextTransition = false;
            return Promise.resolve();
        }
        let resolveViewTransitionStarted;
        const viewTransitionStarted = new Promise((resolve) => {
            resolveViewTransitionStarted = resolve;
        });
        const transition = document.startViewTransition(() => {
            resolveViewTransitionStarted();
            // We don't actually update dom within the transition callback. The resolving of the above
            // promise unblocks the Router navigation, which synchronously activates and deactivates
            // routes (the DOM update). This view transition waits for the next change detection to
            // complete (below), which includes the update phase of the routed components.
            return createRenderPromise(injector);
        });
        const { onViewTransitionCreated } = transitionOptions;
        if (onViewTransitionCreated) {
            runInInjectionContext(injector, () => onViewTransitionCreated({ transition, from, to }));
        }
        return viewTransitionStarted;
    });
}
/**
 * Creates a promise that resolves after next render.
 */
function createRenderPromise(injector) {
    return new Promise(resolve => {
        afterNextRender(resolve, { injector });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlld190cmFuc2l0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvcm91dGVyL3NyYy91dGlscy92aWV3X3RyYW5zaXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsOENBQThDO0FBRTlDLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUMsZUFBZSxFQUFFLGNBQWMsRUFBWSxNQUFNLEVBQUUscUJBQXFCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFJdkcsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQy9CLElBQUksY0FBYyxDQUE4QixTQUFTLENBQUMsQ0FBQyxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMvRixNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FDaEMsSUFBSSxjQUFjLENBQ2QsU0FBUyxDQUFDLENBQUMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFtRXBEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLG9CQUFvQixDQUNoQyxRQUFrQixFQUFFLElBQTRCLEVBQUUsRUFBMEI7SUFDOUUsTUFBTSxpQkFBaUIsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDaEUsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN4QyxvRkFBb0Y7SUFDcEYsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtRQUNqRCxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixJQUFJLGlCQUFpQixDQUFDLGtCQUFrQixFQUFFLENBQUM7WUFDMUUsaUJBQWlCLENBQUMsa0JBQWtCLEdBQUcsS0FBSyxDQUFDO1lBQzdDLE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzNCLENBQUM7UUFFRCxJQUFJLDRCQUF3QyxDQUFDO1FBQzdDLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxPQUFPLENBQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUMxRCw0QkFBNEIsR0FBRyxPQUFPLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUM7UUFDSCxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsbUJBQW1CLENBQUMsR0FBRyxFQUFFO1lBQ25ELDRCQUE0QixFQUFFLENBQUM7WUFDL0IsMEZBQTBGO1lBQzFGLHdGQUF3RjtZQUN4Rix1RkFBdUY7WUFDdkYsOEVBQThFO1lBQzlFLE9BQU8sbUJBQW1CLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7UUFDSCxNQUFNLEVBQUMsdUJBQXVCLEVBQUMsR0FBRyxpQkFBaUIsQ0FBQztRQUNwRCxJQUFJLHVCQUF1QixFQUFFLENBQUM7WUFDNUIscUJBQXFCLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLEVBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekYsQ0FBQztRQUNELE9BQU8scUJBQXFCLENBQUM7SUFDL0IsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxTQUFTLG1CQUFtQixDQUFDLFFBQWtCO0lBQzdDLE9BQU8sSUFBSSxPQUFPLENBQU8sT0FBTyxDQUFDLEVBQUU7UUFDakMsZUFBZSxDQUFDLE9BQU8sRUFBRSxFQUFDLFFBQVEsRUFBQyxDQUFDLENBQUM7SUFDdkMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwiZG9tLXZpZXctdHJhbnNpdGlvbnNcIiAvPlxuXG5pbXBvcnQge0RPQ1VNRU5UfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHthZnRlck5leHRSZW5kZXIsIEluamVjdGlvblRva2VuLCBJbmplY3RvciwgTmdab25lLCBydW5JbkluamVjdGlvbkNvbnRleHR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge0FjdGl2YXRlZFJvdXRlU25hcHNob3R9IGZyb20gJy4uL3JvdXRlcl9zdGF0ZSc7XG5cbmV4cG9ydCBjb25zdCBDUkVBVEVfVklFV19UUkFOU0lUSU9OID1cbiAgICBuZXcgSW5qZWN0aW9uVG9rZW48dHlwZW9mIGNyZWF0ZVZpZXdUcmFuc2l0aW9uPihuZ0Rldk1vZGUgPyAndmlldyB0cmFuc2l0aW9uIGhlbHBlcicgOiAnJyk7XG5leHBvcnQgY29uc3QgVklFV19UUkFOU0lUSU9OX09QVElPTlMgPVxuICAgIG5ldyBJbmplY3Rpb25Ub2tlbjxWaWV3VHJhbnNpdGlvbnNGZWF0dXJlT3B0aW9ucyZ7c2tpcE5leHRUcmFuc2l0aW9uOiBib29sZWFufT4oXG4gICAgICAgIG5nRGV2TW9kZSA/ICd2aWV3IHRyYW5zaXRpb24gb3B0aW9ucycgOiAnJyk7XG5cbi8qKlxuICogT3B0aW9ucyB0byBjb25maWd1cmUgdGhlIFZpZXcgVHJhbnNpdGlvbnMgaW50ZWdyYXRpb24gaW4gdGhlIFJvdXRlci5cbiAqXG4gKiBAZXhwZXJpbWVudGFsXG4gKiBAcHVibGljQXBpXG4gKiBAc2VlIHdpdGhWaWV3VHJhbnNpdGlvbnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBWaWV3VHJhbnNpdGlvbnNGZWF0dXJlT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBTa2lwcyB0aGUgdmVyeSBmaXJzdCBjYWxsIHRvIGBzdGFydFZpZXdUcmFuc2l0aW9uYC4gVGhpcyBjYW4gYmUgdXNlZnVsIGZvciBkaXNhYmxpbmcgdGhlXG4gICAqIGFuaW1hdGlvbiBkdXJpbmcgdGhlIGFwcGxpY2F0aW9uJ3MgaW5pdGlhbCBsb2FkaW5nIHBoYXNlLlxuICAgKi9cbiAgc2tpcEluaXRpYWxUcmFuc2l0aW9uPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogQSBmdW5jdGlvbiB0byBydW4gYWZ0ZXIgdGhlIGBWaWV3VHJhbnNpdGlvbmAgaXMgY3JlYXRlZC5cbiAgICpcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBydW4gaW4gYW4gaW5qZWN0aW9uIGNvbnRleHQgYW5kIGNhbiB1c2UgYGluamVjdGAuXG4gICAqL1xuICBvblZpZXdUcmFuc2l0aW9uQ3JlYXRlZD86ICh0cmFuc2l0aW9uSW5mbzogVmlld1RyYW5zaXRpb25JbmZvKSA9PiB2b2lkO1xufVxuXG4vKipcbiAqIFRoZSBpbmZvcm1hdGlvbiBwYXNzZWQgdG8gdGhlIGBvblZpZXdUcmFuc2l0aW9uQ3JlYXRlZGAgZnVuY3Rpb24gcHJvdmlkZWQgaW4gdGhlXG4gKiBgd2l0aFZpZXdUcmFuc2l0aW9uc2AgZmVhdHVyZSBvcHRpb25zLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqIEBleHBlcmltZW50YWxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBWaWV3VHJhbnNpdGlvbkluZm8ge1xuICAvLyBUT0RPKGF0c2NvdHQpOiBUaGlzIHR5cGUgY2FuL3Nob3VsZCBiZSB0aGUgYnVpbHQtaW4gYFZpZXdUcmFuc2l0aW9uYCB0eXBlXG4gIC8vIGZyb20gQHR5cGVzL2RvbS12aWV3LXRyYW5zaXRpb25zIGJ1dCBleHBvcnRpbmcgdGhhdCB0eXBlIGZyb20gdGhlIHB1YmxpYyBBUEkgaXMgY3VycmVudGx5IG5vdFxuICAvLyBzdXBwb3J0ZWQgYnkgdG9vbGluZy5cbiAgLyoqXG4gICAqIFRoZSBgVmlld1RyYW5zaXRpb25gIHJldHVybmVkIGJ5IHRoZSBjYWxsIHRvIGBzdGFydFZpZXdUcmFuc2l0aW9uYC5cbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVmlld1RyYW5zaXRpb25cbiAgICovXG4gIHRyYW5zaXRpb246IHtcbiAgICAvKipcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9WaWV3VHJhbnNpdGlvbi9maW5pc2hlZFxuICAgICAqL1xuICAgIGZpbmlzaGVkOiBQcm9taXNlPHZvaWQ+LFxuICAgIC8qKlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1ZpZXdUcmFuc2l0aW9uL3JlYWR5XG4gICAgICovXG4gICAgcmVhZHk6IFByb21pc2U8dm9pZD4sXG4gICAgLyoqXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVmlld1RyYW5zaXRpb24vdXBkYXRlQ2FsbGJhY2tEb25lXG4gICAgICovXG4gICAgdXBkYXRlQ2FsbGJhY2tEb25lOiBQcm9taXNlPHZvaWQ+LFxuICAgIC8qKlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1ZpZXdUcmFuc2l0aW9uL3NraXBUcmFuc2l0aW9uXG4gICAgICovXG4gICAgc2tpcFRyYW5zaXRpb24oKTogdm9pZCxcbiAgfTtcbiAgLyoqXG4gICAqIFRoZSBgQWN0aXZhdGVkUm91dGVTbmFwc2hvdGAgdGhhdCB0aGUgbmF2aWdhdGlvbiBpcyB0cmFuc2l0aW9uaW5nIGZyb20uXG4gICAqL1xuICBmcm9tOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90O1xuICAvKipcbiAgICogVGhlIGBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90YCB0aGF0IHRoZSBuYXZpZ2F0aW9uIGlzIHRyYW5zaXRpb25pbmcgdG8uXG4gICAqL1xuICB0bzogQWN0aXZhdGVkUm91dGVTbmFwc2hvdDtcbn1cblxuLyoqXG4gKiBBIGhlbHBlciBmdW5jdGlvbiBmb3IgdXNpbmcgYnJvd3NlciB2aWV3IHRyYW5zaXRpb25zLiBUaGlzIGZ1bmN0aW9uIHNraXBzIHRoZSBjYWxsIHRvXG4gKiBgc3RhcnRWaWV3VHJhbnNpdGlvbmAgaWYgdGhlIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBpdC5cbiAqXG4gKiBAcmV0dXJucyBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSB2aWV3IHRyYW5zaXRpb24gY2FsbGJhY2sgYmVnaW5zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVmlld1RyYW5zaXRpb24oXG4gICAgaW5qZWN0b3I6IEluamVjdG9yLCBmcm9tOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCB0bzogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCk6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCB0cmFuc2l0aW9uT3B0aW9ucyA9IGluamVjdG9yLmdldChWSUVXX1RSQU5TSVRJT05fT1BUSU9OUyk7XG4gIGNvbnN0IGRvY3VtZW50ID0gaW5qZWN0b3IuZ2V0KERPQ1VNRU5UKTtcbiAgLy8gQ3JlYXRlIHByb21pc2VzIG91dHNpZGUgdGhlIEFuZ3VsYXIgem9uZSB0byBhdm9pZCBjYXVzaW5nIGV4dHJhIGNoYW5nZSBkZXRlY3Rpb25zXG4gIHJldHVybiBpbmplY3Rvci5nZXQoTmdab25lKS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgaWYgKCFkb2N1bWVudC5zdGFydFZpZXdUcmFuc2l0aW9uIHx8IHRyYW5zaXRpb25PcHRpb25zLnNraXBOZXh0VHJhbnNpdGlvbikge1xuICAgICAgdHJhbnNpdGlvbk9wdGlvbnMuc2tpcE5leHRUcmFuc2l0aW9uID0gZmFsc2U7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgbGV0IHJlc29sdmVWaWV3VHJhbnNpdGlvblN0YXJ0ZWQ6ICgpID0+IHZvaWQ7XG4gICAgY29uc3Qgdmlld1RyYW5zaXRpb25TdGFydGVkID0gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUpID0+IHtcbiAgICAgIHJlc29sdmVWaWV3VHJhbnNpdGlvblN0YXJ0ZWQgPSByZXNvbHZlO1xuICAgIH0pO1xuICAgIGNvbnN0IHRyYW5zaXRpb24gPSBkb2N1bWVudC5zdGFydFZpZXdUcmFuc2l0aW9uKCgpID0+IHtcbiAgICAgIHJlc29sdmVWaWV3VHJhbnNpdGlvblN0YXJ0ZWQoKTtcbiAgICAgIC8vIFdlIGRvbid0IGFjdHVhbGx5IHVwZGF0ZSBkb20gd2l0aGluIHRoZSB0cmFuc2l0aW9uIGNhbGxiYWNrLiBUaGUgcmVzb2x2aW5nIG9mIHRoZSBhYm92ZVxuICAgICAgLy8gcHJvbWlzZSB1bmJsb2NrcyB0aGUgUm91dGVyIG5hdmlnYXRpb24sIHdoaWNoIHN5bmNocm9ub3VzbHkgYWN0aXZhdGVzIGFuZCBkZWFjdGl2YXRlc1xuICAgICAgLy8gcm91dGVzICh0aGUgRE9NIHVwZGF0ZSkuIFRoaXMgdmlldyB0cmFuc2l0aW9uIHdhaXRzIGZvciB0aGUgbmV4dCBjaGFuZ2UgZGV0ZWN0aW9uIHRvXG4gICAgICAvLyBjb21wbGV0ZSAoYmVsb3cpLCB3aGljaCBpbmNsdWRlcyB0aGUgdXBkYXRlIHBoYXNlIG9mIHRoZSByb3V0ZWQgY29tcG9uZW50cy5cbiAgICAgIHJldHVybiBjcmVhdGVSZW5kZXJQcm9taXNlKGluamVjdG9yKTtcbiAgICB9KTtcbiAgICBjb25zdCB7b25WaWV3VHJhbnNpdGlvbkNyZWF0ZWR9ID0gdHJhbnNpdGlvbk9wdGlvbnM7XG4gICAgaWYgKG9uVmlld1RyYW5zaXRpb25DcmVhdGVkKSB7XG4gICAgICBydW5JbkluamVjdGlvbkNvbnRleHQoaW5qZWN0b3IsICgpID0+IG9uVmlld1RyYW5zaXRpb25DcmVhdGVkKHt0cmFuc2l0aW9uLCBmcm9tLCB0b30pKTtcbiAgICB9XG4gICAgcmV0dXJuIHZpZXdUcmFuc2l0aW9uU3RhcnRlZDtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBhZnRlciBuZXh0IHJlbmRlci5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUmVuZGVyUHJvbWlzZShpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KHJlc29sdmUgPT4ge1xuICAgIGFmdGVyTmV4dFJlbmRlcihyZXNvbHZlLCB7aW5qZWN0b3J9KTtcbiAgfSk7XG59XG4iXX0=