{"version":3,"sources":["../../../../modules/@angular/router/src/router_module.ts"],"names":[],"mappings":"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","file":"router_module.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_BASE_HREF, HashLocationStrategy, Location, LocationStrategy, PathLocationStrategy, PlatformLocation} from '@angular/common';\nimport {ANALYZE_FOR_ENTRY_COMPONENTS, APP_BOOTSTRAP_LISTENER, ApplicationRef, Compiler, ComponentRef, Inject, InjectionToken, Injector, ModuleWithProviders, NgModule, NgModuleFactoryLoader, NgProbeToken, Optional, Provider, SkipSelf, SystemJsNgModuleLoader} from '@angular/core';\n\nimport {Route, Routes} from './config';\nimport {RouterLink, RouterLinkWithHref} from './directives/router_link';\nimport {RouterLinkActive} from './directives/router_link_active';\nimport {RouterOutlet} from './directives/router_outlet';\nimport {getDOM} from './private_import_platform-browser';\nimport {RouteReuseStrategy} from './route_reuse_strategy';\nimport {ErrorHandler, Router} from './router';\nimport {ROUTES} from './router_config_loader';\nimport {RouterOutletMap} from './router_outlet_map';\nimport {NoPreloading, PreloadAllModules, PreloadingStrategy, RouterPreloader} from './router_preloader';\nimport {ActivatedRoute} from './router_state';\nimport {UrlHandlingStrategy} from './url_handling_strategy';\nimport {DefaultUrlSerializer, UrlSerializer} from './url_tree';\nimport {flatten} from './utils/collection';\n\n\n\n/**\n * @whatItDoes Contains a list of directives\n * @stable\n */\nconst /** @type {?} */ ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive];\n\n/**\n * @whatItDoes Is used in DI to configure the router.\n * @stable\n */\nexport const /** @type {?} */ ROUTER_CONFIGURATION = new InjectionToken<ExtraOptions>('ROUTER_CONFIGURATION');\n\n/**\n * @docsNotRequired\n */\nexport const /** @type {?} */ ROUTER_FORROOT_GUARD = new InjectionToken<void>('ROUTER_FORROOT_GUARD');\n\nexport const /** @type {?} */ ROUTER_PROVIDERS: Provider[] = [\n  Location,\n  {provide: UrlSerializer, useClass: DefaultUrlSerializer},\n  {\n    provide: Router,\n    useFactory: setupRouter,\n    deps: [\n      ApplicationRef, UrlSerializer, RouterOutletMap, Location, Injector, NgModuleFactoryLoader,\n      Compiler, ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()],\n      [RouteReuseStrategy, new Optional()]\n    ]\n  },\n  RouterOutletMap,\n  {provide: ActivatedRoute, useFactory: rootRoute, deps: [Router]},\n  {provide: NgModuleFactoryLoader, useClass: SystemJsNgModuleLoader},\n  RouterPreloader,\n  NoPreloading,\n  PreloadAllModules,\n  {provide: ROUTER_CONFIGURATION, useValue: {enableTracing: false}},\n];\n/**\n * @return {?}\n */\nexport function routerNgProbeToken() {\n  return new NgProbeToken('Router', Router);\n}\n/**\n * \\@whatItDoes Adds router directives and providers.\n * \n * \\@howToUse \n * \n * RouterModule can be imported multiple times: once per lazily-loaded bundle.\n * Since the router deals with a global shared resource--location, we cannot have\n * more than one router service active.\n * \n * That is why there are two ways to create the module: `RouterModule.forRoot` and\n * `RouterModule.forChild`.\n * \n * * `forRoot` creates a module that contains all the directives, the given routes, and the router\n *   service itself.\n * * `forChild` creates a module that contains all the directives and the given routes, but does not\n *   include the router service.\n * \n * When registered at the root, the module should be used as follows\n * \n * ```\n * \\@NgModule({ \n *   imports: [RouterModule.forRoot(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n * \n * For submodules and lazy loaded submodules the module should be used as follows:\n * \n * ```\n * \\@NgModule({ \n *   imports: [RouterModule.forChild(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n * \n * \\@description \n * \n * Managing state transitions is one of the hardest parts of building applications. This is\n * especially true on the web, where you also need to ensure that the state is reflected in the URL.\n * In addition, we often want to split applications into multiple bundles and load them on demand.\n * Doing this transparently is not trivial.\n * \n * The Angular router solves these problems. Using the router, you can declaratively specify\n * application states, manage state transitions while taking care of the URL, and load bundles on\n * demand.\n * \n * [Read this developer guide](https://angular.io/docs/ts/latest/guide/router.html) to get an\n * overview of how the router should be used.\n * \n * \\@stable\n */\nexport class RouterModule {\n/**\n * @param {?} guard\n */\nconstructor(  guard: any) {}\n/**\n * Creates a module with all the router providers and directives. It also optionally sets up an\n * application listener to perform an initial navigation.\n * \n * Options:\n * * `enableTracing` makes the router log all its internal events to the console.\n * * `useHash` enables the location strategy that uses the URL fragment instead of the history\n * API.\n * * `initialNavigation` disables the initial navigation.\n * * `errorHandler` provides a custom error handler.\n * @param {?} routes\n * @param {?=} config\n * @return {?}\n */\nstatic forRoot(routes: Routes, config?: ExtraOptions): ModuleWithProviders {\n    return {\n      ngModule: RouterModule,\n      providers: [\n        ROUTER_PROVIDERS,\n        provideRoutes(routes),\n        {\n          provide: ROUTER_FORROOT_GUARD,\n          useFactory: provideForRootGuard,\n          deps: [[Router, new Optional(), new SkipSelf()]]\n        },\n        {provide: ROUTER_CONFIGURATION, useValue: config ? config : {}},\n        {\n          provide: LocationStrategy,\n          useFactory: provideLocationStrategy,\n          deps: [\n            PlatformLocation, [new Inject(APP_BASE_HREF), new Optional()], ROUTER_CONFIGURATION\n          ]\n        },\n        {\n          provide: PreloadingStrategy,\n          useExisting: config && config.preloadingStrategy ? config.preloadingStrategy :\n                                                             NoPreloading\n        },\n        {provide: NgProbeToken, multi: true, useFactory: routerNgProbeToken},\n        provideRouterInitializer(),\n      ],\n    };\n  }\n/**\n * Creates a module with all the router directives and a provider registering routes.\n * @param {?} routes\n * @return {?}\n */\nstatic forChild(routes: Routes): ModuleWithProviders {\n    return {ngModule: RouterModule, providers: [provideRoutes(routes)]};\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{declarations: ROUTER_DIRECTIVES, exports: ROUTER_DIRECTIVES}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ROUTER_FORROOT_GUARD, ] }, ]},\n];\n}\n\nfunction RouterModule_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterModule.ctorParameters;\n}\n\n/**\n * @param {?} platformLocationStrategy\n * @param {?} baseHref\n * @param {?=} options\n * @return {?}\n */\nexport function provideLocationStrategy(\n    platformLocationStrategy: PlatformLocation, baseHref: string, options: ExtraOptions = {}) {\n  return options.useHash ? new HashLocationStrategy(platformLocationStrategy, baseHref) :\n                           new PathLocationStrategy(platformLocationStrategy, baseHref);\n}\n/**\n * @param {?} router\n * @return {?}\n */\nexport function provideForRootGuard(router: Router): any {\n  if (router) {\n    throw new Error(\n        `RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.`);\n  }\n  return 'guarded';\n}\n/**\n * \\@whatItDoes Registers routes.\n * \n * \\@howToUse \n * \n * ```\n * \\@NgModule({ \n *   imports: [RouterModule.forChild(ROUTES)],\n *   providers: [provideRoutes(EXTRA_ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n * \n * \\@stable\n * @param {?} routes\n * @return {?}\n */\nexport function provideRoutes(routes: Routes): any {\n  return [\n    {provide: ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: routes},\n    {provide: ROUTES, multi: true, useValue: routes},\n  ];\n}\n\n\n/**\n * @whatItDoes Represents options to configure the router.\n *\n * @stable\n */\nexport interface ExtraOptions {\n  /**\n   * Makes the router log all its internal events to the console.\n   */\n  enableTracing?: boolean;\n\n  /**\n   * Enables the location strategy that uses the URL fragment instead of the history API.\n   */\n  useHash?: boolean;\n\n  /**\n   * Disables the initial navigation.\n   */\n  initialNavigation?: boolean;\n\n  /**\n   * A custom error handler.\n   */\n  errorHandler?: ErrorHandler;\n\n  /**\n   * Configures a preloading strategy. See {@link PreloadAllModules}.\n   */\n  preloadingStrategy?: any;\n}\n/**\n * @param {?} ref\n * @param {?} urlSerializer\n * @param {?} outletMap\n * @param {?} location\n * @param {?} injector\n * @param {?} loader\n * @param {?} compiler\n * @param {?} config\n * @param {?=} opts\n * @param {?=} urlHandlingStrategy\n * @param {?=} routeReuseStrategy\n * @return {?}\n */\nexport function setupRouter(\n    ref: ApplicationRef, urlSerializer: UrlSerializer, outletMap: RouterOutletMap,\n    location: Location, injector: Injector, loader: NgModuleFactoryLoader, compiler: Compiler,\n    config: Route[][], opts: ExtraOptions = {}, urlHandlingStrategy?: UrlHandlingStrategy,\n    routeReuseStrategy?: RouteReuseStrategy) {\n  const /** @type {?} */ router = new Router(\n      null, urlSerializer, outletMap, location, injector, loader, compiler, flatten(config));\n\n  if (urlHandlingStrategy) {\n    router.urlHandlingStrategy = urlHandlingStrategy;\n  }\n\n  if (routeReuseStrategy) {\n    router.routeReuseStrategy = routeReuseStrategy;\n  }\n\n  if (opts.errorHandler) {\n    router.errorHandler = opts.errorHandler;\n  }\n\n  if (opts.enableTracing) {\n    const /** @type {?} */ dom = getDOM();\n    router.events.subscribe(e => {\n      dom.logGroup(`Router Event: ${( /** @type {?} */((<any>e.constructor))).name}`);\n      dom.log(e.toString());\n      dom.log(e);\n      dom.logGroupEnd();\n    });\n  }\n\n  return router;\n}\n/**\n * @param {?} router\n * @return {?}\n */\nexport function rootRoute(router: Router): ActivatedRoute {\n  return router.routerState.root;\n}\n/**\n * @param {?} router\n * @param {?} ref\n * @param {?} preloader\n * @param {?} opts\n * @return {?}\n */\nexport function initialRouterNavigation(\n    router: Router, ref: ApplicationRef, preloader: RouterPreloader, opts: ExtraOptions) {\n  return (bootstrappedComponentRef: ComponentRef<any>) => {\n\n    if (bootstrappedComponentRef !== ref.components[0]) {\n      return;\n    }\n\n    router.resetRootComponentType(ref.componentTypes[0]);\n    preloader.setUpPreloading();\n    if (opts.initialNavigation === false) {\n      router.setUpLocationChangeListener();\n    } else {\n      router.initialNavigation();\n    }\n  };\n}\n\n/**\n * A token for the router initializer that will be called after the app is bootstrapped.\n *\n * @experimental\n */\nexport const /** @type {?} */ ROUTER_INITIALIZER =\n    new InjectionToken<(compRef: ComponentRef<any>) => void>('Router Initializer');\n/**\n * @return {?}\n */\nexport function provideRouterInitializer() {\n  return [\n    {\n      provide: ROUTER_INITIALIZER,\n      useFactory: initialRouterNavigation,\n      deps: [Router, ApplicationRef, RouterPreloader, ROUTER_CONFIGURATION]\n    },\n    {provide: APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER},\n  ];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}