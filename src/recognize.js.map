{"version":3,"sources":["../../../../modules/@angular/router/src/recognize.ts"],"names":[],"mappings":"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","file":"recognize.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {of } from 'rxjs/observable/of';\n\nimport {Data, ResolveData, Route, Routes} from './config';\nimport {ActivatedRouteSnapshot, RouterStateSnapshot, inheritedParamsDataResolve} from './router_state';\nimport {PRIMARY_OUTLET, defaultUrlMatcher} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree, mapChildrenIntoArray} from './url_tree';\nimport {forEach, last, merge} from './utils/collection';\nimport {TreeNode} from './utils/tree';\nclass NoMatch {}\n/**\n * @param {?} rootComponentType\n * @param {?} config\n * @param {?} urlTree\n * @param {?} url\n * @return {?}\n */\nexport function recognize(\n    rootComponentType: Type<any>, config: Routes, urlTree: UrlTree,\n    url: string): Observable<RouterStateSnapshot> {\n  return new Recognizer(rootComponentType, config, urlTree, url).recognize();\n}\nclass Recognizer {\n/**\n * @param {?} rootComponentType\n * @param {?} config\n * @param {?} urlTree\n * @param {?} url\n */\nconstructor(\nprivate rootComponentType: Type<any>,\nprivate config: Routes,\nprivate urlTree: UrlTree,\nprivate url: string) {}\n/**\n * @return {?}\n */\nrecognize(): Observable<RouterStateSnapshot> {\n    try {\n      const /** @type {?} */ rootSegmentGroup = split(this.urlTree.root, [], [], this.config).segmentGroup;\n\n      const /** @type {?} */ children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);\n\n      const /** @type {?} */ root = new ActivatedRouteSnapshot(\n          [], Object.freeze({}), Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, {},\n          PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});\n\n      const /** @type {?} */ rootNode = new TreeNode<ActivatedRouteSnapshot>(root, children);\n      const /** @type {?} */ routeState = new RouterStateSnapshot(this.url, rootNode);\n      this.inheriteParamsAndData(routeState._root);\n      return of (routeState);\n\n    } catch ( /** @type {?} */e) {\n      return new Observable<RouterStateSnapshot>(\n          (obs: Observer<RouterStateSnapshot>) => obs.error(e));\n    }\n  }\n/**\n * @param {?} routeNode\n * @return {?}\n */\ninheriteParamsAndData(routeNode: TreeNode<ActivatedRouteSnapshot>): void {\n    const /** @type {?} */ route = routeNode.value;\n\n    const /** @type {?} */ i = inheritedParamsDataResolve(route);\n    route.params = Object.freeze(i.params);\n    route.data = Object.freeze(i.data);\n\n    routeNode.children.forEach(n => this.inheriteParamsAndData(n));\n  }\n/**\n * @param {?} config\n * @param {?} segmentGroup\n * @param {?} outlet\n * @return {?}\n */\nprocessSegmentGroup(config: Route[], segmentGroup: UrlSegmentGroup, outlet: string):\n      TreeNode<ActivatedRouteSnapshot>[] {\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n      return this.processChildren(config, segmentGroup);\n    } else {\n      return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);\n    }\n  }\n/**\n * @param {?} config\n * @param {?} segmentGroup\n * @return {?}\n */\nprocessChildren(config: Route[], segmentGroup: UrlSegmentGroup):\n      TreeNode<ActivatedRouteSnapshot>[] {\n    const /** @type {?} */ children = mapChildrenIntoArray(\n        segmentGroup, (child, childOutlet) => this.processSegmentGroup(config, child, childOutlet));\n    checkOutletNameUniqueness(children);\n    sortActivatedRouteSnapshots(children);\n    return children;\n  }\n/**\n * @param {?} config\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\nprocessSegment(\n      config: Route[], segmentGroup: UrlSegmentGroup, segments: UrlSegment[],\n      outlet: string): TreeNode<ActivatedRouteSnapshot>[] {\n    for (const /** @type {?} */ r of config) {\n      try {\n        return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof NoMatch)) throw e;\n      }\n    }\n    if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n      return [];\n    } else {\n      throw new NoMatch();\n    }\n  }\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\nprivate noLeftoversInUrl(segmentGroup: UrlSegmentGroup, segments: UrlSegment[], outlet: string):\n      boolean {\n    return segments.length === 0 && !segmentGroup.children[outlet];\n  }\n/**\n * @param {?} route\n * @param {?} rawSegment\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\nprocessSegmentAgainstRoute(\n      route: Route, rawSegment: UrlSegmentGroup, segments: UrlSegment[],\n      outlet: string): TreeNode<ActivatedRouteSnapshot>[] {\n    if (route.redirectTo) throw new NoMatch();\n\n    if ((route.outlet ? route.outlet : PRIMARY_OUTLET) !== outlet) throw new NoMatch();\n\n    if (route.path === '**') {\n      const /** @type {?} */ params = segments.length > 0 ? last(segments).parameters : {};\n      const /** @type {?} */ snapshot = new ActivatedRouteSnapshot(\n          segments, params, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment,\n          getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment),\n          getPathIndexShift(rawSegment) + segments.length, getResolve(route));\n      return [new TreeNode<ActivatedRouteSnapshot>(snapshot, [])];\n    }\n\n    const {consumedSegments, parameters, lastChild} = match(rawSegment, route, segments);\n    const /** @type {?} */ rawSlicedSegments = segments.slice(lastChild);\n    const /** @type {?} */ childConfig = getChildConfig(route);\n\n    const {segmentGroup, slicedSegments} =\n        split(rawSegment, consumedSegments, rawSlicedSegments, childConfig);\n\n    const /** @type {?} */ snapshot = new ActivatedRouteSnapshot(\n        consumedSegments, parameters, Object.freeze(this.urlTree.queryParams),\n        this.urlTree.fragment, getData(route), outlet, route.component, route,\n        getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length,\n        getResolve(route));\n\n\n    if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n      const /** @type {?} */ children = this.processChildren(childConfig, segmentGroup);\n      return [new TreeNode<ActivatedRouteSnapshot>(snapshot, children)];\n\n    } else if (childConfig.length === 0 && slicedSegments.length === 0) {\n      return [new TreeNode<ActivatedRouteSnapshot>(snapshot, [])];\n\n    } else {\n      const /** @type {?} */ children =\n          this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);\n      return [new TreeNode<ActivatedRouteSnapshot>(snapshot, children)];\n    }\n  }\n}\n\nfunction Recognizer_tsickle_Closure_declarations() {\n/** @type {?} */\nRecognizer.prototype.rootComponentType;\n/** @type {?} */\nRecognizer.prototype.config;\n/** @type {?} */\nRecognizer.prototype.urlTree;\n/** @type {?} */\nRecognizer.prototype.url;\n}\n\n/**\n * @param {?} nodes\n * @return {?}\n */\nfunction sortActivatedRouteSnapshots(nodes: TreeNode<ActivatedRouteSnapshot>[]): void {\n  nodes.sort((a, b) => {\n    if (a.value.outlet === PRIMARY_OUTLET) return -1;\n    if (b.value.outlet === PRIMARY_OUTLET) return 1;\n    return a.value.outlet.localeCompare(b.value.outlet);\n  });\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getChildConfig(route: Route): Route[] {\n  if (route.children) {\n    return route.children;\n  } else if (route.loadChildren) {\n    return ( /** @type {?} */((<any>route)))._loadedConfig.routes;\n  } else {\n    return [];\n  }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\nfunction match(segmentGroup: UrlSegmentGroup, route: Route, segments: UrlSegment[]) {\n  if (route.path === '') {\n    if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {\n      throw new NoMatch();\n    } else {\n      return {consumedSegments: [], lastChild: 0, parameters: {}};\n    }\n  }\n\n  const /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;\n  const /** @type {?} */ res = matcher(segments, segmentGroup, route);\n  if (!res) throw new NoMatch();\n\n  const /** @type {?} */ posParams: {[n: string]: string} = {};\n  forEach(res.posParams, (v: UrlSegment, k: string) => { posParams[k] = v.path; });\n  const /** @type {?} */ parameters = merge(posParams, res.consumed[res.consumed.length - 1].parameters);\n\n  return {consumedSegments: res.consumed, lastChild: res.consumed.length, parameters};\n}\n/**\n * @param {?} nodes\n * @return {?}\n */\nfunction checkOutletNameUniqueness(nodes: TreeNode<ActivatedRouteSnapshot>[]): void {\n  const /** @type {?} */ names: {[k: string]: ActivatedRouteSnapshot} = {};\n  nodes.forEach(n => {\n    const /** @type {?} */ routeWithSameOutletName = names[n.value.outlet];\n    if (routeWithSameOutletName) {\n      const /** @type {?} */ p = routeWithSameOutletName.url.map(s => s.toString()).join('/');\n      const /** @type {?} */ c = n.value.url.map(s => s.toString()).join('/');\n      throw new Error(`Two segments cannot have the same outlet name: '${p}' and '${c}'.`);\n    }\n    names[n.value.outlet] = n.value;\n  });\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction getSourceSegmentGroup(segmentGroup: UrlSegmentGroup): UrlSegmentGroup {\n  let /** @type {?} */ s = segmentGroup;\n  while (s._sourceSegment) {\n    s = s._sourceSegment;\n  }\n  return s;\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction getPathIndexShift(segmentGroup: UrlSegmentGroup): number {\n  let /** @type {?} */ s = segmentGroup;\n  let /** @type {?} */ res = (s._segmentIndexShift ? s._segmentIndexShift : 0);\n  while (s._sourceSegment) {\n    s = s._sourceSegment;\n    res += (s._segmentIndexShift ? s._segmentIndexShift : 0);\n  }\n  return res - 1;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} slicedSegments\n * @param {?} config\n * @return {?}\n */\nfunction split(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], slicedSegments: UrlSegment[],\n    config: Route[]) {\n  if (slicedSegments.length > 0 &&\n      containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n    const /** @type {?} */ s = new UrlSegmentGroup(\n        consumedSegments, createChildrenForEmptyPaths(\n                              segmentGroup, consumedSegments, config,\n                              new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return {segmentGroup: s, slicedSegments: []};\n\n  } else if (\n      slicedSegments.length === 0 &&\n      containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {\n    const /** @type {?} */ s = new UrlSegmentGroup(\n        segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(\n                                   segmentGroup, slicedSegments, config, segmentGroup.children));\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return {segmentGroup: s, slicedSegments};\n\n  } else {\n    const /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return {segmentGroup: s, slicedSegments};\n  }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @param {?} children\n * @return {?}\n */\nfunction addEmptyPathsToChildrenIfNeeded(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[],\n    children: {[name: string]: UrlSegmentGroup}): {[name: string]: UrlSegmentGroup} {\n  const /** @type {?} */ res: {[name: string]: UrlSegmentGroup} = {};\n  for (const /** @type {?} */ r of routes) {\n    if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n      const /** @type {?} */ s = new UrlSegmentGroup([], {});\n      s._sourceSegment = segmentGroup;\n      s._segmentIndexShift = segmentGroup.segments.length;\n      res[getOutlet(r)] = s;\n    }\n  }\n  return merge(children, res);\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} routes\n * @param {?} primarySegment\n * @return {?}\n */\nfunction createChildrenForEmptyPaths(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], routes: Route[],\n    primarySegment: UrlSegmentGroup): {[name: string]: UrlSegmentGroup} {\n  const /** @type {?} */ res: {[name: string]: UrlSegmentGroup} = {};\n  res[PRIMARY_OUTLET] = primarySegment;\n  primarySegment._sourceSegment = segmentGroup;\n  primarySegment._segmentIndexShift = consumedSegments.length;\n\n  for (const /** @type {?} */ r of routes) {\n    if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n      const /** @type {?} */ s = new UrlSegmentGroup([], {});\n      s._sourceSegment = segmentGroup;\n      s._segmentIndexShift = consumedSegments.length;\n      res[getOutlet(r)] = s;\n    }\n  }\n  return res;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathMatchesWithNamedOutlets(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes\n             .filter(\n                 r => emptyPathMatch(segmentGroup, slicedSegments, r) &&\n                     getOutlet(r) !== PRIMARY_OUTLET)\n             .length > 0;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathMatches(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes.filter(r => emptyPathMatch(segmentGroup, slicedSegments, r)).length > 0;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} r\n * @return {?}\n */\nfunction emptyPathMatch(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], r: Route): boolean {\n  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full')\n    return false;\n  return r.path === '' && r.redirectTo === undefined;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getOutlet(route: Route): string {\n  return route.outlet ? route.outlet : PRIMARY_OUTLET;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getData(route: Route): Data {\n  return route.data ? route.data : {};\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getResolve(route: Route): ResolveData {\n  return route.resolve ? route.resolve : {};\n}\n"]}