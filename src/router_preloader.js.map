{"version":3,"sources":["../../../../modules/@angular/router/src/router_preloader.ts"],"names":[],"mappings":"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","file":"router_preloader.js","sourceRoot":"","sourcesContent":["/**\n*@license\n*Copyright Google Inc. All Rights Reserved.\n*\n*Use of this source code is governed by an MIT-style license that can be\n*found in the LICENSE file at https://angular.io/license\n*/\n\nimport {Compiler, Injectable, Injector, NgModuleFactoryLoader} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport {from} from 'rxjs/observable/from';\nimport {of } from 'rxjs/observable/of';\nimport {_catch} from 'rxjs/operator/catch';\nimport {concatMap} from 'rxjs/operator/concatMap';\nimport {filter} from 'rxjs/operator/filter';\nimport {mergeAll} from 'rxjs/operator/mergeAll';\nimport {mergeMap} from 'rxjs/operator/mergeMap';\n\nimport {Route, Routes} from './config';\nimport {NavigationEnd, Router} from './router';\nimport {RouterConfigLoader} from './router_config_loader';\n/**\n * \\@whatItDoes Provides a preloading strategy.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class PreloadingStrategy {\n/**\n * @abstract\n * @param {?} route\n * @param {?} fn\n * @return {?}\n */\npreload(route: Route, fn: () => Observable<any>) {}\n}\n/**\n * \\@whatItDoes Provides a preloading strategy that preloads all modules as quicky as possible.\n * \n * \\@howToUse \n * \n * ```\n * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n * \n * \\@experimental\n */\nexport class PreloadAllModules implements PreloadingStrategy {\n/**\n * @param {?} route\n * @param {?} fn\n * @return {?}\n */\npreload(route: Route, fn: () => Observable<any>): Observable<any> {\n    return _catch.call(fn(), () => of (null));\n  }\n}\n/**\n * \\@whatItDoes Provides a preloading strategy that does not preload any modules.\n * \n * \\@description \n * \n * This strategy is enabled by default.\n * \n * \\@experimental\n */\nexport class NoPreloading implements PreloadingStrategy {\n/**\n * @param {?} route\n * @param {?} fn\n * @return {?}\n */\npreload(route: Route, fn: () => Observable<any>): Observable<any> { return of (null); }\n}\n/**\n * The preloader optimistically loads all router configurations to\n * make navigations into lazily-loaded sections of the application faster.\n * \n * The preloader runs in the background. When the router bootstraps, the preloader\n * starts listening to all navigation events. After every such event, the preloader\n * will check if any configurations can be loaded lazily.\n * \n * If a route is protected by `canLoad` guards, the preloaded will not load it.\n * \n * \\@stable\n */\nexport class RouterPreloader {\nprivate loader: RouterConfigLoader;\nprivate subscription: Subscription;\n/**\n * @param {?} router\n * @param {?} moduleLoader\n * @param {?} compiler\n * @param {?} injector\n * @param {?} preloadingStrategy\n */\nconstructor(\nprivate router: Router, moduleLoader: NgModuleFactoryLoader, compiler: Compiler,\nprivate injector: Injector,\nprivate preloadingStrategy: PreloadingStrategy) {\n    this.loader = new RouterConfigLoader(moduleLoader, compiler);\n  };\n/**\n * @return {?}\n */\nsetUpPreloading(): void {\n    const /** @type {?} */ navigations = filter.call(this.router.events, (e: any) => e instanceof NavigationEnd);\n    this.subscription = concatMap.call(navigations, () => this.preload()).subscribe((v: any) => {});\n  }\n/**\n * @return {?}\n */\npreload(): Observable<any> { return this.processRoutes(this.injector, this.router.config); }\n/**\n * @return {?}\n */\nngOnDestroy() { this.subscription.unsubscribe(); }\n/**\n * @param {?} injector\n * @param {?} routes\n * @return {?}\n */\nprivate processRoutes(injector: Injector, routes: Routes): Observable<void> {\n    const /** @type {?} */ res: Observable<any>[] = [];\n    for (const /** @type {?} */ c of routes) {\n      // we already have the config loaded, just recurse\n      if (c.loadChildren && !c.canLoad && ( /** @type {?} */((<any>c)))._loadedConfig) {\n        const /** @type {?} */ childConfig = ( /** @type {?} */((<any>c)))._loadedConfig;\n        res.push(this.processRoutes(childConfig.injector, childConfig.routes));\n\n        // no config loaded, fetch the config\n      } else if (c.loadChildren && !c.canLoad) {\n        res.push(this.preloadConfig(injector, c));\n\n        // recurse into children\n      } else if (c.children) {\n        res.push(this.processRoutes(injector, c.children));\n      }\n    }\n    return mergeAll.call(from(res));\n  }\n/**\n * @param {?} injector\n * @param {?} route\n * @return {?}\n */\nprivate preloadConfig(injector: Injector, route: Route): Observable<void> {\n    return this.preloadingStrategy.preload(route, () => {\n      const /** @type {?} */ loaded = this.loader.load(injector, route.loadChildren);\n      return mergeMap.call(loaded, (config: any): any => {\n        const /** @type {?} */ c: any = route;\n        c._loadedConfig = config;\n        return this.processRoutes(config.injector, config.routes);\n      });\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Router, },\n{type: NgModuleFactoryLoader, },\n{type: Compiler, },\n{type: Injector, },\n{type: PreloadingStrategy, },\n];\n}\n\nfunction RouterPreloader_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterPreloader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterPreloader.ctorParameters;\n/** @type {?} */\nRouterPreloader.prototype.loader;\n/** @type {?} */\nRouterPreloader.prototype.subscription;\n/** @type {?} */\nRouterPreloader.prototype.router;\n/** @type {?} */\nRouterPreloader.prototype.injector;\n/** @type {?} */\nRouterPreloader.prototype.preloadingStrategy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}