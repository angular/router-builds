{"version":3,"sources":["../../../../modules/@angular/router/src/router_state.ts"],"names":[],"mappings":"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","file":"router_state.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core/index';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\n\nimport {Data, ResolveData, Route} from './config';\nimport {PRIMARY_OUTLET, Params} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree, equalSegments} from './url_tree';\nimport {merge, shallowEqual, shallowEqualArrays} from './utils/collection';\nimport {Tree, TreeNode} from './utils/tree';\n/**\n * \\@whatItDoes Represents the state of the router.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'template.html'}) \n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n * \n * \\@description \n * RouterState is a tree of activated routes. Every node in this tree knows about the \"consumed\" URL\n * segments,\n * the extracted parameters, and the resolved data.\n * \n * See {\\@link ActivatedRoute} for more information.\n * \n * \\@stable\n */\nexport class RouterState extends Tree<ActivatedRoute> {\n/**\n * \\@internal\n * @param {?} root\n * @param {?} snapshot\n */\nconstructor(\n      root: TreeNode<ActivatedRoute>,\npublic snapshot: RouterStateSnapshot) {\n    super(root);\n    setRouterStateSnapshot<RouterState, ActivatedRoute>(this, root);\n  }\n/**\n * @return {?}\n */\ntoString(): string { return this.snapshot.toString(); }\n}\n\nfunction RouterState_tsickle_Closure_declarations() {\n/**\n * The current snapshot of the router state\n * @type {?}\n */\nRouterState.prototype.snapshot;\n}\n\n/**\n * @param {?} urlTree\n * @param {?} rootComponent\n * @return {?}\n */\nexport function createEmptyState(urlTree: UrlTree, rootComponent: Type<any>): RouterState {\n  const /** @type {?} */ snapshot = createEmptyStateSnapshot(urlTree, rootComponent);\n  const /** @type {?} */ emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);\n  const /** @type {?} */ emptyParams = new BehaviorSubject({});\n  const /** @type {?} */ emptyData = new BehaviorSubject({});\n  const /** @type {?} */ emptyQueryParams = new BehaviorSubject({});\n  const /** @type {?} */ fragment = new BehaviorSubject('');\n  const /** @type {?} */ activated = new ActivatedRoute(\n      emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent,\n      snapshot.root);\n  activated.snapshot = snapshot.root;\n  return new RouterState(new TreeNode<ActivatedRoute>(activated, []), snapshot);\n}\n/**\n * @param {?} urlTree\n * @param {?} rootComponent\n * @return {?}\n */\nexport function createEmptyStateSnapshot(\n    urlTree: UrlTree, rootComponent: Type<any>): RouterStateSnapshot {\n  const /** @type {?} */ emptyParams = {};\n  const /** @type {?} */ emptyData = {};\n  const /** @type {?} */ emptyQueryParams = {};\n  const /** @type {?} */ fragment = '';\n  const /** @type {?} */ activated = new ActivatedRouteSnapshot(\n      [], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null,\n      urlTree.root, -1, {});\n  return new RouterStateSnapshot('', new TreeNode<ActivatedRouteSnapshot>(activated, []));\n}\n/**\n * \\@whatItDoes Contains the information about a route associated with a component loaded in an\n * outlet.\n * An `ActivatedRoute` can also be used to traverse the router state tree.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({...}) \n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: Observable<string> = route.params.map(p => p.id);\n *     const url: Observable<string> = route.url.map(segments => segments.join(''));\n *     // route.data includes both `data` and `resolve`\n *     const user = route.data.map(d => d.user);\n *   }\n * }\n * ```\n * \n * \\@stable\n */\nexport class ActivatedRoute {\n  /** The current snapshot of this route */\n  snapshot: ActivatedRouteSnapshot;\n  /** @internal */\n  _futureSnapshot: ActivatedRouteSnapshot;\n  /** @internal */\n  _routerState: RouterState;\n/**\n * \\@internal\n * @param {?} url\n * @param {?} params\n * @param {?} queryParams\n * @param {?} fragment\n * @param {?} data\n * @param {?} outlet\n * @param {?} component\n * @param {?} futureSnapshot\n */\nconstructor(\npublic url: Observable<UrlSegment[]>,\npublic params: Observable<Params>,\npublic queryParams: Observable<Params>,\npublic fragment: Observable<string>,\npublic data: Observable<Data>,\npublic outlet: string,\npublic component: Type<any>|string, futureSnapshot: ActivatedRouteSnapshot) {\n    this._futureSnapshot = futureSnapshot;\n  }\n/**\n * The configuration used to match this route\n * @return {?}\n */\nget routeConfig(): Route { return this._futureSnapshot.routeConfig; }\n/**\n * The root of the router state\n * @return {?}\n */\nget root(): ActivatedRoute { return this._routerState.root; }\n/**\n * The parent of this route in the router state tree\n * @return {?}\n */\nget parent(): ActivatedRoute { return this._routerState.parent(this); }\n/**\n * The first child of this route in the router state tree\n * @return {?}\n */\nget firstChild(): ActivatedRoute { return this._routerState.firstChild(this); }\n/**\n * The children of this route in the router state tree\n * @return {?}\n */\nget children(): ActivatedRoute[] { return this._routerState.children(this); }\n/**\n * The path from the root of the router state tree to this route\n * @return {?}\n */\nget pathFromRoot(): ActivatedRoute[] { return this._routerState.pathFromRoot(this); }\n/**\n * @return {?}\n */\ntoString(): string {\n    return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;\n  }\n}\n\nfunction ActivatedRoute_tsickle_Closure_declarations() {\n/**\n * The current snapshot of this route\n * @type {?}\n */\nActivatedRoute.prototype.snapshot;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRoute.prototype._futureSnapshot;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRoute.prototype._routerState;\n/**\n * An observable of the URL segments matched by this route\n * @type {?}\n */\nActivatedRoute.prototype.url;\n/**\n * An observable of the matrix parameters scoped to this route\n * @type {?}\n */\nActivatedRoute.prototype.params;\n/**\n * An observable of the query parameters shared by all the routes\n * @type {?}\n */\nActivatedRoute.prototype.queryParams;\n/**\n * An observable of the URL fragment shared by all the routes\n * @type {?}\n */\nActivatedRoute.prototype.fragment;\n/**\n * An observable of the static and resolved data of this route.\n * @type {?}\n */\nActivatedRoute.prototype.data;\n/**\n * The outlet name of the route. It's a constant\n * @type {?}\n */\nActivatedRoute.prototype.outlet;\n/** @type {?} */\nActivatedRoute.prototype.component;\n}\n\n\n/** @internal */\nexport type Inherited = {\n  params: Params,\n  data: Data,\n  resolve: Data,\n};\n/**\n * \\@internal\n * @param {?} route\n * @return {?}\n */\nexport function inheritedParamsDataResolve(route: ActivatedRouteSnapshot): Inherited {\n  const /** @type {?} */ pathToRoot = route.pathFromRoot;\n\n  let /** @type {?} */ inhertingStartingFrom = pathToRoot.length - 1;\n\n  while (inhertingStartingFrom >= 1) {\n    const /** @type {?} */ current = pathToRoot[inhertingStartingFrom];\n    const /** @type {?} */ parent = pathToRoot[inhertingStartingFrom - 1];\n    // current route is an empty path => inherits its parent's params and data\n    if (current.routeConfig && current.routeConfig.path === '') {\n      inhertingStartingFrom--;\n\n      // parent is componentless => current route should inherit its params and data\n    } else if (!parent.component) {\n      inhertingStartingFrom--;\n\n    } else {\n      break;\n    }\n  }\n\n  return pathToRoot.slice(inhertingStartingFrom).reduce((res, curr) => {\n    const /** @type {?} */ params = merge(res.params, curr.params);\n    const /** @type {?} */ data = merge(res.data, curr.data);\n    const /** @type {?} */ resolve = merge(res.resolve, curr._resolvedData);\n    return {params, data, resolve};\n  }, /** @type {?} */(( <any>{params: {}, data: {}, resolve: {}})));\n}\n/**\n * \\@whatItDoes Contains the information about a route associated with a component loaded in an\n * outlet\n * at a particular moment in time. ActivatedRouteSnapshot can also be used to traverse the router\n * state tree.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'./my-component.html'}) \n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n * \n * \\@stable\n */\nexport class ActivatedRouteSnapshot {\n  /** @internal **/\n  _routeConfig: Route;\n  /** @internal **/\n  _urlSegment: UrlSegmentGroup;\n  /** @internal */\n  _lastPathIndex: number;\n  /** @internal */\n  _resolve: ResolveData;\n  /** @internal */\n  _resolvedData: Data;\n  /** @internal */\n  _routerState: RouterStateSnapshot;\n/**\n * \\@internal\n * @param {?} url\n * @param {?} params\n * @param {?} queryParams\n * @param {?} fragment\n * @param {?} data\n * @param {?} outlet\n * @param {?} component\n * @param {?} routeConfig\n * @param {?} urlSegment\n * @param {?} lastPathIndex\n * @param {?} resolve\n */\nconstructor(\npublic url: UrlSegment[],\npublic params: Params,\npublic queryParams: Params,\npublic fragment: string,\npublic data: Data,\npublic outlet: string,\npublic component: Type<any>|string, routeConfig: Route, urlSegment: UrlSegmentGroup,\n      lastPathIndex: number, resolve: ResolveData) {\n    this._routeConfig = routeConfig;\n    this._urlSegment = urlSegment;\n    this._lastPathIndex = lastPathIndex;\n    this._resolve = resolve;\n  }\n/**\n * The configuration used to match this route\n * @return {?}\n */\nget routeConfig(): Route { return this._routeConfig; }\n/**\n * The root of the router state\n * @return {?}\n */\nget root(): ActivatedRouteSnapshot { return this._routerState.root; }\n/**\n * The parent of this route in the router state tree\n * @return {?}\n */\nget parent(): ActivatedRouteSnapshot { return this._routerState.parent(this); }\n/**\n * The first child of this route in the router state tree\n * @return {?}\n */\nget firstChild(): ActivatedRouteSnapshot { return this._routerState.firstChild(this); }\n/**\n * The children of this route in the router state tree\n * @return {?}\n */\nget children(): ActivatedRouteSnapshot[] { return this._routerState.children(this); }\n/**\n * The path from the root of the router state tree to this route\n * @return {?}\n */\nget pathFromRoot(): ActivatedRouteSnapshot[] { return this._routerState.pathFromRoot(this); }\n/**\n * @return {?}\n */\ntoString(): string {\n    const /** @type {?} */ url = this.url.map(segment => segment.toString()).join('/');\n    const /** @type {?} */ matched = this._routeConfig ? this._routeConfig.path : '';\n    return `Route(url:'${url}', path:'${matched}')`;\n  }\n}\n\nfunction ActivatedRouteSnapshot_tsickle_Closure_declarations() {\n/**\n * \\@internal *\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._routeConfig;\n/**\n * \\@internal *\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._urlSegment;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._lastPathIndex;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._resolve;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._resolvedData;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._routerState;\n/**\n * The URL segments matched by this route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.url;\n/**\n * The matrix parameters scoped to this route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.params;\n/**\n * The query parameters shared by all the routes\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.queryParams;\n/**\n * The URL fragment shared by all the routes\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.fragment;\n/**\n * The static and resolved data of this route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.data;\n/**\n * The outlet name of the route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.outlet;\n/**\n * The component of the route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.component;\n}\n\n/**\n * \\@whatItDoes Represents the state of the router at a moment in time.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'template.html'}) \n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n * \n * \\@description \n * RouterStateSnapshot is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n * \n * \\@stable\n */\nexport class RouterStateSnapshot extends Tree<ActivatedRouteSnapshot> {\n/**\n * \\@internal\n * @param {?} url\n * @param {?} root\n */\nconstructor(\npublic url: string, root: TreeNode<ActivatedRouteSnapshot>) {\n    super(root);\n    setRouterStateSnapshot<RouterStateSnapshot, ActivatedRouteSnapshot>(this, root);\n  }\n/**\n * @return {?}\n */\ntoString(): string { return serializeNode(this._root); }\n}\n\nfunction RouterStateSnapshot_tsickle_Closure_declarations() {\n/**\n * The url from which this snapshot was created\n * @type {?}\n */\nRouterStateSnapshot.prototype.url;\n}\n\n/**\n * @param {?} state\n * @param {?} node\n * @return {?}\n */\nfunction setRouterStateSnapshot<U, T extends{_routerState: U}>(state: U, node: TreeNode<T>): void {\n  node.value._routerState = state;\n  node.children.forEach(c => setRouterStateSnapshot(state, c));\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction serializeNode(node: TreeNode<ActivatedRouteSnapshot>): string {\n  const /** @type {?} */ c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(\", \")} } ` : '';\n  return `${node.value}${c}`;\n}\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n * @param {?} route\n * @return {?}\n */\nexport function advanceActivatedRoute(route: ActivatedRoute): void {\n  if (route.snapshot) {\n    const /** @type {?} */ currentSnapshot = route.snapshot;\n    route.snapshot = route._futureSnapshot;\n    if (!shallowEqual(currentSnapshot.queryParams, route._futureSnapshot.queryParams)) {\n      ( /** @type {?} */((<any>route.queryParams))).next(route._futureSnapshot.queryParams);\n    }\n    if (currentSnapshot.fragment !== route._futureSnapshot.fragment) {\n      ( /** @type {?} */((<any>route.fragment))).next(route._futureSnapshot.fragment);\n    }\n    if (!shallowEqual(currentSnapshot.params, route._futureSnapshot.params)) {\n      ( /** @type {?} */((<any>route.params))).next(route._futureSnapshot.params);\n    }\n    if (!shallowEqualArrays(currentSnapshot.url, route._futureSnapshot.url)) {\n      ( /** @type {?} */((<any>route.url))).next(route._futureSnapshot.url);\n    }\n    if (!equalParamsAndUrlSegments(currentSnapshot, route._futureSnapshot)) {\n      ( /** @type {?} */((<any>route.data))).next(route._futureSnapshot.data);\n    }\n  } else {\n    route.snapshot = route._futureSnapshot;\n\n    // this is for resolved data\n    ( /** @type {?} */((<any>route.data))).next(route._futureSnapshot.data);\n  }\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function equalParamsAndUrlSegments(\n    a: ActivatedRouteSnapshot, b: ActivatedRouteSnapshot): boolean {\n  const /** @type {?} */ equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n  const /** @type {?} */ parentsMismatch = !a.parent !== !b.parent;\n\n  return equalUrlParams && !parentsMismatch &&\n      (!a.parent || equalParamsAndUrlSegments(a.parent, b.parent));\n}"]}