{"version":3,"sources":["../../../../modules/@angular/router/src/apply_redirects.ts"],"names":[],"mappings":"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","file":"apply_redirects.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {from} from 'rxjs/observable/from';\nimport {of } from 'rxjs/observable/of';\nimport {_catch} from 'rxjs/operator/catch';\nimport {concatAll} from 'rxjs/operator/concatAll';\nimport {first} from 'rxjs/operator/first';\nimport {map} from 'rxjs/operator/map';\nimport {mergeMap} from 'rxjs/operator/mergeMap';\nimport {EmptyError} from 'rxjs/util/EmptyError';\n\nimport {Route, Routes} from './config';\nimport {LoadedRouterConfig, RouterConfigLoader} from './router_config_loader';\nimport {PRIMARY_OUTLET, Params, defaultUrlMatcher, navigationCancelingError} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree} from './url_tree';\nimport {andObservables, forEach, merge, waitForMap, wrapIntoObservable} from './utils/collection';\nclass NoMatch {\n/**\n * @param {?=} segmentGroup\n */\nconstructor(public segmentGroup: UrlSegmentGroup = null) {}\n}\n\nfunction NoMatch_tsickle_Closure_declarations() {\n/** @type {?} */\nNoMatch.prototype.segmentGroup;\n}\n\nclass AbsoluteRedirect {\n/**\n * @param {?} urlTree\n */\nconstructor(public urlTree: UrlTree) {}\n}\n\nfunction AbsoluteRedirect_tsickle_Closure_declarations() {\n/** @type {?} */\nAbsoluteRedirect.prototype.urlTree;\n}\n\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction noMatch(segmentGroup: UrlSegmentGroup): Observable<UrlSegmentGroup> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new NoMatch(segmentGroup)));\n}\n/**\n * @param {?} newTree\n * @return {?}\n */\nfunction absoluteRedirect(newTree: UrlTree): Observable<any> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new AbsoluteRedirect(newTree)));\n}\n/**\n * @param {?} redirectTo\n * @return {?}\n */\nfunction namedOutletsRedirect(redirectTo: string): Observable<any> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new Error(\n          `Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`)));\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction canLoadFails(route: Route): Observable<LoadedRouterConfig> {\n  return new Observable<LoadedRouterConfig>(\n      (obs: Observer<LoadedRouterConfig>) => obs.error(navigationCancelingError(\n          `Cannot load children because the guard of the route \"path: '${route.path}'\" returned false`)));\n}\n/**\n * @param {?} injector\n * @param {?} configLoader\n * @param {?} urlSerializer\n * @param {?} urlTree\n * @param {?} config\n * @return {?}\n */\nexport function applyRedirects(\n    injector: Injector, configLoader: RouterConfigLoader, urlSerializer: UrlSerializer,\n    urlTree: UrlTree, config: Routes): Observable<UrlTree> {\n  return new ApplyRedirects(injector, configLoader, urlSerializer, urlTree, config).apply();\n}\nclass ApplyRedirects {\nprivate allowRedirects: boolean = true;\n/**\n * @param {?} injector\n * @param {?} configLoader\n * @param {?} urlSerializer\n * @param {?} urlTree\n * @param {?} config\n */\nconstructor(\nprivate injector: Injector,\nprivate configLoader: RouterConfigLoader,\nprivate urlSerializer: UrlSerializer,\nprivate urlTree: UrlTree,\nprivate config: Routes) {}\n/**\n * @return {?}\n */\napply(): Observable<UrlTree> {\n    const /** @type {?} */ expanded$ =\n        this.expandSegmentGroup(this.injector, this.config, this.urlTree.root, PRIMARY_OUTLET);\n    const /** @type {?} */ urlTrees$ = map.call(\n        expanded$, (rootSegmentGroup: UrlSegmentGroup) => this.createUrlTree(\n                       rootSegmentGroup, this.urlTree.queryParams, this.urlTree.fragment));\n    return _catch.call(urlTrees$, (e: any) => {\n      if (e instanceof AbsoluteRedirect) {\n        // after an absolute redirect we do not apply any more redirects!\n        this.allowRedirects = false;\n        // we need to run matching, so we can fetch all lazy-loaded modules\n        return this.match(e.urlTree);\n      } else if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      } else {\n        throw e;\n      }\n    });\n  }\n/**\n * @param {?} tree\n * @return {?}\n */\nprivate match(tree: UrlTree): Observable<UrlTree> {\n    const /** @type {?} */ expanded$ =\n        this.expandSegmentGroup(this.injector, this.config, tree.root, PRIMARY_OUTLET);\n    const /** @type {?} */ mapped$ = map.call(\n        expanded$, (rootSegmentGroup: UrlSegmentGroup) =>\n                       this.createUrlTree(rootSegmentGroup, tree.queryParams, tree.fragment));\n    return _catch.call(mapped$, (e: any): Observable<UrlTree> => {\n      if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      } else {\n        throw e;\n      }\n    });\n  }\n/**\n * @param {?} e\n * @return {?}\n */\nprivate noMatchError(e: NoMatch): any {\n    return new Error(`Cannot match any routes. URL Segment: '${e.segmentGroup}'`);\n  }\n/**\n * @param {?} rootCandidate\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\nprivate createUrlTree(rootCandidate: UrlSegmentGroup, queryParams: Params, fragment: string):\n      UrlTree {\n    const /** @type {?} */ root = rootCandidate.segments.length > 0 ?\n        new UrlSegmentGroup([], {[PRIMARY_OUTLET]: rootCandidate}) :\n        rootCandidate;\n    return new UrlTree(root, queryParams, fragment);\n  }\n/**\n * @param {?} injector\n * @param {?} routes\n * @param {?} segmentGroup\n * @param {?} outlet\n * @return {?}\n */\nprivate expandSegmentGroup(\n      injector: Injector, routes: Route[], segmentGroup: UrlSegmentGroup,\n      outlet: string): Observable<UrlSegmentGroup> {\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n      return map.call(\n          this.expandChildren(injector, routes, segmentGroup),\n          (children: any) => new UrlSegmentGroup([], children));\n    } else {\n      return this.expandSegment(\n          injector, segmentGroup, routes, segmentGroup.segments, outlet, true);\n    }\n  }\n/**\n * @param {?} injector\n * @param {?} routes\n * @param {?} segmentGroup\n * @return {?}\n */\nprivate expandChildren(injector: Injector, routes: Route[], segmentGroup: UrlSegmentGroup):\n      Observable<{[name: string]: UrlSegmentGroup}> {\n    return waitForMap(\n        segmentGroup.children,\n        (childOutlet, child) => this.expandSegmentGroup(injector, routes, child, childOutlet));\n  }\n/**\n * @param {?} injector\n * @param {?} segmentGroup\n * @param {?} routes\n * @param {?} segments\n * @param {?} outlet\n * @param {?} allowRedirects\n * @return {?}\n */\nprivate expandSegment(\n      injector: Injector, segmentGroup: UrlSegmentGroup, routes: Route[], segments: UrlSegment[],\n      outlet: string, allowRedirects: boolean): Observable<UrlSegmentGroup> {\n    const /** @type {?} */ routes$ = of (...routes);\n    const /** @type {?} */ processedRoutes$ = map.call(routes$, (r: any) => {\n      const /** @type {?} */ expanded$ = this.expandSegmentAgainstRoute(\n          injector, segmentGroup, routes, r, segments, outlet, allowRedirects);\n      return _catch.call(expanded$, (e: any) => {\n        if (e instanceof NoMatch)\n          return of (null);\n        else\n          throw e;\n      });\n    });\n    const /** @type {?} */ concattedProcessedRoutes$ = concatAll.call(processedRoutes$);\n    const /** @type {?} */ first$ = first.call(concattedProcessedRoutes$, (s: any) => !!s);\n    return _catch.call(first$, (e: any, _: any): Observable<UrlSegmentGroup> => {\n      if (e instanceof EmptyError) {\n        if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n          return of (new UrlSegmentGroup([], {}));\n        } else {\n          throw new NoMatch(segmentGroup);\n        }\n      } else {\n        throw e;\n      }\n    });\n  }\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\nprivate noLeftoversInUrl(segmentGroup: UrlSegmentGroup, segments: UrlSegment[], outlet: string):\n      boolean {\n    return segments.length === 0 && !segmentGroup.children[outlet];\n  }\n/**\n * @param {?} injector\n * @param {?} segmentGroup\n * @param {?} routes\n * @param {?} route\n * @param {?} paths\n * @param {?} outlet\n * @param {?} allowRedirects\n * @return {?}\n */\nprivate expandSegmentAgainstRoute(\n      injector: Injector, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      paths: UrlSegment[], outlet: string, allowRedirects: boolean): Observable<UrlSegmentGroup> {\n    if (getOutlet(route) !== outlet) return noMatch(segmentGroup);\n    if (route.redirectTo !== undefined && !(allowRedirects && this.allowRedirects))\n      return noMatch(segmentGroup);\n    if (route.redirectTo === undefined) {\n      return this.matchSegmentAgainstRoute(injector, segmentGroup, route, paths);\n    } else {\n      return this.expandSegmentAgainstRouteUsingRedirect(\n          injector, segmentGroup, routes, route, paths, outlet);\n    }\n  }\n/**\n * @param {?} injector\n * @param {?} segmentGroup\n * @param {?} routes\n * @param {?} route\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\nprivate expandSegmentAgainstRouteUsingRedirect(\n      injector: Injector, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      segments: UrlSegment[], outlet: string): Observable<UrlSegmentGroup> {\n    if (route.path === '**') {\n      return this.expandWildCardWithParamsAgainstRouteUsingRedirect(\n          injector, routes, route, outlet);\n    } else {\n      return this.expandRegularSegmentAgainstRouteUsingRedirect(\n          injector, segmentGroup, routes, route, segments, outlet);\n    }\n  }\n/**\n * @param {?} injector\n * @param {?} routes\n * @param {?} route\n * @param {?} outlet\n * @return {?}\n */\nprivate expandWildCardWithParamsAgainstRouteUsingRedirect(\n      injector: Injector, routes: Route[], route: Route,\n      outlet: string): Observable<UrlSegmentGroup> {\n    const /** @type {?} */ newTree = this.applyRedirectCommands([], route.redirectTo, {});\n    if (route.redirectTo.startsWith('/')) {\n      return absoluteRedirect(newTree);\n    } else {\n      return mergeMap.call(this.lineralizeSegments(route, newTree), (newSegments: UrlSegment[]) => {\n        const /** @type {?} */ group = new UrlSegmentGroup(newSegments, {});\n        return this.expandSegment(injector, group, routes, newSegments, outlet, false);\n      });\n    }\n  }\n/**\n * @param {?} injector\n * @param {?} segmentGroup\n * @param {?} routes\n * @param {?} route\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\nprivate expandRegularSegmentAgainstRouteUsingRedirect(\n      injector: Injector, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      segments: UrlSegment[], outlet: string): Observable<UrlSegmentGroup> {\n    const {matched, consumedSegments, lastChild, positionalParamSegments} =\n        match(segmentGroup, route, segments);\n    if (!matched) return noMatch(segmentGroup);\n\n    const /** @type {?} */ newTree = this.applyRedirectCommands(\n        consumedSegments, route.redirectTo, /** @type {?} */(( <any>positionalParamSegments)));\n    if (route.redirectTo.startsWith('/')) {\n      return absoluteRedirect(newTree);\n    } else {\n      return mergeMap.call(this.lineralizeSegments(route, newTree), (newSegments: UrlSegment[]) => {\n        return this.expandSegment(\n            injector, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet,\n            false);\n      });\n    }\n  }\n/**\n * @param {?} injector\n * @param {?} rawSegmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\nprivate matchSegmentAgainstRoute(\n      injector: Injector, rawSegmentGroup: UrlSegmentGroup, route: Route,\n      segments: UrlSegment[]): Observable<UrlSegmentGroup> {\n    if (route.path === '**') {\n      if (route.loadChildren) {\n        return map.call(this.configLoader.load(injector, route.loadChildren), (r: any) => {\n          ( /** @type {?} */((<any>route)))._loadedConfig = r;\n          return new UrlSegmentGroup(segments, {});\n        });\n      } else {\n        return of (new UrlSegmentGroup(segments, {}));\n      }\n\n    } else {\n      const {matched, consumedSegments, lastChild} = match(rawSegmentGroup, route, segments);\n      if (!matched) return noMatch(rawSegmentGroup);\n\n      const /** @type {?} */ rawSlicedSegments = segments.slice(lastChild);\n      const /** @type {?} */ childConfig$ = this.getChildConfig(injector, route);\n      return mergeMap.call(childConfig$, (routerConfig: any) => {\n        const /** @type {?} */ childInjector = routerConfig.injector;\n        const /** @type {?} */ childConfig = routerConfig.routes;\n        const {segmentGroup, slicedSegments} =\n            split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig);\n\n        if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n          const /** @type {?} */ expanded$ = this.expandChildren(childInjector, childConfig, segmentGroup);\n          return map.call(\n              expanded$, (children: any) => new UrlSegmentGroup(consumedSegments, children));\n\n        } else if (childConfig.length === 0 && slicedSegments.length === 0) {\n          return of (new UrlSegmentGroup(consumedSegments, {}));\n\n        } else {\n          const /** @type {?} */ expanded$ = this.expandSegment(\n              childInjector, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);\n          return map.call(\n              expanded$,\n              (cs: any) => new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children));\n        }\n      });\n    }\n  }\n/**\n * @param {?} injector\n * @param {?} route\n * @return {?}\n */\nprivate getChildConfig(injector: Injector, route: Route): Observable<LoadedRouterConfig> {\n    if (route.children) {\n      return of (new LoadedRouterConfig(route.children, injector, null, null));\n    } else if (route.loadChildren) {\n      return mergeMap.call(runGuards(injector, route), (shouldLoad: any) => {\n        if (shouldLoad) {\n          if (( /** @type {?} */((<any>route)))._loadedConfig) {\n            return of (( /** @type {?} */((<any>route)))._loadedConfig);\n          } else {\n            return map.call(this.configLoader.load(injector, route.loadChildren), (r: any) => {\n              ( /** @type {?} */((<any>route)))._loadedConfig = r;\n              return r;\n            });\n          }\n        } else {\n          return canLoadFails(route);\n        }\n      });\n    } else {\n      return of (new LoadedRouterConfig([], injector, null, null));\n    }\n  }\n/**\n * @param {?} route\n * @param {?} urlTree\n * @return {?}\n */\nprivate lineralizeSegments(route: Route, urlTree: UrlTree): Observable<UrlSegment[]> {\n    let /** @type {?} */ res: UrlSegment[] = [];\n    let /** @type {?} */ c = urlTree.root;\n    while (true) {\n      res = res.concat(c.segments);\n      if (c.numberOfChildren === 0) {\n        return of (res);\n      } else if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\n        return namedOutletsRedirect(route.redirectTo);\n      } else {\n        c = c.children[PRIMARY_OUTLET];\n      }\n    }\n  }\n/**\n * @param {?} segments\n * @param {?} redirectTo\n * @param {?} posParams\n * @return {?}\n */\nprivate applyRedirectCommands(\n      segments: UrlSegment[], redirectTo: string, posParams: {[k: string]: UrlSegment}): UrlTree {\n    const /** @type {?} */ t = this.urlSerializer.parse(redirectTo);\n    return this.applyRedirectCreatreUrlTree(\n        redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);\n  }\n/**\n * @param {?} redirectTo\n * @param {?} urlTree\n * @param {?} segments\n * @param {?} posParams\n * @return {?}\n */\nprivate applyRedirectCreatreUrlTree(\n      redirectTo: string, urlTree: UrlTree, segments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlTree {\n    const /** @type {?} */ newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\n    return new UrlTree(\n        newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams),\n        urlTree.fragment);\n  }\n/**\n * @param {?} redirectToParams\n * @param {?} actualParams\n * @return {?}\n */\nprivate createQueryParams(redirectToParams: Params, actualParams: Params): Params {\n    const /** @type {?} */ res: Params = {};\n    forEach(redirectToParams, (v: any, k: string) => {\n      if (v.startsWith(':')) {\n        res[k] = actualParams[v.substring(1)];\n      } else {\n        res[k] = v;\n      }\n    });\n    return res;\n  }\n/**\n * @param {?} redirectTo\n * @param {?} group\n * @param {?} segments\n * @param {?} posParams\n * @return {?}\n */\nprivate createSegmentGroup(\n      redirectTo: string, group: UrlSegmentGroup, segments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlSegmentGroup {\n    const /** @type {?} */ updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\n\n    let /** @type {?} */ children: {[n: string]: UrlSegmentGroup} = {};\n    forEach(group.children, (child: UrlSegmentGroup, name: string) => {\n      children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);\n    });\n\n    return new UrlSegmentGroup(updatedSegments, children);\n  }\n/**\n * @param {?} redirectTo\n * @param {?} redirectToSegments\n * @param {?} actualSegments\n * @param {?} posParams\n * @return {?}\n */\nprivate createSegments(\n      redirectTo: string, redirectToSegments: UrlSegment[], actualSegments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlSegment[] {\n    return redirectToSegments.map(\n        s => s.path.startsWith(':') ? this.findPosParam(redirectTo, s, posParams) :\n                                      this.findOrReturn(s, actualSegments));\n  }\n/**\n * @param {?} redirectTo\n * @param {?} redirectToUrlSegment\n * @param {?} posParams\n * @return {?}\n */\nprivate findPosParam(\n      redirectTo: string, redirectToUrlSegment: UrlSegment,\n      posParams: {[k: string]: UrlSegment}): UrlSegment {\n    const /** @type {?} */ pos = posParams[redirectToUrlSegment.path.substring(1)];\n    if (!pos)\n      throw new Error(\n          `Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`);\n    return pos;\n  }\n/**\n * @param {?} redirectToUrlSegment\n * @param {?} actualSegments\n * @return {?}\n */\nprivate findOrReturn(redirectToUrlSegment: UrlSegment, actualSegments: UrlSegment[]): UrlSegment {\n    let /** @type {?} */ idx = 0;\n    for (const /** @type {?} */ s of actualSegments) {\n      if (s.path === redirectToUrlSegment.path) {\n        actualSegments.splice(idx);\n        return s;\n      }\n      idx++;\n    }\n    return redirectToUrlSegment;\n  }\n}\n\nfunction ApplyRedirects_tsickle_Closure_declarations() {\n/** @type {?} */\nApplyRedirects.prototype.allowRedirects;\n/** @type {?} */\nApplyRedirects.prototype.injector;\n/** @type {?} */\nApplyRedirects.prototype.configLoader;\n/** @type {?} */\nApplyRedirects.prototype.urlSerializer;\n/** @type {?} */\nApplyRedirects.prototype.urlTree;\n/** @type {?} */\nApplyRedirects.prototype.config;\n}\n\n/**\n * @param {?} injector\n * @param {?} route\n * @return {?}\n */\nfunction runGuards(injector: Injector, route: Route): Observable<boolean> {\n  const /** @type {?} */ canLoad = route.canLoad;\n  if (!canLoad || canLoad.length === 0) return of (true);\n  const /** @type {?} */ obs = map.call(from(canLoad), (c: any) => {\n    const /** @type {?} */ guard = injector.get(c);\n    if (guard.canLoad) {\n      return wrapIntoObservable(guard.canLoad(route));\n    } else {\n      return wrapIntoObservable(guard(route));\n    }\n  });\n  return andObservables(obs);\n}\n/**\n * @param {?} segmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\nfunction match(segmentGroup: UrlSegmentGroup, route: Route, segments: UrlSegment[]): {\n  matched: boolean,\n  consumedSegments: UrlSegment[],\n  lastChild: number,\n  positionalParamSegments: {[k: string]: UrlSegment}\n} {\n  const /** @type {?} */ noMatch =\n      {matched: false, consumedSegments: /** @type {?} */(( <any[]>[])), lastChild: 0, positionalParamSegments: {}};\n  if (route.path === '') {\n    if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {\n      return {matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {}};\n    } else {\n      return {matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {}};\n    }\n  }\n\n  const /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;\n  const /** @type {?} */ res = matcher(segments, segmentGroup, route);\n  if (!res) return noMatch;\n\n  return {\n    matched: true,\n    consumedSegments: res.consumed,\n    lastChild: res.consumed.length,\n    positionalParamSegments: res.posParams\n  };\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} slicedSegments\n * @param {?} config\n * @return {?}\n */\nfunction split(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], slicedSegments: UrlSegment[],\n    config: Route[]) {\n  if (slicedSegments.length > 0 &&\n      containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n    const /** @type {?} */ s = new UrlSegmentGroup(\n        consumedSegments, createChildrenForEmptySegments(\n                              config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n    return {segmentGroup: mergeTrivialChildren(s), slicedSegments: []};\n\n  } else if (\n      slicedSegments.length === 0 &&\n      containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {\n    const /** @type {?} */ s = new UrlSegmentGroup(\n        segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(\n                                   segmentGroup, slicedSegments, config, segmentGroup.children));\n    return {segmentGroup: mergeTrivialChildren(s), slicedSegments};\n\n  } else {\n    return {segmentGroup, slicedSegments};\n  }\n}\n/**\n * @param {?} s\n * @return {?}\n */\nfunction mergeTrivialChildren(s: UrlSegmentGroup): UrlSegmentGroup {\n  if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n    const /** @type {?} */ c = s.children[PRIMARY_OUTLET];\n    return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n  } else {\n    return s;\n  }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @param {?} children\n * @return {?}\n */\nfunction addEmptySegmentsToChildrenIfNeeded(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[],\n    children: {[name: string]: UrlSegmentGroup}): {[name: string]: UrlSegmentGroup} {\n  const /** @type {?} */ res: {[name: string]: UrlSegmentGroup} = {};\n  for (const /** @type {?} */ r of routes) {\n    if (emptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n      res[getOutlet(r)] = new UrlSegmentGroup([], {});\n    }\n  }\n  return merge(children, res);\n}\n/**\n * @param {?} routes\n * @param {?} primarySegmentGroup\n * @return {?}\n */\nfunction createChildrenForEmptySegments(\n    routes: Route[], primarySegmentGroup: UrlSegmentGroup): {[name: string]: UrlSegmentGroup} {\n  const /** @type {?} */ res: {[name: string]: UrlSegmentGroup} = {};\n  res[PRIMARY_OUTLET] = primarySegmentGroup;\n  for (const /** @type {?} */ r of routes) {\n    if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n      res[getOutlet(r)] = new UrlSegmentGroup([], {});\n    }\n  }\n  return res;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathRedirectsWithNamedOutlets(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes\n             .filter(\n                 r => emptyPathRedirect(segmentGroup, slicedSegments, r) &&\n                     getOutlet(r) !== PRIMARY_OUTLET)\n             .length > 0;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathRedirects(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes.filter(r => emptyPathRedirect(segmentGroup, slicedSegments, r)).length > 0;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} r\n * @return {?}\n */\nfunction emptyPathRedirect(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], r: Route): boolean {\n  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full')\n    return false;\n  return r.path === '' && r.redirectTo !== undefined;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getOutlet(route: Route): string {\n  return route.outlet ? route.outlet : PRIMARY_OUTLET;\n}\n"]}