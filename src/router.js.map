{"version":3,"sources":["../../../../modules/@angular/router/src/router.ts"],"names":[],"mappings":"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","file":"router.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common/index';\nimport {Compiler, ComponentFactoryResolver, Injector, NgModuleFactoryLoader, ReflectiveInjector, Type, isDevMode} from '@angular/core/index';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {from} from 'rxjs/observable/from';\nimport {of } from 'rxjs/observable/of';\nimport {concatMap} from 'rxjs/operator/concatMap';\nimport {every} from 'rxjs/operator/every';\nimport {first} from 'rxjs/operator/first';\nimport {map} from 'rxjs/operator/map';\nimport {mergeMap} from 'rxjs/operator/mergeMap';\nimport {reduce} from 'rxjs/operator/reduce';\n\nimport {applyRedirects} from './apply_redirects';\nimport {QueryParamsHandling, ResolveData, Route, Routes, RunGuardsAndResolvers, validateConfig} from './config';\nimport {createRouterState} from './create_router_state';\nimport {createUrlTree} from './create_url_tree';\nimport {RouterOutlet} from './directives/router_outlet';\nimport {Event, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, RouteConfigLoadEnd, RouteConfigLoadStart, RoutesRecognized} from './events';\nimport {recognize} from './recognize';\nimport {DetachedRouteHandle, DetachedRouteHandleInternal, RouteReuseStrategy} from './route_reuse_strategy';\nimport {LoadedRouterConfig, RouterConfigLoader} from './router_config_loader';\nimport {RouterOutletMap} from './router_outlet_map';\nimport {ActivatedRoute, ActivatedRouteSnapshot, RouterState, RouterStateSnapshot, advanceActivatedRoute, createEmptyState, equalParamsAndUrlSegments, inheritedParamsDataResolve} from './router_state';\nimport {PRIMARY_OUTLET, Params, isNavigationCancelingError} from './shared';\nimport {DefaultUrlHandlingStrategy, UrlHandlingStrategy} from './url_handling_strategy';\nimport {UrlSerializer, UrlTree, containsTree, createEmptyUrlTree} from './url_tree';\nimport {andObservables, forEach, merge, shallowEqual, waitForMap, wrapIntoObservable} from './utils/collection';\nimport {TreeNode} from './utils/tree';\n\ndeclare let Zone: any;\n\n/**\n * @whatItDoes Represents the extra options used during navigation.\n *\n * @stable\n */\nexport interface NavigationExtras {\n  /**\n  * Enables relative navigation from the current ActivatedRoute.\n  *\n  * Configuration:\n  *\n  * ```\n  * [{\n  *   path: 'parent',\n  *   component: ParentComponent,\n  *   children: [{\n  *     path: 'list',\n  *     component: ListComponent\n  *   },{\n  *     path: 'child',\n  *     component: ChildComponent\n  *   }]\n  * }]\n  * ```\n  *\n  * Navigate to list route from child route:\n  *\n  * ```\n  *  @Component({...})\n  *  class ChildComponent {\n  *    constructor(private router: Router, private route: ActivatedRoute) {}\n  *\n  *    go() {\n  *      this.router.navigate(['../list'], { relativeTo: this.route });\n  *    }\n  *  }\n  * ```\n  */\n  relativeTo?: ActivatedRoute;\n\n  /**\n  * Sets query parameters to the URL.\n  *\n  * ```\n  * // Navigate to /results?page=1\n  * this.router.navigate(['/results'], { queryParams: { page: 1 } });\n  * ```\n  */\n  queryParams?: Params;\n\n  /**\n  * Sets the hash fragment for the URL.\n  *\n  * ```\n  * // Navigate to /results#top\n  * this.router.navigate(['/results'], { fragment: 'top' });\n  * ```\n  */\n  fragment?: string;\n\n  /**\n  * Preserves the query parameters for the next navigation.\n  *\n  * deprecated, use `queryParamsHandling` instead\n  *\n  * ```\n  * // Preserve query params from /results?page=1 to /view?page=1\n  * this.router.navigate(['/view'], { preserveQueryParams: true });\n  * ```\n  *\n  * @deprecated\n  */\n  preserveQueryParams?: boolean;\n\n  /**\n  *  config strategy to handle the query parameters for the next navigation.\n  *\n  * ```\n  * // from /results?page=1 to /view?page=1&page=2\n  * this.router.navigate(['/view'], { queryParams: { page: 2 },  queryParamsHandling: \"merge\" });\n  * ```\n  */\n  queryParamsHandling?: QueryParamsHandling;\n  /**\n  * Preserves the fragment for the next navigation\n  *\n  * ```\n  * // Preserve fragment from /results#top to /view#top\n  * this.router.navigate(['/view'], { preserveFragment: true });\n  * ```\n  */\n  preserveFragment?: boolean;\n  /**\n  * Navigates without pushing a new state into history.\n  *\n  * ```\n  * // Navigate silently to /view\n  * this.router.navigate(['/view'], { skipLocationChange: true });\n  * ```\n  */\n  skipLocationChange?: boolean;\n  /**\n  * Navigates while replacing the current state in history.\n  *\n  * ```\n  * // Navigate to /view\n  * this.router.navigate(['/view'], { replaceUrl: true });\n  * ```\n  */\n  replaceUrl?: boolean;\n}\n\n/**\n * @whatItDoes Error handler that is invoked when a navigation errors.\n *\n * @description\n * If the handler returns a value, the navigation promise will be resolved with this value.\n * If the handler throws an exception, the navigation promise will be rejected with\n * the exception.\n *\n * @stable\n */\nexport type ErrorHandler = (error: any) => any;\n/**\n * @param {?} error\n * @return {?}\n */\nfunction defaultErrorHandler(error: any): any {\n  throw error;\n}\n\ntype NavigationSource = 'imperative' | 'popstate' | 'hashchange';\n\ntype NavigationParams = {\n  id: number,\n  rawUrl: UrlTree,\n  extras: NavigationExtras,\n  resolve: any,\n  reject: any,\n  promise: Promise<boolean>,\n  source: NavigationSource,\n};\n/**\n * Does not detach any subtrees. Reuses routes as long as their route config is the same.\n */\nexport class DefaultRouteReuseStrategy implements RouteReuseStrategy {\n/**\n * @param {?} route\n * @return {?}\n */\nshouldDetach(route: ActivatedRouteSnapshot): boolean { return false; }\n/**\n * @param {?} route\n * @param {?} detachedTree\n * @return {?}\n */\nstore(route: ActivatedRouteSnapshot, detachedTree: DetachedRouteHandle): void {}\n/**\n * @param {?} route\n * @return {?}\n */\nshouldAttach(route: ActivatedRouteSnapshot): boolean { return false; }\n/**\n * @param {?} route\n * @return {?}\n */\nretrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle { return null; }\n/**\n * @param {?} future\n * @param {?} curr\n * @return {?}\n */\nshouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {\n    return future.routeConfig === curr.routeConfig;\n  }\n}\n/**\n * \\@whatItDoes Provides the navigation and url manipulation capabilities.\n * \n * See {\\@link Routes} for more details and examples.\n * \n * \\@ngModule RouterModule\n * \n * \\@stable\n */\nexport class Router {\nprivate currentUrlTree: UrlTree;\nprivate rawUrlTree: UrlTree;\nprivate navigations = new BehaviorSubject<NavigationParams>(null);\nprivate routerEvents = new Subject<Event>();\nprivate currentRouterState: RouterState;\nprivate locationSubscription: Subscription;\nprivate navigationId: number = 0;\nprivate configLoader: RouterConfigLoader;\n\n  /**\n   * Error handler that is invoked when a navigation errors.\n   *\n   * See {@link ErrorHandler} for more information.\n   */\n  errorHandler: ErrorHandler = defaultErrorHandler;\n\n  /**\n   * Indicates if at least one navigation happened.\n   */\n  navigated: boolean = false;\n\n  /**\n   * Extracts and merges URLs. Used for AngularJS to Angular migrations.\n   */\n  urlHandlingStrategy: UrlHandlingStrategy = new DefaultUrlHandlingStrategy();\n\n  routeReuseStrategy: RouteReuseStrategy = new DefaultRouteReuseStrategy();\n/**\n * @param {?} rootComponentType\n * @param {?} urlSerializer\n * @param {?} outletMap\n * @param {?} location\n * @param {?} injector\n * @param {?} loader\n * @param {?} compiler\n * @param {?} config\n */\nconstructor(\nprivate rootComponentType: Type<any>,\nprivate urlSerializer: UrlSerializer,\nprivate outletMap: RouterOutletMap,\nprivate location: Location,\nprivate injector: Injector,\n      loader: NgModuleFactoryLoader, compiler: Compiler,\npublic config: Routes) {\n    const onLoadStart = (r: Route) => this.triggerEvent(new RouteConfigLoadStart(r));\n    const onLoadEnd = (r: Route) => this.triggerEvent(new RouteConfigLoadEnd(r));\n\n    this.resetConfig(config);\n    this.currentUrlTree = createEmptyUrlTree();\n    this.rawUrlTree = this.currentUrlTree;\n\n    this.configLoader = new RouterConfigLoader(loader, compiler, onLoadStart, onLoadEnd);\n    this.currentRouterState = createEmptyState(this.currentUrlTree, this.rootComponentType);\n    this.processNavigations();\n  }\n/**\n * \\@internal \n * TODO: this should be removed once the constructor of the router made internal\n * @param {?} rootComponentType\n * @return {?}\n */\nresetRootComponentType(rootComponentType: Type<any>): void {\n    this.rootComponentType = rootComponentType;\n    // TODO: vsavkin router 4.0 should make the root component set to null\n    // this will simplify the lifecycle of the router.\n    this.currentRouterState.root.component = this.rootComponentType;\n  }\n/**\n * Sets up the location change listener and performs the initial navigation.\n * @return {?}\n */\ninitialNavigation(): void {\n    this.setUpLocationChangeListener();\n    if (this.navigationId === 0) {\n      this.navigateByUrl(this.location.path(true), {replaceUrl: true});\n    }\n  }\n/**\n * Sets up the location change listener.\n * @return {?}\n */\nsetUpLocationChangeListener(): void {\n    // Zone.current.wrap is needed because of the issue with RxJS scheduler,\n    // which does not work properly with zone.js in IE and Safari\n    if (!this.locationSubscription) {\n      this.locationSubscription = /** @type {?} */(( <any>this.location.subscribe(Zone.current.wrap((change: any) => {\n        const /** @type {?} */ rawUrlTree = this.urlSerializer.parse(change['url']);\n        const /** @type {?} */ source: NavigationSource = change['type'] === 'popstate' ? 'popstate' : 'hashchange';\n        setTimeout(() => { this.scheduleNavigation(rawUrlTree, source, {replaceUrl: true}); }, 0);\n      }))));\n    }\n  }\n/**\n * The current route state\n * @return {?}\n */\nget routerState(): RouterState { return this.currentRouterState; }\n/**\n * The current url\n * @return {?}\n */\nget url(): string { return this.serializeUrl(this.currentUrlTree); }\n/**\n * An observable of router events\n * @return {?}\n */\nget events(): Observable<Event> { return this.routerEvents; }\n/**\n * \\@internal\n * @param {?} e\n * @return {?}\n */\ntriggerEvent(e: Event) { this.routerEvents.next(e); }\n/**\n * Resets the configuration used for navigation and generating links.\n * \n * ### Usage\n * \n * ```\n * router.resetConfig([\n *  { path: 'team/:id', component: TeamCmp, children: [\n *    { path: 'simple', component: SimpleCmp },\n *    { path: 'user/:name', component: UserCmp }\n *  ]}\n * ]);\n * ```\n * @param {?} config\n * @return {?}\n */\nresetConfig(config: Routes): void {\n    validateConfig(config);\n    this.config = config;\n  }\n/**\n * \\@docsNotRequired\n * @return {?}\n */\nngOnDestroy() { this.dispose(); }\n/**\n * Disposes of the router\n * @return {?}\n */\ndispose(): void {\n    if (this.locationSubscription) {\n      this.locationSubscription.unsubscribe();\n      this.locationSubscription = null;\n    }\n  }\n/**\n * Applies an array of commands to the current url tree and creates a new url tree.\n * \n * When given an activate route, applies the given commands starting from the route.\n * When not given a route, applies the given command starting from the root.\n * \n * ### Usage\n * \n * ```\n * // create /team/33/user/11\n * router.createUrlTree(['/team', 33, 'user', 11]);\n * \n * // create /team/33;expand=true/user/11\n * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n * \n * // you can collapse static segments like this (this works only with the first passed-in value):\n * router.createUrlTree(['/team/33/user', userId]);\n * \n * // If the first segment can contain slashes, and you do not want the router to split it, you\n * // can do the following:\n * \n * router.createUrlTree([{segmentPath: '/one/two'}]);\n * \n * // create /team/33/(user/11//right:chat)\n * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n * \n * // remove the right secondary node\n * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n * \n * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n * \n * // navigate to /team/33/user/11/details\n * router.createUrlTree(['details'], {relativeTo: route});\n * \n * // navigate to /team/33/user/22\n * router.createUrlTree(['../22'], {relativeTo: route});\n * \n * // navigate to /team/44/user/22\n * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n * ```\n * @param {?} commands\n * @param {?=} __1\n * @return {?}\n */\ncreateUrlTree(\n      commands: any[], {relativeTo, queryParams, fragment, preserveQueryParams, queryParamsHandling,\n                        preserveFragment}: NavigationExtras = {}): UrlTree {\n    if (isDevMode() && preserveQueryParams && /** @type {?} */(( <any>console)) && /** @type {?} */(( <any>console.warn))) {\n      console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\n    }\n    const /** @type {?} */ a = relativeTo || this.routerState.root;\n    const /** @type {?} */ f = preserveFragment ? this.currentUrlTree.fragment : fragment;\n    let /** @type {?} */ q: Params = null;\n    if (queryParamsHandling) {\n      switch (queryParamsHandling) {\n        case 'merge':\n          q = merge(this.currentUrlTree.queryParams, queryParams);\n          break;\n        case 'preserve':\n          q = this.currentUrlTree.queryParams;\n          break;\n        default:\n          q = queryParams;\n      }\n    } else {\n      q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams;\n    }\n    return createUrlTree(a, this.currentUrlTree, commands, q, f);\n  }\n/**\n * Navigate based on the provided url. This navigation is always absolute.\n * \n * Returns a promise that:\n * - resolves to 'true' when navigation succeeds,\n * - resolves to 'false' when navigation fails,\n * - is rejected when an error happens.\n * \n * ### Usage\n * \n * ```\n * router.navigateByUrl(\"/team/33/user/11\");\n * \n * // Navigate without updating the URL\n * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n * ```\n * \n * In opposite to `navigate`, `navigateByUrl` takes a whole URL\n * and does not apply any delta to the current one.\n * @param {?} url\n * @param {?=} extras\n * @return {?}\n */\nnavigateByUrl(url: string|UrlTree, extras: NavigationExtras = {skipLocationChange: false}):\n      Promise<boolean> {\n    const /** @type {?} */ urlTree = url instanceof UrlTree ? url : this.parseUrl(url);\n    const /** @type {?} */ mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);\n\n    return this.scheduleNavigation(mergedTree, 'imperative', extras);\n  }\n/**\n * Navigate based on the provided array of commands and a starting point.\n * If no starting route is provided, the navigation is absolute.\n * \n * Returns a promise that:\n * - resolves to 'true' when navigation succeeds,\n * - resolves to 'false' when navigation fails,\n * - is rejected when an error happens.\n * \n * ### Usage\n * \n * ```\n * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n * \n * // Navigate without updating the URL\n * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n * ```\n * \n * In opposite to `navigateByUrl`, `navigate` always takes a delta that is applied to the current\n * URL.\n * @param {?} commands\n * @param {?=} extras\n * @return {?}\n */\nnavigate(commands: any[], extras: NavigationExtras = {skipLocationChange: false}):\n      Promise<boolean> {\n    validateCommands(commands);\n    if (typeof extras.queryParams === 'object' && extras.queryParams !== null) {\n      extras.queryParams = this.removeEmptyProps(extras.queryParams);\n    }\n    return this.navigateByUrl(this.createUrlTree(commands, extras), extras);\n  }\n/**\n * Serializes a {\\@link UrlTree} into a string\n * @param {?} url\n * @return {?}\n */\nserializeUrl(url: UrlTree): string { return this.urlSerializer.serialize(url); }\n/**\n * Parses a string into a {\\@link UrlTree}\n * @param {?} url\n * @return {?}\n */\nparseUrl(url: string): UrlTree { return this.urlSerializer.parse(url); }\n/**\n * Returns whether the url is activated\n * @param {?} url\n * @param {?} exact\n * @return {?}\n */\nisActive(url: string|UrlTree, exact: boolean): boolean {\n    if (url instanceof UrlTree) {\n      return containsTree(this.currentUrlTree, url, exact);\n    } else {\n      const /** @type {?} */ urlTree = this.urlSerializer.parse(url);\n      return containsTree(this.currentUrlTree, urlTree, exact);\n    }\n  }\n/**\n * @param {?} params\n * @return {?}\n */\nprivate removeEmptyProps(params: Params): Params {\n    return Object.keys(params).reduce((result: Params, key: string) => {\n      const /** @type {?} */ value: any = params[key];\n      if (value !== null && value !== undefined) {\n        result[key] = value;\n      }\n      return result;\n    }, {});\n  }\n/**\n * @return {?}\n */\nprivate processNavigations(): void {\n    concatMap\n        .call(\n            this.navigations,\n            (nav: NavigationParams) => {\n              if (nav) {\n                this.executeScheduledNavigation(nav);\n                // a failed navigation should not stop the router from processing\n                // further navigations => the catch\n                return nav.promise.catch(() => {});\n              } else {\n                return /** @type {?} */(( <any>of (null)));\n              }\n            })\n        .subscribe(() => {});\n  }\n/**\n * @param {?} rawUrl\n * @param {?} source\n * @param {?} extras\n * @return {?}\n */\nprivate scheduleNavigation(rawUrl: UrlTree, source: NavigationSource, extras: NavigationExtras):\n      Promise<boolean> {\n    const /** @type {?} */ lastNavigation = this.navigations.value;\n\n    // If the user triggers a navigation imperatively (e.g., by using navigateByUrl),\n    // and that navigation results in 'replaceState' that leads to the same URL,\n    // we should skip those.\n    if (lastNavigation && source !== 'imperative' && lastNavigation.source === 'imperative' &&\n        lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n      return null;  // return value is not used\n    }\n\n    // Because of a bug in IE and Edge, the location class fires two events (popstate and\n    // hashchange) every single time. The second one should be ignored. Otherwise, the URL will\n    // flicker.\n    if (lastNavigation && source == 'hashchange' && lastNavigation.source === 'popstate' &&\n        lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n      return null;  // return value is not used\n    }\n\n    let /** @type {?} */ resolve: any = null;\n    let /** @type {?} */ reject: any = null;\n\n    const /** @type {?} */ promise = new Promise((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n\n    const /** @type {?} */ id = ++this.navigationId;\n    this.navigations.next({id, source, rawUrl, extras, resolve, reject, promise});\n\n    // Make sure that the error is propagated even though `processNavigations` catch\n    // handler does not rethrow\n    return promise.catch((e: any) => Promise.reject(e));\n  }\n/**\n * @param {?} __0\n * @return {?}\n */\nprivate executeScheduledNavigation({id, rawUrl, extras, resolve, reject}: NavigationParams):\n      void {\n    const /** @type {?} */ url = this.urlHandlingStrategy.extract(rawUrl);\n    const /** @type {?} */ urlTransition = !this.navigated || url.toString() !== this.currentUrlTree.toString();\n\n    if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(rawUrl)) {\n      this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));\n      Promise.resolve()\n          .then(\n              (_) => this.runNavigate(\n                  url, rawUrl, extras.skipLocationChange, extras.replaceUrl, id, null))\n          .then(resolve, reject);\n\n      // we cannot process the current URL, but we could process the previous one =>\n      // we need to do some cleanup\n    } else if (\n        urlTransition && this.rawUrlTree &&\n        this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree)) {\n      this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));\n      Promise.resolve()\n          .then(\n              (_) => this.runNavigate(\n                  url, rawUrl, false, false, id,\n                  createEmptyState(url, this.rootComponentType).snapshot))\n          .then(resolve, reject);\n\n    } else {\n      this.rawUrlTree = rawUrl;\n      resolve(null);\n    }\n  }\n/**\n * @param {?} url\n * @param {?} rawUrl\n * @param {?} shouldPreventPushState\n * @param {?} shouldReplaceUrl\n * @param {?} id\n * @param {?} precreatedState\n * @return {?}\n */\nprivate runNavigate(\n      url: UrlTree, rawUrl: UrlTree, shouldPreventPushState: boolean, shouldReplaceUrl: boolean,\n      id: number, precreatedState: RouterStateSnapshot): Promise<boolean> {\n    if (id !== this.navigationId) {\n      this.location.go(this.urlSerializer.serialize(this.currentUrlTree));\n      this.routerEvents.next(new NavigationCancel(\n          id, this.serializeUrl(url),\n          `Navigation ID ${id} is not equal to the current navigation id ${this.navigationId}`));\n      return Promise.resolve(false);\n    }\n\n    return new Promise((resolvePromise, rejectPromise) => {\n      // create an observable of the url and route state snapshot\n      // this operation do not result in any side effects\n      let /** @type {?} */ urlAndSnapshot$: Observable<{appliedUrl: UrlTree, snapshot: RouterStateSnapshot}>;\n      if (!precreatedState) {\n        const /** @type {?} */ redirectsApplied$ =\n            applyRedirects(this.injector, this.configLoader, this.urlSerializer, url, this.config);\n\n        urlAndSnapshot$ = mergeMap.call(redirectsApplied$, (appliedUrl: UrlTree) => {\n          return map.call(\n              recognize(\n                  this.rootComponentType, this.config, appliedUrl, this.serializeUrl(appliedUrl)),\n              (snapshot: any) => {\n\n                this.routerEvents.next(new RoutesRecognized(\n                    id, this.serializeUrl(url), this.serializeUrl(appliedUrl), snapshot));\n\n                return {appliedUrl, snapshot};\n              });\n        });\n      } else {\n        urlAndSnapshot$ = of ({appliedUrl: url, snapshot: precreatedState});\n      }\n\n\n      // run preactivation: guards and data resolvers\n      let /** @type {?} */ preActivation: PreActivation;\n      const /** @type {?} */ preactivationTraverse$ = map.call(urlAndSnapshot$, ({appliedUrl, snapshot}: any) => {\n        preActivation =\n            new PreActivation(snapshot, this.currentRouterState.snapshot, this.injector);\n        preActivation.traverse(this.outletMap);\n        return {appliedUrl, snapshot};\n      });\n\n      const /** @type {?} */ preactivationCheckGuards =\n          mergeMap.call(preactivationTraverse$, ({appliedUrl, snapshot}: any) => {\n            if (this.navigationId !== id) return of (false);\n\n            return map.call(preActivation.checkGuards(), (shouldActivate: boolean) => {\n              return {appliedUrl: appliedUrl, snapshot: snapshot, shouldActivate: shouldActivate};\n            });\n          });\n\n      const /** @type {?} */ preactivationResolveData$ = mergeMap.call(preactivationCheckGuards, (p: any) => {\n        if (this.navigationId !== id) return of (false);\n\n        if (p.shouldActivate) {\n          return map.call(preActivation.resolveData(), () => p);\n        } else {\n          return of (p);\n        }\n      });\n\n\n      // create router state\n      // this operation has side effects => route state is being affected\n      const /** @type {?} */ routerState$ =\n          map.call(preactivationResolveData$, ({appliedUrl, snapshot, shouldActivate}: any) => {\n            if (shouldActivate) {\n              const /** @type {?} */ state =\n                  createRouterState(this.routeReuseStrategy, snapshot, this.currentRouterState);\n              return {appliedUrl, state, shouldActivate};\n            } else {\n              return {appliedUrl, state: null, shouldActivate};\n            }\n          });\n\n\n      // applied the new router state\n      // this operation has side effects\n      let /** @type {?} */ navigationIsSuccessful: boolean;\n      const /** @type {?} */ storedState = this.currentRouterState;\n      const /** @type {?} */ storedUrl = this.currentUrlTree;\n\n      routerState$\n          .forEach(({appliedUrl, state, shouldActivate}: any) => {\n            if (!shouldActivate || id !== this.navigationId) {\n              navigationIsSuccessful = false;\n              return;\n            }\n\n            this.currentUrlTree = appliedUrl;\n            this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, rawUrl);\n\n            this.currentRouterState = state;\n\n            if (!shouldPreventPushState) {\n              const /** @type {?} */ path = this.urlSerializer.serialize(this.rawUrlTree);\n              if (this.location.isCurrentPathEqualTo(path) || shouldReplaceUrl) {\n                this.location.replaceState(path);\n              } else {\n                this.location.go(path);\n              }\n            }\n\n            new ActivateRoutes(this.routeReuseStrategy, state, storedState)\n                .activate(this.outletMap);\n\n            navigationIsSuccessful = true;\n          })\n          .then(\n              () => {\n                if (navigationIsSuccessful) {\n                  this.navigated = true;\n                  this.routerEvents.next(new NavigationEnd(\n                      id, this.serializeUrl(url), this.serializeUrl(this.currentUrlTree)));\n                  resolvePromise(true);\n                } else {\n                  this.resetUrlToCurrentUrlTree();\n                  this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url), ''));\n                  resolvePromise(false);\n                }\n              },\n              (e: any) => {\n                if (isNavigationCancelingError(e)) {\n                  this.resetUrlToCurrentUrlTree();\n                  this.navigated = true;\n                  this.routerEvents.next(\n                      new NavigationCancel(id, this.serializeUrl(url), e.message));\n                  resolvePromise(false);\n                } else {\n                  this.routerEvents.next(new NavigationError(id, this.serializeUrl(url), e));\n                  try {\n                    resolvePromise(this.errorHandler(e));\n                  } catch ( /** @type {?} */ee) {\n                    rejectPromise(ee);\n                  }\n                }\n\n                this.currentRouterState = storedState;\n                this.currentUrlTree = storedUrl;\n                this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, rawUrl);\n                this.location.replaceState(this.serializeUrl(this.rawUrlTree));\n              });\n    });\n  }\n/**\n * @return {?}\n */\nprivate resetUrlToCurrentUrlTree(): void {\n    const /** @type {?} */ path = this.urlSerializer.serialize(this.rawUrlTree);\n    this.location.replaceState(path);\n  }\n}\n\nfunction Router_tsickle_Closure_declarations() {\n/** @type {?} */\nRouter.prototype.currentUrlTree;\n/** @type {?} */\nRouter.prototype.rawUrlTree;\n/** @type {?} */\nRouter.prototype.navigations;\n/** @type {?} */\nRouter.prototype.routerEvents;\n/** @type {?} */\nRouter.prototype.currentRouterState;\n/** @type {?} */\nRouter.prototype.locationSubscription;\n/** @type {?} */\nRouter.prototype.navigationId;\n/** @type {?} */\nRouter.prototype.configLoader;\n/**\n * Error handler that is invoked when a navigation errors.\n * \n * See {\\@link ErrorHandler} for more information.\n * @type {?}\n */\nRouter.prototype.errorHandler;\n/**\n * Indicates if at least one navigation happened.\n * @type {?}\n */\nRouter.prototype.navigated;\n/**\n * Extracts and merges URLs. Used for AngularJS to Angular migrations.\n * @type {?}\n */\nRouter.prototype.urlHandlingStrategy;\n/** @type {?} */\nRouter.prototype.routeReuseStrategy;\n/** @type {?} */\nRouter.prototype.rootComponentType;\n/** @type {?} */\nRouter.prototype.urlSerializer;\n/** @type {?} */\nRouter.prototype.outletMap;\n/** @type {?} */\nRouter.prototype.location;\n/** @type {?} */\nRouter.prototype.injector;\n/** @type {?} */\nRouter.prototype.config;\n}\n\nclass CanActivate {\n/**\n * @param {?} path\n */\nconstructor(public path: ActivatedRouteSnapshot[]) {}\n/**\n * @return {?}\n */\nget route(): ActivatedRouteSnapshot { return this.path[this.path.length - 1]; }\n}\n\nfunction CanActivate_tsickle_Closure_declarations() {\n/** @type {?} */\nCanActivate.prototype.path;\n}\n\nclass CanDeactivate {\n/**\n * @param {?} component\n * @param {?} route\n */\nconstructor(public component: Object,\npublic route: ActivatedRouteSnapshot) {}\n}\n\nfunction CanDeactivate_tsickle_Closure_declarations() {\n/** @type {?} */\nCanDeactivate.prototype.component;\n/** @type {?} */\nCanDeactivate.prototype.route;\n}\n\nexport class PreActivation {\nprivate checks: Array<CanActivate|CanDeactivate> = [];\n/**\n * @param {?} future\n * @param {?} curr\n * @param {?} injector\n */\nconstructor(\nprivate future: RouterStateSnapshot,\nprivate curr: RouterStateSnapshot,\nprivate injector: Injector) {}\n/**\n * @param {?} parentOutletMap\n * @return {?}\n */\ntraverse(parentOutletMap: RouterOutletMap): void {\n    const /** @type {?} */ futureRoot = this.future._root;\n    const /** @type {?} */ currRoot = this.curr ? this.curr._root : null;\n    this.traverseChildRoutes(futureRoot, currRoot, parentOutletMap, [futureRoot.value]);\n  }\n/**\n * @return {?}\n */\ncheckGuards(): Observable<boolean> {\n    if (this.checks.length === 0) return of (true);\n    const /** @type {?} */ checks$ = from(this.checks);\n    const /** @type {?} */ runningChecks$ = mergeMap.call(checks$, (s: any) => {\n      if (s instanceof CanActivate) {\n        return andObservables(\n            from([this.runCanActivateChild(s.path), this.runCanActivate(s.route)]));\n      } else if (s instanceof CanDeactivate) {\n        // workaround https://github.com/Microsoft/TypeScript/issues/7271\n        const /** @type {?} */ s2 = /** @type {?} */(( s as CanDeactivate));\n        return this.runCanDeactivate(s2.component, s2.route);\n      } else {\n        throw new Error('Cannot be reached');\n      }\n    });\n    return every.call(runningChecks$, (result: any) => result === true);\n  }\n/**\n * @return {?}\n */\nresolveData(): Observable<any> {\n    if (this.checks.length === 0) return of (null);\n    const /** @type {?} */ checks$ = from(this.checks);\n    const /** @type {?} */ runningChecks$ = concatMap.call(checks$, (s: any) => {\n      if (s instanceof CanActivate) {\n        return this.runResolve(s.route);\n      } else {\n        return of (null);\n      }\n    });\n    return reduce.call(runningChecks$, (_: any, __: any) => _);\n  }\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} outletMap\n * @param {?} futurePath\n * @return {?}\n */\nprivate traverseChildRoutes(\n      futureNode: TreeNode<ActivatedRouteSnapshot>, currNode: TreeNode<ActivatedRouteSnapshot>,\n      outletMap: RouterOutletMap, futurePath: ActivatedRouteSnapshot[]): void {\n    const /** @type {?} */ prevChildren: {[key: string]: any} = nodeChildrenAsMap(currNode);\n\n    futureNode.children.forEach(c => {\n      this.traverseRoutes(c, prevChildren[c.value.outlet], outletMap, futurePath.concat([c.value]));\n      delete prevChildren[c.value.outlet];\n    });\n    forEach(\n        prevChildren,\n        (v: any, k: string) => this.deactiveRouteAndItsChildren(v, outletMap._outlets[k]));\n  }\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} parentOutletMap\n * @param {?} futurePath\n * @return {?}\n */\ntraverseRoutes(\n      futureNode: TreeNode<ActivatedRouteSnapshot>, currNode: TreeNode<ActivatedRouteSnapshot>,\n      parentOutletMap: RouterOutletMap, futurePath: ActivatedRouteSnapshot[]): void {\n    const /** @type {?} */ future = futureNode.value;\n    const /** @type {?} */ curr = currNode ? currNode.value : null;\n    const /** @type {?} */ outlet = parentOutletMap ? parentOutletMap._outlets[futureNode.value.outlet] : null;\n\n    // reusing the node\n    if (curr && future._routeConfig === curr._routeConfig) {\n      if (this.shouldRunGuardsAndResolvers(\n              curr, future, future._routeConfig.runGuardsAndResolvers)) {\n        this.checks.push(new CanDeactivate(outlet.component, curr), new CanActivate(futurePath));\n      } else {\n        // we need to set the data\n        future.data = curr.data;\n        future._resolvedData = curr._resolvedData;\n      }\n\n      // If we have a component, we need to go through an outlet.\n      if (future.component) {\n        this.traverseChildRoutes(\n            futureNode, currNode, outlet ? outlet.outletMap : null, futurePath);\n\n        // if we have a componentless route, we recurse but keep the same outlet map.\n      } else {\n        this.traverseChildRoutes(futureNode, currNode, parentOutletMap, futurePath);\n      }\n    } else {\n      if (curr) {\n        this.deactiveRouteAndItsChildren(currNode, outlet);\n      }\n\n      this.checks.push(new CanActivate(futurePath));\n      // If we have a component, we need to go through an outlet.\n      if (future.component) {\n        this.traverseChildRoutes(futureNode, null, outlet ? outlet.outletMap : null, futurePath);\n\n        // if we have a componentless route, we recurse but keep the same outlet map.\n      } else {\n        this.traverseChildRoutes(futureNode, null, parentOutletMap, futurePath);\n      }\n    }\n  }\n/**\n * @param {?} curr\n * @param {?} future\n * @param {?} mode\n * @return {?}\n */\nprivate shouldRunGuardsAndResolvers(\n      curr: ActivatedRouteSnapshot, future: ActivatedRouteSnapshot,\n      mode: RunGuardsAndResolvers): boolean {\n    switch (mode) {\n      case 'always':\n        return true;\n\n      case 'paramsOrQueryParamsChange':\n        return !equalParamsAndUrlSegments(curr, future) ||\n            !shallowEqual(curr.queryParams, future.queryParams);\n\n      case 'paramsChange':\n      default:\n        return !equalParamsAndUrlSegments(curr, future);\n    }\n  }\n/**\n * @param {?} route\n * @param {?} outlet\n * @return {?}\n */\nprivate deactiveRouteAndItsChildren(\n      route: TreeNode<ActivatedRouteSnapshot>, outlet: RouterOutlet): void {\n    const /** @type {?} */ prevChildren: {[key: string]: any} = nodeChildrenAsMap(route);\n    const /** @type {?} */ r = route.value;\n\n    forEach(prevChildren, (v: any, k: string) => {\n      if (!r.component) {\n        this.deactiveRouteAndItsChildren(v, outlet);\n      } else if (!!outlet) {\n        this.deactiveRouteAndItsChildren(v, outlet.outletMap._outlets[k]);\n      } else {\n        this.deactiveRouteAndItsChildren(v, null);\n      }\n    });\n\n    if (!r.component) {\n      this.checks.push(new CanDeactivate(null, r));\n    } else if (outlet && outlet.isActivated) {\n      this.checks.push(new CanDeactivate(outlet.component, r));\n    } else {\n      this.checks.push(new CanDeactivate(null, r));\n    }\n  }\n/**\n * @param {?} future\n * @return {?}\n */\nprivate runCanActivate(future: ActivatedRouteSnapshot): Observable<boolean> {\n    const /** @type {?} */ canActivate = future._routeConfig ? future._routeConfig.canActivate : null;\n    if (!canActivate || canActivate.length === 0) return of (true);\n    const /** @type {?} */ obs = map.call(from(canActivate), (c: any) => {\n      const /** @type {?} */ guard = this.getToken(c, future);\n      let /** @type {?} */ observable: Observable<boolean>;\n      if (guard.canActivate) {\n        observable = wrapIntoObservable(guard.canActivate(future, this.future));\n      } else {\n        observable = wrapIntoObservable(guard(future, this.future));\n      }\n      return first.call(observable);\n    });\n    return andObservables(obs);\n  }\n/**\n * @param {?} path\n * @return {?}\n */\nprivate runCanActivateChild(path: ActivatedRouteSnapshot[]): Observable<boolean> {\n    const /** @type {?} */ future = path[path.length - 1];\n\n    const /** @type {?} */ canActivateChildGuards = path.slice(0, path.length - 1)\n                                       .reverse()\n                                       .map(p => this.extractCanActivateChild(p))\n                                       .filter(_ => _ !== null);\n\n    return andObservables(map.call(from(canActivateChildGuards), (d: any) => {\n      const /** @type {?} */ obs = map.call(from(d.guards), (c: any) => {\n        const /** @type {?} */ guard = this.getToken(c, d.node);\n        let /** @type {?} */ observable: Observable<boolean>;\n        if (guard.canActivateChild) {\n          observable = wrapIntoObservable(guard.canActivateChild(future, this.future));\n        } else {\n          observable = wrapIntoObservable(guard(future, this.future));\n        }\n        return first.call(observable);\n      });\n      return andObservables(obs);\n    }));\n  }\n/**\n * @param {?} p\n * @return {?}\n */\nprivate extractCanActivateChild(p: ActivatedRouteSnapshot):\n      {node: ActivatedRouteSnapshot, guards: any[]} {\n    const /** @type {?} */ canActivateChild = p._routeConfig ? p._routeConfig.canActivateChild : null;\n    if (!canActivateChild || canActivateChild.length === 0) return null;\n    return {node: p, guards: canActivateChild};\n  }\n/**\n * @param {?} component\n * @param {?} curr\n * @return {?}\n */\nprivate runCanDeactivate(component: Object, curr: ActivatedRouteSnapshot): Observable<boolean> {\n    const /** @type {?} */ canDeactivate = curr && curr._routeConfig ? curr._routeConfig.canDeactivate : null;\n    if (!canDeactivate || canDeactivate.length === 0) return of (true);\n    const /** @type {?} */ canDeactivate$ = mergeMap.call(from(canDeactivate), (c: any) => {\n      const /** @type {?} */ guard = this.getToken(c, curr);\n      let /** @type {?} */ observable: Observable<boolean>;\n      if (guard.canDeactivate) {\n        observable =\n            wrapIntoObservable(guard.canDeactivate(component, curr, this.curr, this.future));\n      } else {\n        observable = wrapIntoObservable(guard(component, curr, this.curr, this.future));\n      }\n      return first.call(observable);\n    });\n    return every.call(canDeactivate$, (result: any) => result === true);\n  }\n/**\n * @param {?} future\n * @return {?}\n */\nprivate runResolve(future: ActivatedRouteSnapshot): Observable<any> {\n    const /** @type {?} */ resolve = future._resolve;\n    return map.call(this.resolveNode(resolve, future), (resolvedData: any): any => {\n      future._resolvedData = resolvedData;\n      future.data = merge(future.data, inheritedParamsDataResolve(future).resolve);\n      return null;\n    });\n  }\n/**\n * @param {?} resolve\n * @param {?} future\n * @return {?}\n */\nprivate resolveNode(resolve: ResolveData, future: ActivatedRouteSnapshot): Observable<any> {\n    return waitForMap(resolve, (k, v) => {\n      const /** @type {?} */ resolver = this.getToken(v, future);\n      return resolver.resolve ? wrapIntoObservable(resolver.resolve(future, this.future)) :\n                                wrapIntoObservable(resolver(future, this.future));\n    });\n  }\n/**\n * @param {?} token\n * @param {?} snapshot\n * @return {?}\n */\nprivate getToken(token: any, snapshot: ActivatedRouteSnapshot): any {\n    const /** @type {?} */ config = closestLoadedConfig(snapshot);\n    const /** @type {?} */ injector = config ? config.injector : this.injector;\n    return injector.get(token);\n  }\n}\n\nfunction PreActivation_tsickle_Closure_declarations() {\n/** @type {?} */\nPreActivation.prototype.checks;\n/** @type {?} */\nPreActivation.prototype.future;\n/** @type {?} */\nPreActivation.prototype.curr;\n/** @type {?} */\nPreActivation.prototype.injector;\n}\n\nclass ActivateRoutes {\n/**\n * @param {?} routeReuseStrategy\n * @param {?} futureState\n * @param {?} currState\n */\nconstructor(\nprivate routeReuseStrategy: RouteReuseStrategy,\nprivate futureState: RouterState,\nprivate currState: RouterState) {}\n/**\n * @param {?} parentOutletMap\n * @return {?}\n */\nactivate(parentOutletMap: RouterOutletMap): void {\n    const /** @type {?} */ futureRoot = this.futureState._root;\n    const /** @type {?} */ currRoot = this.currState ? this.currState._root : null;\n\n    this.deactivateChildRoutes(futureRoot, currRoot, parentOutletMap);\n    advanceActivatedRoute(this.futureState.root);\n    this.activateChildRoutes(futureRoot, currRoot, parentOutletMap);\n  }\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} outletMap\n * @return {?}\n */\nprivate deactivateChildRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>,\n      outletMap: RouterOutletMap): void {\n    const /** @type {?} */ prevChildren: {[key: string]: any} = nodeChildrenAsMap(currNode);\n    futureNode.children.forEach(c => {\n      this.deactivateRoutes(c, prevChildren[c.value.outlet], outletMap);\n      delete prevChildren[c.value.outlet];\n    });\n    forEach(prevChildren, (v: any, k: string) => this.deactiveRouteAndItsChildren(v, outletMap));\n  }\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} outletMap\n * @return {?}\n */\nprivate activateChildRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>,\n      outletMap: RouterOutletMap): void {\n    const /** @type {?} */ prevChildren: {[key: string]: any} = nodeChildrenAsMap(currNode);\n    futureNode.children.forEach(\n        c => { this.activateRoutes(c, prevChildren[c.value.outlet], outletMap); });\n  }\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} parentOutletMap\n * @return {?}\n */\ndeactivateRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>,\n      parentOutletMap: RouterOutletMap): void {\n    const /** @type {?} */ future = futureNode.value;\n    const /** @type {?} */ curr = currNode ? currNode.value : null;\n\n    // reusing the node\n    if (future === curr) {\n      // If we have a normal route, we need to go through an outlet.\n      if (future.component) {\n        const /** @type {?} */ outlet = getOutlet(parentOutletMap, future);\n        this.deactivateChildRoutes(futureNode, currNode, outlet.outletMap);\n\n        // if we have a componentless route, we recurse but keep the same outlet map.\n      } else {\n        this.deactivateChildRoutes(futureNode, currNode, parentOutletMap);\n      }\n    } else {\n      if (curr) {\n        this.deactiveRouteAndItsChildren(currNode, parentOutletMap);\n      }\n    }\n  }\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} parentOutletMap\n * @return {?}\n */\nactivateRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>,\n      parentOutletMap: RouterOutletMap): void {\n    const /** @type {?} */ future = futureNode.value;\n    const /** @type {?} */ curr = currNode ? currNode.value : null;\n\n    // reusing the node\n    if (future === curr) {\n      // advance the route to push the parameters\n      advanceActivatedRoute(future);\n\n      // If we have a normal route, we need to go through an outlet.\n      if (future.component) {\n        const /** @type {?} */ outlet = getOutlet(parentOutletMap, future);\n        this.activateChildRoutes(futureNode, currNode, outlet.outletMap);\n\n        // if we have a componentless route, we recurse but keep the same outlet map.\n      } else {\n        this.activateChildRoutes(futureNode, currNode, parentOutletMap);\n      }\n    } else {\n      // if we have a normal route, we need to advance the route\n      // and place the component into the outlet. After that recurse.\n      if (future.component) {\n        advanceActivatedRoute(future);\n        const /** @type {?} */ outlet = getOutlet(parentOutletMap, futureNode.value);\n\n        if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {\n          const /** @type {?} */ stored =\n              ( /** @type {?} */((<DetachedRouteHandleInternal>this.routeReuseStrategy.retrieve(future.snapshot))));\n          this.routeReuseStrategy.store(future.snapshot, null);\n          outlet.attach(stored.componentRef, stored.route.value);\n          advanceActivatedRouteNodeAndItsChildren(stored.route);\n        } else {\n          const /** @type {?} */ outletMap = new RouterOutletMap();\n          this.placeComponentIntoOutlet(outletMap, future, outlet);\n          this.activateChildRoutes(futureNode, null, outletMap);\n        }\n\n        // if we have a componentless route, we recurse but keep the same outlet map.\n      } else {\n        advanceActivatedRoute(future);\n        this.activateChildRoutes(futureNode, null, parentOutletMap);\n      }\n    }\n  }\n/**\n * @param {?} outletMap\n * @param {?} future\n * @param {?} outlet\n * @return {?}\n */\nprivate placeComponentIntoOutlet(\n      outletMap: RouterOutletMap, future: ActivatedRoute, outlet: RouterOutlet): void {\n    const /** @type {?} */ resolved = /** @type {?} */(( <any[]>[{provide: ActivatedRoute, useValue: future}, {\n      provide: RouterOutletMap,\n      useValue: outletMap\n    }]));\n\n    const /** @type {?} */ config = parentLoadedConfig(future.snapshot);\n\n    let /** @type {?} */ resolver: ComponentFactoryResolver = null;\n    let /** @type {?} */ injector: Injector = null;\n\n    if (config) {\n      injector = config.injectorFactory(outlet.locationInjector);\n      resolver = config.factoryResolver;\n      resolved.push({provide: ComponentFactoryResolver, useValue: resolver});\n    } else {\n      injector = outlet.locationInjector;\n      resolver = outlet.locationFactoryResolver;\n    }\n\n    outlet.activate(future, resolver, injector, ReflectiveInjector.resolve(resolved), outletMap);\n  }\n/**\n * @param {?} route\n * @param {?} parentOutletMap\n * @return {?}\n */\nprivate deactiveRouteAndItsChildren(\n      route: TreeNode<ActivatedRoute>, parentOutletMap: RouterOutletMap): void {\n    if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {\n      this.detachAndStoreRouteSubtree(route, parentOutletMap);\n    } else {\n      this.deactiveRouteAndOutlet(route, parentOutletMap);\n    }\n  }\n/**\n * @param {?} route\n * @param {?} parentOutletMap\n * @return {?}\n */\nprivate detachAndStoreRouteSubtree(\n      route: TreeNode<ActivatedRoute>, parentOutletMap: RouterOutletMap): void {\n    const /** @type {?} */ outlet = getOutlet(parentOutletMap, route.value);\n    const /** @type {?} */ componentRef = outlet.detach();\n    this.routeReuseStrategy.store(route.value.snapshot, {componentRef, route});\n  }\n/**\n * @param {?} route\n * @param {?} parentOutletMap\n * @return {?}\n */\nprivate deactiveRouteAndOutlet(route: TreeNode<ActivatedRoute>, parentOutletMap: RouterOutletMap):\n      void {\n    const /** @type {?} */ prevChildren: {[key: string]: any} = nodeChildrenAsMap(route);\n    let /** @type {?} */ outlet: RouterOutlet = null;\n\n    // getOutlet throws when cannot find the right outlet,\n    // which can happen if an outlet was in an NgIf and was removed\n    try {\n      outlet = getOutlet(parentOutletMap, route.value);\n    } catch ( /** @type {?} */e) {\n      return;\n    }\n    const /** @type {?} */ childOutletMap = outlet.outletMap;\n\n    forEach(prevChildren, (v: any, k: string) => {\n      if (route.value.component) {\n        this.deactiveRouteAndItsChildren(v, childOutletMap);\n      } else {\n        this.deactiveRouteAndItsChildren(v, parentOutletMap);\n      }\n    });\n\n    if (outlet && outlet.isActivated) {\n      outlet.deactivate();\n    }\n  }\n}\n\nfunction ActivateRoutes_tsickle_Closure_declarations() {\n/** @type {?} */\nActivateRoutes.prototype.routeReuseStrategy;\n/** @type {?} */\nActivateRoutes.prototype.futureState;\n/** @type {?} */\nActivateRoutes.prototype.currState;\n}\n\n/**\n * @param {?} node\n * @return {?}\n */\nfunction advanceActivatedRouteNodeAndItsChildren(node: TreeNode<ActivatedRoute>): void {\n  advanceActivatedRoute(node.value);\n  node.children.forEach(advanceActivatedRouteNodeAndItsChildren);\n}\n/**\n * @param {?} snapshot\n * @return {?}\n */\nfunction parentLoadedConfig(snapshot: ActivatedRouteSnapshot): LoadedRouterConfig {\n  let /** @type {?} */ s = snapshot.parent;\n  while (s) {\n    const /** @type {?} */ c: any = s._routeConfig;\n    if (c && c._loadedConfig) return c._loadedConfig;\n    if (c && c.component) return null;\n    s = s.parent;\n  }\n  return null;\n}\n/**\n * @param {?} snapshot\n * @return {?}\n */\nfunction closestLoadedConfig(snapshot: ActivatedRouteSnapshot): LoadedRouterConfig {\n  if (!snapshot) return null;\n\n  let /** @type {?} */ s = snapshot.parent;\n  while (s) {\n    const /** @type {?} */ c: any = s._routeConfig;\n    if (c && c._loadedConfig) return c._loadedConfig;\n    s = s.parent;\n  }\n  return null;\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction nodeChildrenAsMap(node: TreeNode<any>) {\n  return node ? node.children.reduce((m: any, c: TreeNode<any>) => {\n    m[c.value.outlet] = c;\n    return m;\n  }, {}) : {};\n}\n/**\n * @param {?} outletMap\n * @param {?} route\n * @return {?}\n */\nfunction getOutlet(outletMap: RouterOutletMap, route: ActivatedRoute): RouterOutlet {\n  const /** @type {?} */ outlet = outletMap._outlets[route.outlet];\n  if (!outlet) {\n    const /** @type {?} */ componentName = ( /** @type {?} */((<any>route.component))).name;\n    if (route.outlet === PRIMARY_OUTLET) {\n      throw new Error(`Cannot find primary outlet to load '${componentName}'`);\n    } else {\n      throw new Error(`Cannot find the outlet ${route.outlet} to load '${componentName}'`);\n    }\n  }\n  return outlet;\n}\n/**\n * @param {?} commands\n * @return {?}\n */\nfunction validateCommands(commands: string[]): void {\n  for (let /** @type {?} */ i = 0; i < commands.length; i++) {\n    const /** @type {?} */ cmd = commands[i];\n    if (cmd == null) {\n      throw new Error(`The requested path contains ${cmd} segment at index ${i}`);\n    }\n  }\n}\n"]}