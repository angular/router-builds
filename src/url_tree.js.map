{"version":3,"sources":["../../../../modules/@angular/router/src/url_tree.ts"],"names":[],"mappings":"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","file":"url_tree.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PRIMARY_OUTLET} from './shared';\nimport {forEach, shallowEqual} from './utils/collection';\n/**\n * @return {?}\n */\nexport function createEmptyUrlTree() {\n  return new UrlTree(new UrlSegmentGroup([], {}), {}, null);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @param {?} exact\n * @return {?}\n */\nexport function containsTree(container: UrlTree, containee: UrlTree, exact: boolean): boolean {\n  if (exact) {\n    return equalQueryParams(container.queryParams, containee.queryParams) &&\n        equalSegmentGroups(container.root, containee.root);\n  }\n\n  return containsQueryParams(container.queryParams, containee.queryParams) &&\n      containsSegmentGroup(container.root, containee.root);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction equalQueryParams(\n    container: {[k: string]: string}, containee: {[k: string]: string}): boolean {\n  return shallowEqual(container, containee);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction equalSegmentGroups(container: UrlSegmentGroup, containee: UrlSegmentGroup): boolean {\n  if (!equalPath(container.segments, containee.segments)) return false;\n  if (container.numberOfChildren !== containee.numberOfChildren) return false;\n  for (const /** @type {?} */ c in containee.children) {\n    if (!container.children[c]) return false;\n    if (!equalSegmentGroups(container.children[c], containee.children[c])) return false;\n  }\n  return true;\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction containsQueryParams(\n    container: {[k: string]: string}, containee: {[k: string]: string}): boolean {\n  return Object.keys(containee).length <= Object.keys(container).length &&\n      Object.keys(containee).every(key => containee[key] === container[key]);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction containsSegmentGroup(container: UrlSegmentGroup, containee: UrlSegmentGroup): boolean {\n  return containsSegmentGroupHelper(container, containee, containee.segments);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @param {?} containeePaths\n * @return {?}\n */\nfunction containsSegmentGroupHelper(\n    container: UrlSegmentGroup, containee: UrlSegmentGroup, containeePaths: UrlSegment[]): boolean {\n  if (container.segments.length > containeePaths.length) {\n    const /** @type {?} */ current = container.segments.slice(0, containeePaths.length);\n    if (!equalPath(current, containeePaths)) return false;\n    if (containee.hasChildren()) return false;\n    return true;\n\n  } else if (container.segments.length === containeePaths.length) {\n    if (!equalPath(container.segments, containeePaths)) return false;\n    for (const /** @type {?} */ c in containee.children) {\n      if (!container.children[c]) return false;\n      if (!containsSegmentGroup(container.children[c], containee.children[c])) return false;\n    }\n    return true;\n\n  } else {\n    const /** @type {?} */ current = containeePaths.slice(0, container.segments.length);\n    const /** @type {?} */ next = containeePaths.slice(container.segments.length);\n    if (!equalPath(container.segments, current)) return false;\n    if (!container.children[PRIMARY_OUTLET]) return false;\n    return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);\n  }\n}\n/**\n * \\@whatItDoes Represents the parsed URL.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'template.html'}) \n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n * \n * \\@description \n * \n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n * \n * \\@stable\n */\nexport class UrlTree {\n/**\n * \\@internal\n * @param {?} root\n * @param {?} queryParams\n * @param {?} fragment\n */\nconstructor(\npublic root: UrlSegmentGroup,\npublic queryParams: {[key: string]: string},\npublic fragment: string) {}\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string { return new DefaultUrlSerializer().serialize(this); }\n}\n\nfunction UrlTree_tsickle_Closure_declarations() {\n/**\n * The root segment group of the URL tree\n * @type {?}\n */\nUrlTree.prototype.root;\n/**\n * The query params of the URL\n * @type {?}\n */\nUrlTree.prototype.queryParams;\n/**\n * The fragment of the URL\n * @type {?}\n */\nUrlTree.prototype.fragment;\n}\n\n/**\n * \\@whatItDoes Represents the parsed URL segment group.\n * \n * See {\\@link UrlTree} for more information.\n * \n * \\@stable\n */\nexport class UrlSegmentGroup {\n  /** @internal */\n  _sourceSegment: UrlSegmentGroup;\n  /** @internal */\n  _segmentIndexShift: number;\n  /** The parent node in the url tree */\n  parent: UrlSegmentGroup = null;\n/**\n * @param {?} segments\n * @param {?} children\n */\nconstructor(\npublic segments: UrlSegment[],\npublic children: {[key: string]: UrlSegmentGroup}) {\n    forEach(children, (v: any, k: any) => v.parent = this);\n  }\n/**\n * Wether the segment has child segments\n * @return {?}\n */\nhasChildren(): boolean { return this.numberOfChildren > 0; }\n/**\n * Number of child segments\n * @return {?}\n */\nget numberOfChildren(): number { return Object.keys(this.children).length; }\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string { return serializePaths(this); }\n}\n\nfunction UrlSegmentGroup_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nUrlSegmentGroup.prototype._sourceSegment;\n/**\n * \\@internal\n * @type {?}\n */\nUrlSegmentGroup.prototype._segmentIndexShift;\n/**\n * The parent node in the url tree\n * @type {?}\n */\nUrlSegmentGroup.prototype.parent;\n/**\n * The URL segments of this group. See {\\@link UrlSegment} for more information\n * @type {?}\n */\nUrlSegmentGroup.prototype.segments;\n/**\n * The list of children of this group\n * @type {?}\n */\nUrlSegmentGroup.prototype.children;\n}\n\n/**\n * \\@whatItDoes Represents a single URL segment.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'template.html'}) \n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n * \n * \\@description \n * \n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n * \n * \\@stable\n */\nexport class UrlSegment {\n/**\n * @param {?} path\n * @param {?} parameters\n */\nconstructor(\npublic path: string,\npublic parameters: {[name: string]: string}) {}\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string { return serializePath(this); }\n}\n\nfunction UrlSegment_tsickle_Closure_declarations() {\n/**\n * The path part of a URL segment\n * @type {?}\n */\nUrlSegment.prototype.path;\n/**\n * The matrix parameters associated with a segment\n * @type {?}\n */\nUrlSegment.prototype.parameters;\n}\n\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function equalSegments(a: UrlSegment[], b: UrlSegment[]): boolean {\n  if (a.length !== b.length) return false;\n  for (let /** @type {?} */ i = 0; i < a.length; ++i) {\n    if (a[i].path !== b[i].path) return false;\n    if (!shallowEqual(a[i].parameters, b[i].parameters)) return false;\n  }\n  return true;\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function equalPath(a: UrlSegment[], b: UrlSegment[]): boolean {\n  if (a.length !== b.length) return false;\n  for (let /** @type {?} */ i = 0; i < a.length; ++i) {\n    if (a[i].path !== b[i].path) return false;\n  }\n  return true;\n}\n/**\n * @param {?} segment\n * @param {?} fn\n * @return {?}\n */\nexport function mapChildrenIntoArray<T>(\n    segment: UrlSegmentGroup, fn: (v: UrlSegmentGroup, k: string) => T[]): T[] {\n  let /** @type {?} */ res: T[] = [];\n  forEach(segment.children, (child: UrlSegmentGroup, childOutlet: string) => {\n    if (childOutlet === PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  forEach(segment.children, (child: UrlSegmentGroup, childOutlet: string) => {\n    if (childOutlet !== PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  return res;\n}\n/**\n * \\@whatItDoes Serializes and deserializes a URL string into a URL tree.\n * \n * \\@description The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n * \n * See {\\@link DefaultUrlSerializer} for an example of a URL serializer.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class UrlSerializer {\n/**\n * Parse a url into a {\\@link UrlTree}\n * @abstract\n * @param {?} url\n * @return {?}\n */\nparse(url: string) {}\n/**\n * Converts a {\\@link UrlTree} into a url\n * @abstract\n * @param {?} tree\n * @return {?}\n */\nserialize(tree: UrlTree) {}\n}\n/**\n * \\@whatItDoes A default implementation of the {\\@link UrlSerializer}.\n * \n * \\@description \n * \n * Example URLs:\n * \n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n * \n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n * \n * \\@stable\n */\nexport class DefaultUrlSerializer implements UrlSerializer {\n/**\n * Parses a url into a {\\@link UrlTree}\n * @param {?} url\n * @return {?}\n */\nparse(url: string): UrlTree {\n    const /** @type {?} */ p = new UrlParser(url);\n    return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\n  }\n/**\n * Converts a {\\@link UrlTree} into a url\n * @param {?} tree\n * @return {?}\n */\nserialize(tree: UrlTree): string {\n    const /** @type {?} */ segment = `/${serializeSegment(tree.root, true)}`;\n    const /** @type {?} */ query = serializeQueryParams(tree.queryParams);\n    const /** @type {?} */ fragment =\n        tree.fragment !== null && tree.fragment !== undefined ? `#${encodeURI(tree.fragment)}` : '';\n    return `${segment}${query}${fragment}`;\n  }\n}\n/**\n * @param {?} segment\n * @return {?}\n */\nexport function serializePaths(segment: UrlSegmentGroup): string {\n  return segment.segments.map(p => serializePath(p)).join('/');\n}\n/**\n * @param {?} segment\n * @param {?} root\n * @return {?}\n */\nfunction serializeSegment(segment: UrlSegmentGroup, root: boolean): string {\n  if (segment.hasChildren() && root) {\n    const /** @type {?} */ primary = segment.children[PRIMARY_OUTLET] ?\n        serializeSegment(segment.children[PRIMARY_OUTLET], false) :\n        '';\n    const /** @type {?} */ children: string[] = [];\n    forEach(segment.children, (v: UrlSegmentGroup, k: string) => {\n      if (k !== PRIMARY_OUTLET) {\n        children.push(`${k}:${serializeSegment(v, false)}`);\n      }\n    });\n    if (children.length > 0) {\n      return `${primary}(${children.join('//')})`;\n    } else {\n      return `${primary}`;\n    }\n\n  } else if (segment.hasChildren() && !root) {\n    const /** @type {?} */ children = mapChildrenIntoArray(segment, (v: UrlSegmentGroup, k: string) => {\n      if (k === PRIMARY_OUTLET) {\n        return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];\n      } else {\n        return [`${k}:${serializeSegment(v, false)}`];\n      }\n    });\n    return `${serializePaths(segment)}/(${children.join('//')})`;\n\n  } else {\n    return serializePaths(segment);\n  }\n}\n/**\n * @param {?} s\n * @return {?}\n */\nexport function encode(s: string): string {\n  return encodeURIComponent(s);\n}\n/**\n * @param {?} s\n * @return {?}\n */\nexport function decode(s: string): string {\n  return decodeURIComponent(s);\n}\n/**\n * @param {?} path\n * @return {?}\n */\nexport function serializePath(path: UrlSegment): string {\n  return `${encode(path.path)}${serializeParams(path.parameters)}`;\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction serializeParams(params: {[key: string]: string}): string {\n  return pairs(params).map(p => `;${encode(p.first)}=${encode(p.second)}`).join('');\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction serializeQueryParams(params: {[key: string]: any}): string {\n  const /** @type {?} */ strParams: string[] = Object.keys(params).map((name) => {\n    const /** @type {?} */ value = params[name];\n    return Array.isArray(value) ? value.map(v => `${encode(name)}=${encode(v)}`).join('&') :\n                                  `${encode(name)}=${encode(value)}`;\n  });\n\n  return strParams.length ? `?${strParams.join(\"&\")}` : '';\n}\nclass Pair<A, B> {\n/**\n * @param {?} first\n * @param {?} second\n */\nconstructor(public first: A,\npublic second: B) {}\n}\n\nfunction Pair_tsickle_Closure_declarations() {\n/** @type {?} */\nPair.prototype.first;\n/** @type {?} */\nPair.prototype.second;\n}\n\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction pairs<T>(obj: {[key: string]: T}): Pair<string, T>[] {\n  const /** @type {?} */ res: Pair<string, T>[] = [];\n  for (const /** @type {?} */ prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      res.push(new Pair<string, T>(prop, obj[prop]));\n    }\n  }\n  return res;\n}\n\nconst /** @type {?} */ SEGMENT_RE = /^[^\\/()?;=&#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchSegments(str: string): string {\n  SEGMENT_RE.lastIndex = 0;\n  const /** @type {?} */ match = str.match(SEGMENT_RE);\n  return match ? match[0] : '';\n}\n\nconst /** @type {?} */ QUERY_PARAM_RE = /^[^=?&#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchQueryParams(str: string): string {\n  QUERY_PARAM_RE.lastIndex = 0;\n  const /** @type {?} */ match = str.match(SEGMENT_RE);\n  return match ? match[0] : '';\n}\n\nconst /** @type {?} */ QUERY_PARAM_VALUE_RE = /^[^?&#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchUrlQueryParamValue(str: string): string {\n  QUERY_PARAM_VALUE_RE.lastIndex = 0;\n  const /** @type {?} */ match = str.match(QUERY_PARAM_VALUE_RE);\n  return match ? match[0] : '';\n}\nclass UrlParser {\nprivate remaining: string;\n/**\n * @param {?} url\n */\nconstructor(private url: string) { this.remaining = url; }\n/**\n * @param {?} str\n * @return {?}\n */\npeekStartsWith(str: string): boolean { return this.remaining.startsWith(str); }\n/**\n * @param {?} str\n * @return {?}\n */\ncapture(str: string): void {\n    if (!this.remaining.startsWith(str)) {\n      throw new Error(`Expected \"${str}\".`);\n    }\n    this.remaining = this.remaining.substring(str.length);\n  }\n/**\n * @return {?}\n */\nparseRootSegment(): UrlSegmentGroup {\n    if (this.remaining.startsWith('/')) {\n      this.capture('/');\n    }\n\n    if (this.remaining === '' || this.remaining.startsWith('?') || this.remaining.startsWith('#')) {\n      return new UrlSegmentGroup([], {});\n    }\n\n    return new UrlSegmentGroup([], this.parseChildren());\n  }\n/**\n * @return {?}\n */\nparseChildren(): {[key: string]: UrlSegmentGroup} {\n    if (this.remaining.length == 0) {\n      return {};\n    }\n\n    if (this.peekStartsWith('/')) {\n      this.capture('/');\n    }\n\n    const /** @type {?} */ paths: any[] = [];\n    if (!this.peekStartsWith('(')) {\n      paths.push(this.parseSegments());\n    }\n\n    while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {\n      this.capture('/');\n      paths.push(this.parseSegments());\n    }\n\n    let /** @type {?} */ children: {[key: string]: UrlSegmentGroup} = {};\n    if (this.peekStartsWith('/(')) {\n      this.capture('/');\n      children = this.parseParens(true);\n    }\n\n    let /** @type {?} */ res: {[key: string]: UrlSegmentGroup} = {};\n    if (this.peekStartsWith('(')) {\n      res = this.parseParens(false);\n    }\n\n    if (paths.length > 0 || Object.keys(children).length > 0) {\n      res[PRIMARY_OUTLET] = new UrlSegmentGroup(paths, children);\n    }\n\n    return res;\n  }\n/**\n * @return {?}\n */\nparseSegments(): UrlSegment {\n    const /** @type {?} */ path = matchSegments(this.remaining);\n    if (path === '' && this.peekStartsWith(';')) {\n      throw new Error(`Empty path url segment cannot have parameters: '${this.remaining}'.`);\n    }\n\n    this.capture(path);\n    let /** @type {?} */ matrixParams: {[key: string]: any} = {};\n    if (this.peekStartsWith(';')) {\n      matrixParams = this.parseMatrixParams();\n    }\n    return new UrlSegment(decode(path), matrixParams);\n  }\n/**\n * @return {?}\n */\nparseQueryParams(): {[key: string]: any} {\n    const /** @type {?} */ params: {[key: string]: any} = {};\n    if (this.peekStartsWith('?')) {\n      this.capture('?');\n      this.parseQueryParam(params);\n      while (this.remaining.length > 0 && this.peekStartsWith('&')) {\n        this.capture('&');\n        this.parseQueryParam(params);\n      }\n    }\n    return params;\n  }\n/**\n * @return {?}\n */\nparseFragment(): string {\n    if (this.peekStartsWith('#')) {\n      return decodeURI(this.remaining.substring(1));\n    }\n\n    return null;\n  }\n/**\n * @return {?}\n */\nparseMatrixParams(): {[key: string]: any} {\n    const /** @type {?} */ params: {[key: string]: any} = {};\n    while (this.remaining.length > 0 && this.peekStartsWith(';')) {\n      this.capture(';');\n      this.parseParam(params);\n    }\n    return params;\n  }\n/**\n * @param {?} params\n * @return {?}\n */\nparseParam(params: {[key: string]: any}): void {\n    const /** @type {?} */ key = matchSegments(this.remaining);\n    if (!key) {\n      return;\n    }\n    this.capture(key);\n    let /** @type {?} */ value: any = '';\n    if (this.peekStartsWith('=')) {\n      this.capture('=');\n      const /** @type {?} */ valueMatch = matchSegments(this.remaining);\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n\n    params[decode(key)] = decode(value);\n  }\n/**\n * @param {?} params\n * @return {?}\n */\nparseQueryParam(params: {[key: string]: any}): void {\n    const /** @type {?} */ key = matchQueryParams(this.remaining);\n    if (!key) {\n      return;\n    }\n    this.capture(key);\n    let /** @type {?} */ value: any = '';\n    if (this.peekStartsWith('=')) {\n      this.capture('=');\n      const /** @type {?} */ valueMatch = matchUrlQueryParamValue(this.remaining);\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n\n    const /** @type {?} */ decodedKey = decode(key);\n    const /** @type {?} */ decodedVal = decode(value);\n\n    if (params.hasOwnProperty(decodedKey)) {\n      // Append to existing values\n      let /** @type {?} */ currentVal = params[decodedKey];\n      if (!Array.isArray(currentVal)) {\n        currentVal = [currentVal];\n        params[decodedKey] = currentVal;\n      }\n      currentVal.push(decodedVal);\n    } else {\n      // Create a new value\n      params[decodedKey] = decodedVal;\n    }\n  }\n/**\n * @param {?} allowPrimary\n * @return {?}\n */\nparseParens(allowPrimary: boolean): {[key: string]: UrlSegmentGroup} {\n    const /** @type {?} */ segments: {[key: string]: UrlSegmentGroup} = {};\n    this.capture('(');\n    while (!this.peekStartsWith(')') && this.remaining.length > 0) {\n      const /** @type {?} */ path = matchSegments(this.remaining);\n\n      const /** @type {?} */ next = this.remaining[path.length];\n\n      // if is is not one of these characters, then the segment was unescaped\n      // or the group was not closed\n      if (next !== '/' && next !== ')' && next !== ';') {\n        throw new Error(`Cannot parse url '${this.url}'`);\n      }\n\n      let /** @type {?} */ outletName: string;\n      if (path.indexOf(':') > -1) {\n        outletName = path.substr(0, path.indexOf(':'));\n        this.capture(outletName);\n        this.capture(':');\n      } else if (allowPrimary) {\n        outletName = PRIMARY_OUTLET;\n      }\n\n      const /** @type {?} */ children = this.parseChildren();\n      segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :\n                                                                  new UrlSegmentGroup([], children);\n      if (this.peekStartsWith('//')) {\n        this.capture('//');\n      }\n    }\n    this.capture(')');\n    return segments;\n  }\n}\n\nfunction UrlParser_tsickle_Closure_declarations() {\n/** @type {?} */\nUrlParser.prototype.remaining;\n/** @type {?} */\nUrlParser.prototype.url;\n}\n\n"]}