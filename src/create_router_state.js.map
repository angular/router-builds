{"version":3,"sources":["../../../../modules/@angular/router/src/create_router_state.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAA,eAAE,EAAe,MAAA,sBAAA,CAAA;AAGxB,OAAO,EAAA,cAAE,EAAuC,WAAA,EAAiC,MAAA,gBAAA,CAAA;AACjF,OAAO,EAAA,QAAE,EAAQ,MAAA,cAAA,CAAA;AACjB;;;;;GAKG;AACH,MALC,4BAMG,kBAAsC,EAAE,IAAyB,EACjE,SAAsB;IACxB,IAAM,gBAAgB,CALhB,IAAA,GAAO,UAAA,CAAW,kBAAC,EAAmB,IAAA,CAAK,KAAC,EAAM,SAAA,GAAY,SAAA,CAAU,KAAC,GAAO,SAAA,CAAU,CAAC;IAMjG,MAAM,CALC,IAAI,WAAA,CAAY,IAAC,EAAK,IAAA,CAAK,CAAC;AAMrC,CAAC;AACD;;;;;GAKG;AACH,oBACI,kBAAsC,EAAE,IAAsC,EAC9E,SAAoC;IACtC,qEAAqE;IACrE,EAAE,CAAC,CAAC,SAVC,IAAY,kBAAA,CAAmB,gBAAC,CAAgB,IAAC,CAAI,KAAC,EAAM,SAAA,CAAU,KAAC,CAAK,QAAC,CAAQ,CAAC,CAAC,CAAA;QAW1F,IAAM,gBAAgB,CAVhB,KAAA,GAAQ,SAAA,CAAU,KAAC,CAAK;QAW9B,KAAK,CAVC,eAAC,GAAiB,IAAA,CAAK,KAAC,CAAK;QAWnC,IAAM,gBAAgB,CAVhB,QAAA,GAAW,qBAAA,CAAsB,kBAAC,EAAmB,IAAA,EAAM,SAAA,CAAU,CAAC;QAW5E,MAAM,CAVC,IAAI,QAAA,CAAwB,KAAE,EAAM,QAAA,CAAS,CAAC;IAavD,CAAC;IAVC,IAAA,CAAK,EAAA,CAAA,CAAA,kBAAK,CAAkB,QAAC,CAAQ,IAAC,CAAI,KAAC,CAAK,CAAC,CAAC,CAAA;QAWlD,IAAM,gBAAgB,CAVhB,IAAA,GAWF,CAAkB,CAVY,kBAAC,CAAkB,QAAC,CAAQ,IAAC,CAAI,KAAC,CAAK,CAAA,CAAC,CAAC,KAAC,CAAK;QAWjF,mCAAmC,CAVC,IAAC,EAAK,IAAA,CAAK,CAAC;QAWhD,MAAM,CAVC,IAAA,CAAK;IAYd,CAAC;IAVC,IAAA,CAAK,CAAA;QAWL,IAAM,gBAAgB,CAVhB,KAAA,GAAQ,oBAAA,CAAqB,IAAC,CAAI,KAAC,CAAK,CAAC;QAW/C,IAAM,gBAAgB,CAVhB,QAAA,GAAW,IAAA,CAAK,QAAC,CAAQ,GAAC,CAAG,UAAA,CAAC,IAAI,OAAA,UAAA,CAAW,kBAAC,EAAmB,CAAA,CAAE,EAAjC,CAAiC,CAAC,CAAC;QAW3E,MAAM,CAVC,IAAI,QAAA,CAAwB,KAAE,EAAM,QAAA,CAAS,CAAC;IAWvD,CAAC;AACH,CAAC;AACD;;;;GAIG;AACH,6CACI,IAAsC,EAAE,MAAgC;IAC1E,EAAE,CAAC,CAAC,IAdC,CAAI,KAAC,CAAK,WAAC,KAAe,MAAA,CAAO,KAAC,CAAK,WAAC,CAAW,CAAC,CAAA;QAevD,MAdM,IAAI,KAAA,CAAM,uEAAC,CAAuE,CAAC;IAe3F,CAAC;IACD,EAAE,CAAC,CAAC,IAdC,CAAI,QAAC,CAAQ,MAAC,KAAU,MAAA,CAAO,QAAC,CAAQ,MAAC,CAAM,CAAC,CAAA;QAenD,MAdM,IAAI,KAAA,CAAM,4EAAC,CAA4E,CAAC;IAehG,CAAC;IACD,MAAM,CAdC,KAAC,CAAK,eAAC,GAAiB,IAAA,CAAK,KAAC,CAAK;IAe1C,GAAG,CAAC,CAAC,IAdC,gBAAA,CAAG,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,IAAA,CAAK,QAAC,CAAQ,MAAC,EAAO,EAAA,CAAG,EAAE,CAAA;QAe7C,mCAAmC,CAdC,IAAC,CAAI,QAAC,CAAQ,CAAC,CAAC,EAAE,MAAA,CAAO,QAAC,CAAQ,CAAC,CAAC,CAAC,CAAC;IAe5E,CAAC;AACH,CAAC;AACD;;;;;GAKG;AACH,+BACI,kBAAsC,EAAE,IAAsC,EAC9E,SAAmC;IACrC,MAAM,CAnBC,IAAA,CAAK,QAAC,CAAQ,GAAC,CAAG,UAAA,KAAC;QAoBxB,GAAG,CAAC,CAnBY,UAAW,EAAX,KAAA,SAAA,CAAU,QAAC,EAAX,cAAW,EAAX,IAAW;YAmBtB,IAnBM,CAAA,SAAA;YAoBT,EAAE,CAAC,CAAC,kBAnBC,CAAkB,gBAAC,CAAgB,CAAC,CAAC,KAAC,CAAK,QAAC,EAAS,KAAA,CAAM,KAAC,CAAK,CAAC,CAAC,CAAA;gBAoBtE,MAAM,CAnBC,UAAA,CAAW,kBAAC,EAAmB,KAAA,EAAO,CAAA,CAAE,CAAC;YAoBlD,CAAC;SACF;QACD,MAAM,CAnBC,UAAA,CAAW,kBAAC,EAAmB,KAAA,CAAM,CAAC;IAoB/C,CAAC,CAnBC,CAAC;AAoBL,CAAC;AACD;;;GAGG;AACH,8BAtBC,CAAA;IAuBC,MAAM,CAtBC,IAAI,cAAA,CAuBP,IAtBI,eAAA,CAAgB,CAAC,CAAC,GAAC,CAAG,EAAE,IAAI,eAAA,CAAgB,CAAC,CAAC,MAAC,CAAM,EAAE,IAAI,eAAA,CAAgB,CAAC,CAAC,WAAC,CAAW,EAuB7F,IAtBI,eAAA,CAAgB,CAAC,CAAC,QAAC,CAAQ,EAAE,IAAI,eAAA,CAAgB,CAAC,CAAC,IAAC,CAAI,EAAE,CAAA,CAAE,MAAC,EAAO,CAAA,CAAE,SAAC,EAAU,CAAA,CAAE,CAAC;AAuB9F,CAAC","file":"create_router_state.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\n\nimport {DetachedRouteHandleInternal, RouteReuseStrategy} from './route_reuse_strategy';\nimport {ActivatedRoute, ActivatedRouteSnapshot, RouterState, RouterStateSnapshot} from './router_state';\nimport {TreeNode} from './utils/tree';\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?} prevState\n * @return {?}\n */\nexport function createRouterState(\n    routeReuseStrategy: RouteReuseStrategy, curr: RouterStateSnapshot,\n    prevState: RouterState): RouterState {\n  const /** @type {?} */ root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);\n  return new RouterState(root, curr);\n}\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?=} prevState\n * @return {?}\n */\nfunction createNode(\n    routeReuseStrategy: RouteReuseStrategy, curr: TreeNode<ActivatedRouteSnapshot>,\n    prevState?: TreeNode<ActivatedRoute>): TreeNode<ActivatedRoute> {\n  // reuse an activated route that is currently displayed on the screen\n  if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {\n    const /** @type {?} */ value = prevState.value;\n    value._futureSnapshot = curr.value;\n    const /** @type {?} */ children = createOrReuseChildren(routeReuseStrategy, curr, prevState);\n    return new TreeNode<ActivatedRoute>(value, children);\n\n    // retrieve an activated route that is used to be displayed, but is not currently displayed\n  } else if (routeReuseStrategy.retrieve(curr.value)) {\n    const /** @type {?} */ tree: TreeNode<ActivatedRoute> =\n        ( /** @type {?} */((<DetachedRouteHandleInternal>routeReuseStrategy.retrieve(curr.value)))).route;\n    setFutureSnapshotsOfActivatedRoutes(curr, tree);\n    return tree;\n\n  } else {\n    const /** @type {?} */ value = createActivatedRoute(curr.value);\n    const /** @type {?} */ children = curr.children.map(c => createNode(routeReuseStrategy, c));\n    return new TreeNode<ActivatedRoute>(value, children);\n  }\n}\n/**\n * @param {?} curr\n * @param {?} result\n * @return {?}\n */\nfunction setFutureSnapshotsOfActivatedRoutes(\n    curr: TreeNode<ActivatedRouteSnapshot>, result: TreeNode<ActivatedRoute>): void {\n  if (curr.value.routeConfig !== result.value.routeConfig) {\n    throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');\n  }\n  if (curr.children.length !== result.children.length) {\n    throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');\n  }\n  result.value._futureSnapshot = curr.value;\n  for (let /** @type {?} */ i = 0; i < curr.children.length; ++i) {\n    setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);\n  }\n}\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?} prevState\n * @return {?}\n */\nfunction createOrReuseChildren(\n    routeReuseStrategy: RouteReuseStrategy, curr: TreeNode<ActivatedRouteSnapshot>,\n    prevState: TreeNode<ActivatedRoute>) {\n  return curr.children.map(child => {\n    for (const /** @type {?} */ p of prevState.children) {\n      if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) {\n        return createNode(routeReuseStrategy, child, p);\n      }\n    }\n    return createNode(routeReuseStrategy, child);\n  });\n}\n/**\n * @param {?} c\n * @return {?}\n */\nfunction createActivatedRoute(c: ActivatedRouteSnapshot) {\n  return new ActivatedRoute(\n      new BehaviorSubject(c.url), new BehaviorSubject(c.params), new BehaviorSubject(c.queryParams),\n      new BehaviorSubject(c.fragment), new BehaviorSubject(c.data), c.outlet, c.component, c);\n}"]}