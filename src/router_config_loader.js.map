{"version":3,"sources":["../../../../modules/@angular/router/src/router_config_loader.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAA,QAAE,EAAmC,cAAA,EAAiE,MAAA,qBAAA,CAAA;AAE7G,OAAO,EAAA,WAAE,EAAW,MAAA,6BAAA,CAAA;AACpB,OAAO,EAAA,EAAE,EAAE,MAAA,oBAAA,CAAA;AACX,OAAO,EAAA,GAAE,EAAG,MAAA,mBAAA,CAAA;AACZ,OAAO,EAAA,QAAE,EAAQ,MAAA,wBAAA,CAAA;AAEjB,OAAO,EAAA,OAAE,EAAQ,kBAAA,EAAmB,MAAA,oBAAA,CAAA;AAEpC;;;GAGG;AACH,MAAM,CAAC,MAAA,gBAAA,CAAM,MAAA,GAAS,IAAI,cAAA,CAAyB,QAAE,CAAQ,CAAC;AAC9D,MACC;IAAD;;;;;OAKG;IACH,YAJa,MAAc,EAAU,QAAU,EAClC,eAAiB,EAAiC,eAAiB;QADnE,WAAA,GAAA,MAAA,CAAc;QAAU,aAAA,GAAA,QAAA,CAAU;QAClC,oBAAA,GAAA,eAAA,CAAiB;QAAiC,oBAAA,GAAA,eAAA,CAAiB;IAAS,CAAA;CAQxF;AAED;IACA,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,MAAM,CAAC;IACpC,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,QAAQ,CAAC;IACtC,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,eAAe,CAAC;IAC7C,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,eAAe,CAAC;AAC7C,CAAC;AAED,MAlBC;IAmBD;;;;;OAKG;IACH,YAvBc,MAAQ,EAA+B,QAAU,EACjD,mBAAoC,EACpC,iBAAkC;QAFlC,WAAA,GAAA,MAAA,CAAQ;QAA+B,aAAA,GAAA,QAAA,CAAU;QACjD,wBAAA,GAAA,mBAAA,CAAoC;QACpC,sBAAA,GAAA,iBAAA,CAAkC;IAAK,CAAA;IA0BrD;;;;OAIG;IACH,IA7BG,CAAA,cAAA,EAAA,KAAA;QA8BC,EAAE,CAAC,CAAC,IA7BC,CAAI,mBAAC,CAAmB,CAAC,CAAA;YA8B5B,IAAI,CA7BC,mBAAC,CAAmB,KAAC,CAAK,CAAC;QA8BlC,CAAC;QAED,MAAM,gBAAgB,CA7BhB,cAAA,GAAiB,IAAA,CAAK,iBAAC,CAAiB,KAAC,CAAK,YAAC,CAAY,CAAC;QA+BlE,MAAM,CA7BC,GAAA,CAAI,IAAC,CAAI,cAAC,EAAe,CAAA,OAA8B;YA8B5D,EAAE,CAAC,CAAC,IA7BC,CAAI,iBAAC,CAAiB,CAAC,CAAA;gBA8B1B,IAAI,CA7BC,iBAAC,CAAiB,KAAC,CAAK,CAAC;YA8BhC,CAAC;YAED,MAAM,gBAAgB,CA7BhB,MAAA,GAAS,OAAA,CAAQ,MAAC,CAAM,cAAC,CAAc,CAAC;YA8B9C,MAAM,gBAAgB,CA7BhB,eAAA,GAAkB,CAAA,MAAS,KAAa,OAAA,CAAQ,MAAC,CAAM,MAAC,CAAM,CAAC,QAAC,CAAQ;YA+B9E,MAAM,CA7BC,IAAI,kBAAA,CA8BP,OAAO,CA7BC,MAAC,CAAM,QAAC,CAAQ,GAAC,CAAG,MAAC,CAAM,CAAC,EAAE,MAAA,CAAO,QAAC,EAAS,MAAA,CAAO,wBAAC,EA8B/D,eAAe,CA7BC,CAAC;QA8BvB,CAAC,CA7BC,CAAC;IA8BL,CAAC;IACH;;;OAGG;IA/BA,iBAAA,CAAA,YAAA;QAiCC,EAAE,CAAC,CAAC,OAhCO,YAAA,KAAiB,QAAA,CAAS,CAAC,CAAA;YAiCpC,MAAM,CAhCC,WAAA,CAAY,IAAC,CAAI,MAAC,CAAM,IAAC,CAAI,YAAC,CAAY,CAAC,CAAC;QAiCrD,CAAC;QAhCC,IAAA,CAAK,CAAA;YAiCL,MAAM,gBAAgB,CAhChB,WAAA,GAAc,IAAA,CAAK,QAAC,YAAmB,QAAA,CAAS;YAiCtD,MAAM,CAhCC,QAAA,CAAS,IAAC,CAiCb,kBAAkB,CAhCC,YAAC,EAAY,CAAE,EAiClC,CAAC,CAhCG,KAAQ,WAAA,GAAc,EAAA,CAAG,gBAAA,CAAA,CAAM,CAAC,CAAA,CAAC,GAAG,WAAA,CAAY,IAAC,CAAI,QAAC,CAAQ,kBAAC,CAAkB,CAAC,CAAC,CAAC,CAAC,CAAC;QAiChG,CAAC;IACH,CAAC;CACF;AAED;IACA,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,MAAM,CAAC;IACpC,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,QAAQ,CAAC;IACtC,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,mBAAmB,CAAC;IACjD,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,iBAAiB,CAAC;AAC/C,CAAC","file":"router_config_loader.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, ComponentFactoryResolver, InjectionToken, Injector, NgModuleFactory, NgModuleFactoryLoader} from '@angular/core/index';\nimport {Observable} from 'rxjs/Observable';\nimport {fromPromise} from 'rxjs/observable/fromPromise';\nimport {of } from 'rxjs/observable/of';\nimport {map} from 'rxjs/operator/map';\nimport {mergeMap} from 'rxjs/operator/mergeMap';\nimport {LoadChildren, Route} from './config';\nimport {flatten, wrapIntoObservable} from './utils/collection';\n\n/**\n * @docsNotRequired\n * @experimental\n */\nexport const /** @type {?} */ ROUTES = new InjectionToken<Route[][]>('ROUTES');\nexport class LoadedRouterConfig {\n/**\n * @param {?} routes\n * @param {?} injector\n * @param {?} factoryResolver\n * @param {?} injectorFactory\n */\nconstructor(\npublic routes: Route[],\npublic injector: Injector,\npublic factoryResolver: ComponentFactoryResolver,\npublic injectorFactory: Function) {}\n}\n\nfunction LoadedRouterConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nLoadedRouterConfig.prototype.routes;\n/** @type {?} */\nLoadedRouterConfig.prototype.injector;\n/** @type {?} */\nLoadedRouterConfig.prototype.factoryResolver;\n/** @type {?} */\nLoadedRouterConfig.prototype.injectorFactory;\n}\n\nexport class RouterConfigLoader {\n/**\n * @param {?} loader\n * @param {?} compiler\n * @param {?=} onLoadStartListener\n * @param {?=} onLoadEndListener\n */\nconstructor(\nprivate loader: NgModuleFactoryLoader,\nprivate compiler: Compiler,\nprivate onLoadStartListener?: (r: Route) => void,\nprivate onLoadEndListener?: (r: Route) => void) {}\n/**\n * @param {?} parentInjector\n * @param {?} route\n * @return {?}\n */\nload(parentInjector: Injector, route: Route): Observable<LoadedRouterConfig> {\n    if (this.onLoadStartListener) {\n      this.onLoadStartListener(route);\n    }\n\n    const /** @type {?} */ moduleFactory$ = this.loadModuleFactory(route.loadChildren);\n\n    return map.call(moduleFactory$, (factory: NgModuleFactory<any>) => {\n      if (this.onLoadEndListener) {\n        this.onLoadEndListener(route);\n      }\n\n      const /** @type {?} */ module = factory.create(parentInjector);\n      const /** @type {?} */ injectorFactory = (parent: Injector) => factory.create(parent).injector;\n\n      return new LoadedRouterConfig(\n          flatten(module.injector.get(ROUTES)), module.injector, module.componentFactoryResolver,\n          injectorFactory);\n    });\n  }\n/**\n * @param {?} loadChildren\n * @return {?}\n */\nprivate loadModuleFactory(loadChildren: LoadChildren): Observable<NgModuleFactory<any>> {\n    if (typeof loadChildren === 'string') {\n      return fromPromise(this.loader.load(loadChildren));\n    } else {\n      const /** @type {?} */ offlineMode = this.compiler instanceof Compiler;\n      return mergeMap.call(\n          wrapIntoObservable(loadChildren()),\n          (t: any) => offlineMode ? of ( /** @type {?} */((<any>t))) : fromPromise(this.compiler.compileModuleAsync(t)));\n    }\n  }\n}\n\nfunction RouterConfigLoader_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterConfigLoader.prototype.loader;\n/** @type {?} */\nRouterConfigLoader.prototype.compiler;\n/** @type {?} */\nRouterConfigLoader.prototype.onLoadStartListener;\n/** @type {?} */\nRouterConfigLoader.prototype.onLoadEndListener;\n}\n\n"]}