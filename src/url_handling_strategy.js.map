{"version":3,"sources":["../../../../modules/@angular/router/src/url_handling_strategy.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH;;;;;GAKG;AACH;IACA;;;;;;;;;;OAUG;IACH,gBAHY,CAAA,GAAA,IAAA,CAAA;IAIZ;;;;;;OAMG;IACH,OALY,CAAA,GAAA,IAAA,CAAA;IAMZ;;;;;;OAMG;IACH,KARY,CAAA,UAAA,EAAA,MAAA,IAAA,CAAA;AASZ,CAAC;AACD;;GAEG;AACH;IACA;;;OAGG;IACH,gBAXG,CAAA,GAAA,IAAyC,MAAA,CAAO,IAAA,CAAK,CAAC,CAAA;IAYzD;;;OAGG;IACH,OAfG,CAAA,GAAA,IAAgC,MAAA,CAAO,GAAA,CAAI,CAAC,CAAA;IAgB/C;;;;OAIG;IACH,KApBG,CAAA,UAAA,EAAA,QAAA,IAAwD,MAAA,CAAO,UAAA,CAAW,CAAC,CAAA;AAqB9E,CAAC;AAAA","file":"url_handling_strategy.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {UrlTree} from './url_tree';\n/**\n * \\@whatItDoes Provides a way to migrate AngularJS applications to Angular.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class UrlHandlingStrategy {\n/**\n * Tells the router if this URL should be processed.\n * \n * When it returns true, the router will execute the regular navigation.\n * When it returns false, the router will set the router state to an empty state.\n * As a result, all the active components will be destroyed.\n * \n * @abstract\n * @param {?} url\n * @return {?}\n */\nshouldProcessUrl(url: UrlTree) {}\n/**\n * Extracts the part of the URL that should be handled by the router.\n * The rest of the URL will remain untouched.\n * @abstract\n * @param {?} url\n * @return {?}\n */\nextract(url: UrlTree) {}\n/**\n * Merges the URL fragment with the rest of the URL.\n * @abstract\n * @param {?} newUrlPart\n * @param {?} rawUrl\n * @return {?}\n */\nmerge(newUrlPart: UrlTree, rawUrl: UrlTree) {}\n}\n/**\n * \\@experimental\n */\nexport class DefaultUrlHandlingStrategy implements UrlHandlingStrategy {\n/**\n * @param {?} url\n * @return {?}\n */\nshouldProcessUrl(url: UrlTree): boolean { return true; }\n/**\n * @param {?} url\n * @return {?}\n */\nextract(url: UrlTree): UrlTree { return url; }\n/**\n * @param {?} newUrlPart\n * @param {?} wholeUrl\n * @return {?}\n */\nmerge(newUrlPart: UrlTree, wholeUrl: UrlTree): UrlTree { return newUrlPart; }\n}"]}