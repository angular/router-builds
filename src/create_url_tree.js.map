{"version":3,"sources":["../../../../modules/@angular/router/src/create_url_tree.ts"],"names":[],"mappings":"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","file":"create_url_tree.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActivatedRoute} from './router_state';\nimport {PRIMARY_OUTLET, Params} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree} from './url_tree';\nimport {forEach, last, shallowEqual} from './utils/collection';\n/**\n * @param {?} route\n * @param {?} urlTree\n * @param {?} commands\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\nexport function createUrlTree(\n    route: ActivatedRoute, urlTree: UrlTree, commands: any[], queryParams: Params,\n    fragment: string): UrlTree {\n  if (commands.length === 0) {\n    return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);\n  }\n\n  const /** @type {?} */ nav = computeNavigation(commands);\n\n  if (nav.toRoot()) {\n    return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);\n  }\n\n  const /** @type {?} */ startingPosition = findStartingPosition(nav, urlTree, route);\n\n  const /** @type {?} */ segmentGroup = startingPosition.processChildren ?\n      updateSegmentGroupChildren(\n          startingPosition.segmentGroup, startingPosition.index, nav.commands) :\n      updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);\n  return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);\n}\n/**\n * @param {?} command\n * @return {?}\n */\nfunction isMatrixParams(command: any): boolean {\n  return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;\n}\n/**\n * @param {?} oldSegmentGroup\n * @param {?} newSegmentGroup\n * @param {?} urlTree\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\nfunction tree(\n    oldSegmentGroup: UrlSegmentGroup, newSegmentGroup: UrlSegmentGroup, urlTree: UrlTree,\n    queryParams: Params, fragment: string): UrlTree {\n  if (urlTree.root === oldSegmentGroup) {\n    return new UrlTree(newSegmentGroup, stringify(queryParams), fragment);\n  }\n\n  return new UrlTree(\n      replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), stringify(queryParams),\n      fragment);\n}\n/**\n * @param {?} current\n * @param {?} oldSegment\n * @param {?} newSegment\n * @return {?}\n */\nfunction replaceSegment(\n    current: UrlSegmentGroup, oldSegment: UrlSegmentGroup,\n    newSegment: UrlSegmentGroup): UrlSegmentGroup {\n  const /** @type {?} */ children: {[key: string]: UrlSegmentGroup} = {};\n  forEach(current.children, (c: UrlSegmentGroup, outletName: string) => {\n    if (c === oldSegment) {\n      children[outletName] = newSegment;\n    } else {\n      children[outletName] = replaceSegment(c, oldSegment, newSegment);\n    }\n  });\n  return new UrlSegmentGroup(current.segments, children);\n}\nclass Navigation {\n/**\n * @param {?} isAbsolute\n * @param {?} numberOfDoubleDots\n * @param {?} commands\n */\nconstructor(\npublic isAbsolute: boolean,\npublic numberOfDoubleDots: number,\npublic commands: any[]) {\n    if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {\n      throw new Error('Root segment cannot have matrix parameters');\n    }\n\n    const cmdWithOutlet = commands.find(c => typeof c === 'object' && c != null && c.outlets);\n    if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {\n      throw new Error('{outlets:{}} has to be the last command');\n    }\n  }\n/**\n * @return {?}\n */\npublic toRoot(): boolean {\n    return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';\n  }\n}\n\nfunction Navigation_tsickle_Closure_declarations() {\n/** @type {?} */\nNavigation.prototype.isAbsolute;\n/** @type {?} */\nNavigation.prototype.numberOfDoubleDots;\n/** @type {?} */\nNavigation.prototype.commands;\n}\n\n/**\n * Transforms commands to a normalized `Navigation`\n * @param {?} commands\n * @return {?}\n */\nfunction computeNavigation(commands: any[]): Navigation {\n  if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {\n    return new Navigation(true, 0, commands);\n  }\n\n  let /** @type {?} */ numberOfDoubleDots = 0;\n  let /** @type {?} */ isAbsolute = false;\n\n  const /** @type {?} */ res: any[] = commands.reduce((res, cmd, cmdIdx) => {\n    if (typeof cmd === 'object' && cmd != null) {\n      if (cmd.outlets) {\n        const /** @type {?} */ outlets: {[k: string]: any} = {};\n        forEach(cmd.outlets, (commands: any, name: string) => {\n          outlets[name] = typeof commands === 'string' ? commands.split('/') : commands;\n        });\n        return [...res, {outlets}];\n      }\n\n      if (cmd.segmentPath) {\n        return [...res, cmd.segmentPath];\n      }\n    }\n\n    if (!(typeof cmd === 'string')) {\n      return [...res, cmd];\n    }\n\n    if (cmdIdx === 0) {\n      cmd.split('/').forEach((urlPart, partIndex) => {\n        if (partIndex == 0 && urlPart === '.') {\n          // skip './a'\n        } else if (partIndex == 0 && urlPart === '') {  //  '/a'\n          isAbsolute = true;\n        } else if (urlPart === '..') {  //  '../a'\n          numberOfDoubleDots++;\n        } else if (urlPart != '') {\n          res.push(urlPart);\n        }\n      });\n\n      return res;\n    }\n\n    return [...res, cmd];\n  }, []);\n\n  return new Navigation(isAbsolute, numberOfDoubleDots, res);\n}\nclass Position {\n/**\n * @param {?} segmentGroup\n * @param {?} processChildren\n * @param {?} index\n */\nconstructor(\npublic segmentGroup: UrlSegmentGroup,\npublic processChildren: boolean,\npublic index: number) {\n  }\n}\n\nfunction Position_tsickle_Closure_declarations() {\n/** @type {?} */\nPosition.prototype.segmentGroup;\n/** @type {?} */\nPosition.prototype.processChildren;\n/** @type {?} */\nPosition.prototype.index;\n}\n\n/**\n * @param {?} nav\n * @param {?} tree\n * @param {?} route\n * @return {?}\n */\nfunction findStartingPosition(nav: Navigation, tree: UrlTree, route: ActivatedRoute): Position {\n  if (nav.isAbsolute) {\n    return new Position(tree.root, true, 0);\n  }\n\n  if (route.snapshot._lastPathIndex === -1) {\n    return new Position(route.snapshot._urlSegment, true, 0);\n  }\n\n  const /** @type {?} */ modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;\n  const /** @type {?} */ index = route.snapshot._lastPathIndex + modifier;\n  return createPositionApplyingDoubleDots(\n      route.snapshot._urlSegment, index, nav.numberOfDoubleDots);\n}\n/**\n * @param {?} group\n * @param {?} index\n * @param {?} numberOfDoubleDots\n * @return {?}\n */\nfunction createPositionApplyingDoubleDots(\n    group: UrlSegmentGroup, index: number, numberOfDoubleDots: number): Position {\n  let /** @type {?} */ g = group;\n  let /** @type {?} */ ci = index;\n  let /** @type {?} */ dd = numberOfDoubleDots;\n  while (dd > ci) {\n    dd -= ci;\n    g = g.parent;\n    if (!g) {\n      throw new Error('Invalid number of \\'../\\'');\n    }\n    ci = g.segments.length;\n  }\n  return new Position(g, false, ci - dd);\n}\n/**\n * @param {?} command\n * @return {?}\n */\nfunction getPath(command: any): any {\n  if (typeof command === 'object' && command != null && command.outlets) {\n    return command.outlets[PRIMARY_OUTLET];\n  }\n  return `${command}`;\n}\n/**\n * @param {?} commands\n * @return {?}\n */\nfunction getOutlets(commands: any[]): {[k: string]: any[]} {\n  if (!(typeof commands[0] === 'object')) return {[PRIMARY_OUTLET]: commands};\n  if (commands[0].outlets === undefined) return {[PRIMARY_OUTLET]: commands};\n  return commands[0].outlets;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction updateSegmentGroup(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  if (!segmentGroup) {\n    segmentGroup = new UrlSegmentGroup([], {});\n  }\n  if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n    return updateSegmentGroupChildren(segmentGroup, startIndex, commands);\n  }\n\n  const /** @type {?} */ m = prefixedWith(segmentGroup, startIndex, commands);\n  const /** @type {?} */ slicedCommands = commands.slice(m.commandIndex);\n  if (m.match && m.pathIndex < segmentGroup.segments.length) {\n    const /** @type {?} */ g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});\n    g.children[PRIMARY_OUTLET] =\n        new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);\n    return updateSegmentGroupChildren(g, 0, slicedCommands);\n  } else if (m.match && slicedCommands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else if (m.match && !segmentGroup.hasChildren()) {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  } else if (m.match) {\n    return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);\n  } else {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction updateSegmentGroupChildren(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  if (commands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else {\n    const /** @type {?} */ outlets = getOutlets(commands);\n    const /** @type {?} */ children: {[key: string]: UrlSegmentGroup} = {};\n\n    forEach(outlets, (commands: any, outlet: string) => {\n      if (commands !== null) {\n        children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);\n      }\n    });\n\n    forEach(segmentGroup.children, (child: UrlSegmentGroup, childOutlet: string) => {\n      if (outlets[childOutlet] === undefined) {\n        children[childOutlet] = child;\n      }\n    });\n    return new UrlSegmentGroup(segmentGroup.segments, children);\n  }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction prefixedWith(segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]) {\n  let /** @type {?} */ currentCommandIndex = 0;\n  let /** @type {?} */ currentPathIndex = startIndex;\n\n  const /** @type {?} */ noMatch = {match: false, pathIndex: 0, commandIndex: 0};\n  while (currentPathIndex < segmentGroup.segments.length) {\n    if (currentCommandIndex >= commands.length) return noMatch;\n    const /** @type {?} */ path = segmentGroup.segments[currentPathIndex];\n    const /** @type {?} */ curr = getPath(commands[currentCommandIndex]);\n    const /** @type {?} */ next =\n        currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\n\n    if (currentPathIndex > 0 && curr === undefined) break;\n\n    if (curr && next && (typeof next === 'object') && next.outlets === undefined) {\n      if (!compare(curr, next, path)) return noMatch;\n      currentCommandIndex += 2;\n    } else {\n      if (!compare(curr, {}, path)) return noMatch;\n      currentCommandIndex++;\n    }\n    currentPathIndex++;\n  }\n\n  return {match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex};\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction createNewSegmentGroup(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  const /** @type {?} */ paths = segmentGroup.segments.slice(0, startIndex);\n\n  let /** @type {?} */ i = 0;\n  while (i < commands.length) {\n    if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {\n      const /** @type {?} */ children = createNewSegmentChildren(commands[i].outlets);\n      return new UrlSegmentGroup(paths, children);\n    }\n\n    // if we start with an object literal, we need to reuse the path part from the segment\n    if (i === 0 && isMatrixParams(commands[0])) {\n      const /** @type {?} */ p = segmentGroup.segments[startIndex];\n      paths.push(new UrlSegment(p.path, commands[0]));\n      i++;\n      continue;\n    }\n\n    const /** @type {?} */ curr = getPath(commands[i]);\n    const /** @type {?} */ next = (i < commands.length - 1) ? commands[i + 1] : null;\n    if (curr && next && isMatrixParams(next)) {\n      paths.push(new UrlSegment(curr, stringify(next)));\n      i += 2;\n    } else {\n      paths.push(new UrlSegment(curr, {}));\n      i++;\n    }\n  }\n  return new UrlSegmentGroup(paths, {});\n}\n/**\n * @param {?} outlets\n * @return {?}\n */\nfunction createNewSegmentChildren(outlets: {[name: string]: any}): any {\n  const /** @type {?} */ children: {[key: string]: UrlSegmentGroup} = {};\n  forEach(outlets, (commands: any, outlet: string) => {\n    if (commands !== null) {\n      children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);\n    }\n  });\n  return children;\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction stringify(params: {[key: string]: any}): {[key: string]: string} {\n  const /** @type {?} */ res: {[key: string]: string} = {};\n  forEach(params, (v: any, k: string) => res[k] = `${v}`);\n  return res;\n}\n/**\n * @param {?} path\n * @param {?} params\n * @param {?} segment\n * @return {?}\n */\nfunction compare(path: string, params: {[key: string]: any}, segment: UrlSegment): boolean {\n  return path == segment.path && shallowEqual(params, segment.parameters);\n}\n"]}