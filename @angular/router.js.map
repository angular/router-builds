{"version":3,"file":"router.js","sources":["../../../../packages/router/index.ts","../../../../packages/router/public_api.ts","../../../../packages/router/src/index.ts","../../../../packages/router/src/private_export.ts","../../../../packages/router/src/version.ts","../../../../packages/router/src/router_module.ts","../../../../packages/router/src/router_preloader.ts","../../../../packages/router/src/interfaces.ts","../../../../packages/router/src/directives/router_outlet.ts","../../../../packages/router/src/router_outlet_context.ts","../../../../packages/router/src/directives/router_link_active.ts","../../../../packages/router/src/directives/router_link.ts","../../../../packages/router/src/router.ts","../../../../packages/router/src/url_handling_strategy.ts","../../../../packages/router/src/router_config_loader.ts","../../../../packages/router/src/route_reuse_strategy.ts","../../../../packages/router/src/recognize.ts","../../../../packages/router/src/pre_activation.ts","../../../../packages/router/src/create_url_tree.ts","../../../../packages/router/src/create_router_state.ts","../../../../packages/router/src/router_state.ts","../../../../packages/router/src/utils/tree.ts","../../../../packages/router/src/apply_redirects.ts","../../../../packages/router/src/url_tree.ts","../../../../packages/router/src/utils/collection.ts","../../../../packages/router/src/events.ts","../../../../packages/router/src/config.ts","../../../../packages/router/src/shared.ts"],"sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport {Data,LoadChildren,LoadChildrenCallback,ResolveData,Route,Routes,RunGuardsAndResolvers,UrlMatchResult,UrlMatcher,RouterLink,RouterLinkWithHref,RouterLinkActive,RouterOutlet,ChildActivationEnd,ChildActivationStart,Event,GuardsCheckEnd,GuardsCheckStart,NavigationCancel,NavigationEnd,NavigationError,NavigationStart,ResolveEnd,ResolveStart,RouteConfigLoadEnd,RouteConfigLoadStart,RouteEvent,RoutesRecognized,CanActivate,CanActivateChild,CanDeactivate,CanLoad,Resolve,DetachedRouteHandle,RouteReuseStrategy,NavigationExtras,Router,ROUTES,ExtraOptions,ROUTER_CONFIGURATION,ROUTER_INITIALIZER,RouterModule,provideRoutes,ChildrenOutletContexts,OutletContext,NoPreloading,PreloadAllModules,PreloadingStrategy,RouterPreloader,ActivatedRoute,ActivatedRouteSnapshot,RouterState,RouterStateSnapshot,PRIMARY_OUTLET,ParamMap,Params,convertToParamMap,UrlHandlingStrategy,DefaultUrlSerializer,UrlSegment,UrlSegmentGroup,UrlSerializer,UrlTree,VERSION,ɵROUTER_PROVIDERS,ɵflatten} from './public_api';\n\nexport {RouterEvent as ɵa} from './src/events';\nexport {ROUTER_FORROOT_GUARD as ɵb,RouterInitializer as ɵh,getAppInitializer as ɵi,getBootstrapListener as ɵj,provideForRootGuard as ɵe,provideLocationStrategy as ɵd,provideRouterInitializer as ɵk,rootRoute as ɵg,routerNgProbeToken as ɵc,setupRouter as ɵf} from './src/router_module';\nexport {Tree as ɵl,TreeNode as ɵm} from './src/utils/tree';","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the router package.\n */\nexport {Data,LoadChildren,LoadChildrenCallback,ResolveData,Route,Routes,RunGuardsAndResolvers,UrlMatchResult,UrlMatcher,RouterLink,RouterLinkWithHref,RouterLinkActive,RouterOutlet,ChildActivationEnd,ChildActivationStart,Event,GuardsCheckEnd,GuardsCheckStart,NavigationCancel,NavigationEnd,NavigationError,NavigationStart,ResolveEnd,ResolveStart,RouteConfigLoadEnd,RouteConfigLoadStart,RouteEvent,RoutesRecognized,CanActivate,CanActivateChild,CanDeactivate,CanLoad,Resolve,DetachedRouteHandle,RouteReuseStrategy,NavigationExtras,Router,ROUTES,ExtraOptions,ROUTER_CONFIGURATION,ROUTER_INITIALIZER,RouterModule,provideRoutes,ChildrenOutletContexts,OutletContext,NoPreloading,PreloadAllModules,PreloadingStrategy,RouterPreloader,ActivatedRoute,ActivatedRouteSnapshot,RouterState,RouterStateSnapshot,PRIMARY_OUTLET,ParamMap,Params,convertToParamMap,UrlHandlingStrategy,DefaultUrlSerializer,UrlSegment,UrlSegmentGroup,UrlSerializer,UrlTree,VERSION,ɵROUTER_PROVIDERS,ɵflatten} from './src/index';\n\n// This file only reexports content of the `src` folder. Keep it that way.\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nexport {Data, LoadChildren, LoadChildrenCallback, ResolveData, Route, Routes, RunGuardsAndResolvers, UrlMatchResult, UrlMatcher} from './config';\nexport {RouterLink, RouterLinkWithHref} from './directives/router_link';\nexport {RouterLinkActive} from './directives/router_link_active';\nexport {RouterOutlet} from './directives/router_outlet';\nexport {ChildActivationEnd, ChildActivationStart, Event, GuardsCheckEnd, GuardsCheckStart, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, ResolveEnd, ResolveStart, RouteConfigLoadEnd, RouteConfigLoadStart, RouteEvent, RoutesRecognized} from './events';\nexport {CanActivate, CanActivateChild, CanDeactivate, CanLoad, Resolve} from './interfaces';\nexport {DetachedRouteHandle, RouteReuseStrategy} from './route_reuse_strategy';\nexport {NavigationExtras, Router} from './router';\nexport {ROUTES} from './router_config_loader';\nexport {ExtraOptions, ROUTER_CONFIGURATION, ROUTER_INITIALIZER, RouterModule, provideRoutes} from './router_module';\nexport {ChildrenOutletContexts, OutletContext} from './router_outlet_context';\nexport {NoPreloading, PreloadAllModules, PreloadingStrategy, RouterPreloader} from './router_preloader';\nexport {ActivatedRoute, ActivatedRouteSnapshot, RouterState, RouterStateSnapshot} from './router_state';\nexport {PRIMARY_OUTLET, ParamMap, Params, convertToParamMap} from './shared';\nexport {UrlHandlingStrategy} from './url_handling_strategy';\nexport {DefaultUrlSerializer, UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree} from './url_tree';\nexport {VERSION} from './version';\n\nexport {ɵROUTER_PROVIDERS,ɵflatten} from './private_export';\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nexport {ROUTER_PROVIDERS as ɵROUTER_PROVIDERS} from './router_module';\nexport {flatten as ɵflatten} from './utils/collection';\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\nimport {Version} from '@angular/core';\n/**\n * \\@stable\n */\nexport const /** @type {?} */ VERSION = new Version('5.0.0-beta.4-a56468c');\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_BASE_HREF, HashLocationStrategy, LOCATION_INITIALIZED, Location, LocationStrategy, PathLocationStrategy, PlatformLocation} from '@angular/common';\nimport {ANALYZE_FOR_ENTRY_COMPONENTS, APP_BOOTSTRAP_LISTENER, APP_INITIALIZER, ApplicationRef, Compiler, ComponentRef, Inject, Injectable, InjectionToken, Injector, ModuleWithProviders, NgModule, NgModuleFactoryLoader, NgProbeToken, Optional, Provider, SkipSelf, SystemJsNgModuleLoader} from '@angular/core';\nimport {ɵgetDOM as getDOM} from '@angular/platform-browser';\nimport {Subject} from 'rxjs/Subject';\nimport {of } from 'rxjs/observable/of';\n\nimport {Route, Routes} from './config';\nimport {RouterLink, RouterLinkWithHref} from './directives/router_link';\nimport {RouterLinkActive} from './directives/router_link_active';\nimport {RouterOutlet} from './directives/router_outlet';\nimport {RouteReuseStrategy} from './route_reuse_strategy';\nimport {ErrorHandler, Router} from './router';\nimport {ROUTES} from './router_config_loader';\nimport {ChildrenOutletContexts} from './router_outlet_context';\nimport {NoPreloading, PreloadAllModules, PreloadingStrategy, RouterPreloader} from './router_preloader';\nimport {ActivatedRoute} from './router_state';\nimport {UrlHandlingStrategy} from './url_handling_strategy';\nimport {DefaultUrlSerializer, UrlSerializer} from './url_tree';\nimport {flatten} from './utils/collection';\n/**\n * \\@whatItDoes Contains a list of directives\n * \\@stable\n */\nconst /** @type {?} */ ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive];\n/**\n * \\@whatItDoes Is used in DI to configure the router.\n * \\@stable\n */\nexport const /** @type {?} */ ROUTER_CONFIGURATION = new InjectionToken<ExtraOptions>('ROUTER_CONFIGURATION');\n/**\n * \\@docsNotRequired\n */\nexport const /** @type {?} */ ROUTER_FORROOT_GUARD = new InjectionToken<void>('ROUTER_FORROOT_GUARD');\n\nexport const /** @type {?} */ ROUTER_PROVIDERS: Provider[] = [\n  Location,\n  {provide: UrlSerializer, useClass: DefaultUrlSerializer},\n  {\n    provide: Router,\n    useFactory: setupRouter,\n    deps: [\n      ApplicationRef, UrlSerializer, ChildrenOutletContexts, Location, Injector,\n      NgModuleFactoryLoader, Compiler, ROUTES, ROUTER_CONFIGURATION,\n      [UrlHandlingStrategy, new Optional()], [RouteReuseStrategy, new Optional()]\n    ]\n  },\n  ChildrenOutletContexts,\n  {provide: ActivatedRoute, useFactory: rootRoute, deps: [Router]},\n  {provide: NgModuleFactoryLoader, useClass: SystemJsNgModuleLoader},\n  RouterPreloader,\n  NoPreloading,\n  PreloadAllModules,\n  {provide: ROUTER_CONFIGURATION, useValue: {enableTracing: false}},\n];\n/**\n * @return {?}\n */\nexport function routerNgProbeToken() {\n  return new NgProbeToken('Router', Router);\n}\n/**\n * \\@whatItDoes Adds router directives and providers.\n * \n * \\@howToUse \n * \n * RouterModule can be imported multiple times: once per lazily-loaded bundle.\n * Since the router deals with a global shared resource--location, we cannot have\n * more than one router service active.\n * \n * That is why there are two ways to create the module: `RouterModule.forRoot` and\n * `RouterModule.forChild`.\n * \n * * `forRoot` creates a module that contains all the directives, the given routes, and the router\n *   service itself.\n * * `forChild` creates a module that contains all the directives and the given routes, but does not\n *   include the router service.\n * \n * When registered at the root, the module should be used as follows\n * \n * ```\n * \\@NgModule({ \n *   imports: [RouterModule.forRoot(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n * \n * For submodules and lazy loaded submodules the module should be used as follows:\n * \n * ```\n * \\@NgModule({ \n *   imports: [RouterModule.forChild(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n * \n * \\@description \n * \n * Managing state transitions is one of the hardest parts of building applications. This is\n * especially true on the web, where you also need to ensure that the state is reflected in the URL.\n * In addition, we often want to split applications into multiple bundles and load them on demand.\n * Doing this transparently is not trivial.\n * \n * The Angular router solves these problems. Using the router, you can declaratively specify\n * application states, manage state transitions while taking care of the URL, and load bundles on\n * demand.\n * \n * [Read this developer guide](https://angular.io/docs/ts/latest/guide/router.html) to get an\n * overview of how the router should be used.\n * \n * \\@stable\n */\nexport class RouterModule {\n/**\n * @param {?} guard\n * @param {?} router\n */\nconstructor(  guard: any,  router: Router) {}\n/**\n * Creates a module with all the router providers and directives. It also optionally sets up an\n * application listener to perform an initial navigation.\n * \n * Options:\n * * `enableTracing` makes the router log all its internal events to the console.\n * * `useHash` enables the location strategy that uses the URL fragment instead of the history\n * API.\n * * `initialNavigation` disables the initial navigation.\n * * `errorHandler` provides a custom error handler.\n * @param {?} routes\n * @param {?=} config\n * @return {?}\n */\nstatic forRoot(routes: Routes, config?: ExtraOptions): ModuleWithProviders {\n    return {\n      ngModule: RouterModule,\n      providers: [\n        ROUTER_PROVIDERS,\n        provideRoutes(routes),\n        {\n          provide: ROUTER_FORROOT_GUARD,\n          useFactory: provideForRootGuard,\n          deps: [[Router, new Optional(), new SkipSelf()]]\n        },\n        {provide: ROUTER_CONFIGURATION, useValue: config ? config : {}},\n        {\n          provide: LocationStrategy,\n          useFactory: provideLocationStrategy,\n          deps: [\n            PlatformLocation, [new Inject(APP_BASE_HREF), new Optional()], ROUTER_CONFIGURATION\n          ]\n        },\n        {\n          provide: PreloadingStrategy,\n          useExisting: config && config.preloadingStrategy ? config.preloadingStrategy :\n                                                             NoPreloading\n        },\n        {provide: NgProbeToken, multi: true, useFactory: routerNgProbeToken},\n        provideRouterInitializer(),\n      ],\n    };\n  }\n/**\n * Creates a module with all the router directives and a provider registering routes.\n * @param {?} routes\n * @return {?}\n */\nstatic forChild(routes: Routes): ModuleWithProviders {\n    return {ngModule: RouterModule, providers: [provideRoutes(routes)]};\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: NgModule, args: [{declarations: ROUTER_DIRECTIVES, exports: ROUTER_DIRECTIVES}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ROUTER_FORROOT_GUARD, ] }, ]},\n{type: Router, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction RouterModule_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterModule.ctorParameters;\n}\n\n/**\n * @param {?} platformLocationStrategy\n * @param {?} baseHref\n * @param {?=} options\n * @return {?}\n */\nexport function provideLocationStrategy(\n    platformLocationStrategy: PlatformLocation, baseHref: string, options: ExtraOptions = {}) {\n  return options.useHash ? new HashLocationStrategy(platformLocationStrategy, baseHref) :\n                           new PathLocationStrategy(platformLocationStrategy, baseHref);\n}\n/**\n * @param {?} router\n * @return {?}\n */\nexport function provideForRootGuard(router: Router): any {\n  if (router) {\n    throw new Error(\n        `RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.`);\n  }\n  return 'guarded';\n}\n/**\n * \\@whatItDoes Registers routes.\n * \n * \\@howToUse \n * \n * ```\n * \\@NgModule({ \n *   imports: [RouterModule.forChild(ROUTES)],\n *   providers: [provideRoutes(EXTRA_ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n * \n * \\@stable\n * @param {?} routes\n * @return {?}\n */\nexport function provideRoutes(routes: Routes): any {\n  return [\n    {provide: ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: routes},\n    {provide: ROUTES, multi: true, useValue: routes},\n  ];\n}\n\n/**\n * @whatItDoes Represents an option to configure when the initial navigation is performed.\n *\n * @description\n * * 'enabled' - the initial navigation starts before the root component is created.\n * The bootstrap is blocked until the initial navigation is complete.\n * * 'disabled' - the initial navigation is not performed. The location listener is set up before\n * the root component gets created.\n * * 'legacy_enabled'- the initial navigation starts after the root component has been created.\n * The bootstrap is not blocked until the initial navigation is complete. @deprecated\n * * 'legacy_disabled'- the initial navigation is not performed. The location listener is set up\n * after @deprecated\n * the root component gets created.\n * * `true` - same as 'legacy_enabled'. @deprecated since v4\n * * `false` - same as 'legacy_disabled'. @deprecated since v4\n *\n * The 'enabled' option should be used for applications unless there is a reason to have\n * more control over when the router starts its initial navigation due to some complex\n * initialization logic. In this case, 'disabled' should be used.\n *\n * The 'legacy_enabled' and 'legacy_disabled' should not be used for new applications.\n *\n * @experimental\n */\nexport type InitialNavigation =\n    true | false | 'enabled' | 'disabled' | 'legacy_enabled' | 'legacy_disabled';\n/**\n * \\@whatItDoes Represents options to configure the router.\n * \n * \\@stable\n * @record\n */\nexport function ExtraOptions() {}\n\n\nfunction ExtraOptions_tsickle_Closure_declarations() {\n/**\n * Makes the router log all its internal events to the console.\n * @type {?|undefined}\n */\nExtraOptions.prototype.enableTracing;\n/**\n * Enables the location strategy that uses the URL fragment instead of the history API.\n * @type {?|undefined}\n */\nExtraOptions.prototype.useHash;\n/**\n * Disables the initial navigation.\n * @type {?|undefined}\n */\nExtraOptions.prototype.initialNavigation;\n/**\n * A custom error handler.\n * @type {?|undefined}\n */\nExtraOptions.prototype.errorHandler;\n/**\n * Configures a preloading strategy. See {\\@link PreloadAllModules}.\n * @type {?|undefined}\n */\nExtraOptions.prototype.preloadingStrategy;\n}\n\n\n/**\n * @whatItDoes Represents options to configure the router.\n *\n * @stable\n */\nexport interface ExtraOptions {\n  /**\n   * Makes the router log all its internal events to the console.\n   */\n  enableTracing?: boolean;\n\n  /**\n   * Enables the location strategy that uses the URL fragment instead of the history API.\n   */\n  useHash?: boolean;\n\n  /**\n   * Disables the initial navigation.\n   */\n  initialNavigation?: InitialNavigation;\n\n  /**\n   * A custom error handler.\n   */\n  errorHandler?: ErrorHandler;\n\n  /**\n   * Configures a preloading strategy. See {@link PreloadAllModules}.\n   */\n  preloadingStrategy?: any;\n}\n/**\n * @param {?} ref\n * @param {?} urlSerializer\n * @param {?} contexts\n * @param {?} location\n * @param {?} injector\n * @param {?} loader\n * @param {?} compiler\n * @param {?} config\n * @param {?=} opts\n * @param {?=} urlHandlingStrategy\n * @param {?=} routeReuseStrategy\n * @return {?}\n */\nexport function setupRouter(\n    ref: ApplicationRef, urlSerializer: UrlSerializer, contexts: ChildrenOutletContexts,\n    location: Location, injector: Injector, loader: NgModuleFactoryLoader, compiler: Compiler,\n    config: Route[][], opts: ExtraOptions = {}, urlHandlingStrategy?: UrlHandlingStrategy,\n    routeReuseStrategy?: RouteReuseStrategy) {\n  const /** @type {?} */ router = new Router(\n      null, urlSerializer, contexts, location, injector, loader, compiler, flatten(config));\n\n  if (urlHandlingStrategy) {\n    router.urlHandlingStrategy = urlHandlingStrategy;\n  }\n\n  if (routeReuseStrategy) {\n    router.routeReuseStrategy = routeReuseStrategy;\n  }\n\n  if (opts.errorHandler) {\n    router.errorHandler = opts.errorHandler;\n  }\n\n  if (opts.enableTracing) {\n    const /** @type {?} */ dom = getDOM();\n    router.events.subscribe(e => {\n      dom.logGroup(`Router Event: ${(( /** @type {?} */((<any>e.constructor)))).name}`);\n      dom.log(e.toString());\n      dom.log(e);\n      dom.logGroupEnd();\n    });\n  }\n\n  return router;\n}\n/**\n * @param {?} router\n * @return {?}\n */\nexport function rootRoute(router: Router): ActivatedRoute {\n  return router.routerState.root;\n}\n/**\n * To initialize the router properly we need to do in two steps:\n * \n * We need to start the navigation in a APP_INITIALIZER to block the bootstrap if\n * a resolver or a guards executes asynchronously. Second, we need to actually run\n * activation in a BOOTSTRAP_LISTENER. We utilize the afterPreactivation\n * hook provided by the router to do that.\n * \n * The router navigation starts, reaches the point when preactivation is done, and then\n * pauses. It waits for the hook to be resolved. We then resolve it only in a bootstrap listener.\n */\nexport class RouterInitializer {\nprivate initNavigation: boolean = false;\nprivate resultOfPreactivationDone = new Subject<void>();\n/**\n * @param {?} injector\n */\nconstructor(private injector: Injector) {}\n/**\n * @return {?}\n */\nappInitializer(): Promise<any> {\n    const /** @type {?} */ p: Promise<any> = this.injector.get(LOCATION_INITIALIZED, Promise.resolve(null));\n    return p.then(() => {\n      let /** @type {?} */ resolve: Function = /** @type {?} */(( null));\n      const /** @type {?} */ res = new Promise(r => resolve = r);\n      const /** @type {?} */ router = this.injector.get(Router);\n      const /** @type {?} */ opts = this.injector.get(ROUTER_CONFIGURATION);\n\n      if (this.isLegacyDisabled(opts) || this.isLegacyEnabled(opts)) {\n        resolve(true);\n\n      } else if (opts.initialNavigation === 'disabled') {\n        router.setUpLocationChangeListener();\n        resolve(true);\n\n      } else if (opts.initialNavigation === 'enabled') {\n        router.hooks.afterPreactivation = () => {\n          // only the initial navigation should be delayed\n          if (!this.initNavigation) {\n            this.initNavigation = true;\n            resolve(true);\n            return this.resultOfPreactivationDone;\n\n            // subsequent navigations should not be delayed\n          } else {\n            return /** @type {?} */(( of (null) as any));\n          }\n        };\n        router.initialNavigation();\n\n      } else {\n        throw new Error(`Invalid initialNavigation options: '${opts.initialNavigation}'`);\n      }\n\n      return res;\n    });\n  }\n/**\n * @param {?} bootstrappedComponentRef\n * @return {?}\n */\nbootstrapListener(bootstrappedComponentRef: ComponentRef<any>): void {\n    const /** @type {?} */ opts = this.injector.get(ROUTER_CONFIGURATION);\n    const /** @type {?} */ preloader = this.injector.get(RouterPreloader);\n    const /** @type {?} */ router = this.injector.get(Router);\n    const /** @type {?} */ ref = this.injector.get(ApplicationRef);\n\n    if (bootstrappedComponentRef !== ref.components[0]) {\n      return;\n    }\n\n    if (this.isLegacyEnabled(opts)) {\n      router.initialNavigation();\n    } else if (this.isLegacyDisabled(opts)) {\n      router.setUpLocationChangeListener();\n    }\n\n    preloader.setUpPreloading();\n    router.resetRootComponentType(ref.componentTypes[0]);\n    this.resultOfPreactivationDone.next( /** @type {?} */((null)));\n    this.resultOfPreactivationDone.complete();\n  }\n/**\n * @param {?} opts\n * @return {?}\n */\n\nprivate isLegacyEnabled(opts: ExtraOptions): boolean {\n    return opts.initialNavigation === 'legacy_enabled' || opts.initialNavigation === true ||\n        opts.initialNavigation === undefined;\n  }\n/**\n * @param {?} opts\n * @return {?}\n */\n\nprivate isLegacyDisabled(opts: ExtraOptions): boolean {\n    return opts.initialNavigation === 'legacy_disabled' || opts.initialNavigation === false;\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: Injector, },\n];\n}\n\nfunction RouterInitializer_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterInitializer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterInitializer.ctorParameters;\n/** @type {?} */\nRouterInitializer.prototype.initNavigation;\n/** @type {?} */\nRouterInitializer.prototype.resultOfPreactivationDone;\n/** @type {?} */\nRouterInitializer.prototype.injector;\n}\n\n/**\n * @param {?} r\n * @return {?}\n */\nexport function getAppInitializer(r: RouterInitializer) {\n  return r.appInitializer.bind(r);\n}\n/**\n * @param {?} r\n * @return {?}\n */\nexport function getBootstrapListener(r: RouterInitializer) {\n  return r.bootstrapListener.bind(r);\n}\n/**\n * A token for the router initializer that will be called after the app is bootstrapped.\n * \n * \\@experimental\n */\nexport const /** @type {?} */ ROUTER_INITIALIZER =\n    new InjectionToken<(compRef: ComponentRef<any>) => void>('Router Initializer');\n/**\n * @return {?}\n */\nexport function provideRouterInitializer() {\n  return [\n    RouterInitializer,\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: getAppInitializer,\n      deps: [RouterInitializer]\n    },\n    {provide: ROUTER_INITIALIZER, useFactory: getBootstrapListener, deps: [RouterInitializer]},\n    {provide: APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER},\n  ];\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n*@license\n*Copyright Google Inc. All Rights Reserved.\n*\n*Use of this source code is governed by an MIT-style license that can be\n*found in the LICENSE file at https://angular.io/license\n*/\n\nimport {Compiler, Injectable, Injector, NgModuleFactoryLoader, NgModuleRef, OnDestroy} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport {from} from 'rxjs/observable/from';\nimport {of } from 'rxjs/observable/of';\nimport {_catch} from 'rxjs/operator/catch';\nimport {concatMap} from 'rxjs/operator/concatMap';\nimport {filter} from 'rxjs/operator/filter';\nimport {mergeAll} from 'rxjs/operator/mergeAll';\nimport {mergeMap} from 'rxjs/operator/mergeMap';\nimport {LoadedRouterConfig, Route, Routes} from './config';\nimport {Event, NavigationEnd, RouteConfigLoadEnd, RouteConfigLoadStart} from './events';\nimport {Router} from './router';\nimport {RouterConfigLoader} from './router_config_loader';\n/**\n * \\@whatItDoes Provides a preloading strategy.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class PreloadingStrategy {\n  abstract preload(route: Route, fn: () => Observable<any>): Observable<any>;\n}\n\nfunction PreloadingStrategy_tsickle_Closure_declarations() {\n\n/**\n * @abstract\n * @param {?} route\n * @param {?} fn\n * @return {?}\n */\nPreloadingStrategy.prototype.preload = function(route, fn) {};\n}\n\n/**\n * \\@whatItDoes Provides a preloading strategy that preloads all modules as quickly as possible.\n * \n * \\@howToUse \n * \n * ```\n * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n * \n * \\@experimental\n */\nexport class PreloadAllModules implements PreloadingStrategy {\n/**\n * @param {?} route\n * @param {?} fn\n * @return {?}\n */\npreload(route: Route, fn: () => Observable<any>): Observable<any> {\n    return _catch.call(fn(), () => of (null));\n  }\n}\n/**\n * \\@whatItDoes Provides a preloading strategy that does not preload any modules.\n * \n * \\@description \n * \n * This strategy is enabled by default.\n * \n * \\@experimental\n */\nexport class NoPreloading implements PreloadingStrategy {\n/**\n * @param {?} route\n * @param {?} fn\n * @return {?}\n */\npreload(route: Route, fn: () => Observable<any>): Observable<any> { return of (null); }\n}\n/**\n * The preloader optimistically loads all router configurations to\n * make navigations into lazily-loaded sections of the application faster.\n * \n * The preloader runs in the background. When the router bootstraps, the preloader\n * starts listening to all navigation events. After every such event, the preloader\n * will check if any configurations can be loaded lazily.\n * \n * If a route is protected by `canLoad` guards, the preloaded will not load it.\n * \n * \\@stable\n */\nexport class RouterPreloader implements OnDestroy {\nprivate loader: RouterConfigLoader;\nprivate subscription: Subscription;\n/**\n * @param {?} router\n * @param {?} moduleLoader\n * @param {?} compiler\n * @param {?} injector\n * @param {?} preloadingStrategy\n */\nconstructor(\nprivate router: Router, moduleLoader: NgModuleFactoryLoader, compiler: Compiler,\nprivate injector: Injector,\nprivate preloadingStrategy: PreloadingStrategy) {\n    const /** @type {?} */ onStartLoad = (r: Route) => router.triggerEvent(new RouteConfigLoadStart(r));\n    const /** @type {?} */ onEndLoad = (r: Route) => router.triggerEvent(new RouteConfigLoadEnd(r));\n\n    this.loader = new RouterConfigLoader(moduleLoader, compiler, onStartLoad, onEndLoad);\n  };\n/**\n * @return {?}\n */\nsetUpPreloading(): void {\n    const /** @type {?} */ navigations$ = filter.call(this.router.events, (e: Event) => e instanceof NavigationEnd);\n    this.subscription = concatMap.call(navigations$, () => this.preload()).subscribe(() => {});\n  }\n/**\n * @return {?}\n */\npreload(): Observable<any> {\n    const /** @type {?} */ ngModule = this.injector.get(NgModuleRef);\n    return this.processRoutes(ngModule, this.router.config);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void { this.subscription.unsubscribe(); }\n/**\n * @param {?} ngModule\n * @param {?} routes\n * @return {?}\n */\n\nprivate processRoutes(ngModule: NgModuleRef<any>, routes: Routes): Observable<void> {\n    const /** @type {?} */ res: Observable<any>[] = [];\n    for (const /** @type {?} */ route of routes) {\n      // we already have the config loaded, just recurse\n      if (route.loadChildren && !route.canLoad && route._loadedConfig) {\n        const /** @type {?} */ childConfig = route._loadedConfig;\n        res.push(this.processRoutes(childConfig.module, childConfig.routes));\n\n        // no config loaded, fetch the config\n      } else if (route.loadChildren && !route.canLoad) {\n        res.push(this.preloadConfig(ngModule, route));\n\n        // recurse into children\n      } else if (route.children) {\n        res.push(this.processRoutes(ngModule, route.children));\n      }\n    }\n    return mergeAll.call(from(res));\n  }\n/**\n * @param {?} ngModule\n * @param {?} route\n * @return {?}\n */\n\nprivate preloadConfig(ngModule: NgModuleRef<any>, route: Route): Observable<void> {\n    return this.preloadingStrategy.preload(route, () => {\n      const /** @type {?} */ loaded$ = this.loader.load(ngModule.injector, route);\n      return mergeMap.call(loaded$, (config: LoadedRouterConfig) => {\n        route._loadedConfig = config;\n        return this.processRoutes(config.module, config.routes);\n      });\n    });\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: Router, },\n{type: NgModuleFactoryLoader, },\n{type: Compiler, },\n{type: Injector, },\n{type: PreloadingStrategy, },\n];\n}\n\nfunction RouterPreloader_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterPreloader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterPreloader.ctorParameters;\n/** @type {?} */\nRouterPreloader.prototype.loader;\n/** @type {?} */\nRouterPreloader.prototype.subscription;\n/** @type {?} */\nRouterPreloader.prototype.router;\n/** @type {?} */\nRouterPreloader.prototype.injector;\n/** @type {?} */\nRouterPreloader.prototype.preloadingStrategy;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\n\nimport {Route} from './config';\nimport {ActivatedRouteSnapshot, RouterStateSnapshot} from './router_state';\n/**\n * \\@whatItDoes Interface that a class can implement to be a guard deciding if a route can be\n * activated.\n * \n * \\@howToUse \n * \n * ```\n * class UserToken {}\n * class Permissions {\n *   canActivate(user: UserToken, id: string): boolean {\n *     return true;\n *   }\n * }\n * \n * \\@Injectable() \n * class CanActivateTeam implements CanActivate {\n *   constructor(private permissions: Permissions, private currentUser: UserToken) {}\n * \n *   canActivate(\n *     route: ActivatedRouteSnapshot,\n *     state: RouterStateSnapshot\n *   ): Observable<boolean>|Promise<boolean>|boolean {\n *     return this.permissions.canActivate(this.currentUser, route.params.id);\n *   }\n * }\n * \n * \\@NgModule({ \n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         canActivate: [CanActivateTeam]\n *       }\n *     ])\n *   ],\n *   providers: [CanActivateTeam, UserToken, Permissions]\n * })\n * class AppModule {}\n * ```\n * \n * You can alternatively provide a function with the `canActivate` signature:\n * \n * ```\n * \\@NgModule({ \n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         canActivate: ['canActivateTeam']\n *       }\n *     ])\n *   ],\n *   providers: [\n *     {\n *       provide: 'canActivateTeam',\n *       useValue: (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => true\n *     }\n *   ]\n * })\n * class AppModule {}\n * ```\n * \n * \\@stable\n * @record\n */\nexport function CanActivate() {}\n\n\nfunction CanActivate_tsickle_Closure_declarations() {\n/** @type {?} */\nCanActivate.prototype.canActivate;\n}\n\n\n\n/**\n * @whatItDoes Interface that a class can implement to be a guard deciding if a route can be\n * activated.\n *\n * @howToUse\n *\n * ```\n * class UserToken {}\n * class Permissions {\n *   canActivate(user: UserToken, id: string): boolean {\n *     return true;\n *   }\n * }\n *\n * @Injectable()\n * class CanActivateTeam implements CanActivate {\n *   constructor(private permissions: Permissions, private currentUser: UserToken) {}\n *\n *   canActivate(\n *     route: ActivatedRouteSnapshot,\n *     state: RouterStateSnapshot\n *   ): Observable<boolean>|Promise<boolean>|boolean {\n *     return this.permissions.canActivate(this.currentUser, route.params.id);\n *   }\n * }\n *\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         canActivate: [CanActivateTeam]\n *       }\n *     ])\n *   ],\n *   providers: [CanActivateTeam, UserToken, Permissions]\n * })\n * class AppModule {}\n * ```\n *\n * You can alternatively provide a function with the `canActivate` signature:\n *\n * ```\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         canActivate: ['canActivateTeam']\n *       }\n *     ])\n *   ],\n *   providers: [\n *     {\n *       provide: 'canActivateTeam',\n *       useValue: (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => true\n *     }\n *   ]\n * })\n * class AppModule {}\n * ```\n *\n * @stable\n */\nexport interface CanActivate {\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):\n      Observable<boolean>|Promise<boolean>|boolean;\n}\n/**\n * \\@whatItDoes Interface that a class can implement to be a guard deciding if a child route can be\n * activated.\n * \n * \\@howToUse \n * \n * ```\n * class UserToken {}\n * class Permissions {\n *   canActivate(user: UserToken, id: string): boolean {\n *     return true;\n *   }\n * }\n * \n * \\@Injectable() \n * class CanActivateTeam implements CanActivateChild {\n *   constructor(private permissions: Permissions, private currentUser: UserToken) {}\n * \n *   canActivateChild(\n *     route: ActivatedRouteSnapshot,\n *     state: RouterStateSnapshot\n *   ): Observable<boolean>|Promise<boolean>|boolean {\n *     return this.permissions.canActivate(this.currentUser, route.params.id);\n *   }\n * }\n * \n * \\@NgModule({ \n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'root',\n *         canActivateChild: [CanActivateTeam],\n *         children: [\n *           {\n *              path: 'team/:id',\n *              component: Team\n *           }\n *         ]\n *       }\n *     ])\n *   ],\n *   providers: [CanActivateTeam, UserToken, Permissions]\n * })\n * class AppModule {}\n * ```\n * \n * You can alternatively provide a function with the `canActivateChild` signature:\n * \n * ```\n * \\@NgModule({ \n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'root',\n *         canActivateChild: ['canActivateTeam'],\n *         children: [\n *           {\n *             path: 'team/:id',\n *             component: Team\n *           }\n *         ]\n *       }\n *     ])\n *   ],\n *   providers: [\n *     {\n *       provide: 'canActivateTeam',\n *       useValue: (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => true\n *     }\n *   ]\n * })\n * class AppModule {}\n * ```\n * \n * \\@stable\n * @record\n */\nexport function CanActivateChild() {}\n\n\nfunction CanActivateChild_tsickle_Closure_declarations() {\n/** @type {?} */\nCanActivateChild.prototype.canActivateChild;\n}\n\n\n/**\n * @whatItDoes Interface that a class can implement to be a guard deciding if a child route can be\n * activated.\n *\n * @howToUse\n *\n * ```\n * class UserToken {}\n * class Permissions {\n *   canActivate(user: UserToken, id: string): boolean {\n *     return true;\n *   }\n * }\n *\n * @Injectable()\n * class CanActivateTeam implements CanActivateChild {\n *   constructor(private permissions: Permissions, private currentUser: UserToken) {}\n *\n *   canActivateChild(\n *     route: ActivatedRouteSnapshot,\n *     state: RouterStateSnapshot\n *   ): Observable<boolean>|Promise<boolean>|boolean {\n *     return this.permissions.canActivate(this.currentUser, route.params.id);\n *   }\n * }\n *\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'root',\n *         canActivateChild: [CanActivateTeam],\n *         children: [\n *           {\n *              path: 'team/:id',\n *              component: Team\n *           }\n *         ]\n *       }\n *     ])\n *   ],\n *   providers: [CanActivateTeam, UserToken, Permissions]\n * })\n * class AppModule {}\n * ```\n *\n * You can alternatively provide a function with the `canActivateChild` signature:\n *\n * ```\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'root',\n *         canActivateChild: ['canActivateTeam'],\n *         children: [\n *           {\n *             path: 'team/:id',\n *             component: Team\n *           }\n *         ]\n *       }\n *     ])\n *   ],\n *   providers: [\n *     {\n *       provide: 'canActivateTeam',\n *       useValue: (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => true\n *     }\n *   ]\n * })\n * class AppModule {}\n * ```\n *\n * @stable\n */\nexport interface CanActivateChild {\n  canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot):\n      Observable<boolean>|Promise<boolean>|boolean;\n}\n/**\n * \\@whatItDoes Interface that a class can implement to be a guard deciding if a route can be\n * deactivated.\n * \n * \\@howToUse \n * \n * ```\n * class UserToken {}\n * class Permissions {\n *   canDeactivate(user: UserToken, id: string): boolean {\n *     return true;\n *   }\n * }\n * \n * \\@Injectable() \n * class CanDeactivateTeam implements CanDeactivate<TeamComponent> {\n *   constructor(private permissions: Permissions, private currentUser: UserToken) {}\n * \n *   canDeactivate(\n *     component: TeamComponent,\n *     currentRoute: ActivatedRouteSnapshot,\n *     currentState: RouterStateSnapshot,\n *     nextState: RouterStateSnapshot\n *   ): Observable<boolean>|Promise<boolean>|boolean {\n *     return this.permissions.canDeactivate(this.currentUser, route.params.id);\n *   }\n * }\n * \n * \\@NgModule({ \n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         canDeactivate: [CanDeactivateTeam]\n *       }\n *     ])\n *   ],\n *   providers: [CanDeactivateTeam, UserToken, Permissions]\n * })\n * class AppModule {}\n * ```\n * \n * You can alternatively provide a function with the `canDeactivate` signature:\n * \n * ```\n * \\@NgModule({ \n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         canDeactivate: ['canDeactivateTeam']\n *       }\n *     ])\n *   ],\n *   providers: [\n *     {\n *       provide: 'canDeactivateTeam',\n *       useValue: (component: TeamComponent, currentRoute: ActivatedRouteSnapshot, currentState:\n * RouterStateSnapshot, nextState: RouterStateSnapshot) => true\n *     }\n *   ]\n * })\n * class AppModule {}\n * ```\n * \n * \\@stable\n * @record\n */\nexport function CanDeactivate() {}\n\n\nfunction CanDeactivate_tsickle_Closure_declarations() {\n/** @type {?} */\nCanDeactivate.prototype.canDeactivate;\n}\n\n\n/**\n * @whatItDoes Interface that a class can implement to be a guard deciding if a route can be\n * deactivated.\n *\n * @howToUse\n *\n * ```\n * class UserToken {}\n * class Permissions {\n *   canDeactivate(user: UserToken, id: string): boolean {\n *     return true;\n *   }\n * }\n *\n * @Injectable()\n * class CanDeactivateTeam implements CanDeactivate<TeamComponent> {\n *   constructor(private permissions: Permissions, private currentUser: UserToken) {}\n *\n *   canDeactivate(\n *     component: TeamComponent,\n *     currentRoute: ActivatedRouteSnapshot,\n *     currentState: RouterStateSnapshot,\n *     nextState: RouterStateSnapshot\n *   ): Observable<boolean>|Promise<boolean>|boolean {\n *     return this.permissions.canDeactivate(this.currentUser, route.params.id);\n *   }\n * }\n *\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         canDeactivate: [CanDeactivateTeam]\n *       }\n *     ])\n *   ],\n *   providers: [CanDeactivateTeam, UserToken, Permissions]\n * })\n * class AppModule {}\n * ```\n *\n * You can alternatively provide a function with the `canDeactivate` signature:\n *\n * ```\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         canDeactivate: ['canDeactivateTeam']\n *       }\n *     ])\n *   ],\n *   providers: [\n *     {\n *       provide: 'canDeactivateTeam',\n *       useValue: (component: TeamComponent, currentRoute: ActivatedRouteSnapshot, currentState:\n * RouterStateSnapshot, nextState: RouterStateSnapshot) => true\n *     }\n *   ]\n * })\n * class AppModule {}\n * ```\n *\n * @stable\n */\nexport interface CanDeactivate<T> {\n  canDeactivate(\n      component: T, currentRoute: ActivatedRouteSnapshot, currentState: RouterStateSnapshot,\n      nextState?: RouterStateSnapshot): Observable<boolean>|Promise<boolean>|boolean;\n}\n/**\n * \\@whatItDoes Interface that class can implement to be a data provider.\n * \n * \\@howToUse \n * \n * ```\n * class Backend {\n *   fetchTeam(id: string) {\n *     return 'someTeam';\n *   }\n * }\n * \n * \\@Injectable() \n * class TeamResolver implements Resolve<Team> {\n *   constructor(private backend: Backend) {}\n * \n *   resolve(\n *     route: ActivatedRouteSnapshot,\n *     state: RouterStateSnapshot\n *   ): Observable<any>|Promise<any>|any {\n *     return this.backend.fetchTeam(route.params.id);\n *   }\n * }\n * \n * \\@NgModule({ \n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         resolve: {\n *           team: TeamResolver\n *         }\n *       }\n *     ])\n *   ],\n *   providers: [TeamResolver]\n * })\n * class AppModule {}\n * ```\n * \n * You can alternatively provide a function with the `resolve` signature:\n * \n * ```\n * \\@NgModule({ \n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         resolve: {\n *           team: 'teamResolver'\n *         }\n *       }\n *     ])\n *   ],\n *   providers: [\n *     {\n *       provide: 'teamResolver',\n *       useValue: (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => 'team'\n *     }\n *   ]\n * })\n * class AppModule {}\n * ```\n * \\@stable\n * @record\n */\nexport function Resolve() {}\n\n\nfunction Resolve_tsickle_Closure_declarations() {\n/** @type {?} */\nResolve.prototype.resolve;\n}\n\n\n/**\n * @whatItDoes Interface that class can implement to be a data provider.\n *\n * @howToUse\n *\n * ```\n * class Backend {\n *   fetchTeam(id: string) {\n *     return 'someTeam';\n *   }\n * }\n *\n * @Injectable()\n * class TeamResolver implements Resolve<Team> {\n *   constructor(private backend: Backend) {}\n *\n *   resolve(\n *     route: ActivatedRouteSnapshot,\n *     state: RouterStateSnapshot\n *   ): Observable<any>|Promise<any>|any {\n *     return this.backend.fetchTeam(route.params.id);\n *   }\n * }\n *\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         resolve: {\n *           team: TeamResolver\n *         }\n *       }\n *     ])\n *   ],\n *   providers: [TeamResolver]\n * })\n * class AppModule {}\n * ```\n *\n * You can alternatively provide a function with the `resolve` signature:\n *\n * ```\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         resolve: {\n *           team: 'teamResolver'\n *         }\n *       }\n *     ])\n *   ],\n *   providers: [\n *     {\n *       provide: 'teamResolver',\n *       useValue: (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => 'team'\n *     }\n *   ]\n * })\n * class AppModule {}\n * ```\n * @stable\n */\nexport interface Resolve<T> {\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<T>|Promise<T>|T;\n}\n/**\n * \\@whatItDoes Interface that a class can implement to be a guard deciding if a children can be\n * loaded.\n * \n * \\@howToUse \n * \n * ```\n * class UserToken {}\n * class Permissions {\n *   canLoadChildren(user: UserToken, id: string): boolean {\n *     return true;\n *   }\n * }\n * \n * \\@Injectable() \n * class CanLoadTeamSection implements CanLoad {\n *   constructor(private permissions: Permissions, private currentUser: UserToken) {}\n * \n *   canLoad(route: Route): Observable<boolean>|Promise<boolean>|boolean {\n *     return this.permissions.canLoadChildren(this.currentUser, route);\n *   }\n * }\n * \n * \\@NgModule({ \n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         loadChildren: 'team.js',\n *         canLoad: [CanLoadTeamSection]\n *       }\n *     ])\n *   ],\n *   providers: [CanLoadTeamSection, UserToken, Permissions]\n * })\n * class AppModule {}\n * ```\n * \n * You can alternatively provide a function with the `canLoad` signature:\n * \n * ```\n * \\@NgModule({ \n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         loadChildren: 'team.js',\n *         canLoad: ['canLoadTeamSection']\n *       }\n *     ])\n *   ],\n *   providers: [\n *     {\n *       provide: 'canLoadTeamSection',\n *       useValue: (route: Route) => true\n *     }\n *   ]\n * })\n * class AppModule {}\n * ```\n * \n * \\@stable\n * @record\n */\nexport function CanLoad() {}\n\n\nfunction CanLoad_tsickle_Closure_declarations() {\n/** @type {?} */\nCanLoad.prototype.canLoad;\n}\n\n\n\n/**\n * @whatItDoes Interface that a class can implement to be a guard deciding if a children can be\n * loaded.\n *\n * @howToUse\n *\n * ```\n * class UserToken {}\n * class Permissions {\n *   canLoadChildren(user: UserToken, id: string): boolean {\n *     return true;\n *   }\n * }\n *\n * @Injectable()\n * class CanLoadTeamSection implements CanLoad {\n *   constructor(private permissions: Permissions, private currentUser: UserToken) {}\n *\n *   canLoad(route: Route): Observable<boolean>|Promise<boolean>|boolean {\n *     return this.permissions.canLoadChildren(this.currentUser, route);\n *   }\n * }\n *\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         loadChildren: 'team.js',\n *         canLoad: [CanLoadTeamSection]\n *       }\n *     ])\n *   ],\n *   providers: [CanLoadTeamSection, UserToken, Permissions]\n * })\n * class AppModule {}\n * ```\n *\n * You can alternatively provide a function with the `canLoad` signature:\n *\n * ```\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamCmp,\n *         loadChildren: 'team.js',\n *         canLoad: ['canLoadTeamSection']\n *       }\n *     ])\n *   ],\n *   providers: [\n *     {\n *       provide: 'canLoadTeamSection',\n *       useValue: (route: Route) => true\n *     }\n *   ]\n * })\n * class AppModule {}\n * ```\n *\n * @stable\n */\nexport interface CanLoad { canLoad(route: Route): Observable<boolean>|Promise<boolean>|boolean; }\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Attribute, ChangeDetectorRef, ComponentFactoryResolver, ComponentRef, Directive, EventEmitter, Injector, OnDestroy, OnInit, Output, ViewContainerRef} from '@angular/core';\n\nimport {ChildrenOutletContexts} from '../router_outlet_context';\nimport {ActivatedRoute} from '../router_state';\nimport {PRIMARY_OUTLET} from '../shared';\n/**\n * \\@whatItDoes Acts as a placeholder that Angular dynamically fills based on the current router\n * state.\n * \n * \\@howToUse \n * \n * ```\n * <router-outlet></router-outlet>\n * <router-outlet name='left'></router-outlet>\n * <router-outlet name='right'></router-outlet>\n * ```\n * \n * A router outlet will emit an activate event any time a new component is being instantiated,\n * and a deactivate event when it is being destroyed.\n * \n * ```\n * <router-outlet\n *   (activate)='onActivate($event)'\n *   (deactivate)='onDeactivate($event)'></router-outlet>\n * ```\n * \\@ngModule RouterModule\n * \n * \\@stable\n */\nexport class RouterOutlet implements OnDestroy, OnInit {\nprivate activated: ComponentRef<any>|null = null;\nprivate _activatedRoute: ActivatedRoute|null = null;\nprivate name: string;\n\n   activateEvents = new EventEmitter<any>();\n   deactivateEvents = new EventEmitter<any>();\n/**\n * @param {?} parentContexts\n * @param {?} location\n * @param {?} resolver\n * @param {?} name\n * @param {?} changeDetector\n */\nconstructor(\nprivate parentContexts: ChildrenOutletContexts,\nprivate location: ViewContainerRef,\nprivate resolver: ComponentFactoryResolver,  name: string,\nprivate changeDetector: ChangeDetectorRef) {\n    this.name = name || PRIMARY_OUTLET;\n    parentContexts.onChildOutletCreated(this.name, this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void { this.parentContexts.onChildOutletDestroyed(this.name); }\n/**\n * @return {?}\n */\nngOnInit(): void {\n    if (!this.activated) {\n      // If the outlet was not instantiated at the time the route got activated we need to populate\n      // the outlet when it is initialized (ie inside a NgIf)\n      const /** @type {?} */ context = this.parentContexts.getContext(this.name);\n      if (context && context.route) {\n        if (context.attachRef) {\n          // `attachRef` is populated when there is an existing component to mount\n          this.attach(context.attachRef, context.route);\n        } else {\n          // otherwise the component defined in the configuration is created\n          this.activateWith(context.route, context.resolver || null);\n        }\n      }\n    }\n  }\n/**\n * @deprecated since v4 *\n * @return {?}\n */\nget locationInjector(): Injector { return this.location.injector; }\n/**\n * @deprecated since v4 *\n * @return {?}\n */\nget locationFactoryResolver(): ComponentFactoryResolver { return this.resolver; }\n/**\n * @return {?}\n */\nget isActivated(): boolean { return !!this.activated; }\n/**\n * @return {?}\n */\nget component(): Object {\n    if (!this.activated) throw new Error('Outlet is not activated');\n    return this.activated.instance;\n  }\n/**\n * @return {?}\n */\nget activatedRoute(): ActivatedRoute {\n    if (!this.activated) throw new Error('Outlet is not activated');\n    return /** @type {?} */(( this._activatedRoute as ActivatedRoute));\n  }\n/**\n * @return {?}\n */\nget activatedRouteData() {\n    if (this._activatedRoute) {\n      return this._activatedRoute.snapshot.data;\n    }\n    return {};\n  }\n/**\n * Called when the `RouteReuseStrategy` instructs to detach the subtree\n * @return {?}\n */\ndetach(): ComponentRef<any> {\n    if (!this.activated) throw new Error('Outlet is not activated');\n    this.location.detach();\n    const /** @type {?} */ cmp = this.activated;\n    this.activated = null;\n    this._activatedRoute = null;\n    return cmp;\n  }\n/**\n * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n * @param {?} ref\n * @param {?} activatedRoute\n * @return {?}\n */\nattach(ref: ComponentRef<any>, activatedRoute: ActivatedRoute) {\n    this.activated = ref;\n    this._activatedRoute = activatedRoute;\n    this.location.insert(ref.hostView);\n  }\n/**\n * @return {?}\n */\ndeactivate(): void {\n    if (this.activated) {\n      const /** @type {?} */ c = this.component;\n      this.activated.destroy();\n      this.activated = null;\n      this._activatedRoute = null;\n      this.deactivateEvents.emit(c);\n    }\n  }\n/**\n * @param {?} activatedRoute\n * @param {?} resolver\n * @return {?}\n */\nactivateWith(activatedRoute: ActivatedRoute, resolver: ComponentFactoryResolver|null) {\n    if (this.isActivated) {\n      throw new Error('Cannot activate an already activated outlet');\n    }\n    this._activatedRoute = activatedRoute;\n    const /** @type {?} */ snapshot = activatedRoute._futureSnapshot;\n    const /** @type {?} */ component = /** @type {?} */(( <any> /** @type {?} */((snapshot._routeConfig)).component));\n    resolver = resolver || this.resolver;\n    const /** @type {?} */ factory = resolver.resolveComponentFactory(component);\n    const /** @type {?} */ childContexts = this.parentContexts.getOrCreateContext(this.name).children;\n    const /** @type {?} */ injector = new OutletInjector(activatedRoute, childContexts, this.location.injector);\n    this.activated = this.location.createComponent(factory, this.location.length, injector);\n    // Calling `markForCheck` to make sure we will run the change detection when the\n    // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.\n    this.changeDetector.markForCheck();\n    this.activateEvents.emit(this.activated.instance);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: 'router-outlet', exportAs: 'outlet'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ChildrenOutletContexts, },\n{type: ViewContainerRef, },\n{type: ComponentFactoryResolver, },\n{type: undefined, decorators: [{ type: Attribute, args: ['name', ] }, ]},\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"activateEvents\": [{ type: Output, args: ['activate', ] },],\n\"deactivateEvents\": [{ type: Output, args: ['deactivate', ] },],\n};\n}\n\nfunction RouterOutlet_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterOutlet.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterOutlet.ctorParameters;\n/** @type {?} */\nRouterOutlet.propDecorators;\n/** @type {?} */\nRouterOutlet.prototype.activated;\n/** @type {?} */\nRouterOutlet.prototype._activatedRoute;\n/** @type {?} */\nRouterOutlet.prototype.name;\n/** @type {?} */\nRouterOutlet.prototype.activateEvents;\n/** @type {?} */\nRouterOutlet.prototype.deactivateEvents;\n/** @type {?} */\nRouterOutlet.prototype.parentContexts;\n/** @type {?} */\nRouterOutlet.prototype.location;\n/** @type {?} */\nRouterOutlet.prototype.resolver;\n/** @type {?} */\nRouterOutlet.prototype.changeDetector;\n}\n\nclass OutletInjector implements Injector {\n/**\n * @param {?} route\n * @param {?} childContexts\n * @param {?} parent\n */\nconstructor(\nprivate route: ActivatedRoute,\nprivate childContexts: ChildrenOutletContexts,\nprivate parent: Injector) {}\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue?: any): any {\n    if (token === ActivatedRoute) {\n      return this.route;\n    }\n\n    if (token === ChildrenOutletContexts) {\n      return this.childContexts;\n    }\n\n    return this.parent.get(token, notFoundValue);\n  }\n}\n\nfunction OutletInjector_tsickle_Closure_declarations() {\n/** @type {?} */\nOutletInjector.prototype.route;\n/** @type {?} */\nOutletInjector.prototype.childContexts;\n/** @type {?} */\nOutletInjector.prototype.parent;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentFactoryResolver, ComponentRef} from '@angular/core';\n\nimport {RouterOutlet} from './directives/router_outlet';\nimport {ActivatedRoute} from './router_state';\n/**\n * Store contextual information about a {\\@link RouterOutlet}\n * \n * \\@stable\n */\nexport class OutletContext {\n  outlet: RouterOutlet|null = null;\n  route: ActivatedRoute|null = null;\n  resolver: ComponentFactoryResolver|null = null;\n  children = new ChildrenOutletContexts();\n  attachRef: ComponentRef<any>|null = null;\n}\n\nfunction OutletContext_tsickle_Closure_declarations() {\n/** @type {?} */\nOutletContext.prototype.outlet;\n/** @type {?} */\nOutletContext.prototype.route;\n/** @type {?} */\nOutletContext.prototype.resolver;\n/** @type {?} */\nOutletContext.prototype.children;\n/** @type {?} */\nOutletContext.prototype.attachRef;\n}\n\n/**\n * Store contextual information about the children (= nested) {\\@link RouterOutlet}\n * \n * \\@stable\n */\nexport class ChildrenOutletContexts {\nprivate contexts = new Map<string, OutletContext>();\n/**\n * Called when a `RouterOutlet` directive is instantiated\n * @param {?} childName\n * @param {?} outlet\n * @return {?}\n */\nonChildOutletCreated(childName: string, outlet: RouterOutlet): void {\n    const /** @type {?} */ context = this.getOrCreateContext(childName);\n    context.outlet = outlet;\n    this.contexts.set(childName, context);\n  }\n/**\n * Called when a `RouterOutlet` directive is destroyed.\n * We need to keep the context as the outlet could be destroyed inside a NgIf and might be\n * re-created later.\n * @param {?} childName\n * @return {?}\n */\nonChildOutletDestroyed(childName: string): void {\n    const /** @type {?} */ context = this.getContext(childName);\n    if (context) {\n      context.outlet = null;\n    }\n  }\n/**\n * Called when the corresponding route is deactivated during navigation.\n * Because the component get destroyed, all children outlet are destroyed.\n * @return {?}\n */\nonOutletDeactivated(): Map<string, OutletContext> {\n    const /** @type {?} */ contexts = this.contexts;\n    this.contexts = new Map();\n    return contexts;\n  }\n/**\n * @param {?} contexts\n * @return {?}\n */\nonOutletReAttached(contexts: Map<string, OutletContext>) { this.contexts = contexts; }\n/**\n * @param {?} childName\n * @return {?}\n */\ngetOrCreateContext(childName: string): OutletContext {\n    let /** @type {?} */ context = this.getContext(childName);\n\n    if (!context) {\n      context = new OutletContext();\n      this.contexts.set(childName, context);\n    }\n\n    return context;\n  }\n/**\n * @param {?} childName\n * @return {?}\n */\ngetContext(childName: string): OutletContext|null { return this.contexts.get(childName) || null; }\n}\n\nfunction ChildrenOutletContexts_tsickle_Closure_declarations() {\n/** @type {?} */\nChildrenOutletContexts.prototype.contexts;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AfterContentInit, ChangeDetectorRef, ContentChildren, Directive, ElementRef, Input, OnChanges, OnDestroy, QueryList, Renderer2, SimpleChanges} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {NavigationEnd} from '../events';\nimport {Router} from '../router';\nimport {RouterLink, RouterLinkWithHref} from './router_link';\n/**\n * \\@whatItDoes Lets you add a CSS class to an element when the link's route becomes active.\n * \n * \\@howToUse \n * \n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n * ```\n * \n * \\@description \n * \n * The RouterLinkActive directive lets you add a CSS class to an element when the link's route\n * becomes active.\n * \n * Consider the following example:\n * \n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n * ```\n * \n * When the url is either '/user' or '/user/bob', the active-link class will\n * be added to the `a` tag. If the url changes, the class will be removed.\n * \n * You can set more than one class, as follows:\n * \n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\n * <a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob</a>\n * ```\n * \n * You can configure RouterLinkActive by passing `exact: true`. This will add the classes\n * only when the url matches the link exactly.\n * \n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\n * true}\">Bob</a>\n * ```\n * \n * You can assign the RouterLinkActive instance to a template variable and directly check\n * the `isActive` status.\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\n *   Bob {{ rla.isActive ? '(already open)' : ''}}\n * </a>\n * ```\n * \n * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.\n * \n * ```\n * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\n *   <a routerLink=\"/user/jim\">Jim</a>\n *   <a routerLink=\"/user/bob\">Bob</a>\n * </div>\n * ```\n * \n * This will set the active-link class on the div tag if the url is either '/user/jim' or\n * '/user/bob'.\n * \n * \\@ngModule RouterModule\n * \n * \\@stable\n */\nexport class RouterLinkActive implements OnChanges,\n    OnDestroy, AfterContentInit {\n   links: QueryList<RouterLink>;\n  \n  linksWithHrefs: QueryList<RouterLinkWithHref>;\nprivate classes: string[] = [];\nprivate subscription: Subscription;\nprivate active: boolean = false;\n\n   routerLinkActiveOptions: {exact: boolean} = {exact: false};\n/**\n * @param {?} router\n * @param {?} element\n * @param {?} renderer\n * @param {?} cdr\n */\nconstructor(\nprivate router: Router,\nprivate element: ElementRef,\nprivate renderer: Renderer2,\nprivate cdr: ChangeDetectorRef) {\n    this.subscription = router.events.subscribe(s => {\n      if (s instanceof NavigationEnd) {\n        this.update();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nget isActive(): boolean { return this.active; }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this.links.changes.subscribe(_ => this.update());\n    this.linksWithHrefs.changes.subscribe(_ => this.update());\n    this.update();\n  }\n/**\n * @param {?} data\n * @return {?}\n */\nset routerLinkActive(data: string[]|string) {\n    const /** @type {?} */ classes = Array.isArray(data) ? data : data.split(' ');\n    this.classes = classes.filter(c => !!c);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void { this.update(); }\n/**\n * @return {?}\n */\nngOnDestroy(): void { this.subscription.unsubscribe(); }\n/**\n * @return {?}\n */\n\nprivate update(): void {\n    if (!this.links || !this.linksWithHrefs || !this.router.navigated) return;\n    const /** @type {?} */ hasActiveLinks = this.hasActiveLinks();\n\n    // react only when status has changed to prevent unnecessary dom updates\n    if (this.active !== hasActiveLinks) {\n      this.classes.forEach((c) => {\n        if (hasActiveLinks) {\n          this.renderer.addClass(this.element.nativeElement, c);\n        } else {\n          this.renderer.removeClass(this.element.nativeElement, c);\n        }\n      });\n      Promise.resolve(hasActiveLinks).then(active => this.active = active);\n    }\n  }\n/**\n * @param {?} router\n * @return {?}\n */\n\nprivate isLinkActive(router: Router): (link: (RouterLink|RouterLinkWithHref)) => boolean {\n    return (link: RouterLink | RouterLinkWithHref) =>\n               router.isActive(link.urlTree, this.routerLinkActiveOptions.exact);\n  }\n/**\n * @return {?}\n */\n\nprivate hasActiveLinks(): boolean {\n    return this.links.some(this.isLinkActive(this.router)) ||\n        this.linksWithHrefs.some(this.isLinkActive(this.router));\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{\n  selector: '[routerLinkActive]',\n  exportAs: 'routerLinkActive',\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: Router, },\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"links\": [{ type: ContentChildren, args: [RouterLink, {descendants: true}, ] },],\n\"linksWithHrefs\": [{ type: ContentChildren, args: [RouterLinkWithHref, {descendants: true}, ] },],\n\"routerLinkActiveOptions\": [{ type: Input },],\n\"routerLinkActive\": [{ type: Input },],\n};\n}\n\nfunction RouterLinkActive_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterLinkActive.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterLinkActive.ctorParameters;\n/** @type {?} */\nRouterLinkActive.propDecorators;\n/** @type {?} */\nRouterLinkActive.prototype.links;\n/** @type {?} */\nRouterLinkActive.prototype.linksWithHrefs;\n/** @type {?} */\nRouterLinkActive.prototype.classes;\n/** @type {?} */\nRouterLinkActive.prototype.subscription;\n/** @type {?} */\nRouterLinkActive.prototype.active;\n/** @type {?} */\nRouterLinkActive.prototype.routerLinkActiveOptions;\n/** @type {?} */\nRouterLinkActive.prototype.router;\n/** @type {?} */\nRouterLinkActive.prototype.element;\n/** @type {?} */\nRouterLinkActive.prototype.renderer;\n/** @type {?} */\nRouterLinkActive.prototype.cdr;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LocationStrategy} from '@angular/common';\nimport {Attribute, Directive, ElementRef, HostBinding, HostListener, Input, OnChanges, OnDestroy, Renderer2, isDevMode} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\n\nimport {QueryParamsHandling} from '../config';\nimport {NavigationEnd} from '../events';\nimport {Router} from '../router';\nimport {ActivatedRoute} from '../router_state';\nimport {UrlTree} from '../url_tree';\n/**\n * \\@whatItDoes Lets you link to specific parts of your app.\n * \n * \\@howToUse \n * \n * Consider the following route configuration:\n * `[{ path: 'user/:name', component: UserCmp }]`\n * \n * When linking to this `user/:name` route, you can write:\n * `<a routerLink='/user/bob'>link to user component</a>`\n * \n * \\@description \n * \n * The RouterLink directives let you link to specific parts of your app.\n * \n * When the link is static, you can use the directive as follows:\n * `<a routerLink=\"/user/bob\">link to user component</a>`\n * \n * If you use dynamic values to generate the link, you can pass an array of path\n * segments, followed by the params for each segment.\n * \n * For instance `['/team', teamId, 'user', userName, {details: true}]`\n * means that we want to generate a link to `/team/11/user/bob;details=true`.\n * \n * Multiple static segments can be merged into one\n * (e.g., `['/team/11/user', userName, {details: true}]`).\n * \n * The first segment name can be prepended with `/`, `./`, or `../`:\n * * If the first segment begins with `/`, the router will look up the route from the root of the\n *   app.\n * * If the first segment begins with `./`, or doesn't begin with a slash, the router will\n *   instead look in the children of the current activated route.\n * * And if the first segment begins with `../`, the router will go up one level.\n * \n * You can set query params and fragment as follows:\n * \n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n *   link to user component\n * </a>\n * ```\n * RouterLink will use these to generate this link: `/user/bob#education?debug=true`.\n * \n * (Deprecated in v4.0.0 use `queryParamsHandling` instead) You can also tell the\n * directive to preserve the current query params and fragment:\n * \n * ```\n * <a [routerLink]=\"['/user/bob']\" preserveQueryParams preserveFragment>\n *   link to user component\n * </a>\n * ```\n * \n * You can tell the directive to how to handle queryParams, available options are:\n *  - 'merge' merge the queryParams into the current queryParams\n *  - 'preserve' preserve the current queryParams\n *  - default / '' use the queryParams only\n *  same options for {\\@link NavigationExtras#queryParamsHandling}\n * \n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\">\n *   link to user component\n * </a>\n * ```\n * \n * The router link directive always treats the provided input as a delta to the current url.\n * \n * For instance, if the current url is `/user/(box//aux:team)`.\n * \n * Then the following link `<a [routerLink]=\"['/user/jim']\">Jim</a>` will generate the link\n * `/user/(jim//aux:team)`.\n * \n * \\@ngModule RouterModule\n * \n * See {\\@link Router#createUrlTree} for more information.\n * \n * \\@stable\n */\nexport class RouterLink {\n   queryParams: {[k: string]: any};\n   fragment: string;\n   queryParamsHandling: QueryParamsHandling;\n   preserveFragment: boolean;\n   skipLocationChange: boolean;\n   replaceUrl: boolean;\nprivate commands: any[] = [];\nprivate preserve: boolean;\n/**\n * @param {?} router\n * @param {?} route\n * @param {?} tabIndex\n * @param {?} renderer\n * @param {?} el\n */\nconstructor(\nprivate router: Router,\nprivate route: ActivatedRoute,\n       tabIndex: string, renderer: Renderer2, el: ElementRef) {\n    if (tabIndex == null) {\n      renderer.setAttribute(el.nativeElement, 'tabindex', '0');\n    }\n  }\n/**\n * @param {?} commands\n * @return {?}\n */\nset routerLink(commands: any[]|string) {\n    if (commands != null) {\n      this.commands = Array.isArray(commands) ? commands : [commands];\n    } else {\n      this.commands = [];\n    }\n  }\n/**\n * @deprecated 4.0.0 use `queryParamsHandling` instead.\n * @param {?} value\n * @return {?}\n */\nset preserveQueryParams(value: boolean) {\n    if (isDevMode() && /** @type {?} */(( <any>console)) && /** @type {?} */(( <any>console.warn))) {\n      console.warn('preserveQueryParams is deprecated!, use queryParamsHandling instead.');\n    }\n    this.preserve = value;\n  }\n/**\n * @return {?}\n */\nonClick(): boolean {\n    const /** @type {?} */ extras = {\n      skipLocationChange: attrBoolValue(this.skipLocationChange),\n      replaceUrl: attrBoolValue(this.replaceUrl),\n    };\n    this.router.navigateByUrl(this.urlTree, extras);\n    return true;\n  }\n/**\n * @return {?}\n */\nget urlTree(): UrlTree {\n    return this.router.createUrlTree(this.commands, {\n      relativeTo: this.route,\n      queryParams: this.queryParams,\n      fragment: this.fragment,\n      preserveQueryParams: attrBoolValue(this.preserve),\n      queryParamsHandling: this.queryParamsHandling,\n      preserveFragment: attrBoolValue(this.preserveFragment),\n    });\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: ':not(a)[routerLink]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: Router, },\n{type: ActivatedRoute, },\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"queryParams\": [{ type: Input },],\n\"fragment\": [{ type: Input },],\n\"queryParamsHandling\": [{ type: Input },],\n\"preserveFragment\": [{ type: Input },],\n\"skipLocationChange\": [{ type: Input },],\n\"replaceUrl\": [{ type: Input },],\n\"routerLink\": [{ type: Input },],\n\"preserveQueryParams\": [{ type: Input },],\n\"onClick\": [{ type: HostListener, args: ['click', ] },],\n};\n}\n\nfunction RouterLink_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterLink.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterLink.ctorParameters;\n/** @type {?} */\nRouterLink.propDecorators;\n/** @type {?} */\nRouterLink.prototype.queryParams;\n/** @type {?} */\nRouterLink.prototype.fragment;\n/** @type {?} */\nRouterLink.prototype.queryParamsHandling;\n/** @type {?} */\nRouterLink.prototype.preserveFragment;\n/** @type {?} */\nRouterLink.prototype.skipLocationChange;\n/** @type {?} */\nRouterLink.prototype.replaceUrl;\n/** @type {?} */\nRouterLink.prototype.commands;\n/** @type {?} */\nRouterLink.prototype.preserve;\n/** @type {?} */\nRouterLink.prototype.router;\n/** @type {?} */\nRouterLink.prototype.route;\n}\n\n/**\n * \\@whatItDoes Lets you link to specific parts of your app.\n * \n * See {\\@link RouterLink} for more information.\n * \n * \\@ngModule RouterModule\n * \n * \\@stable\n */\nexport class RouterLinkWithHref implements OnChanges, OnDestroy {\n    target: string;\n   queryParams: {[k: string]: any};\n   fragment: string;\n   queryParamsHandling: QueryParamsHandling;\n   preserveFragment: boolean;\n   skipLocationChange: boolean;\n   replaceUrl: boolean;\nprivate commands: any[] = [];\nprivate subscription: Subscription;\nprivate preserve: boolean;\n\n  // the url displayed on the anchor element.\n   href: string;\n/**\n * @param {?} router\n * @param {?} route\n * @param {?} locationStrategy\n */\nconstructor(\nprivate router: Router,\nprivate route: ActivatedRoute,\nprivate locationStrategy: LocationStrategy) {\n    this.subscription = router.events.subscribe(s => {\n      if (s instanceof NavigationEnd) {\n        this.updateTargetUrlAndHref();\n      }\n    });\n  }\n/**\n * @param {?} commands\n * @return {?}\n */\nset routerLink(commands: any[]|string) {\n    if (commands != null) {\n      this.commands = Array.isArray(commands) ? commands : [commands];\n    } else {\n      this.commands = [];\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset preserveQueryParams(value: boolean) {\n    if (isDevMode() && /** @type {?} */(( <any>console)) && /** @type {?} */(( <any>console.warn))) {\n      console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\n    }\n    this.preserve = value;\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: {}): any { this.updateTargetUrlAndHref(); }\n/**\n * @return {?}\n */\nngOnDestroy(): any { this.subscription.unsubscribe(); }\n/**\n * @param {?} button\n * @param {?} ctrlKey\n * @param {?} metaKey\n * @param {?} shiftKey\n * @return {?}\n */\nonClick(button: number, ctrlKey: boolean, metaKey: boolean, shiftKey: boolean): boolean {\n    if (button !== 0 || ctrlKey || metaKey || shiftKey) {\n      return true;\n    }\n\n    if (typeof this.target === 'string' && this.target != '_self') {\n      return true;\n    }\n\n    const /** @type {?} */ extras = {\n      skipLocationChange: attrBoolValue(this.skipLocationChange),\n      replaceUrl: attrBoolValue(this.replaceUrl),\n    };\n    this.router.navigateByUrl(this.urlTree, extras);\n    return false;\n  }\n/**\n * @return {?}\n */\n\nprivate updateTargetUrlAndHref(): void {\n    this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));\n  }\n/**\n * @return {?}\n */\nget urlTree(): UrlTree {\n    return this.router.createUrlTree(this.commands, {\n      relativeTo: this.route,\n      queryParams: this.queryParams,\n      fragment: this.fragment,\n      preserveQueryParams: attrBoolValue(this.preserve),\n      queryParamsHandling: this.queryParamsHandling,\n      preserveFragment: attrBoolValue(this.preserveFragment),\n    });\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Directive, args: [{selector: 'a[routerLink]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: Router, },\n{type: ActivatedRoute, },\n{type: LocationStrategy, },\n];\nstatic propDecorators: {[key: string]: {type: Function, args?: any[]}[]} = {\n\"target\": [{ type: HostBinding, args: ['attr.target', ] },{ type: Input },],\n\"queryParams\": [{ type: Input },],\n\"fragment\": [{ type: Input },],\n\"queryParamsHandling\": [{ type: Input },],\n\"preserveFragment\": [{ type: Input },],\n\"skipLocationChange\": [{ type: Input },],\n\"replaceUrl\": [{ type: Input },],\n\"href\": [{ type: HostBinding },],\n\"routerLink\": [{ type: Input },],\n\"preserveQueryParams\": [{ type: Input },],\n\"onClick\": [{ type: HostListener, args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey'], ] },],\n};\n}\n\nfunction RouterLinkWithHref_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterLinkWithHref.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterLinkWithHref.ctorParameters;\n/** @type {?} */\nRouterLinkWithHref.propDecorators;\n/** @type {?} */\nRouterLinkWithHref.prototype.target;\n/** @type {?} */\nRouterLinkWithHref.prototype.queryParams;\n/** @type {?} */\nRouterLinkWithHref.prototype.fragment;\n/** @type {?} */\nRouterLinkWithHref.prototype.queryParamsHandling;\n/** @type {?} */\nRouterLinkWithHref.prototype.preserveFragment;\n/** @type {?} */\nRouterLinkWithHref.prototype.skipLocationChange;\n/** @type {?} */\nRouterLinkWithHref.prototype.replaceUrl;\n/** @type {?} */\nRouterLinkWithHref.prototype.commands;\n/** @type {?} */\nRouterLinkWithHref.prototype.subscription;\n/** @type {?} */\nRouterLinkWithHref.prototype.preserve;\n/** @type {?} */\nRouterLinkWithHref.prototype.href;\n/** @type {?} */\nRouterLinkWithHref.prototype.router;\n/** @type {?} */\nRouterLinkWithHref.prototype.route;\n/** @type {?} */\nRouterLinkWithHref.prototype.locationStrategy;\n}\n\n/**\n * @param {?} s\n * @return {?}\n */\nfunction attrBoolValue(s: any): boolean {\n  return s === '' || !!s;\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {Compiler, Injector, NgModuleFactoryLoader, NgModuleRef, Type, isDevMode} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {of } from 'rxjs/observable/of';\nimport {concatMap} from 'rxjs/operator/concatMap';\nimport {map} from 'rxjs/operator/map';\nimport {mergeMap} from 'rxjs/operator/mergeMap';\n\nimport {applyRedirects} from './apply_redirects';\nimport {LoadedRouterConfig, QueryParamsHandling, Route, Routes, validateConfig} from './config';\nimport {createRouterState} from './create_router_state';\nimport {createUrlTree} from './create_url_tree';\nimport {ChildActivationEnd, Event, GuardsCheckEnd, GuardsCheckStart, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, ResolveEnd, ResolveStart, RouteConfigLoadEnd, RouteConfigLoadStart, RouteEvent, RoutesRecognized} from './events';\nimport {PreActivation} from './pre_activation';\nimport {recognize} from './recognize';\nimport {DefaultRouteReuseStrategy, DetachedRouteHandleInternal, RouteReuseStrategy} from './route_reuse_strategy';\nimport {RouterConfigLoader} from './router_config_loader';\nimport {ChildrenOutletContexts} from './router_outlet_context';\nimport {ActivatedRoute, ActivatedRouteSnapshot, RouterState, RouterStateSnapshot, advanceActivatedRoute, createEmptyState} from './router_state';\nimport {Params, isNavigationCancelingError} from './shared';\nimport {DefaultUrlHandlingStrategy, UrlHandlingStrategy} from './url_handling_strategy';\nimport {UrlSerializer, UrlTree, containsTree, createEmptyUrlTree} from './url_tree';\nimport {forEach} from './utils/collection';\nimport {TreeNode, nodeChildrenAsMap} from './utils/tree';\n\ndeclare let Zone: any;\n/**\n * \\@whatItDoes Represents the extra options used during navigation.\n * \n * \\@stable\n * @record\n */\nexport function NavigationExtras() {}\n\n\nfunction NavigationExtras_tsickle_Closure_declarations() {\n/**\n * Enables relative navigation from the current ActivatedRoute.\n * \n * Configuration:\n * \n * ```\n * [{\n *   path: 'parent',\n *   component: ParentComponent,\n *   children: [{\n *     path: 'list',\n *     component: ListComponent\n *   },{\n *     path: 'child',\n *     component: ChildComponent\n *   }]\n * }]\n * ```\n * \n * Navigate to list route from child route:\n * \n * ```\n *  \\@Component({...})\n *  class ChildComponent {\n *    constructor(private router: Router, private route: ActivatedRoute) {}\n * \n *    go() {\n *      this.router.navigate(['../list'], { relativeTo: this.route });\n *    }\n *  }\n * ```\n * @type {?|undefined}\n */\nNavigationExtras.prototype.relativeTo;\n/**\n * Sets query parameters to the URL.\n * \n * ```\n * // Navigate to /results?page=1\n * this.router.navigate(['/results'], { queryParams: { page: 1 } });\n * ```\n * @type {?|undefined}\n */\nNavigationExtras.prototype.queryParams;\n/**\n * Sets the hash fragment for the URL.\n * \n * ```\n * // Navigate to /results#top\n * this.router.navigate(['/results'], { fragment: 'top' });\n * ```\n * @type {?|undefined}\n */\nNavigationExtras.prototype.fragment;\n/**\n * Preserves the query parameters for the next navigation.\n * \n * deprecated, use `queryParamsHandling` instead\n * \n * ```\n * // Preserve query params from /results?page=1 to /view?page=1\n * this.router.navigate(['/view'], { preserveQueryParams: true });\n * ```\n * \n * @deprecated since v4\n * @type {?|undefined}\n */\nNavigationExtras.prototype.preserveQueryParams;\n/**\n *  config strategy to handle the query parameters for the next navigation.\n * \n * ```\n * // from /results?page=1 to /view?page=1&page=2\n * this.router.navigate(['/view'], { queryParams: { page: 2 },  queryParamsHandling: \"merge\" });\n * ```\n * @type {?|undefined}\n */\nNavigationExtras.prototype.queryParamsHandling;\n/**\n * Preserves the fragment for the next navigation\n * \n * ```\n * // Preserve fragment from /results#top to /view#top\n * this.router.navigate(['/view'], { preserveFragment: true });\n * ```\n * @type {?|undefined}\n */\nNavigationExtras.prototype.preserveFragment;\n/**\n * Navigates without pushing a new state into history.\n * \n * ```\n * // Navigate silently to /view\n * this.router.navigate(['/view'], { skipLocationChange: true });\n * ```\n * @type {?|undefined}\n */\nNavigationExtras.prototype.skipLocationChange;\n/**\n * Navigates while replacing the current state in history.\n * \n * ```\n * // Navigate to /view\n * this.router.navigate(['/view'], { replaceUrl: true });\n * ```\n * @type {?|undefined}\n */\nNavigationExtras.prototype.replaceUrl;\n}\n\n\n/**\n * @whatItDoes Represents the extra options used during navigation.\n *\n * @stable\n */\nexport interface NavigationExtras {\n  /**\n  * Enables relative navigation from the current ActivatedRoute.\n  *\n  * Configuration:\n  *\n  * ```\n  * [{\n  *   path: 'parent',\n  *   component: ParentComponent,\n  *   children: [{\n  *     path: 'list',\n  *     component: ListComponent\n  *   },{\n  *     path: 'child',\n  *     component: ChildComponent\n  *   }]\n  * }]\n  * ```\n  *\n  * Navigate to list route from child route:\n  *\n  * ```\n  *  @Component({...})\n  *  class ChildComponent {\n  *    constructor(private router: Router, private route: ActivatedRoute) {}\n  *\n  *    go() {\n  *      this.router.navigate(['../list'], { relativeTo: this.route });\n  *    }\n  *  }\n  * ```\n  */\n  relativeTo?: ActivatedRoute|null;\n\n  /**\n  * Sets query parameters to the URL.\n  *\n  * ```\n  * // Navigate to /results?page=1\n  * this.router.navigate(['/results'], { queryParams: { page: 1 } });\n  * ```\n  */\n  queryParams?: Params|null;\n\n  /**\n  * Sets the hash fragment for the URL.\n  *\n  * ```\n  * // Navigate to /results#top\n  * this.router.navigate(['/results'], { fragment: 'top' });\n  * ```\n  */\n  fragment?: string;\n\n  /**\n  * Preserves the query parameters for the next navigation.\n  *\n  * deprecated, use `queryParamsHandling` instead\n  *\n  * ```\n  * // Preserve query params from /results?page=1 to /view?page=1\n  * this.router.navigate(['/view'], { preserveQueryParams: true });\n  * ```\n  *\n  * @deprecated since v4\n  */\n  preserveQueryParams?: boolean;\n\n  /**\n  *  config strategy to handle the query parameters for the next navigation.\n  *\n  * ```\n  * // from /results?page=1 to /view?page=1&page=2\n  * this.router.navigate(['/view'], { queryParams: { page: 2 },  queryParamsHandling: \"merge\" });\n  * ```\n  */\n  queryParamsHandling?: QueryParamsHandling|null;\n  /**\n  * Preserves the fragment for the next navigation\n  *\n  * ```\n  * // Preserve fragment from /results#top to /view#top\n  * this.router.navigate(['/view'], { preserveFragment: true });\n  * ```\n  */\n  preserveFragment?: boolean;\n  /**\n  * Navigates without pushing a new state into history.\n  *\n  * ```\n  * // Navigate silently to /view\n  * this.router.navigate(['/view'], { skipLocationChange: true });\n  * ```\n  */\n  skipLocationChange?: boolean;\n  /**\n  * Navigates while replacing the current state in history.\n  *\n  * ```\n  * // Navigate to /view\n  * this.router.navigate(['/view'], { replaceUrl: true });\n  * ```\n  */\n  replaceUrl?: boolean;\n}\n\n/**\n * @whatItDoes Error handler that is invoked when a navigation errors.\n *\n * @description\n * If the handler returns a value, the navigation promise will be resolved with this value.\n * If the handler throws an exception, the navigation promise will be rejected with\n * the exception.\n *\n * @stable\n */\nexport type ErrorHandler = (error: any) => any;\n/**\n * @param {?} error\n * @return {?}\n */\nfunction defaultErrorHandler(error: any): any {\n  throw error;\n}\n\ntype NavigationSource = 'imperative' | 'popstate' | 'hashchange';\n\ntype NavigationParams = {\n  id: number,\n  rawUrl: UrlTree,\n  extras: NavigationExtras,\n  resolve: any,\n  reject: any,\n  promise: Promise<boolean>,\n  source: NavigationSource,\n};\n\n/**\n * @internal\n */\nexport type RouterHook = (snapshot: RouterStateSnapshot) => Observable<void>;\n/**\n * \\@internal\n * @param {?} snapshot\n * @return {?}\n */\nfunction defaultRouterHook(snapshot: RouterStateSnapshot): Observable<void> {\n  return /** @type {?} */(( of (null) as any));\n}\n/**\n * \\@whatItDoes Provides the navigation and url manipulation capabilities.\n * \n * See {\\@link Routes} for more details and examples.\n * \n * \\@ngModule RouterModule\n * \n * \\@stable\n */\nexport class Router {\nprivate currentUrlTree: UrlTree;\nprivate rawUrlTree: UrlTree;\nprivate navigations = new BehaviorSubject<NavigationParams>( /** @type {?} */((null)));\nprivate routerEvents = new Subject<Event>();\nprivate currentRouterState: RouterState;\nprivate locationSubscription: Subscription;\nprivate navigationId: number = 0;\nprivate configLoader: RouterConfigLoader;\nprivate ngModule: NgModuleRef<any>;\n/**\n * Error handler that is invoked when a navigation errors.\n * \n * See {\\@link ErrorHandler} for more information.\n */\nerrorHandler: ErrorHandler = defaultErrorHandler;\n/**\n * Indicates if at least one navigation happened.\n */\nnavigated: boolean = false;\n/**\n * Used by RouterModule. This allows us to\n * pause the navigation either before preactivation or after it.\n * \\@internal\n */\nhooks: {beforePreactivation: RouterHook, afterPreactivation: RouterHook} = {\n    beforePreactivation: defaultRouterHook,\n    afterPreactivation: defaultRouterHook\n  };\n/**\n * Extracts and merges URLs. Used for AngularJS to Angular migrations.\n */\nurlHandlingStrategy: UrlHandlingStrategy = new DefaultUrlHandlingStrategy();\n\n  routeReuseStrategy: RouteReuseStrategy = new DefaultRouteReuseStrategy();\n/**\n * @param {?} rootComponentType\n * @param {?} urlSerializer\n * @param {?} rootContexts\n * @param {?} location\n * @param {?} injector\n * @param {?} loader\n * @param {?} compiler\n * @param {?} config\n */\nconstructor(\nprivate rootComponentType: Type<any>|null,\nprivate urlSerializer: UrlSerializer,\nprivate rootContexts: ChildrenOutletContexts,\nprivate location: Location, injector: Injector,\n      loader: NgModuleFactoryLoader, compiler: Compiler,\npublic config: Routes) {\n    const /** @type {?} */ onLoadStart = (r: Route) => this.triggerEvent(new RouteConfigLoadStart(r));\n    const /** @type {?} */ onLoadEnd = (r: Route) => this.triggerEvent(new RouteConfigLoadEnd(r));\n\n    this.ngModule = injector.get(NgModuleRef);\n\n    this.resetConfig(config);\n    this.currentUrlTree = createEmptyUrlTree();\n    this.rawUrlTree = this.currentUrlTree;\n\n    this.configLoader = new RouterConfigLoader(loader, compiler, onLoadStart, onLoadEnd);\n    this.currentRouterState = createEmptyState(this.currentUrlTree, this.rootComponentType);\n    this.processNavigations();\n  }\n/**\n * \\@internal \n * TODO: this should be removed once the constructor of the router made internal\n * @param {?} rootComponentType\n * @return {?}\n */\nresetRootComponentType(rootComponentType: Type<any>): void {\n    this.rootComponentType = rootComponentType;\n    // TODO: vsavkin router 4.0 should make the root component set to null\n    // this will simplify the lifecycle of the router.\n    this.currentRouterState.root.component = this.rootComponentType;\n  }\n/**\n * Sets up the location change listener and performs the initial navigation.\n * @return {?}\n */\ninitialNavigation(): void {\n    this.setUpLocationChangeListener();\n    if (this.navigationId === 0) {\n      this.navigateByUrl(this.location.path(true), {replaceUrl: true});\n    }\n  }\n/**\n * Sets up the location change listener.\n * @return {?}\n */\nsetUpLocationChangeListener(): void {\n    // Zone.current.wrap is needed because of the issue with RxJS scheduler,\n    // which does not work properly with zone.js in IE and Safari\n    if (!this.locationSubscription) {\n      this.locationSubscription = /** @type {?} */(( <any>this.location.subscribe(Zone.current.wrap((change: any) => {\n        const /** @type {?} */ rawUrlTree = this.urlSerializer.parse(change['url']);\n        const /** @type {?} */ source: NavigationSource = change['type'] === 'popstate' ? 'popstate' : 'hashchange';\n        setTimeout(() => { this.scheduleNavigation(rawUrlTree, source, {replaceUrl: true}); }, 0);\n      }))));\n    }\n  }\n/**\n * The current route state\n * @return {?}\n */\nget routerState(): RouterState { return this.currentRouterState; }\n/**\n * The current url\n * @return {?}\n */\nget url(): string { return this.serializeUrl(this.currentUrlTree); }\n/**\n * An observable of router events\n * @return {?}\n */\nget events(): Observable<Event> { return this.routerEvents; }\n/**\n * \\@internal\n * @param {?} e\n * @return {?}\n */\ntriggerEvent(e: Event): void { this.routerEvents.next(e); }\n/**\n * Resets the configuration used for navigation and generating links.\n * \n * ### Usage\n * \n * ```\n * router.resetConfig([\n *  { path: 'team/:id', component: TeamCmp, children: [\n *    { path: 'simple', component: SimpleCmp },\n *    { path: 'user/:name', component: UserCmp }\n *  ]}\n * ]);\n * ```\n * @param {?} config\n * @return {?}\n */\nresetConfig(config: Routes): void {\n    validateConfig(config);\n    this.config = config;\n    this.navigated = false;\n  }\n/**\n * \\@docsNotRequired\n * @return {?}\n */\nngOnDestroy(): void { this.dispose(); }\n/**\n * Disposes of the router\n * @return {?}\n */\ndispose(): void {\n    if (this.locationSubscription) {\n      this.locationSubscription.unsubscribe();\n      this.locationSubscription = /** @type {?} */(( null));\n    }\n  }\n/**\n * Applies an array of commands to the current url tree and creates a new url tree.\n * \n * When given an activate route, applies the given commands starting from the route.\n * When not given a route, applies the given command starting from the root.\n * \n * ### Usage\n * \n * ```\n * // create /team/33/user/11\n * router.createUrlTree(['/team', 33, 'user', 11]);\n * \n * // create /team/33;expand=true/user/11\n * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n * \n * // you can collapse static segments like this (this works only with the first passed-in value):\n * router.createUrlTree(['/team/33/user', userId]);\n * \n * // If the first segment can contain slashes, and you do not want the router to split it, you\n * // can do the following:\n * \n * router.createUrlTree([{segmentPath: '/one/two'}]);\n * \n * // create /team/33/(user/11//right:chat)\n * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n * \n * // remove the right secondary node\n * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n * \n * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n * \n * // navigate to /team/33/user/11/details\n * router.createUrlTree(['details'], {relativeTo: route});\n * \n * // navigate to /team/33/user/22\n * router.createUrlTree(['../22'], {relativeTo: route});\n * \n * // navigate to /team/44/user/22\n * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n * ```\n * @param {?} commands\n * @param {?=} navigationExtras\n * @return {?}\n */\ncreateUrlTree(commands: any[], navigationExtras: NavigationExtras = {}): UrlTree {\n    const {relativeTo,          queryParams,         fragment,\n           preserveQueryParams, queryParamsHandling, preserveFragment} = navigationExtras;\n    if (isDevMode() && preserveQueryParams && /** @type {?} */(( <any>console)) && /** @type {?} */(( <any>console.warn))) {\n      console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\n    }\n    const /** @type {?} */ a = relativeTo || this.routerState.root;\n    const /** @type {?} */ f = preserveFragment ? this.currentUrlTree.fragment : fragment;\n    let /** @type {?} */ q: Params|null = null;\n    if (queryParamsHandling) {\n      switch (queryParamsHandling) {\n        case 'merge':\n          q = {...this.currentUrlTree.queryParams, ...queryParams};\n          break;\n        case 'preserve':\n          q = this.currentUrlTree.queryParams;\n          break;\n        default:\n          q = queryParams || null;\n      }\n    } else {\n      q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams || null;\n    }\n    return createUrlTree(a, this.currentUrlTree, commands, /** @type {?} */(( q)), /** @type {?} */(( f)));\n  }\n/**\n * Navigate based on the provided url. This navigation is always absolute.\n * \n * Returns a promise that:\n * - resolves to 'true' when navigation succeeds,\n * - resolves to 'false' when navigation fails,\n * - is rejected when an error happens.\n * \n * ### Usage\n * \n * ```\n * router.navigateByUrl(\"/team/33/user/11\");\n * \n * // Navigate without updating the URL\n * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n * ```\n * \n * In opposite to `navigate`, `navigateByUrl` takes a whole URL\n * and does not apply any delta to the current one.\n * @param {?} url\n * @param {?=} extras\n * @return {?}\n */\nnavigateByUrl(url: string|UrlTree, extras: NavigationExtras = {skipLocationChange: false}):\n      Promise<boolean> {\n    const /** @type {?} */ urlTree = url instanceof UrlTree ? url : this.parseUrl(url);\n    const /** @type {?} */ mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);\n\n    return this.scheduleNavigation(mergedTree, 'imperative', extras);\n  }\n/**\n * Navigate based on the provided array of commands and a starting point.\n * If no starting route is provided, the navigation is absolute.\n * \n * Returns a promise that:\n * - resolves to 'true' when navigation succeeds,\n * - resolves to 'false' when navigation fails,\n * - is rejected when an error happens.\n * \n * ### Usage\n * \n * ```\n * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n * \n * // Navigate without updating the URL\n * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n * ```\n * \n * In opposite to `navigateByUrl`, `navigate` always takes a delta that is applied to the current\n * URL.\n * @param {?} commands\n * @param {?=} extras\n * @return {?}\n */\nnavigate(commands: any[], extras: NavigationExtras = {skipLocationChange: false}):\n      Promise<boolean> {\n    validateCommands(commands);\n    if (typeof extras.queryParams === 'object' && extras.queryParams !== null) {\n      extras.queryParams = this.removeEmptyProps(extras.queryParams);\n    }\n    return this.navigateByUrl(this.createUrlTree(commands, extras), extras);\n  }\n/**\n * Serializes a {\\@link UrlTree} into a string\n * @param {?} url\n * @return {?}\n */\nserializeUrl(url: UrlTree): string { return this.urlSerializer.serialize(url); }\n/**\n * Parses a string into a {\\@link UrlTree}\n * @param {?} url\n * @return {?}\n */\nparseUrl(url: string): UrlTree { return this.urlSerializer.parse(url); }\n/**\n * Returns whether the url is activated\n * @param {?} url\n * @param {?} exact\n * @return {?}\n */\nisActive(url: string|UrlTree, exact: boolean): boolean {\n    if (url instanceof UrlTree) {\n      return containsTree(this.currentUrlTree, url, exact);\n    }\n\n    const /** @type {?} */ urlTree = this.urlSerializer.parse(url);\n    return containsTree(this.currentUrlTree, urlTree, exact);\n  }\n/**\n * @param {?} params\n * @return {?}\n */\n\nprivate removeEmptyProps(params: Params): Params {\n    return Object.keys(params).reduce((result: Params, key: string) => {\n      const /** @type {?} */ value: any = params[key];\n      if (value !== null && value !== undefined) {\n        result[key] = value;\n      }\n      return result;\n    }, {});\n  }\n/**\n * @return {?}\n */\n\nprivate processNavigations(): void {\n    concatMap\n        .call(\n            this.navigations,\n            (nav: NavigationParams) => {\n              if (nav) {\n                this.executeScheduledNavigation(nav);\n                // a failed navigation should not stop the router from processing\n                // further navigations => the catch\n                return nav.promise.catch(() => {});\n              } else {\n                return /** @type {?} */(( <any>of (null)));\n              }\n            })\n        .subscribe(() => {});\n  }\n/**\n * @param {?} rawUrl\n * @param {?} source\n * @param {?} extras\n * @return {?}\n */\n\nprivate scheduleNavigation(rawUrl: UrlTree, source: NavigationSource, extras: NavigationExtras):\n      Promise<boolean> {\n    const /** @type {?} */ lastNavigation = this.navigations.value;\n\n    // If the user triggers a navigation imperatively (e.g., by using navigateByUrl),\n    // and that navigation results in 'replaceState' that leads to the same URL,\n    // we should skip those.\n    if (lastNavigation && source !== 'imperative' && lastNavigation.source === 'imperative' &&\n        lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n      return Promise.resolve(true);  // return value is not used\n    }\n\n    // Because of a bug in IE and Edge, the location class fires two events (popstate and\n    // hashchange) every single time. The second one should be ignored. Otherwise, the URL will\n    // flicker.\n    if (lastNavigation && source == 'hashchange' && lastNavigation.source === 'popstate' &&\n        lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n      return Promise.resolve(true);  // return value is not used\n    }\n\n    let /** @type {?} */ resolve: any = null;\n    let /** @type {?} */ reject: any = null;\n\n    const /** @type {?} */ promise = new Promise<boolean>((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n\n    const /** @type {?} */ id = ++this.navigationId;\n    this.navigations.next({id, source, rawUrl, extras, resolve, reject, promise});\n\n    // Make sure that the error is propagated even though `processNavigations` catch\n    // handler does not rethrow\n    return promise.catch((e: any) => Promise.reject(e));\n  }\n/**\n * @param {?} __0\n * @return {?}\n */\n\nprivate executeScheduledNavigation({id, rawUrl, extras, resolve, reject}: NavigationParams):\n      void {\n    const /** @type {?} */ url = this.urlHandlingStrategy.extract(rawUrl);\n    const /** @type {?} */ urlTransition = !this.navigated || url.toString() !== this.currentUrlTree.toString();\n\n    if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(rawUrl)) {\n      this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));\n      Promise.resolve()\n          .then(\n              (_) => this.runNavigate(\n                  url, rawUrl, !!extras.skipLocationChange, !!extras.replaceUrl, id, null))\n          .then(resolve, reject);\n\n      // we cannot process the current URL, but we could process the previous one =>\n      // we need to do some cleanup\n    } else if (\n        urlTransition && this.rawUrlTree &&\n        this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree)) {\n      this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));\n      Promise.resolve()\n          .then(\n              (_) => this.runNavigate(\n                  url, rawUrl, false, false, id,\n                  createEmptyState(url, this.rootComponentType).snapshot))\n          .then(resolve, reject);\n\n    } else {\n      this.rawUrlTree = rawUrl;\n      resolve(null);\n    }\n  }\n/**\n * @param {?} url\n * @param {?} rawUrl\n * @param {?} shouldPreventPushState\n * @param {?} shouldReplaceUrl\n * @param {?} id\n * @param {?} precreatedState\n * @return {?}\n */\n\nprivate runNavigate(\n      url: UrlTree, rawUrl: UrlTree, shouldPreventPushState: boolean, shouldReplaceUrl: boolean,\n      id: number, precreatedState: RouterStateSnapshot|null): Promise<boolean> {\n    if (id !== this.navigationId) {\n      this.location.go(this.urlSerializer.serialize(this.currentUrlTree));\n      this.routerEvents.next(new NavigationCancel(\n          id, this.serializeUrl(url),\n          `Navigation ID ${id} is not equal to the current navigation id ${this.navigationId}`));\n      return Promise.resolve(false);\n    }\n\n    return new Promise((resolvePromise, rejectPromise) => {\n      // create an observable of the url and route state snapshot\n      // this operation do not result in any side effects\n      let /** @type {?} */ urlAndSnapshot$: Observable<{appliedUrl: UrlTree, snapshot: RouterStateSnapshot}>;\n      if (!precreatedState) {\n        const /** @type {?} */ moduleInjector = this.ngModule.injector;\n        const /** @type {?} */ redirectsApplied$ =\n            applyRedirects(moduleInjector, this.configLoader, this.urlSerializer, url, this.config);\n\n        urlAndSnapshot$ = mergeMap.call(redirectsApplied$, (appliedUrl: UrlTree) => {\n          return map.call(\n              recognize(\n                  this.rootComponentType, this.config, appliedUrl, this.serializeUrl(appliedUrl)),\n              (snapshot: any) => {\n\n                this.routerEvents.next(new RoutesRecognized(\n                    id, this.serializeUrl(url), this.serializeUrl(appliedUrl), snapshot));\n\n                return {appliedUrl, snapshot};\n              });\n        });\n      } else {\n        urlAndSnapshot$ = of ({appliedUrl: url, snapshot: precreatedState});\n      }\n\n      const /** @type {?} */ beforePreactivationDone$ = mergeMap.call(\n          urlAndSnapshot$, (p: {appliedUrl: string, snapshot: RouterStateSnapshot}) => {\n            return map.call(this.hooks.beforePreactivation(p.snapshot), () => p);\n          });\n\n      // run preactivation: guards and data resolvers\n      let /** @type {?} */ preActivation: PreActivation;\n\n      const /** @type {?} */ preactivationSetup$ = map.call(\n          beforePreactivationDone$,\n          ({appliedUrl, snapshot}: {appliedUrl: string, snapshot: RouterStateSnapshot}) => {\n            const /** @type {?} */ moduleInjector = this.ngModule.injector;\n            preActivation = new PreActivation(\n                snapshot, this.currentRouterState.snapshot, moduleInjector,\n                (evt: RouteEvent) => this.triggerEvent(evt));\n            preActivation.initalize(this.rootContexts);\n            return {appliedUrl, snapshot};\n          });\n\n      const /** @type {?} */ preactivationCheckGuards$ = mergeMap.call(\n          preactivationSetup$,\n          ({appliedUrl, snapshot}: {appliedUrl: string, snapshot: RouterStateSnapshot}) => {\n            if (this.navigationId !== id) return of (false);\n\n            this.triggerEvent(\n                new GuardsCheckStart(id, this.serializeUrl(url), appliedUrl, snapshot));\n\n            return map.call(preActivation.checkGuards(), (shouldActivate: boolean) => {\n              this.triggerEvent(new GuardsCheckEnd(\n                  id, this.serializeUrl(url), appliedUrl, snapshot, shouldActivate));\n              return {appliedUrl: appliedUrl, snapshot: snapshot, shouldActivate: shouldActivate};\n            });\n          });\n\n      const /** @type {?} */ preactivationResolveData$ = mergeMap.call(\n          preactivationCheckGuards$,\n          (p: {appliedUrl: string, snapshot: RouterStateSnapshot, shouldActivate: boolean}) => {\n            if (this.navigationId !== id) return of (false);\n\n            if (p.shouldActivate && preActivation.isActivating()) {\n              this.triggerEvent(\n                  new ResolveStart(id, this.serializeUrl(url), p.appliedUrl, p.snapshot));\n              return map.call(preActivation.resolveData(), () => {\n                this.triggerEvent(\n                    new ResolveEnd(id, this.serializeUrl(url), p.appliedUrl, p.snapshot));\n                return p;\n              });\n            } else {\n              return of (p);\n            }\n          });\n\n      const /** @type {?} */ preactivationDone$ = mergeMap.call(preactivationResolveData$, (p: any) => {\n        return map.call(this.hooks.afterPreactivation(p.snapshot), () => p);\n      });\n\n\n      // create router state\n      // this operation has side effects => route state is being affected\n      const /** @type {?} */ routerState$ =\n          map.call(preactivationDone$, ({appliedUrl, snapshot, shouldActivate}: any) => {\n            if (shouldActivate) {\n              const /** @type {?} */ state =\n                  createRouterState(this.routeReuseStrategy, snapshot, this.currentRouterState);\n              return {appliedUrl, state, shouldActivate};\n            } else {\n              return {appliedUrl, state: null, shouldActivate};\n            }\n          });\n\n\n      // applied the new router state\n      // this operation has side effects\n      let /** @type {?} */ navigationIsSuccessful: boolean;\n      const /** @type {?} */ storedState = this.currentRouterState;\n      const /** @type {?} */ storedUrl = this.currentUrlTree;\n\n      routerState$\n          .forEach(({appliedUrl, state, shouldActivate}: any) => {\n            if (!shouldActivate || id !== this.navigationId) {\n              navigationIsSuccessful = false;\n              return;\n            }\n\n            this.currentUrlTree = appliedUrl;\n            this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, rawUrl);\n\n            this.currentRouterState = state;\n\n            if (!shouldPreventPushState) {\n              const /** @type {?} */ path = this.urlSerializer.serialize(this.rawUrlTree);\n              if (this.location.isCurrentPathEqualTo(path) || shouldReplaceUrl) {\n                this.location.replaceState(path);\n              } else {\n                this.location.go(path);\n              }\n            }\n\n            new ActivateRoutes(\n                this.routeReuseStrategy, state, storedState, (evt: Event) => this.triggerEvent(evt))\n                .activate(this.rootContexts);\n\n            navigationIsSuccessful = true;\n          })\n          .then(\n              () => {\n                if (navigationIsSuccessful) {\n                  this.navigated = true;\n                  this.routerEvents.next(new NavigationEnd(\n                      id, this.serializeUrl(url), this.serializeUrl(this.currentUrlTree)));\n                  resolvePromise(true);\n                } else {\n                  this.resetUrlToCurrentUrlTree();\n                  this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url), ''));\n                  resolvePromise(false);\n                }\n              },\n              (e: any) => {\n                if (isNavigationCancelingError(e)) {\n                  this.resetUrlToCurrentUrlTree();\n                  this.navigated = true;\n                  this.routerEvents.next(\n                      new NavigationCancel(id, this.serializeUrl(url), e.message));\n                  resolvePromise(false);\n                } else {\n                  this.routerEvents.next(new NavigationError(id, this.serializeUrl(url), e));\n                  try {\n                    resolvePromise(this.errorHandler(e));\n                  } catch ( /** @type {?} */ee) {\n                    rejectPromise(ee);\n                  }\n                }\n\n                this.currentRouterState = storedState;\n                this.currentUrlTree = storedUrl;\n                this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, rawUrl);\n                this.location.replaceState(this.serializeUrl(this.rawUrlTree));\n              });\n    });\n  }\n/**\n * @return {?}\n */\n\nprivate resetUrlToCurrentUrlTree(): void {\n    const /** @type {?} */ path = this.urlSerializer.serialize(this.rawUrlTree);\n    this.location.replaceState(path);\n  }\n}\n\nfunction Router_tsickle_Closure_declarations() {\n/** @type {?} */\nRouter.prototype.currentUrlTree;\n/** @type {?} */\nRouter.prototype.rawUrlTree;\n/** @type {?} */\nRouter.prototype.navigations;\n/** @type {?} */\nRouter.prototype.routerEvents;\n/** @type {?} */\nRouter.prototype.currentRouterState;\n/** @type {?} */\nRouter.prototype.locationSubscription;\n/** @type {?} */\nRouter.prototype.navigationId;\n/** @type {?} */\nRouter.prototype.configLoader;\n/** @type {?} */\nRouter.prototype.ngModule;\n/**\n * Error handler that is invoked when a navigation errors.\n * \n * See {\\@link ErrorHandler} for more information.\n * @type {?}\n */\nRouter.prototype.errorHandler;\n/**\n * Indicates if at least one navigation happened.\n * @type {?}\n */\nRouter.prototype.navigated;\n/**\n * Used by RouterModule. This allows us to\n * pause the navigation either before preactivation or after it.\n * \\@internal\n * @type {?}\n */\nRouter.prototype.hooks;\n/**\n * Extracts and merges URLs. Used for AngularJS to Angular migrations.\n * @type {?}\n */\nRouter.prototype.urlHandlingStrategy;\n/** @type {?} */\nRouter.prototype.routeReuseStrategy;\n/** @type {?} */\nRouter.prototype.rootComponentType;\n/** @type {?} */\nRouter.prototype.urlSerializer;\n/** @type {?} */\nRouter.prototype.rootContexts;\n/** @type {?} */\nRouter.prototype.location;\n/** @type {?} */\nRouter.prototype.config;\n}\n\nclass ActivateRoutes {\n/**\n * @param {?} routeReuseStrategy\n * @param {?} futureState\n * @param {?} currState\n * @param {?} forwardEvent\n */\nconstructor(\nprivate routeReuseStrategy: RouteReuseStrategy,\nprivate futureState: RouterState,\nprivate currState: RouterState,\nprivate forwardEvent: (evt: RouteEvent) => void) {}\n/**\n * @param {?} parentContexts\n * @return {?}\n */\nactivate(parentContexts: ChildrenOutletContexts): void {\n    const /** @type {?} */ futureRoot = this.futureState._root;\n    const /** @type {?} */ currRoot = this.currState ? this.currState._root : null;\n\n    this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);\n    advanceActivatedRoute(this.futureState.root);\n    this.activateChildRoutes(futureRoot, currRoot, parentContexts);\n  }\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} contexts\n * @return {?}\n */\n\nprivate deactivateChildRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>|null,\n      contexts: ChildrenOutletContexts): void {\n    const /** @type {?} */ children: {[outletName: string]: TreeNode<ActivatedRoute>} = nodeChildrenAsMap(currNode);\n\n    // Recurse on the routes active in the future state to de-activate deeper children\n    futureNode.children.forEach(futureChild => {\n      const /** @type {?} */ childOutletName = futureChild.value.outlet;\n      this.deactivateRoutes(futureChild, children[childOutletName], contexts);\n      delete children[childOutletName];\n    });\n\n    // De-activate the routes that will not be re-used\n    forEach(children, (v: TreeNode<ActivatedRoute>, childName: string) => {\n      this.deactivateRouteAndItsChildren(v, contexts);\n    });\n  }\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} parentContext\n * @return {?}\n */\n\nprivate deactivateRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>,\n      parentContext: ChildrenOutletContexts): void {\n    const /** @type {?} */ future = futureNode.value;\n    const /** @type {?} */ curr = currNode ? currNode.value : null;\n\n    if (future === curr) {\n      // Reusing the node, check to see if the children need to be de-activated\n      if (future.component) {\n        // If we have a normal route, we need to go through an outlet.\n        const /** @type {?} */ context = parentContext.getContext(future.outlet);\n        if (context) {\n          this.deactivateChildRoutes(futureNode, currNode, context.children);\n        }\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.deactivateChildRoutes(futureNode, currNode, parentContext);\n      }\n    } else {\n      if (curr) {\n        // Deactivate the current route which will not be re-used\n        this.deactivateRouteAndItsChildren(currNode, parentContext);\n      }\n    }\n  }\n/**\n * @param {?} route\n * @param {?} parentContexts\n * @return {?}\n */\n\nprivate deactivateRouteAndItsChildren(\n      route: TreeNode<ActivatedRoute>, parentContexts: ChildrenOutletContexts): void {\n    if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {\n      this.detachAndStoreRouteSubtree(route, parentContexts);\n    } else {\n      this.deactivateRouteAndOutlet(route, parentContexts);\n    }\n  }\n/**\n * @param {?} route\n * @param {?} parentContexts\n * @return {?}\n */\n\nprivate detachAndStoreRouteSubtree(\n      route: TreeNode<ActivatedRoute>, parentContexts: ChildrenOutletContexts): void {\n    const /** @type {?} */ context = parentContexts.getContext(route.value.outlet);\n    if (context && context.outlet) {\n      const /** @type {?} */ componentRef = context.outlet.detach();\n      const /** @type {?} */ contexts = context.children.onOutletDeactivated();\n      this.routeReuseStrategy.store(route.value.snapshot, {componentRef, route, contexts});\n    }\n  }\n/**\n * @param {?} route\n * @param {?} parentContexts\n * @return {?}\n */\n\nprivate deactivateRouteAndOutlet(\n      route: TreeNode<ActivatedRoute>, parentContexts: ChildrenOutletContexts): void {\n    const /** @type {?} */ context = parentContexts.getContext(route.value.outlet);\n\n    if (context) {\n      const /** @type {?} */ children: {[outletName: string]: any} = nodeChildrenAsMap(route);\n      const /** @type {?} */ contexts = route.value.component ? context.children : parentContexts;\n\n      forEach(children, (v: any, k: string) => this.deactivateRouteAndItsChildren(v, contexts));\n\n      if (context.outlet) {\n        // Destroy the component\n        context.outlet.deactivate();\n        // Destroy the contexts for all the outlets that were in the component\n        context.children.onOutletDeactivated();\n      }\n    }\n  }\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} contexts\n * @return {?}\n */\n\nprivate activateChildRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>|null,\n      contexts: ChildrenOutletContexts): void {\n    const /** @type {?} */ children: {[outlet: string]: any} = nodeChildrenAsMap(currNode);\n    futureNode.children.forEach(\n        c => { this.activateRoutes(c, children[c.value.outlet], contexts); });\n    if (futureNode.children.length && futureNode.value.routeConfig) {\n      this.forwardEvent(new ChildActivationEnd(futureNode.value.routeConfig));\n    }\n  }\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} parentContexts\n * @return {?}\n */\n\nprivate activateRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>,\n      parentContexts: ChildrenOutletContexts): void {\n    const /** @type {?} */ future = futureNode.value;\n    const /** @type {?} */ curr = currNode ? currNode.value : null;\n\n    advanceActivatedRoute(future);\n\n    // reusing the node\n    if (future === curr) {\n      if (future.component) {\n        // If we have a normal route, we need to go through an outlet.\n        const /** @type {?} */ context = parentContexts.getOrCreateContext(future.outlet);\n        this.activateChildRoutes(futureNode, currNode, context.children);\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.activateChildRoutes(futureNode, currNode, parentContexts);\n      }\n    } else {\n      if (future.component) {\n        // if we have a normal route, we need to place the component into the outlet and recurse.\n        const /** @type {?} */ context = parentContexts.getOrCreateContext(future.outlet);\n\n        if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {\n          const /** @type {?} */ stored =\n              ( /** @type {?} */((<DetachedRouteHandleInternal>this.routeReuseStrategy.retrieve(future.snapshot))));\n          this.routeReuseStrategy.store(future.snapshot, null);\n          context.children.onOutletReAttached(stored.contexts);\n          context.attachRef = stored.componentRef;\n          context.route = stored.route.value;\n          if (context.outlet) {\n            // Attach right away when the outlet has already been instantiated\n            // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated\n            context.outlet.attach(stored.componentRef, stored.route.value);\n          }\n          advanceActivatedRouteNodeAndItsChildren(stored.route);\n        } else {\n          const /** @type {?} */ config = parentLoadedConfig(future.snapshot);\n          const /** @type {?} */ cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;\n\n          context.route = future;\n          context.resolver = cmpFactoryResolver;\n          if (context.outlet) {\n            // Activate the outlet when it has already been instantiated\n            // Otherwise it will get activated from its `ngOnInit` when instantiated\n            context.outlet.activateWith(future, cmpFactoryResolver);\n          }\n\n          this.activateChildRoutes(futureNode, null, context.children);\n        }\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.activateChildRoutes(futureNode, null, parentContexts);\n      }\n    }\n  }\n}\n\nfunction ActivateRoutes_tsickle_Closure_declarations() {\n/** @type {?} */\nActivateRoutes.prototype.routeReuseStrategy;\n/** @type {?} */\nActivateRoutes.prototype.futureState;\n/** @type {?} */\nActivateRoutes.prototype.currState;\n/** @type {?} */\nActivateRoutes.prototype.forwardEvent;\n}\n\n/**\n * @param {?} node\n * @return {?}\n */\nfunction advanceActivatedRouteNodeAndItsChildren(node: TreeNode<ActivatedRoute>): void {\n  advanceActivatedRoute(node.value);\n  node.children.forEach(advanceActivatedRouteNodeAndItsChildren);\n}\n/**\n * @param {?} snapshot\n * @return {?}\n */\nfunction parentLoadedConfig(snapshot: ActivatedRouteSnapshot): LoadedRouterConfig|null {\n  for (let /** @type {?} */ s = snapshot.parent; s; s = s.parent) {\n    const /** @type {?} */ route = s._routeConfig;\n    if (route && route._loadedConfig) return route._loadedConfig;\n    if (route && route.component) return null;\n  }\n\n  return null;\n}\n/**\n * @param {?} commands\n * @return {?}\n */\nfunction validateCommands(commands: string[]): void {\n  for (let /** @type {?} */ i = 0; i < commands.length; i++) {\n    const /** @type {?} */ cmd = commands[i];\n    if (cmd == null) {\n      throw new Error(`The requested path contains ${cmd} segment at index ${i}`);\n    }\n  }\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {UrlTree} from './url_tree';\n/**\n * \\@whatItDoes Provides a way to migrate AngularJS applications to Angular.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class UrlHandlingStrategy {\n  /**\n   * Tells the router if this URL should be processed.\n   *\n   * When it returns true, the router will execute the regular navigation.\n   * When it returns false, the router will set the router state to an empty state.\n   * As a result, all the active components will be destroyed.\n   *\n   */\n  abstract shouldProcessUrl(url: UrlTree): boolean;\n\n  /**\n   * Extracts the part of the URL that should be handled by the router.\n   * The rest of the URL will remain untouched.\n   */\n  abstract extract(url: UrlTree): UrlTree;\n\n  /**\n   * Merges the URL fragment with the rest of the URL.\n   */\n  abstract merge(newUrlPart: UrlTree, rawUrl: UrlTree): UrlTree;\n}\n\nfunction UrlHandlingStrategy_tsickle_Closure_declarations() {\n\n/**\n * Tells the router if this URL should be processed.\n * \n * When it returns true, the router will execute the regular navigation.\n * When it returns false, the router will set the router state to an empty state.\n * As a result, all the active components will be destroyed.\n * \n * @abstract\n * @param {?} url\n * @return {?}\n */\nUrlHandlingStrategy.prototype.shouldProcessUrl = function(url) {};\n\n/**\n * Extracts the part of the URL that should be handled by the router.\n * The rest of the URL will remain untouched.\n * @abstract\n * @param {?} url\n * @return {?}\n */\nUrlHandlingStrategy.prototype.extract = function(url) {};\n\n/**\n * Merges the URL fragment with the rest of the URL.\n * @abstract\n * @param {?} newUrlPart\n * @param {?} rawUrl\n * @return {?}\n */\nUrlHandlingStrategy.prototype.merge = function(newUrlPart, rawUrl) {};\n}\n\n/**\n * \\@experimental\n */\nexport class DefaultUrlHandlingStrategy implements UrlHandlingStrategy {\n/**\n * @param {?} url\n * @return {?}\n */\nshouldProcessUrl(url: UrlTree): boolean { return true; }\n/**\n * @param {?} url\n * @return {?}\n */\nextract(url: UrlTree): UrlTree { return url; }\n/**\n * @param {?} newUrlPart\n * @param {?} wholeUrl\n * @return {?}\n */\nmerge(newUrlPart: UrlTree, wholeUrl: UrlTree): UrlTree { return newUrlPart; }\n}","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, InjectionToken, Injector, NgModuleFactory, NgModuleFactoryLoader, NgModuleRef} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {fromPromise} from 'rxjs/observable/fromPromise';\nimport {of } from 'rxjs/observable/of';\nimport {map} from 'rxjs/operator/map';\nimport {mergeMap} from 'rxjs/operator/mergeMap';\nimport {LoadChildren, LoadedRouterConfig, Route} from './config';\nimport {flatten, wrapIntoObservable} from './utils/collection';\n/**\n * \\@docsNotRequired\n * \\@experimental\n */\nexport const /** @type {?} */ ROUTES = new InjectionToken<Route[][]>('ROUTES');\nexport class RouterConfigLoader {\n/**\n * @param {?} loader\n * @param {?} compiler\n * @param {?=} onLoadStartListener\n * @param {?=} onLoadEndListener\n */\nconstructor(\nprivate loader: NgModuleFactoryLoader,\nprivate compiler: Compiler,\nprivate onLoadStartListener?: (r: Route) => void,\nprivate onLoadEndListener?: (r: Route) => void) {}\n/**\n * @param {?} parentInjector\n * @param {?} route\n * @return {?}\n */\nload(parentInjector: Injector, route: Route): Observable<LoadedRouterConfig> {\n    if (this.onLoadStartListener) {\n      this.onLoadStartListener(route);\n    }\n\n    const /** @type {?} */ moduleFactory$ = this.loadModuleFactory( /** @type {?} */((route.loadChildren)));\n\n    return map.call(moduleFactory$, (factory: NgModuleFactory<any>) => {\n      if (this.onLoadEndListener) {\n        this.onLoadEndListener(route);\n      }\n\n      const /** @type {?} */ module = factory.create(parentInjector);\n\n      return new LoadedRouterConfig(flatten(module.injector.get(ROUTES)), module);\n    });\n  }\n/**\n * @param {?} loadChildren\n * @return {?}\n */\n\nprivate loadModuleFactory(loadChildren: LoadChildren): Observable<NgModuleFactory<any>> {\n    if (typeof loadChildren === 'string') {\n      return fromPromise(this.loader.load(loadChildren));\n    } else {\n      return mergeMap.call(wrapIntoObservable(loadChildren()), (t: any) => {\n        if (t instanceof NgModuleFactory) {\n          return of (t);\n        } else {\n          return fromPromise(this.compiler.compileModuleAsync(t));\n        }\n      });\n    }\n  }\n}\n\nfunction RouterConfigLoader_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterConfigLoader.prototype.loader;\n/** @type {?} */\nRouterConfigLoader.prototype.compiler;\n/** @type {?} */\nRouterConfigLoader.prototype.onLoadStartListener;\n/** @type {?} */\nRouterConfigLoader.prototype.onLoadEndListener;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentRef} from '@angular/core';\n\nimport {OutletContext} from './router_outlet_context';\nimport {ActivatedRoute, ActivatedRouteSnapshot} from './router_state';\nimport {TreeNode} from './utils/tree';\n\n/**\n * @whatItDoes Represents the detached route tree.\n *\n * This is an opaque value the router will give to a custom route reuse strategy\n * to store and retrieve later on.\n *\n * @experimental\n */\nexport type DetachedRouteHandle = {};\n\n/** @internal */\nexport type DetachedRouteHandleInternal = {\n  contexts: Map<string, OutletContext>,\n  componentRef: ComponentRef<any>,\n  route: TreeNode<ActivatedRoute>,\n};\n/**\n * \\@whatItDoes Provides a way to customize when activated routes get reused.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class RouteReuseStrategy {\n  /** Determines if this route (and its subtree) should be detached to be reused later */\n  abstract shouldDetach(route: ActivatedRouteSnapshot): boolean;\n\n  /**\n   * Stores the detached route.\n   *\n   * Storing a `null` value should erase the previously stored value.\n   */\n  abstract store(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle|null): void;\n\n  /** Determines if this route (and its subtree) should be reattached */\n  abstract shouldAttach(route: ActivatedRouteSnapshot): boolean;\n\n  /** Retrieves the previously stored route */\n  abstract retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle|null;\n\n  /** Determines if a route should be reused */\n  abstract shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean;\n}\n\nfunction RouteReuseStrategy_tsickle_Closure_declarations() {\n\n/**\n * Determines if this route (and its subtree) should be detached to be reused later\n * @abstract\n * @param {?} route\n * @return {?}\n */\nRouteReuseStrategy.prototype.shouldDetach = function(route) {};\n\n/**\n * Stores the detached route.\n * \n * Storing a `null` value should erase the previously stored value.\n * @abstract\n * @param {?} route\n * @param {?} handle\n * @return {?}\n */\nRouteReuseStrategy.prototype.store = function(route, handle) {};\n\n/**\n * Determines if this route (and its subtree) should be reattached\n * @abstract\n * @param {?} route\n * @return {?}\n */\nRouteReuseStrategy.prototype.shouldAttach = function(route) {};\n\n/**\n * Retrieves the previously stored route\n * @abstract\n * @param {?} route\n * @return {?}\n */\nRouteReuseStrategy.prototype.retrieve = function(route) {};\n\n/**\n * Determines if a route should be reused\n * @abstract\n * @param {?} future\n * @param {?} curr\n * @return {?}\n */\nRouteReuseStrategy.prototype.shouldReuseRoute = function(future, curr) {};\n}\n\n/**\n * Does not detach any subtrees. Reuses routes as long as their route config is the same.\n */\nexport class DefaultRouteReuseStrategy implements RouteReuseStrategy {\n/**\n * @param {?} route\n * @return {?}\n */\nshouldDetach(route: ActivatedRouteSnapshot): boolean { return false; }\n/**\n * @param {?} route\n * @param {?} detachedTree\n * @return {?}\n */\nstore(route: ActivatedRouteSnapshot, detachedTree: DetachedRouteHandle): void {}\n/**\n * @param {?} route\n * @return {?}\n */\nshouldAttach(route: ActivatedRouteSnapshot): boolean { return false; }\n/**\n * @param {?} route\n * @return {?}\n */\nretrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle|null { return null; }\n/**\n * @param {?} future\n * @param {?} curr\n * @return {?}\n */\nshouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {\n    return future.routeConfig === curr.routeConfig;\n  }\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {of } from 'rxjs/observable/of';\n\nimport {Data, ResolveData, Route, Routes} from './config';\nimport {ActivatedRouteSnapshot, RouterStateSnapshot, inheritedParamsDataResolve} from './router_state';\nimport {PRIMARY_OUTLET, defaultUrlMatcher} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree, mapChildrenIntoArray} from './url_tree';\nimport {forEach, last} from './utils/collection';\nimport {TreeNode} from './utils/tree';\nclass NoMatch {}\n/**\n * @param {?} rootComponentType\n * @param {?} config\n * @param {?} urlTree\n * @param {?} url\n * @return {?}\n */\nexport function recognize(\n    rootComponentType: Type<any>| null, config: Routes, urlTree: UrlTree,\n    url: string): Observable<RouterStateSnapshot> {\n  return new Recognizer(rootComponentType, config, urlTree, url).recognize();\n}\nclass Recognizer {\n/**\n * @param {?} rootComponentType\n * @param {?} config\n * @param {?} urlTree\n * @param {?} url\n */\nconstructor(\nprivate rootComponentType: Type<any>|null,\nprivate config: Routes,\nprivate urlTree: UrlTree,\nprivate url: string) {}\n/**\n * @return {?}\n */\nrecognize(): Observable<RouterStateSnapshot> {\n    try {\n      const /** @type {?} */ rootSegmentGroup = split(this.urlTree.root, [], [], this.config).segmentGroup;\n\n      const /** @type {?} */ children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);\n\n      const /** @type {?} */ root = new ActivatedRouteSnapshot(\n          [], Object.freeze({}), Object.freeze(this.urlTree.queryParams), /** @type {?} */(( this.urlTree.fragment)),\n          {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});\n\n      const /** @type {?} */ rootNode = new TreeNode<ActivatedRouteSnapshot>(root, children);\n      const /** @type {?} */ routeState = new RouterStateSnapshot(this.url, rootNode);\n      this.inheritParamsAndData(routeState._root);\n      return of (routeState);\n\n    } catch ( /** @type {?} */e) {\n      return new Observable<RouterStateSnapshot>(\n          (obs: Observer<RouterStateSnapshot>) => obs.error(e));\n    }\n  }\n/**\n * @param {?} routeNode\n * @return {?}\n */\ninheritParamsAndData(routeNode: TreeNode<ActivatedRouteSnapshot>): void {\n    const /** @type {?} */ route = routeNode.value;\n\n    const /** @type {?} */ i = inheritedParamsDataResolve(route);\n    route.params = Object.freeze(i.params);\n    route.data = Object.freeze(i.data);\n\n    routeNode.children.forEach(n => this.inheritParamsAndData(n));\n  }\n/**\n * @param {?} config\n * @param {?} segmentGroup\n * @param {?} outlet\n * @return {?}\n */\nprocessSegmentGroup(config: Route[], segmentGroup: UrlSegmentGroup, outlet: string):\n      TreeNode<ActivatedRouteSnapshot>[] {\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n      return this.processChildren(config, segmentGroup);\n    }\n\n    return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);\n  }\n/**\n * @param {?} config\n * @param {?} segmentGroup\n * @return {?}\n */\nprocessChildren(config: Route[], segmentGroup: UrlSegmentGroup):\n      TreeNode<ActivatedRouteSnapshot>[] {\n    const /** @type {?} */ children = mapChildrenIntoArray(\n        segmentGroup, (child, childOutlet) => this.processSegmentGroup(config, child, childOutlet));\n    checkOutletNameUniqueness(children);\n    sortActivatedRouteSnapshots(children);\n    return children;\n  }\n/**\n * @param {?} config\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\nprocessSegment(\n      config: Route[], segmentGroup: UrlSegmentGroup, segments: UrlSegment[],\n      outlet: string): TreeNode<ActivatedRouteSnapshot>[] {\n    for (const /** @type {?} */ r of config) {\n      try {\n        return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof NoMatch)) throw e;\n      }\n    }\n    if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n      return [];\n    }\n\n    throw new NoMatch();\n  }\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\n\nprivate noLeftoversInUrl(segmentGroup: UrlSegmentGroup, segments: UrlSegment[], outlet: string):\n      boolean {\n    return segments.length === 0 && !segmentGroup.children[outlet];\n  }\n/**\n * @param {?} route\n * @param {?} rawSegment\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\nprocessSegmentAgainstRoute(\n      route: Route, rawSegment: UrlSegmentGroup, segments: UrlSegment[],\n      outlet: string): TreeNode<ActivatedRouteSnapshot>[] {\n    if (route.redirectTo) throw new NoMatch();\n\n    if ((route.outlet || PRIMARY_OUTLET) !== outlet) throw new NoMatch();\n\n    if (route.path === '**') {\n      const /** @type {?} */ params = segments.length > 0 ? /** @type {?} */(( last(segments))).parameters : {};\n      const /** @type {?} */ snapshot = new ActivatedRouteSnapshot(\n          segments, params, Object.freeze(this.urlTree.queryParams), /** @type {?} */(( this.urlTree.fragment)),\n          getData(route), outlet, /** @type {?} */(( route.component)), route, getSourceSegmentGroup(rawSegment),\n          getPathIndexShift(rawSegment) + segments.length, getResolve(route));\n      return [new TreeNode<ActivatedRouteSnapshot>(snapshot, [])];\n    }\n\n    const {consumedSegments, parameters, lastChild} = match(rawSegment, route, segments);\n    const /** @type {?} */ rawSlicedSegments = segments.slice(lastChild);\n    const /** @type {?} */ childConfig = getChildConfig(route);\n\n    const {segmentGroup, slicedSegments} =\n        split(rawSegment, consumedSegments, rawSlicedSegments, childConfig);\n\n    const /** @type {?} */ snapshot = new ActivatedRouteSnapshot(\n        consumedSegments, parameters, Object.freeze(this.urlTree.queryParams), /** @type {?} */((\n        this.urlTree.fragment)), getData(route), outlet, /** @type {?} */(( route.component)), route,\n        getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length,\n        getResolve(route));\n\n\n    if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n      const /** @type {?} */ children = this.processChildren(childConfig, segmentGroup);\n      return [new TreeNode<ActivatedRouteSnapshot>(snapshot, children)];\n    }\n\n    if (childConfig.length === 0 && slicedSegments.length === 0) {\n      return [new TreeNode<ActivatedRouteSnapshot>(snapshot, [])];\n    }\n\n    const /** @type {?} */ children = this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);\n    return [new TreeNode<ActivatedRouteSnapshot>(snapshot, children)];\n  }\n}\n\nfunction Recognizer_tsickle_Closure_declarations() {\n/** @type {?} */\nRecognizer.prototype.rootComponentType;\n/** @type {?} */\nRecognizer.prototype.config;\n/** @type {?} */\nRecognizer.prototype.urlTree;\n/** @type {?} */\nRecognizer.prototype.url;\n}\n\n/**\n * @param {?} nodes\n * @return {?}\n */\nfunction sortActivatedRouteSnapshots(nodes: TreeNode<ActivatedRouteSnapshot>[]): void {\n  nodes.sort((a, b) => {\n    if (a.value.outlet === PRIMARY_OUTLET) return -1;\n    if (b.value.outlet === PRIMARY_OUTLET) return 1;\n    return a.value.outlet.localeCompare(b.value.outlet);\n  });\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getChildConfig(route: Route): Route[] {\n  if (route.children) {\n    return route.children;\n  }\n\n  if (route.loadChildren) {\n    return /** @type {?} */(( route._loadedConfig)).routes;\n  }\n\n  return [];\n}\n/**\n * @param {?} segmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\nfunction match(segmentGroup: UrlSegmentGroup, route: Route, segments: UrlSegment[]) {\n  if (route.path === '') {\n    if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {\n      throw new NoMatch();\n    }\n\n    return {consumedSegments: [], lastChild: 0, parameters: {}};\n  }\n\n  const /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;\n  const /** @type {?} */ res = matcher(segments, segmentGroup, route);\n  if (!res) throw new NoMatch();\n\n  const /** @type {?} */ posParams: {[n: string]: string} = {};\n  forEach( /** @type {?} */((res.posParams)), (v: UrlSegment, k: string) => { posParams[k] = v.path; });\n  const /** @type {?} */ parameters = res.consumed.length > 0 ?\n      {...posParams, ...res.consumed[res.consumed.length - 1].parameters} :\n      posParams;\n\n  return {consumedSegments: res.consumed, lastChild: res.consumed.length, parameters};\n}\n/**\n * @param {?} nodes\n * @return {?}\n */\nfunction checkOutletNameUniqueness(nodes: TreeNode<ActivatedRouteSnapshot>[]): void {\n  const /** @type {?} */ names: {[k: string]: ActivatedRouteSnapshot} = {};\n  nodes.forEach(n => {\n    const /** @type {?} */ routeWithSameOutletName = names[n.value.outlet];\n    if (routeWithSameOutletName) {\n      const /** @type {?} */ p = routeWithSameOutletName.url.map(s => s.toString()).join('/');\n      const /** @type {?} */ c = n.value.url.map(s => s.toString()).join('/');\n      throw new Error(`Two segments cannot have the same outlet name: '${p}' and '${c}'.`);\n    }\n    names[n.value.outlet] = n.value;\n  });\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction getSourceSegmentGroup(segmentGroup: UrlSegmentGroup): UrlSegmentGroup {\n  let /** @type {?} */ s = segmentGroup;\n  while (s._sourceSegment) {\n    s = s._sourceSegment;\n  }\n  return s;\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction getPathIndexShift(segmentGroup: UrlSegmentGroup): number {\n  let /** @type {?} */ s = segmentGroup;\n  let /** @type {?} */ res = (s._segmentIndexShift ? s._segmentIndexShift : 0);\n  while (s._sourceSegment) {\n    s = s._sourceSegment;\n    res += (s._segmentIndexShift ? s._segmentIndexShift : 0);\n  }\n  return res - 1;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} slicedSegments\n * @param {?} config\n * @return {?}\n */\nfunction split(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], slicedSegments: UrlSegment[],\n    config: Route[]) {\n  if (slicedSegments.length > 0 &&\n      containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n    const /** @type {?} */ s = new UrlSegmentGroup(\n        consumedSegments, createChildrenForEmptyPaths(\n                              segmentGroup, consumedSegments, config,\n                              new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return {segmentGroup: s, slicedSegments: []};\n  }\n\n  if (slicedSegments.length === 0 &&\n      containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {\n    const /** @type {?} */ s = new UrlSegmentGroup(\n        segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(\n                                   segmentGroup, slicedSegments, config, segmentGroup.children));\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return {segmentGroup: s, slicedSegments};\n  }\n\n  const /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\n  s._sourceSegment = segmentGroup;\n  s._segmentIndexShift = consumedSegments.length;\n  return {segmentGroup: s, slicedSegments};\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @param {?} children\n * @return {?}\n */\nfunction addEmptyPathsToChildrenIfNeeded(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[],\n    children: {[name: string]: UrlSegmentGroup}): {[name: string]: UrlSegmentGroup} {\n  const /** @type {?} */ res: {[name: string]: UrlSegmentGroup} = {};\n  for (const /** @type {?} */ r of routes) {\n    if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n      const /** @type {?} */ s = new UrlSegmentGroup([], {});\n      s._sourceSegment = segmentGroup;\n      s._segmentIndexShift = segmentGroup.segments.length;\n      res[getOutlet(r)] = s;\n    }\n  }\n  return {...children, ...res};\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} routes\n * @param {?} primarySegment\n * @return {?}\n */\nfunction createChildrenForEmptyPaths(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], routes: Route[],\n    primarySegment: UrlSegmentGroup): {[name: string]: UrlSegmentGroup} {\n  const /** @type {?} */ res: {[name: string]: UrlSegmentGroup} = {};\n  res[PRIMARY_OUTLET] = primarySegment;\n  primarySegment._sourceSegment = segmentGroup;\n  primarySegment._segmentIndexShift = consumedSegments.length;\n\n  for (const /** @type {?} */ r of routes) {\n    if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n      const /** @type {?} */ s = new UrlSegmentGroup([], {});\n      s._sourceSegment = segmentGroup;\n      s._segmentIndexShift = consumedSegments.length;\n      res[getOutlet(r)] = s;\n    }\n  }\n  return res;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathMatchesWithNamedOutlets(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes.some(\n      r => emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet(r) !== PRIMARY_OUTLET);\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathMatches(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes.some(r => emptyPathMatch(segmentGroup, slicedSegments, r));\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} r\n * @return {?}\n */\nfunction emptyPathMatch(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], r: Route): boolean {\n  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {\n    return false;\n  }\n\n  return r.path === '' && r.redirectTo === undefined;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getOutlet(route: Route): string {\n  return route.outlet || PRIMARY_OUTLET;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getData(route: Route): Data {\n  return route.data || {};\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getResolve(route: Route): ResolveData {\n  return route.resolve || {};\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {from} from 'rxjs/observable/from';\nimport {of } from 'rxjs/observable/of';\nimport {concatMap} from 'rxjs/operator/concatMap';\nimport {every} from 'rxjs/operator/every';\nimport {first} from 'rxjs/operator/first';\nimport {last} from 'rxjs/operator/last';\nimport {map} from 'rxjs/operator/map';\nimport {mergeMap} from 'rxjs/operator/mergeMap';\nimport {reduce} from 'rxjs/operator/reduce';\n\nimport {LoadedRouterConfig, ResolveData, RunGuardsAndResolvers} from './config';\nimport {ChildActivationStart, RouteEvent} from './events';\nimport {ChildrenOutletContexts, OutletContext} from './router_outlet_context';\nimport {ActivatedRouteSnapshot, RouterStateSnapshot, equalParamsAndUrlSegments, inheritedParamsDataResolve} from './router_state';\nimport {andObservables, forEach, shallowEqual, wrapIntoObservable} from './utils/collection';\nimport {TreeNode, nodeChildrenAsMap} from './utils/tree';\nclass CanActivate {\n/**\n * @param {?} path\n */\nconstructor(public path: ActivatedRouteSnapshot[]) {}\n/**\n * @return {?}\n */\nget route(): ActivatedRouteSnapshot { return this.path[this.path.length - 1]; }\n}\n\nfunction CanActivate_tsickle_Closure_declarations() {\n/** @type {?} */\nCanActivate.prototype.path;\n}\n\nclass CanDeactivate {\n/**\n * @param {?} component\n * @param {?} route\n */\nconstructor(public component: Object|null,\npublic route: ActivatedRouteSnapshot) {}\n}\n\nfunction CanDeactivate_tsickle_Closure_declarations() {\n/** @type {?} */\nCanDeactivate.prototype.component;\n/** @type {?} */\nCanDeactivate.prototype.route;\n}\n\n/**\n * This class bundles the actions involved in preactivation of a route.\n */\nexport class PreActivation {\nprivate canActivateChecks: CanActivate[] = [];\nprivate canDeactivateChecks: CanDeactivate[] = [];\n/**\n * @param {?} future\n * @param {?} curr\n * @param {?} moduleInjector\n * @param {?=} forwardEvent\n */\nconstructor(\nprivate future: RouterStateSnapshot,\nprivate curr: RouterStateSnapshot,\nprivate moduleInjector: Injector,\nprivate forwardEvent?: (evt: RouteEvent) => void) {}\n/**\n * @param {?} parentContexts\n * @return {?}\n */\ninitalize(parentContexts: ChildrenOutletContexts): void {\n    const /** @type {?} */ futureRoot = this.future._root;\n    const /** @type {?} */ currRoot = this.curr ? this.curr._root : null;\n    this.setupChildRouteGuards(futureRoot, currRoot, parentContexts, [futureRoot.value]);\n  }\n/**\n * @return {?}\n */\ncheckGuards(): Observable<boolean> {\n    if (!this.isDeactivating() && !this.isActivating()) {\n      return of (true);\n    }\n    const /** @type {?} */ canDeactivate$ = this.runCanDeactivateChecks();\n    return mergeMap.call(\n        canDeactivate$,\n        (canDeactivate: boolean) => canDeactivate ? this.runCanActivateChecks() : of (false));\n  }\n/**\n * @return {?}\n */\nresolveData(): Observable<any> {\n    if (!this.isActivating()) return of (null);\n    const /** @type {?} */ checks$ = from(this.canActivateChecks);\n    const /** @type {?} */ runningChecks$ =\n        concatMap.call(checks$, (check: CanActivate) => this.runResolve(check.route));\n    return reduce.call(runningChecks$, (_: any, __: any) => _);\n  }\n/**\n * @return {?}\n */\nisDeactivating(): boolean { return this.canDeactivateChecks.length !== 0; }\n/**\n * @return {?}\n */\nisActivating(): boolean { return this.canActivateChecks.length !== 0; }\n/**\n * Iterates over child routes and calls recursive `setupRouteGuards` to get `this` instance in\n * proper state to run `checkGuards()` method.\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} contexts\n * @param {?} futurePath\n * @return {?}\n */\n\nprivate setupChildRouteGuards(\n      futureNode: TreeNode<ActivatedRouteSnapshot>, currNode: TreeNode<ActivatedRouteSnapshot>|null,\n      contexts: ChildrenOutletContexts|null, futurePath: ActivatedRouteSnapshot[]): void {\n    const /** @type {?} */ prevChildren = nodeChildrenAsMap(currNode);\n\n    // Process the children of the future route\n    futureNode.children.forEach(c => {\n      this.setupRouteGuards(\n          c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]));\n      delete prevChildren[c.value.outlet];\n    });\n\n    // Process any children left from the current route (not active for the future route)\n    forEach(\n        prevChildren, (v: TreeNode<ActivatedRouteSnapshot>, k: string) =>\n                          this.deactivateRouteAndItsChildren(v, /** @type {?} */(( contexts)).getContext(k)));\n  }\n/**\n * Iterates over child routes and calls recursive `setupRouteGuards` to get `this` instance in\n * proper state to run `checkGuards()` method.\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} parentContexts\n * @param {?} futurePath\n * @return {?}\n */\n\nprivate setupRouteGuards(\n      futureNode: TreeNode<ActivatedRouteSnapshot>, currNode: TreeNode<ActivatedRouteSnapshot>,\n      parentContexts: ChildrenOutletContexts|null, futurePath: ActivatedRouteSnapshot[]): void {\n    const /** @type {?} */ future = futureNode.value;\n    const /** @type {?} */ curr = currNode ? currNode.value : null;\n    const /** @type {?} */ context = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null;\n\n    // reusing the node\n    if (curr && future._routeConfig === curr._routeConfig) {\n      const /** @type {?} */ shouldRunGuardsAndResolvers = this.shouldRunGuardsAndResolvers(\n          curr, future, /** @type {?} */(( future._routeConfig)).runGuardsAndResolvers);\n      if (shouldRunGuardsAndResolvers) {\n        this.canActivateChecks.push(new CanActivate(futurePath));\n      } else {\n        // we need to set the data\n        future.data = curr.data;\n        future._resolvedData = curr._resolvedData;\n      }\n\n      // If we have a component, we need to go through an outlet.\n      if (future.component) {\n        this.setupChildRouteGuards(\n            futureNode, currNode, context ? context.children : null, futurePath);\n\n        // if we have a componentless route, we recurse but keep the same outlet map.\n      } else {\n        this.setupChildRouteGuards(futureNode, currNode, parentContexts, futurePath);\n      }\n\n      if (shouldRunGuardsAndResolvers) {\n        const /** @type {?} */ outlet = /** @type {?} */(( /** @type {?} */(( context)).outlet));\n        this.canDeactivateChecks.push(new CanDeactivate(outlet.component, curr));\n      }\n    } else {\n      if (curr) {\n        this.deactivateRouteAndItsChildren(currNode, context);\n      }\n\n      this.canActivateChecks.push(new CanActivate(futurePath));\n      // If we have a component, we need to go through an outlet.\n      if (future.component) {\n        this.setupChildRouteGuards(futureNode, null, context ? context.children : null, futurePath);\n\n        // if we have a componentless route, we recurse but keep the same outlet map.\n      } else {\n        this.setupChildRouteGuards(futureNode, null, parentContexts, futurePath);\n      }\n    }\n  }\n/**\n * @param {?} curr\n * @param {?} future\n * @param {?} mode\n * @return {?}\n */\n\nprivate shouldRunGuardsAndResolvers(\n      curr: ActivatedRouteSnapshot, future: ActivatedRouteSnapshot,\n      mode: RunGuardsAndResolvers|undefined): boolean {\n    switch (mode) {\n      case 'always':\n        return true;\n\n      case 'paramsOrQueryParamsChange':\n        return !equalParamsAndUrlSegments(curr, future) ||\n            !shallowEqual(curr.queryParams, future.queryParams);\n\n      case 'paramsChange':\n      default:\n        return !equalParamsAndUrlSegments(curr, future);\n    }\n  }\n/**\n * @param {?} route\n * @param {?} context\n * @return {?}\n */\n\nprivate deactivateRouteAndItsChildren(\n      route: TreeNode<ActivatedRouteSnapshot>, context: OutletContext|null): void {\n    const /** @type {?} */ children = nodeChildrenAsMap(route);\n    const /** @type {?} */ r = route.value;\n\n    forEach(children, (node: TreeNode<ActivatedRouteSnapshot>, childName: string) => {\n      if (!r.component) {\n        this.deactivateRouteAndItsChildren(node, context);\n      } else if (context) {\n        this.deactivateRouteAndItsChildren(node, context.children.getContext(childName));\n      } else {\n        this.deactivateRouteAndItsChildren(node, null);\n      }\n    });\n\n    if (!r.component) {\n      this.canDeactivateChecks.push(new CanDeactivate(null, r));\n    } else if (context && context.outlet && context.outlet.isActivated) {\n      this.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, r));\n    } else {\n      this.canDeactivateChecks.push(new CanDeactivate(null, r));\n    }\n  }\n/**\n * @return {?}\n */\n\nprivate runCanDeactivateChecks(): Observable<boolean> {\n    const /** @type {?} */ checks$ = from(this.canDeactivateChecks);\n    const /** @type {?} */ runningChecks$ = mergeMap.call(\n        checks$, (check: CanDeactivate) => this.runCanDeactivate(check.component, check.route));\n    return every.call(runningChecks$, (result: boolean) => result === true);\n  }\n/**\n * @return {?}\n */\n\nprivate runCanActivateChecks(): Observable<boolean> {\n    const /** @type {?} */ checks$ = from(this.canActivateChecks);\n    const /** @type {?} */ runningChecks$ = concatMap.call(\n        checks$, (check: CanActivate) => andObservables(from([\n                   this.fireChildActivationStart(check.path), this.runCanActivateChild(check.path),\n                   this.runCanActivate(check.route)\n                 ])));\n    return every.call(runningChecks$, (result: boolean) => result === true);\n    // this.fireChildActivationStart(check.path),\n  }\n/**\n * This should fire off `ChildActivationStart` events for each route being activated at this\n * level.\n * In other words, if you're activating `a` and `b` below, `path` will contain the\n * `ActivatedRouteSnapshot`s for both and we will fire `ChildActivationStart` for both. Always\n * return\n * `true` so checks continue to run.\n * @param {?} path\n * @return {?}\n */\n\nprivate fireChildActivationStart(path: ActivatedRouteSnapshot[]): Observable<boolean> {\n    if (!this.forwardEvent) return of (true);\n    const /** @type {?} */ childActivations = path.slice(0, path.length - 1).reverse().filter(_ => _ !== null);\n\n    return andObservables(map.call(from(childActivations), (snapshot: ActivatedRouteSnapshot) => {\n      if (this.forwardEvent && snapshot._routeConfig) {\n        this.forwardEvent(new ChildActivationStart(snapshot._routeConfig));\n      }\n      return of (true);\n    }));\n  }\n/**\n * @param {?} future\n * @return {?}\n */\n\nprivate runCanActivate(future: ActivatedRouteSnapshot): Observable<boolean> {\n    const /** @type {?} */ canActivate = future._routeConfig ? future._routeConfig.canActivate : null;\n    if (!canActivate || canActivate.length === 0) return of (true);\n    const /** @type {?} */ obs = map.call(from(canActivate), (c: any) => {\n      const /** @type {?} */ guard = this.getToken(c, future);\n      let /** @type {?} */ observable: Observable<boolean>;\n      if (guard.canActivate) {\n        observable = wrapIntoObservable(guard.canActivate(future, this.future));\n      } else {\n        observable = wrapIntoObservable(guard(future, this.future));\n      }\n      return first.call(observable);\n    });\n    return andObservables(obs);\n  }\n/**\n * @param {?} path\n * @return {?}\n */\n\nprivate runCanActivateChild(path: ActivatedRouteSnapshot[]): Observable<boolean> {\n    const /** @type {?} */ future = path[path.length - 1];\n\n    const /** @type {?} */ canActivateChildGuards = path.slice(0, path.length - 1)\n                                       .reverse()\n                                       .map(p => this.extractCanActivateChild(p))\n                                       .filter(_ => _ !== null);\n\n    return andObservables(map.call(from(canActivateChildGuards), (d: any) => {\n      const /** @type {?} */ obs = map.call(from(d.guards), (c: any) => {\n        const /** @type {?} */ guard = this.getToken(c, d.node);\n        let /** @type {?} */ observable: Observable<boolean>;\n        if (guard.canActivateChild) {\n          observable = wrapIntoObservable(guard.canActivateChild(future, this.future));\n        } else {\n          observable = wrapIntoObservable(guard(future, this.future));\n        }\n        return first.call(observable);\n      });\n      return andObservables(obs);\n    }));\n  }\n/**\n * @param {?} p\n * @return {?}\n */\n\nprivate extractCanActivateChild(p: ActivatedRouteSnapshot):\n      {node: ActivatedRouteSnapshot, guards: any[]}|null {\n    const /** @type {?} */ canActivateChild = p._routeConfig ? p._routeConfig.canActivateChild : null;\n    if (!canActivateChild || canActivateChild.length === 0) return null;\n    return {node: p, guards: canActivateChild};\n  }\n/**\n * @param {?} component\n * @param {?} curr\n * @return {?}\n */\n\nprivate runCanDeactivate(component: Object|null, curr: ActivatedRouteSnapshot):\n      Observable<boolean> {\n    const /** @type {?} */ canDeactivate = curr && curr._routeConfig ? curr._routeConfig.canDeactivate : null;\n    if (!canDeactivate || canDeactivate.length === 0) return of (true);\n    const /** @type {?} */ canDeactivate$ = mergeMap.call(from(canDeactivate), (c: any) => {\n      const /** @type {?} */ guard = this.getToken(c, curr);\n      let /** @type {?} */ observable: Observable<boolean>;\n      if (guard.canDeactivate) {\n        observable =\n            wrapIntoObservable(guard.canDeactivate(component, curr, this.curr, this.future));\n      } else {\n        observable = wrapIntoObservable(guard(component, curr, this.curr, this.future));\n      }\n      return first.call(observable);\n    });\n    return every.call(canDeactivate$, (result: any) => result === true);\n  }\n/**\n * @param {?} future\n * @return {?}\n */\n\nprivate runResolve(future: ActivatedRouteSnapshot): Observable<any> {\n    const /** @type {?} */ resolve = future._resolve;\n    return map.call(this.resolveNode(resolve, future), (resolvedData: any): any => {\n      future._resolvedData = resolvedData;\n      future.data = {...future.data, ...inheritedParamsDataResolve(future).resolve};\n      return null;\n    });\n  }\n/**\n * @param {?} resolve\n * @param {?} future\n * @return {?}\n */\n\nprivate resolveNode(resolve: ResolveData, future: ActivatedRouteSnapshot): Observable<any> {\n    const /** @type {?} */ keys = Object.keys(resolve);\n    if (keys.length === 0) {\n      return of ({});\n    }\n    if (keys.length === 1) {\n      const /** @type {?} */ key = keys[0];\n      return map.call(\n          this.getResolver(resolve[key], future), (value: any) => { return {[key]: value}; });\n    }\n    const /** @type {?} */ data: {[k: string]: any} = {};\n    const /** @type {?} */ runningResolvers$ = mergeMap.call(from(keys), (key: string) => {\n      return map.call(this.getResolver(resolve[key], future), (value: any) => {\n        data[key] = value;\n        return value;\n      });\n    });\n    return map.call(last.call(runningResolvers$), () => data);\n  }\n/**\n * @param {?} injectionToken\n * @param {?} future\n * @return {?}\n */\n\nprivate getResolver(injectionToken: any, future: ActivatedRouteSnapshot): Observable<any> {\n    const /** @type {?} */ resolver = this.getToken(injectionToken, future);\n    return resolver.resolve ? wrapIntoObservable(resolver.resolve(future, this.future)) :\n                              wrapIntoObservable(resolver(future, this.future));\n  }\n/**\n * @param {?} token\n * @param {?} snapshot\n * @return {?}\n */\n\nprivate getToken(token: any, snapshot: ActivatedRouteSnapshot): any {\n    const /** @type {?} */ config = closestLoadedConfig(snapshot);\n    const /** @type {?} */ injector = config ? config.module.injector : this.moduleInjector;\n    return injector.get(token);\n  }\n}\n\nfunction PreActivation_tsickle_Closure_declarations() {\n/** @type {?} */\nPreActivation.prototype.canActivateChecks;\n/** @type {?} */\nPreActivation.prototype.canDeactivateChecks;\n/** @type {?} */\nPreActivation.prototype.future;\n/** @type {?} */\nPreActivation.prototype.curr;\n/** @type {?} */\nPreActivation.prototype.moduleInjector;\n/** @type {?} */\nPreActivation.prototype.forwardEvent;\n}\n\n/**\n * @param {?} snapshot\n * @return {?}\n */\nfunction closestLoadedConfig(snapshot: ActivatedRouteSnapshot): LoadedRouterConfig|null {\n  if (!snapshot) return null;\n\n  for (let /** @type {?} */ s = snapshot.parent; s; s = s.parent) {\n    const /** @type {?} */ route = s._routeConfig;\n    if (route && route._loadedConfig) return route._loadedConfig;\n  }\n\n  return null;\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActivatedRoute} from './router_state';\nimport {PRIMARY_OUTLET, Params} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree} from './url_tree';\nimport {forEach, last, shallowEqual} from './utils/collection';\n/**\n * @param {?} route\n * @param {?} urlTree\n * @param {?} commands\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\nexport function createUrlTree(\n    route: ActivatedRoute, urlTree: UrlTree, commands: any[], queryParams: Params,\n    fragment: string): UrlTree {\n  if (commands.length === 0) {\n    return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);\n  }\n\n  const /** @type {?} */ nav = computeNavigation(commands);\n\n  if (nav.toRoot()) {\n    return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);\n  }\n\n  const /** @type {?} */ startingPosition = findStartingPosition(nav, urlTree, route);\n\n  const /** @type {?} */ segmentGroup = startingPosition.processChildren ?\n      updateSegmentGroupChildren(\n          startingPosition.segmentGroup, startingPosition.index, nav.commands) :\n      updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);\n  return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);\n}\n/**\n * @param {?} command\n * @return {?}\n */\nfunction isMatrixParams(command: any): boolean {\n  return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;\n}\n/**\n * @param {?} oldSegmentGroup\n * @param {?} newSegmentGroup\n * @param {?} urlTree\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\nfunction tree(\n    oldSegmentGroup: UrlSegmentGroup, newSegmentGroup: UrlSegmentGroup, urlTree: UrlTree,\n    queryParams: Params, fragment: string): UrlTree {\n  let /** @type {?} */ qp: any = {};\n  if (queryParams) {\n    forEach(queryParams, (value: any, name: any) => {\n      qp[name] = Array.isArray(value) ? value.map((v: any) => `${v}`) : `${value}`;\n    });\n  }\n\n  if (urlTree.root === oldSegmentGroup) {\n    return new UrlTree(newSegmentGroup, qp, fragment);\n  }\n\n  return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), qp, fragment);\n}\n/**\n * @param {?} current\n * @param {?} oldSegment\n * @param {?} newSegment\n * @return {?}\n */\nfunction replaceSegment(\n    current: UrlSegmentGroup, oldSegment: UrlSegmentGroup,\n    newSegment: UrlSegmentGroup): UrlSegmentGroup {\n  const /** @type {?} */ children: {[key: string]: UrlSegmentGroup} = {};\n  forEach(current.children, (c: UrlSegmentGroup, outletName: string) => {\n    if (c === oldSegment) {\n      children[outletName] = newSegment;\n    } else {\n      children[outletName] = replaceSegment(c, oldSegment, newSegment);\n    }\n  });\n  return new UrlSegmentGroup(current.segments, children);\n}\nclass Navigation {\n/**\n * @param {?} isAbsolute\n * @param {?} numberOfDoubleDots\n * @param {?} commands\n */\nconstructor(\npublic isAbsolute: boolean,\npublic numberOfDoubleDots: number,\npublic commands: any[]) {\n    if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {\n      throw new Error('Root segment cannot have matrix parameters');\n    }\n\n    const /** @type {?} */ cmdWithOutlet = commands.find(c => typeof c === 'object' && c != null && c.outlets);\n    if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {\n      throw new Error('{outlets:{}} has to be the last command');\n    }\n  }\n/**\n * @return {?}\n */\n\npublic toRoot(): boolean {\n    return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';\n  }\n}\n\nfunction Navigation_tsickle_Closure_declarations() {\n/** @type {?} */\nNavigation.prototype.isAbsolute;\n/** @type {?} */\nNavigation.prototype.numberOfDoubleDots;\n/** @type {?} */\nNavigation.prototype.commands;\n}\n\n/**\n * Transforms commands to a normalized `Navigation`\n * @param {?} commands\n * @return {?}\n */\nfunction computeNavigation(commands: any[]): Navigation {\n  if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {\n    return new Navigation(true, 0, commands);\n  }\n\n  let /** @type {?} */ numberOfDoubleDots = 0;\n  let /** @type {?} */ isAbsolute = false;\n\n  const /** @type {?} */ res: any[] = commands.reduce((res, cmd, cmdIdx) => {\n    if (typeof cmd === 'object' && cmd != null) {\n      if (cmd.outlets) {\n        const /** @type {?} */ outlets: {[k: string]: any} = {};\n        forEach(cmd.outlets, (commands: any, name: string) => {\n          outlets[name] = typeof commands === 'string' ? commands.split('/') : commands;\n        });\n        return [...res, {outlets}];\n      }\n\n      if (cmd.segmentPath) {\n        return [...res, cmd.segmentPath];\n      }\n    }\n\n    if (!(typeof cmd === 'string')) {\n      return [...res, cmd];\n    }\n\n    if (cmdIdx === 0) {\n      cmd.split('/').forEach((urlPart, partIndex) => {\n        if (partIndex == 0 && urlPart === '.') {\n          // skip './a'\n        } else if (partIndex == 0 && urlPart === '') {  //  '/a'\n          isAbsolute = true;\n        } else if (urlPart === '..') {  //  '../a'\n          numberOfDoubleDots++;\n        } else if (urlPart != '') {\n          res.push(urlPart);\n        }\n      });\n\n      return res;\n    }\n\n    return [...res, cmd];\n  }, []);\n\n  return new Navigation(isAbsolute, numberOfDoubleDots, res);\n}\nclass Position {\n/**\n * @param {?} segmentGroup\n * @param {?} processChildren\n * @param {?} index\n */\nconstructor(\npublic segmentGroup: UrlSegmentGroup,\npublic processChildren: boolean,\npublic index: number) {\n  }\n}\n\nfunction Position_tsickle_Closure_declarations() {\n/** @type {?} */\nPosition.prototype.segmentGroup;\n/** @type {?} */\nPosition.prototype.processChildren;\n/** @type {?} */\nPosition.prototype.index;\n}\n\n/**\n * @param {?} nav\n * @param {?} tree\n * @param {?} route\n * @return {?}\n */\nfunction findStartingPosition(nav: Navigation, tree: UrlTree, route: ActivatedRoute): Position {\n  if (nav.isAbsolute) {\n    return new Position(tree.root, true, 0);\n  }\n\n  if (route.snapshot._lastPathIndex === -1) {\n    return new Position(route.snapshot._urlSegment, true, 0);\n  }\n\n  const /** @type {?} */ modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;\n  const /** @type {?} */ index = route.snapshot._lastPathIndex + modifier;\n  return createPositionApplyingDoubleDots(\n      route.snapshot._urlSegment, index, nav.numberOfDoubleDots);\n}\n/**\n * @param {?} group\n * @param {?} index\n * @param {?} numberOfDoubleDots\n * @return {?}\n */\nfunction createPositionApplyingDoubleDots(\n    group: UrlSegmentGroup, index: number, numberOfDoubleDots: number): Position {\n  let /** @type {?} */ g = group;\n  let /** @type {?} */ ci = index;\n  let /** @type {?} */ dd = numberOfDoubleDots;\n  while (dd > ci) {\n    dd -= ci;\n    g = /** @type {?} */(( g.parent));\n    if (!g) {\n      throw new Error('Invalid number of \\'../\\'');\n    }\n    ci = g.segments.length;\n  }\n  return new Position(g, false, ci - dd);\n}\n/**\n * @param {?} command\n * @return {?}\n */\nfunction getPath(command: any): any {\n  if (typeof command === 'object' && command != null && command.outlets) {\n    return command.outlets[PRIMARY_OUTLET];\n  }\n  return `${command}`;\n}\n/**\n * @param {?} commands\n * @return {?}\n */\nfunction getOutlets(commands: any[]): {[k: string]: any[]} {\n  if (!(typeof commands[0] === 'object')) return {[PRIMARY_OUTLET]: commands};\n  if (commands[0].outlets === undefined) return {[PRIMARY_OUTLET]: commands};\n  return commands[0].outlets;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction updateSegmentGroup(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  if (!segmentGroup) {\n    segmentGroup = new UrlSegmentGroup([], {});\n  }\n  if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n    return updateSegmentGroupChildren(segmentGroup, startIndex, commands);\n  }\n\n  const /** @type {?} */ m = prefixedWith(segmentGroup, startIndex, commands);\n  const /** @type {?} */ slicedCommands = commands.slice(m.commandIndex);\n  if (m.match && m.pathIndex < segmentGroup.segments.length) {\n    const /** @type {?} */ g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});\n    g.children[PRIMARY_OUTLET] =\n        new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);\n    return updateSegmentGroupChildren(g, 0, slicedCommands);\n  } else if (m.match && slicedCommands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else if (m.match && !segmentGroup.hasChildren()) {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  } else if (m.match) {\n    return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);\n  } else {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction updateSegmentGroupChildren(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  if (commands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else {\n    const /** @type {?} */ outlets = getOutlets(commands);\n    const /** @type {?} */ children: {[key: string]: UrlSegmentGroup} = {};\n\n    forEach(outlets, (commands: any, outlet: string) => {\n      if (commands !== null) {\n        children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);\n      }\n    });\n\n    forEach(segmentGroup.children, (child: UrlSegmentGroup, childOutlet: string) => {\n      if (outlets[childOutlet] === undefined) {\n        children[childOutlet] = child;\n      }\n    });\n    return new UrlSegmentGroup(segmentGroup.segments, children);\n  }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction prefixedWith(segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]) {\n  let /** @type {?} */ currentCommandIndex = 0;\n  let /** @type {?} */ currentPathIndex = startIndex;\n\n  const /** @type {?} */ noMatch = {match: false, pathIndex: 0, commandIndex: 0};\n  while (currentPathIndex < segmentGroup.segments.length) {\n    if (currentCommandIndex >= commands.length) return noMatch;\n    const /** @type {?} */ path = segmentGroup.segments[currentPathIndex];\n    const /** @type {?} */ curr = getPath(commands[currentCommandIndex]);\n    const /** @type {?} */ next =\n        currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\n\n    if (currentPathIndex > 0 && curr === undefined) break;\n\n    if (curr && next && (typeof next === 'object') && next.outlets === undefined) {\n      if (!compare(curr, next, path)) return noMatch;\n      currentCommandIndex += 2;\n    } else {\n      if (!compare(curr, {}, path)) return noMatch;\n      currentCommandIndex++;\n    }\n    currentPathIndex++;\n  }\n\n  return {match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex};\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction createNewSegmentGroup(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  const /** @type {?} */ paths = segmentGroup.segments.slice(0, startIndex);\n\n  let /** @type {?} */ i = 0;\n  while (i < commands.length) {\n    if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {\n      const /** @type {?} */ children = createNewSegmentChildren(commands[i].outlets);\n      return new UrlSegmentGroup(paths, children);\n    }\n\n    // if we start with an object literal, we need to reuse the path part from the segment\n    if (i === 0 && isMatrixParams(commands[0])) {\n      const /** @type {?} */ p = segmentGroup.segments[startIndex];\n      paths.push(new UrlSegment(p.path, commands[0]));\n      i++;\n      continue;\n    }\n\n    const /** @type {?} */ curr = getPath(commands[i]);\n    const /** @type {?} */ next = (i < commands.length - 1) ? commands[i + 1] : null;\n    if (curr && next && isMatrixParams(next)) {\n      paths.push(new UrlSegment(curr, stringify(next)));\n      i += 2;\n    } else {\n      paths.push(new UrlSegment(curr, {}));\n      i++;\n    }\n  }\n  return new UrlSegmentGroup(paths, {});\n}\n/**\n * @param {?} outlets\n * @return {?}\n */\nfunction createNewSegmentChildren(outlets: {[name: string]: any}): any {\n  const /** @type {?} */ children: {[key: string]: UrlSegmentGroup} = {};\n  forEach(outlets, (commands: any, outlet: string) => {\n    if (commands !== null) {\n      children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);\n    }\n  });\n  return children;\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction stringify(params: {[key: string]: any}): {[key: string]: string} {\n  const /** @type {?} */ res: {[key: string]: string} = {};\n  forEach(params, (v: any, k: string) => res[k] = `${v}`);\n  return res;\n}\n/**\n * @param {?} path\n * @param {?} params\n * @param {?} segment\n * @return {?}\n */\nfunction compare(path: string, params: {[key: string]: any}, segment: UrlSegment): boolean {\n  return path == segment.path && shallowEqual(params, segment.parameters);\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\n\nimport {DetachedRouteHandleInternal, RouteReuseStrategy} from './route_reuse_strategy';\nimport {ActivatedRoute, ActivatedRouteSnapshot, RouterState, RouterStateSnapshot} from './router_state';\nimport {TreeNode} from './utils/tree';\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?} prevState\n * @return {?}\n */\nexport function createRouterState(\n    routeReuseStrategy: RouteReuseStrategy, curr: RouterStateSnapshot,\n    prevState: RouterState): RouterState {\n  const /** @type {?} */ root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);\n  return new RouterState(root, curr);\n}\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?=} prevState\n * @return {?}\n */\nfunction createNode(\n    routeReuseStrategy: RouteReuseStrategy, curr: TreeNode<ActivatedRouteSnapshot>,\n    prevState?: TreeNode<ActivatedRoute>): TreeNode<ActivatedRoute> {\n  // reuse an activated route that is currently displayed on the screen\n  if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {\n    const /** @type {?} */ value = prevState.value;\n    value._futureSnapshot = curr.value;\n    const /** @type {?} */ children = createOrReuseChildren(routeReuseStrategy, curr, prevState);\n    return new TreeNode<ActivatedRoute>(value, children);\n\n    // retrieve an activated route that is used to be displayed, but is not currently displayed\n  } else if (routeReuseStrategy.retrieve(curr.value)) {\n    const /** @type {?} */ tree: TreeNode<ActivatedRoute> =\n        ( /** @type {?} */((<DetachedRouteHandleInternal>routeReuseStrategy.retrieve(curr.value)))).route;\n    setFutureSnapshotsOfActivatedRoutes(curr, tree);\n    return tree;\n\n  } else {\n    const /** @type {?} */ value = createActivatedRoute(curr.value);\n    const /** @type {?} */ children = curr.children.map(c => createNode(routeReuseStrategy, c));\n    return new TreeNode<ActivatedRoute>(value, children);\n  }\n}\n/**\n * @param {?} curr\n * @param {?} result\n * @return {?}\n */\nfunction setFutureSnapshotsOfActivatedRoutes(\n    curr: TreeNode<ActivatedRouteSnapshot>, result: TreeNode<ActivatedRoute>): void {\n  if (curr.value.routeConfig !== result.value.routeConfig) {\n    throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');\n  }\n  if (curr.children.length !== result.children.length) {\n    throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');\n  }\n  result.value._futureSnapshot = curr.value;\n  for (let /** @type {?} */ i = 0; i < curr.children.length; ++i) {\n    setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);\n  }\n}\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?} prevState\n * @return {?}\n */\nfunction createOrReuseChildren(\n    routeReuseStrategy: RouteReuseStrategy, curr: TreeNode<ActivatedRouteSnapshot>,\n    prevState: TreeNode<ActivatedRoute>) {\n  return curr.children.map(child => {\n    for (const /** @type {?} */ p of prevState.children) {\n      if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) {\n        return createNode(routeReuseStrategy, child, p);\n      }\n    }\n    return createNode(routeReuseStrategy, child);\n  });\n}\n/**\n * @param {?} c\n * @return {?}\n */\nfunction createActivatedRoute(c: ActivatedRouteSnapshot) {\n  return new ActivatedRoute(\n      new BehaviorSubject(c.url), new BehaviorSubject(c.params), new BehaviorSubject(c.queryParams),\n      new BehaviorSubject(c.fragment), new BehaviorSubject(c.data), c.outlet, c.component, c);\n}","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport {map} from 'rxjs/operator/map';\n\nimport {Data, ResolveData, Route} from './config';\nimport {PRIMARY_OUTLET, ParamMap, Params, convertToParamMap} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree, equalSegments} from './url_tree';\nimport {shallowEqual, shallowEqualArrays} from './utils/collection';\nimport {Tree, TreeNode} from './utils/tree';\n/**\n * \\@whatItDoes Represents the state of the router.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'template.html'}) \n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n * \n * \\@description \n * RouterState is a tree of activated routes. Every node in this tree knows about the \"consumed\" URL\n * segments, the extracted parameters, and the resolved data.\n * \n * See {\\@link ActivatedRoute} for more information.\n * \n * \\@stable\n */\nexport class RouterState extends Tree<ActivatedRoute> {\n/**\n * \\@internal\n * @param {?} root\n * @param {?} snapshot\n */\nconstructor(\n      root: TreeNode<ActivatedRoute>,\npublic snapshot: RouterStateSnapshot) {\n    super(root);\n    setRouterState( /** @type {?} */((<RouterState>this)), root);\n  }\n/**\n * @return {?}\n */\ntoString(): string { return this.snapshot.toString(); }\n}\n\nfunction RouterState_tsickle_Closure_declarations() {\n/**\n * The current snapshot of the router state\n * @type {?}\n */\nRouterState.prototype.snapshot;\n}\n\n/**\n * @param {?} urlTree\n * @param {?} rootComponent\n * @return {?}\n */\nexport function createEmptyState(urlTree: UrlTree, rootComponent: Type<any>| null): RouterState {\n  const /** @type {?} */ snapshot = createEmptyStateSnapshot(urlTree, rootComponent);\n  const /** @type {?} */ emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);\n  const /** @type {?} */ emptyParams = new BehaviorSubject({});\n  const /** @type {?} */ emptyData = new BehaviorSubject({});\n  const /** @type {?} */ emptyQueryParams = new BehaviorSubject({});\n  const /** @type {?} */ fragment = new BehaviorSubject('');\n  const /** @type {?} */ activated = new ActivatedRoute(\n      emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent,\n      snapshot.root);\n  activated.snapshot = snapshot.root;\n  return new RouterState(new TreeNode<ActivatedRoute>(activated, []), snapshot);\n}\n/**\n * @param {?} urlTree\n * @param {?} rootComponent\n * @return {?}\n */\nexport function createEmptyStateSnapshot(\n    urlTree: UrlTree, rootComponent: Type<any>| null): RouterStateSnapshot {\n  const /** @type {?} */ emptyParams = {};\n  const /** @type {?} */ emptyData = {};\n  const /** @type {?} */ emptyQueryParams = {};\n  const /** @type {?} */ fragment = '';\n  const /** @type {?} */ activated = new ActivatedRouteSnapshot(\n      [], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null,\n      urlTree.root, -1, {});\n  return new RouterStateSnapshot('', new TreeNode<ActivatedRouteSnapshot>(activated, []));\n}\n/**\n * \\@whatItDoes Contains the information about a route associated with a component loaded in an\n * outlet.\n * An `ActivatedRoute` can also be used to traverse the router state tree.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({...}) \n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: Observable<string> = route.params.map(p => p.id);\n *     const url: Observable<string> = route.url.map(segments => segments.join(''));\n *     // route.data includes both `data` and `resolve`\n *     const user = route.data.map(d => d.user);\n *   }\n * }\n * ```\n * \n * \\@stable\n */\nexport class ActivatedRoute {\n/**\n * The current snapshot of this route\n */\nsnapshot: ActivatedRouteSnapshot;\n/**\n * \\@internal\n */\n_futureSnapshot: ActivatedRouteSnapshot;\n/**\n * \\@internal\n */\n_routerState: RouterState;\n/**\n * \\@internal\n */\n_paramMap: Observable<ParamMap>;\n/**\n * \\@internal\n */\n_queryParamMap: Observable<ParamMap>;\n/**\n * \\@internal\n * @param {?} url\n * @param {?} params\n * @param {?} queryParams\n * @param {?} fragment\n * @param {?} data\n * @param {?} outlet\n * @param {?} component\n * @param {?} futureSnapshot\n */\nconstructor(\npublic url: Observable<UrlSegment[]>,\npublic params: Observable<Params>,\npublic queryParams: Observable<Params>,\npublic fragment: Observable<string>,\npublic data: Observable<Data>,\npublic outlet: string,\npublic component: Type<any>|string|null, futureSnapshot: ActivatedRouteSnapshot) {\n    this._futureSnapshot = futureSnapshot;\n  }\n/**\n * The configuration used to match this route\n * @return {?}\n */\nget routeConfig(): Route|null { return this._futureSnapshot.routeConfig; }\n/**\n * The root of the router state\n * @return {?}\n */\nget root(): ActivatedRoute { return this._routerState.root; }\n/**\n * The parent of this route in the router state tree\n * @return {?}\n */\nget parent(): ActivatedRoute|null { return this._routerState.parent(this); }\n/**\n * The first child of this route in the router state tree\n * @return {?}\n */\nget firstChild(): ActivatedRoute|null { return this._routerState.firstChild(this); }\n/**\n * The children of this route in the router state tree\n * @return {?}\n */\nget children(): ActivatedRoute[] { return this._routerState.children(this); }\n/**\n * The path from the root of the router state tree to this route\n * @return {?}\n */\nget pathFromRoot(): ActivatedRoute[] { return this._routerState.pathFromRoot(this); }\n/**\n * @return {?}\n */\nget paramMap(): Observable<ParamMap> {\n    if (!this._paramMap) {\n      this._paramMap = map.call(this.params, (p: Params): ParamMap => convertToParamMap(p));\n    }\n    return this._paramMap;\n  }\n/**\n * @return {?}\n */\nget queryParamMap(): Observable<ParamMap> {\n    if (!this._queryParamMap) {\n      this._queryParamMap =\n          map.call(this.queryParams, (p: Params): ParamMap => convertToParamMap(p));\n    }\n    return this._queryParamMap;\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;\n  }\n}\n\nfunction ActivatedRoute_tsickle_Closure_declarations() {\n/**\n * The current snapshot of this route\n * @type {?}\n */\nActivatedRoute.prototype.snapshot;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRoute.prototype._futureSnapshot;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRoute.prototype._routerState;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRoute.prototype._paramMap;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRoute.prototype._queryParamMap;\n/**\n * An observable of the URL segments matched by this route\n * @type {?}\n */\nActivatedRoute.prototype.url;\n/**\n * An observable of the matrix parameters scoped to this route\n * @type {?}\n */\nActivatedRoute.prototype.params;\n/**\n * An observable of the query parameters shared by all the routes\n * @type {?}\n */\nActivatedRoute.prototype.queryParams;\n/**\n * An observable of the URL fragment shared by all the routes\n * @type {?}\n */\nActivatedRoute.prototype.fragment;\n/**\n * An observable of the static and resolved data of this route.\n * @type {?}\n */\nActivatedRoute.prototype.data;\n/**\n * The outlet name of the route. It's a constant\n * @type {?}\n */\nActivatedRoute.prototype.outlet;\n/** @type {?} */\nActivatedRoute.prototype.component;\n}\n\n\n/** @internal */\nexport type Inherited = {\n  params: Params,\n  data: Data,\n  resolve: Data,\n};\n/**\n * \\@internal\n * @param {?} route\n * @return {?}\n */\nexport function inheritedParamsDataResolve(route: ActivatedRouteSnapshot): Inherited {\n  const /** @type {?} */ pathToRoot = route.pathFromRoot;\n\n  let /** @type {?} */ inhertingStartingFrom = pathToRoot.length - 1;\n\n  while (inhertingStartingFrom >= 1) {\n    const /** @type {?} */ current = pathToRoot[inhertingStartingFrom];\n    const /** @type {?} */ parent = pathToRoot[inhertingStartingFrom - 1];\n    // current route is an empty path => inherits its parent's params and data\n    if (current.routeConfig && current.routeConfig.path === '') {\n      inhertingStartingFrom--;\n\n      // parent is componentless => current route should inherit its params and data\n    } else if (!parent.component) {\n      inhertingStartingFrom--;\n\n    } else {\n      break;\n    }\n  }\n\n  return pathToRoot.slice(inhertingStartingFrom).reduce((res, curr) => {\n    const /** @type {?} */ params = {...res.params, ...curr.params};\n    const /** @type {?} */ data = {...res.data, ...curr.data};\n    const /** @type {?} */ resolve = {...res.resolve, ...curr._resolvedData};\n    return {params, data, resolve};\n  }, /** @type {?} */(( <any>{params: {}, data: {}, resolve: {}})));\n}\n/**\n * \\@whatItDoes Contains the information about a route associated with a component loaded in an\n * outlet\n * at a particular moment in time. ActivatedRouteSnapshot can also be used to traverse the router\n * state tree.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'./my-component.html'}) \n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n * \n * \\@stable\n */\nexport class ActivatedRouteSnapshot {\n/**\n * \\@internal *\n */\n_routeConfig: Route|null;\n/**\n * \\@internal *\n */\n_urlSegment: UrlSegmentGroup;\n/**\n * \\@internal\n */\n_lastPathIndex: number;\n/**\n * \\@internal\n */\n_resolve: ResolveData;\n/**\n * \\@internal\n */\n_resolvedData: Data;\n/**\n * \\@internal\n */\n_routerState: RouterStateSnapshot;\n/**\n * \\@internal\n */\n_paramMap: ParamMap;\n/**\n * \\@internal\n */\n_queryParamMap: ParamMap;\n/**\n * \\@internal\n * @param {?} url\n * @param {?} params\n * @param {?} queryParams\n * @param {?} fragment\n * @param {?} data\n * @param {?} outlet\n * @param {?} component\n * @param {?} routeConfig\n * @param {?} urlSegment\n * @param {?} lastPathIndex\n * @param {?} resolve\n */\nconstructor(\npublic url: UrlSegment[],\npublic params: Params,\npublic queryParams: Params,\npublic fragment: string,\npublic data: Data,\npublic outlet: string,\npublic component: Type<any>|string|null, routeConfig: Route|null, urlSegment: UrlSegmentGroup,\n      lastPathIndex: number, resolve: ResolveData) {\n    this._routeConfig = routeConfig;\n    this._urlSegment = urlSegment;\n    this._lastPathIndex = lastPathIndex;\n    this._resolve = resolve;\n  }\n/**\n * The configuration used to match this route\n * @return {?}\n */\nget routeConfig(): Route|null { return this._routeConfig; }\n/**\n * The root of the router state\n * @return {?}\n */\nget root(): ActivatedRouteSnapshot { return this._routerState.root; }\n/**\n * The parent of this route in the router state tree\n * @return {?}\n */\nget parent(): ActivatedRouteSnapshot|null { return this._routerState.parent(this); }\n/**\n * The first child of this route in the router state tree\n * @return {?}\n */\nget firstChild(): ActivatedRouteSnapshot|null { return this._routerState.firstChild(this); }\n/**\n * The children of this route in the router state tree\n * @return {?}\n */\nget children(): ActivatedRouteSnapshot[] { return this._routerState.children(this); }\n/**\n * The path from the root of the router state tree to this route\n * @return {?}\n */\nget pathFromRoot(): ActivatedRouteSnapshot[] { return this._routerState.pathFromRoot(this); }\n/**\n * @return {?}\n */\nget paramMap(): ParamMap {\n    if (!this._paramMap) {\n      this._paramMap = convertToParamMap(this.params);\n    }\n    return this._paramMap;\n  }\n/**\n * @return {?}\n */\nget queryParamMap(): ParamMap {\n    if (!this._queryParamMap) {\n      this._queryParamMap = convertToParamMap(this.queryParams);\n    }\n    return this._queryParamMap;\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    const /** @type {?} */ url = this.url.map(segment => segment.toString()).join('/');\n    const /** @type {?} */ matched = this._routeConfig ? this._routeConfig.path : '';\n    return `Route(url:'${url}', path:'${matched}')`;\n  }\n}\n\nfunction ActivatedRouteSnapshot_tsickle_Closure_declarations() {\n/**\n * \\@internal *\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._routeConfig;\n/**\n * \\@internal *\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._urlSegment;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._lastPathIndex;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._resolve;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._resolvedData;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._routerState;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._paramMap;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._queryParamMap;\n/**\n * The URL segments matched by this route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.url;\n/**\n * The matrix parameters scoped to this route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.params;\n/**\n * The query parameters shared by all the routes\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.queryParams;\n/**\n * The URL fragment shared by all the routes\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.fragment;\n/**\n * The static and resolved data of this route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.data;\n/**\n * The outlet name of the route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.outlet;\n/**\n * The component of the route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.component;\n}\n\n/**\n * \\@whatItDoes Represents the state of the router at a moment in time.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'template.html'}) \n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n * \n * \\@description \n * RouterStateSnapshot is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n * \n * \\@stable\n */\nexport class RouterStateSnapshot extends Tree<ActivatedRouteSnapshot> {\n/**\n * \\@internal\n * @param {?} url\n * @param {?} root\n */\nconstructor(\npublic url: string, root: TreeNode<ActivatedRouteSnapshot>) {\n    super(root);\n    setRouterState( /** @type {?} */((<RouterStateSnapshot>this)), root);\n  }\n/**\n * @return {?}\n */\ntoString(): string { return serializeNode(this._root); }\n}\n\nfunction RouterStateSnapshot_tsickle_Closure_declarations() {\n/**\n * The url from which this snapshot was created\n * @type {?}\n */\nRouterStateSnapshot.prototype.url;\n}\n\n/**\n * @template U, T\n * @param {?} state\n * @param {?} node\n * @return {?}\n */\nfunction setRouterState<U, T extends{_routerState: U}>(state: U, node: TreeNode<T>): void {\n  node.value._routerState = state;\n  node.children.forEach(c => setRouterState(state, c));\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction serializeNode(node: TreeNode<ActivatedRouteSnapshot>): string {\n  const /** @type {?} */ c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(\", \")} } ` : '';\n  return `${node.value}${c}`;\n}\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n * @param {?} route\n * @return {?}\n */\nexport function advanceActivatedRoute(route: ActivatedRoute): void {\n  if (route.snapshot) {\n    const /** @type {?} */ currentSnapshot = route.snapshot;\n    const /** @type {?} */ nextSnapshot = route._futureSnapshot;\n    route.snapshot = nextSnapshot;\n    if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {\n      ( /** @type {?} */((<any>route.queryParams))).next(nextSnapshot.queryParams);\n    }\n    if (currentSnapshot.fragment !== nextSnapshot.fragment) {\n      ( /** @type {?} */((<any>route.fragment))).next(nextSnapshot.fragment);\n    }\n    if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {\n      ( /** @type {?} */((<any>route.params))).next(nextSnapshot.params);\n    }\n    if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {\n      ( /** @type {?} */((<any>route.url))).next(nextSnapshot.url);\n    }\n    if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {\n      ( /** @type {?} */((<any>route.data))).next(nextSnapshot.data);\n    }\n  } else {\n    route.snapshot = route._futureSnapshot;\n\n    // this is for resolved data\n    ( /** @type {?} */((<any>route.data))).next(route._futureSnapshot.data);\n  }\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function equalParamsAndUrlSegments(\n    a: ActivatedRouteSnapshot, b: ActivatedRouteSnapshot): boolean {\n  const /** @type {?} */ equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n  const /** @type {?} */ parentsMismatch = !a.parent !== !b.parent;\n\n  return equalUrlParams && !parentsMismatch &&\n      (!a.parent || equalParamsAndUrlSegments(a.parent, /** @type {?} */(( b.parent))));\n}","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport class Tree<T> {\n/**\n * \\@internal\n */\n_root: TreeNode<T>;\n/**\n * @param {?} root\n */\nconstructor(root: TreeNode<T>) { this._root = root; }\n/**\n * @return {?}\n */\nget root(): T { return this._root.value; }\n/**\n * \\@internal\n * @param {?} t\n * @return {?}\n */\nparent(t: T): T|null {\n    const /** @type {?} */ p = this.pathFromRoot(t);\n    return p.length > 1 ? p[p.length - 2] : null;\n  }\n/**\n * \\@internal\n * @param {?} t\n * @return {?}\n */\nchildren(t: T): T[] {\n    const /** @type {?} */ n = findNode(t, this._root);\n    return n ? n.children.map(t => t.value) : [];\n  }\n/**\n * \\@internal\n * @param {?} t\n * @return {?}\n */\nfirstChild(t: T): T|null {\n    const /** @type {?} */ n = findNode(t, this._root);\n    return n && n.children.length > 0 ? n.children[0].value : null;\n  }\n/**\n * \\@internal\n * @param {?} t\n * @return {?}\n */\nsiblings(t: T): T[] {\n    const /** @type {?} */ p = findPath(t, this._root);\n    if (p.length < 2) return [];\n\n    const /** @type {?} */ c = p[p.length - 2].children.map(c => c.value);\n    return c.filter(cc => cc !== t);\n  }\n/**\n * \\@internal\n * @param {?} t\n * @return {?}\n */\npathFromRoot(t: T): T[] { return findPath(t, this._root).map(s => s.value); }\n}\n\nfunction Tree_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nTree.prototype._root;\n}\n\n/**\n * @template T\n * @param {?} value\n * @param {?} node\n * @return {?}\n */\nfunction findNode<T>(value: T, node: TreeNode<T>): TreeNode<T>|null {\n  if (value === node.value) return node;\n\n  for (const /** @type {?} */ child of node.children) {\n    const /** @type {?} */ node = findNode(value, child);\n    if (node) return node;\n  }\n\n  return null;\n}\n/**\n * @template T\n * @param {?} value\n * @param {?} node\n * @return {?}\n */\nfunction findPath<T>(value: T, node: TreeNode<T>): TreeNode<T>[] {\n  if (value === node.value) return [node];\n\n  for (const /** @type {?} */ child of node.children) {\n    const /** @type {?} */ path = findPath(value, child);\n    if (path.length) {\n      path.unshift(node);\n      return path;\n    }\n  }\n\n  return [];\n}\nexport class TreeNode<T> {\n/**\n * @param {?} value\n * @param {?} children\n */\nconstructor(public value: T,\npublic children: TreeNode<T>[]) {}\n/**\n * @return {?}\n */\ntoString(): string { return `TreeNode(${this.value})`; }\n}\n\nfunction TreeNode_tsickle_Closure_declarations() {\n/** @type {?} */\nTreeNode.prototype.value;\n/** @type {?} */\nTreeNode.prototype.children;\n}\n\n/**\n * @template T\n * @param {?} node\n * @return {?}\n */\nexport function nodeChildrenAsMap<T extends{outlet: string}>(node: TreeNode<T>| null) {\n  const /** @type {?} */ map: {[outlet: string]: TreeNode<T>} = {};\n\n  if (node) {\n    node.children.forEach(child => map[child.value.outlet] = child);\n  }\n\n  return map;\n}","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector, NgModuleRef} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {from} from 'rxjs/observable/from';\nimport {of } from 'rxjs/observable/of';\nimport {_catch} from 'rxjs/operator/catch';\nimport {concatAll} from 'rxjs/operator/concatAll';\nimport {first} from 'rxjs/operator/first';\nimport {map} from 'rxjs/operator/map';\nimport {mergeMap} from 'rxjs/operator/mergeMap';\nimport {EmptyError} from 'rxjs/util/EmptyError';\n\nimport {LoadedRouterConfig, Route, Routes} from './config';\nimport {RouterConfigLoader} from './router_config_loader';\nimport {PRIMARY_OUTLET, Params, defaultUrlMatcher, navigationCancelingError} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree} from './url_tree';\nimport {andObservables, forEach, waitForMap, wrapIntoObservable} from './utils/collection';\nclass NoMatch {\npublic segmentGroup: UrlSegmentGroup|null;\n/**\n * @param {?=} segmentGroup\n */\nconstructor(segmentGroup?: UrlSegmentGroup) { this.segmentGroup = segmentGroup || null; }\n}\n\nfunction NoMatch_tsickle_Closure_declarations() {\n/** @type {?} */\nNoMatch.prototype.segmentGroup;\n}\n\nclass AbsoluteRedirect {\n/**\n * @param {?} urlTree\n */\nconstructor(public urlTree: UrlTree) {}\n}\n\nfunction AbsoluteRedirect_tsickle_Closure_declarations() {\n/** @type {?} */\nAbsoluteRedirect.prototype.urlTree;\n}\n\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction noMatch(segmentGroup: UrlSegmentGroup): Observable<UrlSegmentGroup> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new NoMatch(segmentGroup)));\n}\n/**\n * @param {?} newTree\n * @return {?}\n */\nfunction absoluteRedirect(newTree: UrlTree): Observable<any> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new AbsoluteRedirect(newTree)));\n}\n/**\n * @param {?} redirectTo\n * @return {?}\n */\nfunction namedOutletsRedirect(redirectTo: string): Observable<any> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new Error(\n          `Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`)));\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction canLoadFails(route: Route): Observable<LoadedRouterConfig> {\n  return new Observable<LoadedRouterConfig>(\n      (obs: Observer<LoadedRouterConfig>) => obs.error(navigationCancelingError(\n          `Cannot load children because the guard of the route \"path: '${route.path}'\" returned false`)));\n}\n/**\n * Returns the `UrlTree` with the redirection applied.\n * \n * Lazy modules are loaded along the way.\n * @param {?} moduleInjector\n * @param {?} configLoader\n * @param {?} urlSerializer\n * @param {?} urlTree\n * @param {?} config\n * @return {?}\n */\nexport function applyRedirects(\n    moduleInjector: Injector, configLoader: RouterConfigLoader, urlSerializer: UrlSerializer,\n    urlTree: UrlTree, config: Routes): Observable<UrlTree> {\n  return new ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();\n}\nclass ApplyRedirects {\nprivate allowRedirects: boolean = true;\nprivate ngModule: NgModuleRef<any>;\n/**\n * @param {?} moduleInjector\n * @param {?} configLoader\n * @param {?} urlSerializer\n * @param {?} urlTree\n * @param {?} config\n */\nconstructor(\n      moduleInjector: Injector,\nprivate configLoader: RouterConfigLoader,\nprivate urlSerializer: UrlSerializer,\nprivate urlTree: UrlTree,\nprivate config: Routes) {\n    this.ngModule = moduleInjector.get(NgModuleRef);\n  }\n/**\n * @return {?}\n */\napply(): Observable<UrlTree> {\n    const /** @type {?} */ expanded$ =\n        this.expandSegmentGroup(this.ngModule, this.config, this.urlTree.root, PRIMARY_OUTLET);\n    const /** @type {?} */ urlTrees$ = map.call(\n        expanded$, (rootSegmentGroup: UrlSegmentGroup) => this.createUrlTree(\n                       rootSegmentGroup, this.urlTree.queryParams, /** @type {?} */(( this.urlTree.fragment))));\n    return _catch.call(urlTrees$, (e: any) => {\n      if (e instanceof AbsoluteRedirect) {\n        // after an absolute redirect we do not apply any more redirects!\n        this.allowRedirects = false;\n        // we need to run matching, so we can fetch all lazy-loaded modules\n        return this.match(e.urlTree);\n      }\n\n      if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      }\n\n      throw e;\n    });\n  }\n/**\n * @param {?} tree\n * @return {?}\n */\n\nprivate match(tree: UrlTree): Observable<UrlTree> {\n    const /** @type {?} */ expanded$ =\n        this.expandSegmentGroup(this.ngModule, this.config, tree.root, PRIMARY_OUTLET);\n    const /** @type {?} */ mapped$ = map.call(\n        expanded$, (rootSegmentGroup: UrlSegmentGroup) =>\n                       this.createUrlTree(rootSegmentGroup, tree.queryParams, /** @type {?} */(( tree.fragment))));\n    return _catch.call(mapped$, (e: any): Observable<UrlTree> => {\n      if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      }\n\n      throw e;\n    });\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n\nprivate noMatchError(e: NoMatch): any {\n    return new Error(`Cannot match any routes. URL Segment: '${e.segmentGroup}'`);\n  }\n/**\n * @param {?} rootCandidate\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\n\nprivate createUrlTree(rootCandidate: UrlSegmentGroup, queryParams: Params, fragment: string):\n      UrlTree {\n    const /** @type {?} */ root = rootCandidate.segments.length > 0 ?\n        new UrlSegmentGroup([], {[PRIMARY_OUTLET]: rootCandidate}) :\n        rootCandidate;\n    return new UrlTree(root, queryParams, fragment);\n  }\n/**\n * @param {?} ngModule\n * @param {?} routes\n * @param {?} segmentGroup\n * @param {?} outlet\n * @return {?}\n */\n\nprivate expandSegmentGroup(\n      ngModule: NgModuleRef<any>, routes: Route[], segmentGroup: UrlSegmentGroup,\n      outlet: string): Observable<UrlSegmentGroup> {\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n      return map.call(\n          this.expandChildren(ngModule, routes, segmentGroup),\n          (children: any) => new UrlSegmentGroup([], children));\n    }\n\n    return this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, true);\n  }\n/**\n * @param {?} ngModule\n * @param {?} routes\n * @param {?} segmentGroup\n * @return {?}\n */\n\nprivate expandChildren(\n      ngModule: NgModuleRef<any>, routes: Route[],\n      segmentGroup: UrlSegmentGroup): Observable<{[name: string]: UrlSegmentGroup}> {\n    return waitForMap(\n        segmentGroup.children,\n        (childOutlet, child) => this.expandSegmentGroup(ngModule, routes, child, childOutlet));\n  }\n/**\n * @param {?} ngModule\n * @param {?} segmentGroup\n * @param {?} routes\n * @param {?} segments\n * @param {?} outlet\n * @param {?} allowRedirects\n * @return {?}\n */\n\nprivate expandSegment(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[],\n      segments: UrlSegment[], outlet: string,\n      allowRedirects: boolean): Observable<UrlSegmentGroup> {\n    const /** @type {?} */ routes$ = of (...routes);\n    const /** @type {?} */ processedRoutes$ = map.call(routes$, (r: any) => {\n      const /** @type {?} */ expanded$ = this.expandSegmentAgainstRoute(\n          ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);\n      return _catch.call(expanded$, (e: any) => {\n        if (e instanceof NoMatch) {\n          return of (null);\n        }\n\n        throw e;\n      });\n    });\n    const /** @type {?} */ concattedProcessedRoutes$ = concatAll.call(processedRoutes$);\n    const /** @type {?} */ first$ = first.call(concattedProcessedRoutes$, (s: any) => !!s);\n    return _catch.call(first$, (e: any, _: any): Observable<UrlSegmentGroup> => {\n      if (e instanceof EmptyError) {\n        if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n          return of (new UrlSegmentGroup([], {}));\n        }\n\n        throw new NoMatch(segmentGroup);\n      }\n\n      throw e;\n    });\n  }\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\n\nprivate noLeftoversInUrl(segmentGroup: UrlSegmentGroup, segments: UrlSegment[], outlet: string):\n      boolean {\n    return segments.length === 0 && !segmentGroup.children[outlet];\n  }\n/**\n * @param {?} ngModule\n * @param {?} segmentGroup\n * @param {?} routes\n * @param {?} route\n * @param {?} paths\n * @param {?} outlet\n * @param {?} allowRedirects\n * @return {?}\n */\n\nprivate expandSegmentAgainstRoute(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      paths: UrlSegment[], outlet: string, allowRedirects: boolean): Observable<UrlSegmentGroup> {\n    if (getOutlet(route) !== outlet) {\n      return noMatch(segmentGroup);\n    }\n\n    if (route.redirectTo === undefined) {\n      return this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths);\n    }\n\n    if (allowRedirects && this.allowRedirects) {\n      return this.expandSegmentAgainstRouteUsingRedirect(\n          ngModule, segmentGroup, routes, route, paths, outlet);\n    }\n\n    return noMatch(segmentGroup);\n  }\n/**\n * @param {?} ngModule\n * @param {?} segmentGroup\n * @param {?} routes\n * @param {?} route\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\n\nprivate expandSegmentAgainstRouteUsingRedirect(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      segments: UrlSegment[], outlet: string): Observable<UrlSegmentGroup> {\n    if (route.path === '**') {\n      return this.expandWildCardWithParamsAgainstRouteUsingRedirect(\n          ngModule, routes, route, outlet);\n    }\n\n    return this.expandRegularSegmentAgainstRouteUsingRedirect(\n        ngModule, segmentGroup, routes, route, segments, outlet);\n  }\n/**\n * @param {?} ngModule\n * @param {?} routes\n * @param {?} route\n * @param {?} outlet\n * @return {?}\n */\n\nprivate expandWildCardWithParamsAgainstRouteUsingRedirect(\n      ngModule: NgModuleRef<any>, routes: Route[], route: Route,\n      outlet: string): Observable<UrlSegmentGroup> {\n    const /** @type {?} */ newTree = this.applyRedirectCommands([], /** @type {?} */(( route.redirectTo)), {});\n    if ( /** @type {?} */((route.redirectTo)).startsWith('/')) {\n      return absoluteRedirect(newTree);\n    }\n\n    return mergeMap.call(this.lineralizeSegments(route, newTree), (newSegments: UrlSegment[]) => {\n      const /** @type {?} */ group = new UrlSegmentGroup(newSegments, {});\n      return this.expandSegment(ngModule, group, routes, newSegments, outlet, false);\n    });\n  }\n/**\n * @param {?} ngModule\n * @param {?} segmentGroup\n * @param {?} routes\n * @param {?} route\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\n\nprivate expandRegularSegmentAgainstRouteUsingRedirect(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      segments: UrlSegment[], outlet: string): Observable<UrlSegmentGroup> {\n    const {matched, consumedSegments, lastChild, positionalParamSegments} =\n        match(segmentGroup, route, segments);\n    if (!matched) return noMatch(segmentGroup);\n\n    const /** @type {?} */ newTree = this.applyRedirectCommands(\n        consumedSegments, /** @type {?} */(( route.redirectTo)), /** @type {?} */(( <any>positionalParamSegments)));\n    if ( /** @type {?} */((route.redirectTo)).startsWith('/')) {\n      return absoluteRedirect(newTree);\n    }\n\n    return mergeMap.call(this.lineralizeSegments(route, newTree), (newSegments: UrlSegment[]) => {\n      return this.expandSegment(\n          ngModule, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet,\n          false);\n    });\n  }\n/**\n * @param {?} ngModule\n * @param {?} rawSegmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\n\nprivate matchSegmentAgainstRoute(\n      ngModule: NgModuleRef<any>, rawSegmentGroup: UrlSegmentGroup, route: Route,\n      segments: UrlSegment[]): Observable<UrlSegmentGroup> {\n    if (route.path === '**') {\n      if (route.loadChildren) {\n        return map.call(\n            this.configLoader.load(ngModule.injector, route), (cfg: LoadedRouterConfig) => {\n              route._loadedConfig = cfg;\n              return new UrlSegmentGroup(segments, {});\n            });\n      }\n\n      return of (new UrlSegmentGroup(segments, {}));\n    }\n\n    const {matched, consumedSegments, lastChild} = match(rawSegmentGroup, route, segments);\n    if (!matched) return noMatch(rawSegmentGroup);\n\n    const /** @type {?} */ rawSlicedSegments = segments.slice(lastChild);\n    const /** @type {?} */ childConfig$ = this.getChildConfig(ngModule, route);\n\n    return mergeMap.call(childConfig$, (routerConfig: LoadedRouterConfig) => {\n      const /** @type {?} */ childModule = routerConfig.module;\n      const /** @type {?} */ childConfig = routerConfig.routes;\n\n      const {segmentGroup, slicedSegments} =\n          split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig);\n\n      if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n        const /** @type {?} */ expanded$ = this.expandChildren(childModule, childConfig, segmentGroup);\n        return map.call(\n            expanded$, (children: any) => new UrlSegmentGroup(consumedSegments, children));\n      }\n\n      if (childConfig.length === 0 && slicedSegments.length === 0) {\n        return of (new UrlSegmentGroup(consumedSegments, {}));\n      }\n\n      const /** @type {?} */ expanded$ = this.expandSegment(\n          childModule, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);\n      return map.call(\n          expanded$, (cs: UrlSegmentGroup) =>\n                         new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children));\n    });\n  }\n/**\n * @param {?} ngModule\n * @param {?} route\n * @return {?}\n */\n\nprivate getChildConfig(ngModule: NgModuleRef<any>, route: Route): Observable<LoadedRouterConfig> {\n    if (route.children) {\n      // The children belong to the same module\n      return of (new LoadedRouterConfig(route.children, ngModule));\n    }\n\n    if (route.loadChildren) {\n      // lazy children belong to the loaded module\n      if (route._loadedConfig !== undefined) {\n        return of (route._loadedConfig);\n      }\n\n      return mergeMap.call(runCanLoadGuard(ngModule.injector, route), (shouldLoad: boolean) => {\n\n        if (shouldLoad) {\n          return map.call(\n              this.configLoader.load(ngModule.injector, route), (cfg: LoadedRouterConfig) => {\n                route._loadedConfig = cfg;\n                return cfg;\n              });\n        }\n\n        return canLoadFails(route);\n      });\n    }\n\n    return of (new LoadedRouterConfig([], ngModule));\n  }\n/**\n * @param {?} route\n * @param {?} urlTree\n * @return {?}\n */\n\nprivate lineralizeSegments(route: Route, urlTree: UrlTree): Observable<UrlSegment[]> {\n    let /** @type {?} */ res: UrlSegment[] = [];\n    let /** @type {?} */ c = urlTree.root;\n    while (true) {\n      res = res.concat(c.segments);\n      if (c.numberOfChildren === 0) {\n        return of (res);\n      }\n\n      if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\n        return namedOutletsRedirect( /** @type {?} */((route.redirectTo)));\n      }\n\n      c = c.children[PRIMARY_OUTLET];\n    }\n  }\n/**\n * @param {?} segments\n * @param {?} redirectTo\n * @param {?} posParams\n * @return {?}\n */\n\nprivate applyRedirectCommands(\n      segments: UrlSegment[], redirectTo: string, posParams: {[k: string]: UrlSegment}): UrlTree {\n    return this.applyRedirectCreatreUrlTree(\n        redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);\n  }\n/**\n * @param {?} redirectTo\n * @param {?} urlTree\n * @param {?} segments\n * @param {?} posParams\n * @return {?}\n */\n\nprivate applyRedirectCreatreUrlTree(\n      redirectTo: string, urlTree: UrlTree, segments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlTree {\n    const /** @type {?} */ newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\n    return new UrlTree(\n        newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams),\n        urlTree.fragment);\n  }\n/**\n * @param {?} redirectToParams\n * @param {?} actualParams\n * @return {?}\n */\n\nprivate createQueryParams(redirectToParams: Params, actualParams: Params): Params {\n    const /** @type {?} */ res: Params = {};\n    forEach(redirectToParams, (v: any, k: string) => {\n      const /** @type {?} */ copySourceValue = typeof v === 'string' && v.startsWith(':');\n      if (copySourceValue) {\n        const /** @type {?} */ sourceName = v.substring(1);\n        res[k] = actualParams[sourceName];\n      } else {\n        res[k] = v;\n      }\n    });\n    return res;\n  }\n/**\n * @param {?} redirectTo\n * @param {?} group\n * @param {?} segments\n * @param {?} posParams\n * @return {?}\n */\n\nprivate createSegmentGroup(\n      redirectTo: string, group: UrlSegmentGroup, segments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlSegmentGroup {\n    const /** @type {?} */ updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\n\n    let /** @type {?} */ children: {[n: string]: UrlSegmentGroup} = {};\n    forEach(group.children, (child: UrlSegmentGroup, name: string) => {\n      children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);\n    });\n\n    return new UrlSegmentGroup(updatedSegments, children);\n  }\n/**\n * @param {?} redirectTo\n * @param {?} redirectToSegments\n * @param {?} actualSegments\n * @param {?} posParams\n * @return {?}\n */\n\nprivate createSegments(\n      redirectTo: string, redirectToSegments: UrlSegment[], actualSegments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlSegment[] {\n    return redirectToSegments.map(\n        s => s.path.startsWith(':') ? this.findPosParam(redirectTo, s, posParams) :\n                                      this.findOrReturn(s, actualSegments));\n  }\n/**\n * @param {?} redirectTo\n * @param {?} redirectToUrlSegment\n * @param {?} posParams\n * @return {?}\n */\n\nprivate findPosParam(\n      redirectTo: string, redirectToUrlSegment: UrlSegment,\n      posParams: {[k: string]: UrlSegment}): UrlSegment {\n    const /** @type {?} */ pos = posParams[redirectToUrlSegment.path.substring(1)];\n    if (!pos)\n      throw new Error(\n          `Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`);\n    return pos;\n  }\n/**\n * @param {?} redirectToUrlSegment\n * @param {?} actualSegments\n * @return {?}\n */\n\nprivate findOrReturn(redirectToUrlSegment: UrlSegment, actualSegments: UrlSegment[]): UrlSegment {\n    let /** @type {?} */ idx = 0;\n    for (const /** @type {?} */ s of actualSegments) {\n      if (s.path === redirectToUrlSegment.path) {\n        actualSegments.splice(idx);\n        return s;\n      }\n      idx++;\n    }\n    return redirectToUrlSegment;\n  }\n}\n\nfunction ApplyRedirects_tsickle_Closure_declarations() {\n/** @type {?} */\nApplyRedirects.prototype.allowRedirects;\n/** @type {?} */\nApplyRedirects.prototype.ngModule;\n/** @type {?} */\nApplyRedirects.prototype.configLoader;\n/** @type {?} */\nApplyRedirects.prototype.urlSerializer;\n/** @type {?} */\nApplyRedirects.prototype.urlTree;\n/** @type {?} */\nApplyRedirects.prototype.config;\n}\n\n/**\n * @param {?} moduleInjector\n * @param {?} route\n * @return {?}\n */\nfunction runCanLoadGuard(moduleInjector: Injector, route: Route): Observable<boolean> {\n  const /** @type {?} */ canLoad = route.canLoad;\n  if (!canLoad || canLoad.length === 0) return of (true);\n\n  const /** @type {?} */ obs = map.call(from(canLoad), (injectionToken: any) => {\n    const /** @type {?} */ guard = moduleInjector.get(injectionToken);\n    return wrapIntoObservable(guard.canLoad ? guard.canLoad(route) : guard(route));\n  });\n\n  return andObservables(obs);\n}\n/**\n * @param {?} segmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\nfunction match(segmentGroup: UrlSegmentGroup, route: Route, segments: UrlSegment[]): {\n  matched: boolean,\n  consumedSegments: UrlSegment[],\n  lastChild: number,\n  positionalParamSegments: {[k: string]: UrlSegment}\n} {\n  if (route.path === '') {\n    if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {\n      return {matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {}};\n    }\n\n    return {matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {}};\n  }\n\n  const /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;\n  const /** @type {?} */ res = matcher(segments, segmentGroup, route);\n\n  if (!res) {\n    return {\n      matched: false,\n      consumedSegments: /** @type {?} */(( <any[]>[])),\n      lastChild: 0,\n      positionalParamSegments: {},\n    };\n  }\n\n  return {\n    matched: true,\n    consumedSegments: /** @type {?} */(( res.consumed)),\n    lastChild: /** @type {?} */(( res.consumed.length)),\n    positionalParamSegments: /** @type {?} */(( res.posParams)),\n  };\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} slicedSegments\n * @param {?} config\n * @return {?}\n */\nfunction split(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], slicedSegments: UrlSegment[],\n    config: Route[]) {\n  if (slicedSegments.length > 0 &&\n      containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n    const /** @type {?} */ s = new UrlSegmentGroup(\n        consumedSegments, createChildrenForEmptySegments(\n                              config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n    return {segmentGroup: mergeTrivialChildren(s), slicedSegments: []};\n  }\n\n  if (slicedSegments.length === 0 &&\n      containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {\n    const /** @type {?} */ s = new UrlSegmentGroup(\n        segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(\n                                   segmentGroup, slicedSegments, config, segmentGroup.children));\n    return {segmentGroup: mergeTrivialChildren(s), slicedSegments};\n  }\n\n  return {segmentGroup, slicedSegments};\n}\n/**\n * @param {?} s\n * @return {?}\n */\nfunction mergeTrivialChildren(s: UrlSegmentGroup): UrlSegmentGroup {\n  if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n    const /** @type {?} */ c = s.children[PRIMARY_OUTLET];\n    return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n  }\n\n  return s;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @param {?} children\n * @return {?}\n */\nfunction addEmptySegmentsToChildrenIfNeeded(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[],\n    children: {[name: string]: UrlSegmentGroup}): {[name: string]: UrlSegmentGroup} {\n  const /** @type {?} */ res: {[name: string]: UrlSegmentGroup} = {};\n  for (const /** @type {?} */ r of routes) {\n    if (isEmptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n      res[getOutlet(r)] = new UrlSegmentGroup([], {});\n    }\n  }\n  return {...children, ...res};\n}\n/**\n * @param {?} routes\n * @param {?} primarySegmentGroup\n * @return {?}\n */\nfunction createChildrenForEmptySegments(\n    routes: Route[], primarySegmentGroup: UrlSegmentGroup): {[name: string]: UrlSegmentGroup} {\n  const /** @type {?} */ res: {[name: string]: UrlSegmentGroup} = {};\n  res[PRIMARY_OUTLET] = primarySegmentGroup;\n  for (const /** @type {?} */ r of routes) {\n    if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n      res[getOutlet(r)] = new UrlSegmentGroup([], {});\n    }\n  }\n  return res;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathRedirectsWithNamedOutlets(\n    segmentGroup: UrlSegmentGroup, segments: UrlSegment[], routes: Route[]): boolean {\n  return routes.some(\n      r => isEmptyPathRedirect(segmentGroup, segments, r) && getOutlet(r) !== PRIMARY_OUTLET);\n}\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathRedirects(\n    segmentGroup: UrlSegmentGroup, segments: UrlSegment[], routes: Route[]): boolean {\n  return routes.some(r => isEmptyPathRedirect(segmentGroup, segments, r));\n}\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} r\n * @return {?}\n */\nfunction isEmptyPathRedirect(\n    segmentGroup: UrlSegmentGroup, segments: UrlSegment[], r: Route): boolean {\n  if ((segmentGroup.hasChildren() || segments.length > 0) && r.pathMatch === 'full') {\n    return false;\n  }\n\n  return r.path === '' && r.redirectTo !== undefined;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getOutlet(route: Route): string {\n  return route.outlet || PRIMARY_OUTLET;\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PRIMARY_OUTLET, ParamMap, convertToParamMap} from './shared';\nimport {forEach, shallowEqual} from './utils/collection';\n/**\n * @return {?}\n */\nexport function createEmptyUrlTree() {\n  return new UrlTree(new UrlSegmentGroup([], {}), {}, null);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @param {?} exact\n * @return {?}\n */\nexport function containsTree(container: UrlTree, containee: UrlTree, exact: boolean): boolean {\n  if (exact) {\n    return equalQueryParams(container.queryParams, containee.queryParams) &&\n        equalSegmentGroups(container.root, containee.root);\n  }\n\n  return containsQueryParams(container.queryParams, containee.queryParams) &&\n      containsSegmentGroup(container.root, containee.root);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction equalQueryParams(\n    container: {[k: string]: string}, containee: {[k: string]: string}): boolean {\n  return shallowEqual(container, containee);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction equalSegmentGroups(container: UrlSegmentGroup, containee: UrlSegmentGroup): boolean {\n  if (!equalPath(container.segments, containee.segments)) return false;\n  if (container.numberOfChildren !== containee.numberOfChildren) return false;\n  for (const /** @type {?} */ c in containee.children) {\n    if (!container.children[c]) return false;\n    if (!equalSegmentGroups(container.children[c], containee.children[c])) return false;\n  }\n  return true;\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction containsQueryParams(\n    container: {[k: string]: string}, containee: {[k: string]: string}): boolean {\n  return Object.keys(containee).length <= Object.keys(container).length &&\n      Object.keys(containee).every(key => containee[key] === container[key]);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction containsSegmentGroup(container: UrlSegmentGroup, containee: UrlSegmentGroup): boolean {\n  return containsSegmentGroupHelper(container, containee, containee.segments);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @param {?} containeePaths\n * @return {?}\n */\nfunction containsSegmentGroupHelper(\n    container: UrlSegmentGroup, containee: UrlSegmentGroup, containeePaths: UrlSegment[]): boolean {\n  if (container.segments.length > containeePaths.length) {\n    const /** @type {?} */ current = container.segments.slice(0, containeePaths.length);\n    if (!equalPath(current, containeePaths)) return false;\n    if (containee.hasChildren()) return false;\n    return true;\n\n  } else if (container.segments.length === containeePaths.length) {\n    if (!equalPath(container.segments, containeePaths)) return false;\n    for (const /** @type {?} */ c in containee.children) {\n      if (!container.children[c]) return false;\n      if (!containsSegmentGroup(container.children[c], containee.children[c])) return false;\n    }\n    return true;\n\n  } else {\n    const /** @type {?} */ current = containeePaths.slice(0, container.segments.length);\n    const /** @type {?} */ next = containeePaths.slice(container.segments.length);\n    if (!equalPath(container.segments, current)) return false;\n    if (!container.children[PRIMARY_OUTLET]) return false;\n    return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);\n  }\n}\n/**\n * \\@whatItDoes Represents the parsed URL.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'template.html'}) \n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n * \n * \\@description \n * \n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n * \n * \\@stable\n */\nexport class UrlTree {\n/**\n * \\@internal\n */\n_queryParamMap: ParamMap;\n/**\n * \\@internal\n * @param {?} root\n * @param {?} queryParams\n * @param {?} fragment\n */\nconstructor(\npublic root: UrlSegmentGroup,\npublic queryParams: {[key: string]: string},\npublic fragment: string|null) {}\n/**\n * @return {?}\n */\nget queryParamMap(): ParamMap {\n    if (!this._queryParamMap) {\n      this._queryParamMap = convertToParamMap(this.queryParams);\n    }\n    return this._queryParamMap;\n  }\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string { return DEFAULT_SERIALIZER.serialize(this); }\n}\n\nfunction UrlTree_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nUrlTree.prototype._queryParamMap;\n/**\n * The root segment group of the URL tree\n * @type {?}\n */\nUrlTree.prototype.root;\n/**\n * The query params of the URL\n * @type {?}\n */\nUrlTree.prototype.queryParams;\n/**\n * The fragment of the URL\n * @type {?}\n */\nUrlTree.prototype.fragment;\n}\n\n/**\n * \\@whatItDoes Represents the parsed URL segment group.\n * \n * See {\\@link UrlTree} for more information.\n * \n * \\@stable\n */\nexport class UrlSegmentGroup {\n/**\n * \\@internal\n */\n_sourceSegment: UrlSegmentGroup;\n/**\n * \\@internal\n */\n_segmentIndexShift: number;\n/**\n * The parent node in the url tree\n */\nparent: UrlSegmentGroup|null = null;\n/**\n * @param {?} segments\n * @param {?} children\n */\nconstructor(\npublic segments: UrlSegment[],\npublic children: {[key: string]: UrlSegmentGroup}) {\n    forEach(children, (v: any, k: any) => v.parent = this);\n  }\n/**\n * Whether the segment has child segments\n * @return {?}\n */\nhasChildren(): boolean { return this.numberOfChildren > 0; }\n/**\n * Number of child segments\n * @return {?}\n */\nget numberOfChildren(): number { return Object.keys(this.children).length; }\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string { return serializePaths(this); }\n}\n\nfunction UrlSegmentGroup_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nUrlSegmentGroup.prototype._sourceSegment;\n/**\n * \\@internal\n * @type {?}\n */\nUrlSegmentGroup.prototype._segmentIndexShift;\n/**\n * The parent node in the url tree\n * @type {?}\n */\nUrlSegmentGroup.prototype.parent;\n/**\n * The URL segments of this group. See {\\@link UrlSegment} for more information\n * @type {?}\n */\nUrlSegmentGroup.prototype.segments;\n/**\n * The list of children of this group\n * @type {?}\n */\nUrlSegmentGroup.prototype.children;\n}\n\n/**\n * \\@whatItDoes Represents a single URL segment.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'template.html'}) \n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n * \n * \\@description \n * \n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n * \n * \\@stable\n */\nexport class UrlSegment {\n/**\n * \\@internal\n */\n_parameterMap: ParamMap;\n/**\n * @param {?} path\n * @param {?} parameters\n */\nconstructor(\npublic path: string,\npublic parameters: {[name: string]: string}) {}\n/**\n * @return {?}\n */\nget parameterMap() {\n    if (!this._parameterMap) {\n      this._parameterMap = convertToParamMap(this.parameters);\n    }\n    return this._parameterMap;\n  }\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string { return serializePath(this); }\n}\n\nfunction UrlSegment_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nUrlSegment.prototype._parameterMap;\n/**\n * The path part of a URL segment\n * @type {?}\n */\nUrlSegment.prototype.path;\n/**\n * The matrix parameters associated with a segment\n * @type {?}\n */\nUrlSegment.prototype.parameters;\n}\n\n/**\n * @param {?} as\n * @param {?} bs\n * @return {?}\n */\nexport function equalSegments(as: UrlSegment[], bs: UrlSegment[]): boolean {\n  return equalPath(as, bs) && as.every((a, i) => shallowEqual(a.parameters, bs[i].parameters));\n}\n/**\n * @param {?} as\n * @param {?} bs\n * @return {?}\n */\nexport function equalPath(as: UrlSegment[], bs: UrlSegment[]): boolean {\n  if (as.length !== bs.length) return false;\n  return as.every((a, i) => a.path === bs[i].path);\n}\n/**\n * @template T\n * @param {?} segment\n * @param {?} fn\n * @return {?}\n */\nexport function mapChildrenIntoArray<T>(\n    segment: UrlSegmentGroup, fn: (v: UrlSegmentGroup, k: string) => T[]): T[] {\n  let /** @type {?} */ res: T[] = [];\n  forEach(segment.children, (child: UrlSegmentGroup, childOutlet: string) => {\n    if (childOutlet === PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  forEach(segment.children, (child: UrlSegmentGroup, childOutlet: string) => {\n    if (childOutlet !== PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  return res;\n}\n/**\n * \\@whatItDoes Serializes and deserializes a URL string into a URL tree.\n * \n * \\@description The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n * \n * See {\\@link DefaultUrlSerializer} for an example of a URL serializer.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class UrlSerializer {\n  /** Parse a url into a {@link UrlTree} */\n  abstract parse(url: string): UrlTree;\n\n  /** Converts a {@link UrlTree} into a url */\n  abstract serialize(tree: UrlTree): string;\n}\n\nfunction UrlSerializer_tsickle_Closure_declarations() {\n\n/**\n * Parse a url into a {\\@link UrlTree}\n * @abstract\n * @param {?} url\n * @return {?}\n */\nUrlSerializer.prototype.parse = function(url) {};\n\n/**\n * Converts a {\\@link UrlTree} into a url\n * @abstract\n * @param {?} tree\n * @return {?}\n */\nUrlSerializer.prototype.serialize = function(tree) {};\n}\n\n/**\n * \\@whatItDoes A default implementation of the {\\@link UrlSerializer}.\n * \n * \\@description \n * \n * Example URLs:\n * \n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n * \n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n * \n * \\@stable\n */\nexport class DefaultUrlSerializer implements UrlSerializer {\n/**\n * Parses a url into a {\\@link UrlTree}\n * @param {?} url\n * @return {?}\n */\nparse(url: string): UrlTree {\n    const /** @type {?} */ p = new UrlParser(url);\n    return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\n  }\n/**\n * Converts a {\\@link UrlTree} into a url\n * @param {?} tree\n * @return {?}\n */\nserialize(tree: UrlTree): string {\n    const /** @type {?} */ segment = `/${serializeSegment(tree.root, true)}`;\n    const /** @type {?} */ query = serializeQueryParams(tree.queryParams);\n    const /** @type {?} */ fragment = typeof tree.fragment === `string` ? `#${encodeURI(( /** @type {?} */((tree.fragment))))}` : '';\n\n    return `${segment}${query}${fragment}`;\n  }\n}\n\nconst /** @type {?} */ DEFAULT_SERIALIZER = new DefaultUrlSerializer();\n/**\n * @param {?} segment\n * @return {?}\n */\nexport function serializePaths(segment: UrlSegmentGroup): string {\n  return segment.segments.map(p => serializePath(p)).join('/');\n}\n/**\n * @param {?} segment\n * @param {?} root\n * @return {?}\n */\nfunction serializeSegment(segment: UrlSegmentGroup, root: boolean): string {\n  if (!segment.hasChildren()) {\n    return serializePaths(segment);\n  }\n\n  if (root) {\n    const /** @type {?} */ primary = segment.children[PRIMARY_OUTLET] ?\n        serializeSegment(segment.children[PRIMARY_OUTLET], false) :\n        '';\n    const /** @type {?} */ children: string[] = [];\n\n    forEach(segment.children, (v: UrlSegmentGroup, k: string) => {\n      if (k !== PRIMARY_OUTLET) {\n        children.push(`${k}:${serializeSegment(v, false)}`);\n      }\n    });\n\n    return children.length > 0 ? `${primary}(${children.join('//')})` : primary;\n\n  } else {\n    const /** @type {?} */ children = mapChildrenIntoArray(segment, (v: UrlSegmentGroup, k: string) => {\n      if (k === PRIMARY_OUTLET) {\n        return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];\n      }\n\n      return [`${k}:${serializeSegment(v, false)}`];\n\n    });\n\n    return `${serializePaths(segment)}/(${children.join('//')})`;\n  }\n}\n/**\n * This method is intended for encoding *key* or *value* parts of query component. We need a custom\n * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be\n * encoded per http://tools.ietf.org/html/rfc3986:\n *    query         = *( pchar / \"/\" / \"?\" )\n *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"\\@\"\n *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n *    pct-encoded   = \"%\" HEXDIG HEXDIG\n *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n * @param {?} s\n * @return {?}\n */\nexport function encode(s: string): string {\n  return encodeURIComponent(s)\n      .replace(/%40/g, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/g, '$')\n      .replace(/%2C/gi, ',')\n      .replace(/%3B/gi, ';');\n}\n/**\n * @param {?} s\n * @return {?}\n */\nexport function decode(s: string): string {\n  return decodeURIComponent(s);\n}\n/**\n * @param {?} path\n * @return {?}\n */\nexport function serializePath(path: UrlSegment): string {\n  return `${encode(path.path)}${serializeParams(path.parameters)}`;\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction serializeParams(params: {[key: string]: string}): string {\n  return Object.keys(params).map(key => `;${encode(key)}=${encode(params[key])}`).join('');\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction serializeQueryParams(params: {[key: string]: any}): string {\n  const /** @type {?} */ strParams: string[] = Object.keys(params).map((name) => {\n    const /** @type {?} */ value = params[name];\n    return Array.isArray(value) ? value.map(v => `${encode(name)}=${encode(v)}`).join('&') :\n                                  `${encode(name)}=${encode(value)}`;\n  });\n\n  return strParams.length ? `?${strParams.join(\"&\")}` : '';\n}\n\nconst /** @type {?} */ SEGMENT_RE = /^[^\\/()?;=&#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchSegments(str: string): string {\n  const /** @type {?} */ match = str.match(SEGMENT_RE);\n  return match ? match[0] : '';\n}\n\nconst /** @type {?} */ QUERY_PARAM_RE = /^[^=?&#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchQueryParams(str: string): string {\n  const /** @type {?} */ match = str.match(QUERY_PARAM_RE);\n  return match ? match[0] : '';\n}\n\nconst /** @type {?} */ QUERY_PARAM_VALUE_RE = /^[^?&#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchUrlQueryParamValue(str: string): string {\n  const /** @type {?} */ match = str.match(QUERY_PARAM_VALUE_RE);\n  return match ? match[0] : '';\n}\nclass UrlParser {\nprivate remaining: string;\n/**\n * @param {?} url\n */\nconstructor(private url: string) { this.remaining = url; }\n/**\n * @return {?}\n */\nparseRootSegment(): UrlSegmentGroup {\n    this.consumeOptional('/');\n\n    if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {\n      return new UrlSegmentGroup([], {});\n    }\n\n    // The root segment group never has segments\n    return new UrlSegmentGroup([], this.parseChildren());\n  }\n/**\n * @return {?}\n */\nparseQueryParams(): {[key: string]: any} {\n    const /** @type {?} */ params: {[key: string]: any} = {};\n    if (this.consumeOptional('?')) {\n      do {\n        this.parseQueryParam(params);\n      } while (this.consumeOptional('&'));\n    }\n    return params;\n  }\n/**\n * @return {?}\n */\nparseFragment(): string|null {\n    return this.consumeOptional('#') ? decodeURI(this.remaining) : null;\n  }\n/**\n * @return {?}\n */\n\nprivate parseChildren(): {[outlet: string]: UrlSegmentGroup} {\n    if (this.remaining === '') {\n      return {};\n    }\n\n    this.consumeOptional('/');\n\n    const /** @type {?} */ segments: UrlSegment[] = [];\n    if (!this.peekStartsWith('(')) {\n      segments.push(this.parseSegment());\n    }\n\n    while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {\n      this.capture('/');\n      segments.push(this.parseSegment());\n    }\n\n    let /** @type {?} */ children: {[outlet: string]: UrlSegmentGroup} = {};\n    if (this.peekStartsWith('/(')) {\n      this.capture('/');\n      children = this.parseParens(true);\n    }\n\n    let /** @type {?} */ res: {[outlet: string]: UrlSegmentGroup} = {};\n    if (this.peekStartsWith('(')) {\n      res = this.parseParens(false);\n    }\n\n    if (segments.length > 0 || Object.keys(children).length > 0) {\n      res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);\n    }\n\n    return res;\n  }\n/**\n * @return {?}\n */\n\nprivate parseSegment(): UrlSegment {\n    const /** @type {?} */ path = matchSegments(this.remaining);\n    if (path === '' && this.peekStartsWith(';')) {\n      throw new Error(`Empty path url segment cannot have parameters: '${this.remaining}'.`);\n    }\n\n    this.capture(path);\n    return new UrlSegment(decode(path), this.parseMatrixParams());\n  }\n/**\n * @return {?}\n */\n\nprivate parseMatrixParams(): {[key: string]: any} {\n    const /** @type {?} */ params: {[key: string]: any} = {};\n    while (this.consumeOptional(';')) {\n      this.parseParam(params);\n    }\n    return params;\n  }\n/**\n * @param {?} params\n * @return {?}\n */\n\nprivate parseParam(params: {[key: string]: any}): void {\n    const /** @type {?} */ key = matchSegments(this.remaining);\n    if (!key) {\n      return;\n    }\n    this.capture(key);\n    let /** @type {?} */ value: any = '';\n    if (this.consumeOptional('=')) {\n      const /** @type {?} */ valueMatch = matchSegments(this.remaining);\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n\n    params[decode(key)] = decode(value);\n  }\n/**\n * @param {?} params\n * @return {?}\n */\n\nprivate parseQueryParam(params: {[key: string]: any}): void {\n    const /** @type {?} */ key = matchQueryParams(this.remaining);\n    if (!key) {\n      return;\n    }\n    this.capture(key);\n    let /** @type {?} */ value: any = '';\n    if (this.consumeOptional('=')) {\n      const /** @type {?} */ valueMatch = matchUrlQueryParamValue(this.remaining);\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n\n    const /** @type {?} */ decodedKey = decode(key);\n    const /** @type {?} */ decodedVal = decode(value);\n\n    if (params.hasOwnProperty(decodedKey)) {\n      // Append to existing values\n      let /** @type {?} */ currentVal = params[decodedKey];\n      if (!Array.isArray(currentVal)) {\n        currentVal = [currentVal];\n        params[decodedKey] = currentVal;\n      }\n      currentVal.push(decodedVal);\n    } else {\n      // Create a new value\n      params[decodedKey] = decodedVal;\n    }\n  }\n/**\n * @param {?} allowPrimary\n * @return {?}\n */\n\nprivate parseParens(allowPrimary: boolean): {[outlet: string]: UrlSegmentGroup} {\n    const /** @type {?} */ segments: {[key: string]: UrlSegmentGroup} = {};\n    this.capture('(');\n\n    while (!this.consumeOptional(')') && this.remaining.length > 0) {\n      const /** @type {?} */ path = matchSegments(this.remaining);\n\n      const /** @type {?} */ next = this.remaining[path.length];\n\n      // if is is not one of these characters, then the segment was unescaped\n      // or the group was not closed\n      if (next !== '/' && next !== ')' && next !== ';') {\n        throw new Error(`Cannot parse url '${this.url}'`);\n      }\n\n      let /** @type {?} */ outletName: string = /** @type {?} */(( undefined));\n      if (path.indexOf(':') > -1) {\n        outletName = path.substr(0, path.indexOf(':'));\n        this.capture(outletName);\n        this.capture(':');\n      } else if (allowPrimary) {\n        outletName = PRIMARY_OUTLET;\n      }\n\n      const /** @type {?} */ children = this.parseChildren();\n      segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :\n                                                                  new UrlSegmentGroup([], children);\n      this.consumeOptional('//');\n    }\n\n    return segments;\n  }\n/**\n * @param {?} str\n * @return {?}\n */\n\nprivate peekStartsWith(str: string): boolean { return this.remaining.startsWith(str); }\n/**\n * @param {?} str\n * @return {?}\n */\n\nprivate consumeOptional(str: string): boolean {\n    if (this.peekStartsWith(str)) {\n      this.remaining = this.remaining.substring(str.length);\n      return true;\n    }\n    return false;\n  }\n/**\n * @param {?} str\n * @return {?}\n */\n\nprivate capture(str: string): void {\n    if (!this.consumeOptional(str)) {\n      throw new Error(`Expected \"${str}\".`);\n    }\n  }\n}\n\nfunction UrlParser_tsickle_Closure_declarations() {\n/** @type {?} */\nUrlParser.prototype.remaining;\n/** @type {?} */\nUrlParser.prototype.url;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModuleFactory, ɵisObservable as isObservable, ɵisPromise as isPromise} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {fromPromise} from 'rxjs/observable/fromPromise';\nimport {of } from 'rxjs/observable/of';\nimport {concatAll} from 'rxjs/operator/concatAll';\nimport {every} from 'rxjs/operator/every';\nimport * as l from 'rxjs/operator/last';\nimport {map} from 'rxjs/operator/map';\nimport {mergeAll} from 'rxjs/operator/mergeAll';\nimport {PRIMARY_OUTLET} from '../shared';\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function shallowEqualArrays(a: any[], b: any[]): boolean {\n  if (a.length !== b.length) return false;\n  for (let /** @type {?} */ i = 0; i < a.length; ++i) {\n    if (!shallowEqual(a[i], b[i])) return false;\n  }\n  return true;\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function shallowEqual(a: {[x: string]: any}, b: {[x: string]: any}): boolean {\n  const /** @type {?} */ k1 = Object.keys(a);\n  const /** @type {?} */ k2 = Object.keys(b);\n  if (k1.length != k2.length) {\n    return false;\n  }\n  let /** @type {?} */ key: string;\n  for (let /** @type {?} */ i = 0; i < k1.length; i++) {\n    key = k1[i];\n    if (a[key] !== b[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Flattens single-level nested arrays.\n * @template T\n * @param {?} arr\n * @return {?}\n */\nexport function flatten<T>(arr: T[][]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n/**\n * Return the last element of an array.\n * @template T\n * @param {?} a\n * @return {?}\n */\nexport function last<T>(a: T[]): T|null {\n  return a.length > 0 ? a[a.length - 1] : null;\n}\n/**\n * Verifys all booleans in an array are `true`.\n * @param {?} bools\n * @return {?}\n */\nexport function and(bools: boolean[]): boolean {\n  return !bools.some(v => !v);\n}\n/**\n * @template K, V\n * @param {?} map\n * @param {?} callback\n * @return {?}\n */\nexport function forEach<K, V>(map: {[key: string]: V}, callback: (v: V, k: string) => void): void {\n  for (const /** @type {?} */ prop in map) {\n    if (map.hasOwnProperty(prop)) {\n      callback(map[prop], prop);\n    }\n  }\n}\n/**\n * @template A, B\n * @param {?} obj\n * @param {?} fn\n * @return {?}\n */\nexport function waitForMap<A, B>(\n    obj: {[k: string]: A}, fn: (k: string, a: A) => Observable<B>): Observable<{[k: string]: B}> {\n  if (Object.keys(obj).length === 0) {\n    return of ({});\n  }\n\n  const /** @type {?} */ waitHead: Observable<B>[] = [];\n  const /** @type {?} */ waitTail: Observable<B>[] = [];\n  const /** @type {?} */ res: {[k: string]: B} = {};\n\n  forEach(obj, (a: A, k: string) => {\n    const /** @type {?} */ mapped = map.call(fn(k, a), (r: B) => res[k] = r);\n    if (k === PRIMARY_OUTLET) {\n      waitHead.push(mapped);\n    } else {\n      waitTail.push(mapped);\n    }\n  });\n\n  const /** @type {?} */ concat$ = concatAll.call(of (...waitHead, ...waitTail));\n  const /** @type {?} */ last$ = l.last.call(concat$);\n  return map.call(last$, () => res);\n}\n/**\n * ANDs Observables by merging all input observables, reducing to an Observable verifying all\n * input Observables return `true`.\n * @param {?} observables\n * @return {?}\n */\nexport function andObservables(observables: Observable<Observable<any>>): Observable<boolean> {\n  const /** @type {?} */ merged$ = mergeAll.call(observables);\n  return every.call(merged$, (result: any) => result === true);\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nexport function wrapIntoObservable<T>(value: T | NgModuleFactory<T>| Promise<T>| Observable<T>):\n    Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    // Use `Promise.resolve()` to wrap promise-like instances.\n    // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the\n    // change detection.\n    return fromPromise(Promise.resolve(value));\n  }\n\n  return of ( /** @type {?} */((value as T)));\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Route} from './config';\nimport {RouterStateSnapshot} from './router_state';\n/**\n * \\@whatItDoes Base for events the Router goes through, as opposed to events tied to a specific\n * Route. `RouterEvent`s will only be fired one time for any given navigation.\n * \n * Example:\n * \n * ```\n * class MyService {\n *   constructor(public router: Router, logger: Logger) {\n *     router.events.filter(e => e instanceof RouterEvent).subscribe(e => {\n *       logger.log(e.id, e.url);\n *     });\n *   }\n * }\n * ```\n * \n * \\@experimental\n */\nexport class RouterEvent {\n/**\n * @param {?} id\n * @param {?} url\n */\nconstructor(\npublic id: number,\npublic url: string) {}\n}\n\nfunction RouterEvent_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nRouterEvent.prototype.id;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nRouterEvent.prototype.url;\n}\n\n/**\n * \\@whatItDoes Base for events tied to a specific `Route`, as opposed to events for the Router\n * lifecycle. `RouteEvent`s may be fired multiple times during a single navigation and will\n * always receive the `Route` they pertain to.\n * \n * Example:\n * \n * ```\n * class MyService {\n *   constructor(public router: Router, spinner: Spinner) {\n *     router.events.filter(e => e instanceof RouteEvent).subscribe(e => {\n *       if (e instanceof ChildActivationStart) {\n *         spinner.start(e.route);\n *       } else if (e instanceof ChildActivationEnd) {\n *         spinner.end(e.route);\n *       }\n *     });\n *   }\n * }\n * ```\n * \n * \\@experimental\n */\nexport class RouteEvent {\n/**\n * @param {?} route\n */\nconstructor(\npublic route: Route) {}\n}\n\nfunction RouteEvent_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nRouteEvent.prototype.route;\n}\n\n/**\n * \\@whatItDoes Represents an event triggered when a navigation starts.\n * \n * \\@stable\n */\nexport class NavigationStart extends RouterEvent {\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string { return `NavigationStart(id: ${this.id}, url: '${this.url}')`; }\n}\n/**\n * \\@whatItDoes Represents an event triggered when a navigation ends successfully.\n * \n * \\@stable\n */\nexport class NavigationEnd extends RouterEvent {\n/**\n * @param {?} id\n * @param {?} url\n * @param {?} urlAfterRedirects\n */\nconstructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\npublic urlAfterRedirects: string) {\n    super(id, url);\n  }\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string {\n    return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;\n  }\n}\n\nfunction NavigationEnd_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationEnd.prototype.urlAfterRedirects;\n}\n\n/**\n * \\@whatItDoes Represents an event triggered when a navigation is canceled.\n * \n * \\@stable\n */\nexport class NavigationCancel extends RouterEvent {\n/**\n * @param {?} id\n * @param {?} url\n * @param {?} reason\n */\nconstructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\npublic reason: string) {\n    super(id, url);\n  }\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string { return `NavigationCancel(id: ${this.id}, url: '${this.url}')`; }\n}\n\nfunction NavigationCancel_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationCancel.prototype.reason;\n}\n\n/**\n * \\@whatItDoes Represents an event triggered when a navigation fails due to an unexpected error.\n * \n * \\@stable\n */\nexport class NavigationError extends RouterEvent {\n/**\n * @param {?} id\n * @param {?} url\n * @param {?} error\n */\nconstructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\npublic error: any) {\n    super(id, url);\n  }\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string {\n    return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;\n  }\n}\n\nfunction NavigationError_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationError.prototype.error;\n}\n\n/**\n * \\@whatItDoes Represents an event triggered when routes are recognized.\n * \n * \\@stable\n */\nexport class RoutesRecognized extends RouterEvent {\n/**\n * @param {?} id\n * @param {?} url\n * @param {?} urlAfterRedirects\n * @param {?} state\n */\nconstructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\npublic urlAfterRedirects: string,\npublic state: RouterStateSnapshot) {\n    super(id, url);\n  }\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string {\n    return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\nfunction RoutesRecognized_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nRoutesRecognized.prototype.urlAfterRedirects;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nRoutesRecognized.prototype.state;\n}\n\n/**\n * \\@whatItDoes Represents the start of the Guard phase of routing.\n * \n * \\@experimental\n */\nexport class GuardsCheckStart extends RouterEvent {\n/**\n * @param {?} id\n * @param {?} url\n * @param {?} urlAfterRedirects\n * @param {?} state\n */\nconstructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\npublic urlAfterRedirects: string,\npublic state: RouterStateSnapshot) {\n    super(id, url);\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\nfunction GuardsCheckStart_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nGuardsCheckStart.prototype.urlAfterRedirects;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nGuardsCheckStart.prototype.state;\n}\n\n/**\n * \\@whatItDoes Represents the end of the Guard phase of routing.\n * \n * \\@experimental\n */\nexport class GuardsCheckEnd extends RouterEvent {\n/**\n * @param {?} id\n * @param {?} url\n * @param {?} urlAfterRedirects\n * @param {?} state\n * @param {?} shouldActivate\n */\nconstructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\npublic urlAfterRedirects: string,\npublic state: RouterStateSnapshot,\npublic shouldActivate: boolean) {\n    super(id, url);\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;\n  }\n}\n\nfunction GuardsCheckEnd_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nGuardsCheckEnd.prototype.urlAfterRedirects;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nGuardsCheckEnd.prototype.state;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nGuardsCheckEnd.prototype.shouldActivate;\n}\n\n/**\n * \\@whatItDoes Represents the start of the Resolve phase of routing. The timing of this\n * event may change, thus it's experimental. In the current iteration it will run\n * in the \"resolve\" phase whether there's things to resolve or not. In the future this\n * behavior may change to only run when there are things to be resolved.\n * \n * \\@experimental\n */\nexport class ResolveStart extends RouterEvent {\n/**\n * @param {?} id\n * @param {?} url\n * @param {?} urlAfterRedirects\n * @param {?} state\n */\nconstructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\npublic urlAfterRedirects: string,\npublic state: RouterStateSnapshot) {\n    super(id, url);\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\nfunction ResolveStart_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nResolveStart.prototype.urlAfterRedirects;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nResolveStart.prototype.state;\n}\n\n/**\n * \\@whatItDoes Represents the end of the Resolve phase of routing. See note on\n * {\\@link ResolveStart} for use of this experimental API.\n * \n * \\@experimental\n */\nexport class ResolveEnd extends RouterEvent {\n/**\n * @param {?} id\n * @param {?} url\n * @param {?} urlAfterRedirects\n * @param {?} state\n */\nconstructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\npublic urlAfterRedirects: string,\npublic state: RouterStateSnapshot) {\n    super(id, url);\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\nfunction ResolveEnd_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nResolveEnd.prototype.urlAfterRedirects;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nResolveEnd.prototype.state;\n}\n\n/**\n * \\@whatItDoes Represents an event triggered before lazy loading a route config.\n * \n * \\@experimental\n */\nexport class RouteConfigLoadStart extends RouteEvent {\n/**\n * @return {?}\n */\ntoString(): string { return `RouteConfigLoadStart(path: ${this.route.path})`; }\n}\n/**\n * \\@whatItDoes Represents an event triggered when a route has been lazy loaded.\n * \n * \\@experimental\n */\nexport class RouteConfigLoadEnd extends RouteEvent {\n/**\n * @return {?}\n */\ntoString(): string { return `RouteConfigLoadEnd(path: ${this.route.path})`; }\n}\n/**\n * \\@whatItDoes Represents the start of end of the Resolve phase of routing. See note on\n * {\\@link ChildActivationEnd} for use of this experimental API.\n * \n * \\@experimental\n */\nexport class ChildActivationStart extends RouteEvent {\n/**\n * @return {?}\n */\ntoString(): string { return `ChildActivationStart(path: '${this.route.path}')`; }\n}\n/**\n * \\@whatItDoes Represents the start of end of the Resolve phase of routing. See note on\n * {\\@link ChildActivationStart} for use of this experimental API.\n * \n * \\@experimental\n */\nexport class ChildActivationEnd extends RouteEvent {\n/**\n * @return {?}\n */\ntoString(): string { return `ChildActivationEnd(path: '${this.route.path}')`; }\n}\n\n/**\n * @whatItDoes Represents a router event, allowing you to track the lifecycle of the router.\n *\n * The sequence of router events is:\n *\n * - {@link NavigationStart},\n * - {@link RouteConfigLoadStart},\n * - {@link RouteConfigLoadEnd},\n * - {@link RoutesRecognized},\n * - {@link GuardsCheckStart},\n * - {@link ChildActivationStart},\n * - {@link GuardsCheckEnd},\n * - {@link ResolveStart},\n * - {@link ResolveEnd},\n * - {@link ChildActivationEnd}\n * - {@link NavigationEnd},\n * - {@link NavigationCancel},\n * - {@link NavigationError}\n *\n * @stable\n */\nexport type Event = RouterEvent | RouteEvent;\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModuleFactory, NgModuleRef, Type} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {PRIMARY_OUTLET} from './shared';\nimport {UrlSegment, UrlSegmentGroup} from './url_tree';\n\n/**\n * @whatItDoes Represents router configuration.\n *\n * @description\n * `Routes` is an array of route configurations. Each one has the following properties:\n *\n * - `path` is a string that uses the route matcher DSL.\n * - `pathMatch` is a string that specifies the matching strategy.\n * - `matcher` defines a custom strategy for path matching and supersedes `path` and `pathMatch`.\n * - `component` is a component type.\n * - `redirectTo` is the url fragment which will replace the current matched segment.\n * - `outlet` is the name of the outlet the component should be placed into.\n * - `canActivate` is an array of DI tokens used to look up CanActivate handlers. See\n *   {@link CanActivate} for more info.\n * - `canActivateChild` is an array of DI tokens used to look up CanActivateChild handlers. See\n *   {@link CanActivateChild} for more info.\n * - `canDeactivate` is an array of DI tokens used to look up CanDeactivate handlers. See\n *   {@link CanDeactivate} for more info.\n * - `canLoad` is an array of DI tokens used to look up CanLoad handlers. See\n *   {@link CanLoad} for more info.\n * - `data` is additional data provided to the component via `ActivatedRoute`.\n * - `resolve` is a map of DI tokens used to look up data resolvers. See {@link Resolve} for more\n *   info.\n * - `runGuardsAndResolvers` defines when guards and resolvers will be run. By default they run only\n *    when the matrix parameters of the route change. When set to `paramsOrQueryParamsChange` they\n *    will also run when query params change. And when set to `always`, they will run every time.\n * - `children` is an array of child route definitions.\n * - `loadChildren` is a reference to lazy loaded child routes. See {@link LoadChildren} for more\n *   info.\n *\n * ### Simple Configuration\n *\n * ```\n * [{\n *   path: 'team/:id',\n  *  component: Team,\n *   children: [{\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * When navigating to `/team/11/user/bob`, the router will create the team component with the user\n * component in it.\n *\n * ### Multiple Outlets\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team\n * }, {\n *   path: 'chat/:user',\n *   component: Chat\n *   outlet: 'aux'\n * }]\n * ```\n *\n * When navigating to `/team/11(aux:chat/jim)`, the router will create the team component next to\n * the chat component. The chat component will be placed into the aux outlet.\n *\n * ### Wild Cards\n *\n * ```\n * [{\n *   path: '**',\n *   component: Sink\n * }]\n * ```\n *\n * Regardless of where you navigate to, the router will instantiate the sink component.\n *\n * ### Redirects\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: 'legacy/user/:name',\n *     redirectTo: 'user/:name'\n *   }, {\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * When navigating to '/team/11/legacy/user/jim', the router will change the url to\n * '/team/11/user/jim', and then will instantiate the team component with the user component\n * in it.\n *\n * If the `redirectTo` value starts with a '/', then it is an absolute redirect. E.g., if in the\n * example above we change the `redirectTo` to `/user/:name`, the result url will be '/user/jim'.\n *\n * ### Empty Path\n *\n * Empty-path route configurations can be used to instantiate components that do not 'consume'\n * any url segments. Let's look at the following configuration:\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: '',\n *     component: AllUsers\n *   }, {\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * When navigating to `/team/11`, the router will instantiate the AllUsers component.\n *\n * Empty-path routes can have children.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: '',\n *     component: WrapperCmp,\n *     children: [{\n *       path: 'user/:name',\n *       component: User\n *     }]\n *   }]\n * }]\n * ```\n *\n * When navigating to `/team/11/user/jim`, the router will instantiate the wrapper component with\n * the user component in it.\n *\n * An empty path route inherits its parent's params and data. This is because it cannot have its\n * own params, and, as a result, it often uses its parent's params and data as its own.\n *\n * ### Matching Strategy\n *\n * By default the router will look at what is left in the url, and check if it starts with\n * the specified path (e.g., `/team/11/user` starts with `team/:id`).\n *\n * We can change the matching strategy to make sure that the path covers the whole unconsumed url,\n * which is akin to `unconsumedUrl === path` or `$` regular expressions.\n *\n * This is particularly important when redirecting empty-path routes.\n *\n * ```\n * [{\n *   path: '',\n *   pathMatch: 'prefix', //default\n *   redirectTo: 'main'\n * }, {\n *   path: 'main',\n *   component: Main\n * }]\n * ```\n *\n * Since an empty path is a prefix of any url, even when navigating to '/main', the router will\n * still apply the redirect.\n *\n * If `pathMatch: full` is provided, the router will apply the redirect if and only if navigating to\n * '/'.\n *\n * ```\n * [{\n *   path: '',\n *   pathMatch: 'full',\n *   redirectTo: 'main'\n * }, {\n *   path: 'main',\n *   component: Main\n * }]\n * ```\n *\n * ### Componentless Routes\n *\n * It is useful at times to have the ability to share parameters between sibling components.\n *\n * Say we have two components--ChildCmp and AuxCmp--that we want to put next to each other and both\n * of them require some id parameter.\n *\n * One way to do that would be to have a bogus parent component, so both the siblings can get the id\n * parameter from it. This is not ideal. Instead, you can use a componentless route.\n *\n * ```\n * [{\n *    path: 'parent/:id',\n *    children: [\n *      { path: 'a', component: MainChild },\n *      { path: 'b', component: AuxChild, outlet: 'aux' }\n *    ]\n * }]\n * ```\n *\n * So when navigating to `parent/10/(a//aux:b)`, the route will instantiate the main child and aux\n * child components next to each other. In this example, the application component\n * has to have the primary and aux outlets defined.\n *\n * The router will also merge the `params`, `data`, and `resolve` of the componentless parent into\n * the `params`, `data`, and `resolve` of the children. This is done because there is no component\n * that can inject the activated route of the componentless parent.\n *\n * This is especially useful when child components are defined as follows:\n *\n * ```\n * [{\n *    path: 'parent/:id',\n *    children: [\n *      { path: '', component: MainChild },\n *      { path: '', component: AuxChild, outlet: 'aux' }\n *    ]\n * }]\n * ```\n *\n * With this configuration in place, navigating to '/parent/10' will create the main child and aux\n * components.\n *\n * ### Lazy Loading\n *\n * Lazy loading speeds up our application load time by splitting it into multiple bundles, and\n * loading them on demand. The router is designed to make lazy loading simple and easy. Instead of\n * providing the children property, you can provide the `loadChildren` property, as follows:\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   loadChildren: 'team'\n * }]\n * ```\n *\n * The router will use registered NgModuleFactoryLoader to fetch an NgModule associated with 'team'.\n * Then it will extract the set of routes defined in that NgModule, and will transparently add\n * those routes to the main configuration.\n *\n * @stable use Routes\n */\nexport type Routes = Route[];\n\n/**\n * @whatItDoes Represents the results of the URL matching.\n *\n * * `consumed` is an array of the consumed URL segments.\n * * `posParams` is a map of positional parameters.\n *\n * @experimental\n */\nexport type UrlMatchResult = {\n  consumed: UrlSegment[]; posParams?: {[name: string]: UrlSegment};\n};\n\n/**\n * @whatItDoes A function matching URLs\n *\n * @description\n *\n * A custom URL matcher can be provided when a combination of `path` and `pathMatch` isn't\n * expressive enough.\n *\n * For instance, the following matcher matches html files.\n *\n * ```\n * function htmlFiles(url: UrlSegment[]) {\n *  return url.length === 1 && url[0].path.endsWith('.html') ? ({consumed: url}) : null;\n * }\n *\n * const routes = [{ matcher: htmlFiles, component: HtmlCmp }];\n * ```\n *\n * @experimental\n */\nexport type UrlMatcher = (segments: UrlSegment[], group: UrlSegmentGroup, route: Route) =>\n    UrlMatchResult;\n\n/**\n * @whatItDoes Represents the static data associated with a particular route.\n * See {@link Routes} for more details.\n * @stable\n */\nexport type Data = {\n  [name: string]: any\n};\n\n/**\n * @whatItDoes Represents the resolved data associated with a particular route.\n * See {@link Routes} for more details.\n * @stable\n */\nexport type ResolveData = {\n  [name: string]: any\n};\n\n/**\n * @whatItDoes The type of `loadChildren`.\n * See {@link Routes} for more details.\n * @stable\n */\nexport type LoadChildrenCallback = () =>\n    Type<any>| NgModuleFactory<any>| Promise<Type<any>>| Observable<Type<any>>;\n\n/**\n * @whatItDoes The type of `loadChildren`.\n * See {@link Routes} for more details.\n * @stable\n */\nexport type LoadChildren = string | LoadChildrenCallback;\n\n/**\n * @whatItDoes The type of `queryParamsHandling`.\n * See {@link RouterLink} for more details.\n * @stable\n */\nexport type QueryParamsHandling = 'merge' | 'preserve' | '';\n\n/**\n * @whatItDoes The type of `runGuardsAndResolvers`.\n * See {@link Routes} for more details.\n * @experimental\n */\nexport type RunGuardsAndResolvers = 'paramsChange' | 'paramsOrQueryParamsChange' | 'always';\n/**\n * See {\\@link Routes} for more details.\n * \\@stable\n * @record\n */\nexport function Route() {}\n\n\nfunction Route_tsickle_Closure_declarations() {\n/** @type {?|undefined} */\nRoute.prototype.path;\n/** @type {?|undefined} */\nRoute.prototype.pathMatch;\n/** @type {?|undefined} */\nRoute.prototype.matcher;\n/** @type {?|undefined} */\nRoute.prototype.component;\n/** @type {?|undefined} */\nRoute.prototype.redirectTo;\n/** @type {?|undefined} */\nRoute.prototype.outlet;\n/** @type {?|undefined} */\nRoute.prototype.canActivate;\n/** @type {?|undefined} */\nRoute.prototype.canActivateChild;\n/** @type {?|undefined} */\nRoute.prototype.canDeactivate;\n/** @type {?|undefined} */\nRoute.prototype.canLoad;\n/** @type {?|undefined} */\nRoute.prototype.data;\n/** @type {?|undefined} */\nRoute.prototype.resolve;\n/** @type {?|undefined} */\nRoute.prototype.children;\n/** @type {?|undefined} */\nRoute.prototype.loadChildren;\n/** @type {?|undefined} */\nRoute.prototype.runGuardsAndResolvers;\n/**\n * Filled for routes with `loadChildren` once the module has been loaded\n * \\@internal\n * @type {?|undefined}\n */\nRoute.prototype._loadedConfig;\n}\n\n\n/**\n * See {@link Routes} for more details.\n * @stable\n */\nexport interface Route {\n  path?: string;\n  pathMatch?: string;\n  matcher?: UrlMatcher;\n  component?: Type<any>;\n  redirectTo?: string;\n  outlet?: string;\n  canActivate?: any[];\n  canActivateChild?: any[];\n  canDeactivate?: any[];\n  canLoad?: any[];\n  data?: Data;\n  resolve?: ResolveData;\n  children?: Routes;\n  loadChildren?: LoadChildren;\n  runGuardsAndResolvers?: RunGuardsAndResolvers;\n  /**\n   * Filled for routes with `loadChildren` once the module has been loaded\n   * @internal\n   */\n  _loadedConfig?: LoadedRouterConfig;\n}\nexport class LoadedRouterConfig {\n/**\n * @param {?} routes\n * @param {?} module\n */\nconstructor(public routes: Route[],\npublic module: NgModuleRef<any>) {}\n}\n\nfunction LoadedRouterConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nLoadedRouterConfig.prototype.routes;\n/** @type {?} */\nLoadedRouterConfig.prototype.module;\n}\n\n/**\n * @param {?} config\n * @param {?=} parentPath\n * @return {?}\n */\nexport function validateConfig(config: Routes, parentPath: string = ''): void {\n  // forEach doesn't iterate undefined values\n  for (let /** @type {?} */ i = 0; i < config.length; i++) {\n    const /** @type {?} */ route: Route = config[i];\n    const /** @type {?} */ fullPath: string = getFullPath(parentPath, route);\n    validateNode(route, fullPath);\n  }\n}\n/**\n * @param {?} route\n * @param {?} fullPath\n * @return {?}\n */\nfunction validateNode(route: Route, fullPath: string): void {\n  if (!route) {\n    throw new Error(`\n      Invalid configuration of route '${fullPath}': Encountered undefined route.\n      The reason might be an extra comma.\n\n      Example:\n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    `);\n  }\n  if (Array.isArray(route)) {\n    throw new Error(`Invalid configuration of route '${fullPath}': Array cannot be specified`);\n  }\n  if (!route.component && (route.outlet && route.outlet !== PRIMARY_OUTLET)) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': a componentless route cannot have a named outlet set`);\n  }\n  if (route.redirectTo && route.children) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': redirectTo and children cannot be used together`);\n  }\n  if (route.redirectTo && route.loadChildren) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': redirectTo and loadChildren cannot be used together`);\n  }\n  if (route.children && route.loadChildren) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': children and loadChildren cannot be used together`);\n  }\n  if (route.redirectTo && route.component) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': redirectTo and component cannot be used together`);\n  }\n  if (route.path && route.matcher) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': path and matcher cannot be used together`);\n  }\n  if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}'. One of the following must be provided: component, redirectTo, children or loadChildren`);\n  }\n  if (route.path === void 0 && route.matcher === void 0) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': routes must have either a path or a matcher specified`);\n  }\n  if (typeof route.path === 'string' && route.path.charAt(0) === '/') {\n    throw new Error(`Invalid configuration of route '${fullPath}': path cannot start with a slash`);\n  }\n  if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {\n    const /** @type {?} */ exp =\n        `The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.`;\n    throw new Error(\n        `Invalid configuration of route '{path: \"${fullPath}\", redirectTo: \"${route.redirectTo}\"}': please provide 'pathMatch'. ${exp}`);\n  }\n  if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': pathMatch can only be set to 'prefix' or 'full'`);\n  }\n  if (route.children) {\n    validateConfig(route.children, fullPath);\n  }\n}\n/**\n * @param {?} parentPath\n * @param {?} currentRoute\n * @return {?}\n */\nfunction getFullPath(parentPath: string, currentRoute: Route): string {\n  if (!currentRoute) {\n    return parentPath;\n  }\n  if (!parentPath && !currentRoute.path) {\n    return '';\n  } else if (parentPath && !currentRoute.path) {\n    return `${parentPath}/`;\n  } else if (!parentPath && currentRoute.path) {\n    return currentRoute.path;\n  } else {\n    return `${parentPath}/${currentRoute.path}`;\n  }\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Route, UrlMatchResult} from './config';\nimport {UrlSegment, UrlSegmentGroup} from './url_tree';\n/**\n * \\@whatItDoes Name of the primary outlet.\n * \n * \\@stable\n */\nexport const /** @type {?} */ PRIMARY_OUTLET = 'primary';\n\n/**\n * A collection of parameters.\n *\n * @stable\n */\nexport type Params = {\n  [key: string]: any\n};\n/**\n * Matrix and Query parameters.\n * \n * `ParamMap` makes it easier to work with parameters as they could have either a single value or\n * multiple value. Because this should be known by the user, calling `get` or `getAll` returns the\n * correct type (either `string` or `string[]`).\n * \n * The API is inspired by the URLSearchParams interface.\n * see https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\n * \n * \\@stable\n * @record\n */\nexport function ParamMap() {}\n\n\nfunction ParamMap_tsickle_Closure_declarations() {\n/** @type {?} */\nParamMap.prototype.has;\n/**\n * Return a single value for the given parameter name:\n * - the value when the parameter has a single value,\n * - the first value if the parameter has multiple values,\n * - `null` when there is no such parameter.\n * @type {?}\n */\nParamMap.prototype.get;\n/**\n * Return an array of values for the given parameter name.\n * \n * If there is no such parameter, an empty array is returned.\n * @type {?}\n */\nParamMap.prototype.getAll;\n/**\n * Name of the parameters\n * @type {?}\n */\nParamMap.prototype.keys;\n}\n\n\n/**\n * Matrix and Query parameters.\n *\n * `ParamMap` makes it easier to work with parameters as they could have either a single value or\n * multiple value. Because this should be known by the user, calling `get` or `getAll` returns the\n * correct type (either `string` or `string[]`).\n *\n * The API is inspired by the URLSearchParams interface.\n * see https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\n *\n * @stable\n */\nexport interface ParamMap {\n  has(name: string): boolean;\n  /**\n   * Return a single value for the given parameter name:\n   * - the value when the parameter has a single value,\n   * - the first value if the parameter has multiple values,\n   * - `null` when there is no such parameter.\n   */\n  get(name: string): string|null;\n  /**\n   * Return an array of values for the given parameter name.\n   *\n   * If there is no such parameter, an empty array is returned.\n   */\n  getAll(name: string): string[];\n\n  /** Name of the parameters */\n  readonly keys: string[];\n}\nclass ParamsAsMap implements ParamMap {\nprivate params: Params;\n/**\n * @param {?} params\n */\nconstructor(params: Params) { this.params = params || {}; }\n/**\n * @param {?} name\n * @return {?}\n */\nhas(name: string): boolean { return this.params.hasOwnProperty(name); }\n/**\n * @param {?} name\n * @return {?}\n */\nget(name: string): string|null {\n    if (this.has(name)) {\n      const /** @type {?} */ v = this.params[name];\n      return Array.isArray(v) ? v[0] : v;\n    }\n\n    return null;\n  }\n/**\n * @param {?} name\n * @return {?}\n */\ngetAll(name: string): string[] {\n    if (this.has(name)) {\n      const /** @type {?} */ v = this.params[name];\n      return Array.isArray(v) ? v : [v];\n    }\n\n    return [];\n  }\n/**\n * @return {?}\n */\nget keys(): string[] { return Object.keys(this.params); }\n}\n\nfunction ParamsAsMap_tsickle_Closure_declarations() {\n/** @type {?} */\nParamsAsMap.prototype.params;\n}\n\n/**\n * Convert a {\\@link Params} instance to a {\\@link ParamMap}.\n * \n * \\@stable\n * @param {?} params\n * @return {?}\n */\nexport function convertToParamMap(params: Params): ParamMap {\n  return new ParamsAsMap(params);\n}\n\nconst /** @type {?} */ NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';\n/**\n * @param {?} message\n * @return {?}\n */\nexport function navigationCancelingError(message: string) {\n  const /** @type {?} */ error = Error('NavigationCancelingError: ' + message);\n  ( /** @type {?} */((error as any)))[NAVIGATION_CANCELING_ERROR] = true;\n  return error;\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function isNavigationCancelingError(error: Error) {\n  return ( /** @type {?} */((error as any)))[NAVIGATION_CANCELING_ERROR];\n}\n/**\n * @param {?} segments\n * @param {?} segmentGroup\n * @param {?} route\n * @return {?}\n */\nexport function defaultUrlMatcher(\n    segments: UrlSegment[], segmentGroup: UrlSegmentGroup, route: Route): UrlMatchResult|null {\n  const /** @type {?} */ parts = /** @type {?} */(( route.path)).split('/');\n\n  if (parts.length > segments.length) {\n    // The actual URL is shorter than the config, no match\n    return null;\n  }\n\n  if (route.pathMatch === 'full' &&\n      (segmentGroup.hasChildren() || parts.length < segments.length)) {\n    // The config is longer than the actual URL but we are looking for a full match, return null\n    return null;\n  }\n\n  const /** @type {?} */ posParams: {[key: string]: UrlSegment} = {};\n\n  // Check each config part against the actual URL\n  for (let /** @type {?} */ index = 0; index < parts.length; index++) {\n    const /** @type {?} */ part = parts[index];\n    const /** @type {?} */ segment = segments[index];\n    const /** @type {?} */ isParameter = part.startsWith(':');\n    if (isParameter) {\n      posParams[part.substring(1)] = segment;\n    } else if (part !== segment.path) {\n      // The actual URL part does not match the config, no match\n      return null;\n    }\n  }\n\n  return {consumed: segments.slice(0, parts.length), posParams};\n}\n"],"names":["getDOM","CanDeactivate","CanActivate","getOutlet","split","NoMatch","match","last","map","isPromise","isObservable","l.last"],"mappings":"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"}