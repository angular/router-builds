{"version":3,"file":"router.es5.js","sources":["../../../../packages/router/src/version.ts","../../../../packages/router/src/router_module.ts","../../../../packages/router/src/router_preloader.ts","../../../../packages/router/src/route_reuse_strategy.ts","../../../../packages/router/src/directives/router_outlet.ts","../../../../packages/router/src/directives/router_link_active.ts","../../../../packages/router/src/directives/router_link.ts","../../../../packages/router/src/router.ts","../../../../packages/router/src/url_handling_strategy.ts","../../../../packages/router/src/router_outlet_map.ts","../../../../packages/router/src/recognize.ts","../../../../packages/router/src/create_url_tree.ts","../../../../packages/router/src/create_router_state.ts","../../../../packages/router/src/router_state.ts","../../../../packages/router/src/utils/tree.ts","../../../../packages/router/src/config.ts","../../../../packages/router/src/apply_redirects.ts","../../../../packages/router/src/url_tree.ts","../../../../packages/router/src/router_config_loader.ts","../../../../packages/router/src/utils/collection.ts","../../../../packages/router/src/shared.ts","../../../../packages/router/src/events.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\n\nimport {Version} from '@angular/core';\n/**\n * \\@stable\n */\nexport const VERSION = new Version('4.0.0-rc.4-b7212f5');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {APP_BASE_HREF, HashLocationStrategy, LOCATION_INITIALIZED, Location, LocationStrategy, PathLocationStrategy, PlatformLocation} from '@angular/common';\nimport {ANALYZE_FOR_ENTRY_COMPONENTS, APP_BOOTSTRAP_LISTENER, APP_INITIALIZER, ApplicationRef, Compiler, ComponentRef, Inject, Injectable, InjectionToken, Injector, ModuleWithProviders, NgModule, NgModuleFactoryLoader, NgProbeToken, Optional, Provider, SkipSelf, SystemJsNgModuleLoader} from '@angular/core';\nimport {ÉµgetDOM as getDOM} from '@angular/platform-browser';\nimport {Subject} from 'rxjs/Subject';\nimport {of } from 'rxjs/observable/of';\n\nimport {Route, Routes} from './config';\nimport {RouterLink, RouterLinkWithHref} from './directives/router_link';\nimport {RouterLinkActive} from './directives/router_link_active';\nimport {RouterOutlet} from './directives/router_outlet';\nimport {RouteReuseStrategy} from './route_reuse_strategy';\nimport {ErrorHandler, Router} from './router';\nimport {ROUTES} from './router_config_loader';\nimport {RouterOutletMap} from './router_outlet_map';\nimport {NoPreloading, PreloadAllModules, PreloadingStrategy, RouterPreloader} from './router_preloader';\nimport {ActivatedRoute, RouterStateSnapshot} from './router_state';\nimport {UrlHandlingStrategy} from './url_handling_strategy';\nimport {DefaultUrlSerializer, UrlSerializer} from './url_tree';\nimport {flatten} from './utils/collection';\n/**\n * \\@whatItDoes Contains a list of directives\n * \\@stable\n */\nconst ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive];\n/**\n * \\@whatItDoes Is used in DI to configure the router.\n * \\@stable\n */\nexport const ROUTER_CONFIGURATION = new InjectionToken<ExtraOptions>('ROUTER_CONFIGURATION');\n/**\n * \\@docsNotRequired\n */\nexport const ROUTER_FORROOT_GUARD = new InjectionToken<void>('ROUTER_FORROOT_GUARD');\n\nexport const /** @type {?} */ ROUTER_PROVIDERS: Provider[] = [\n  Location,\n  {provide: UrlSerializer, useClass: DefaultUrlSerializer},\n  {\n    provide: Router,\n    useFactory: setupRouter,\n    deps: [\n      ApplicationRef, UrlSerializer, RouterOutletMap, Location, Injector, NgModuleFactoryLoader,\n      Compiler, ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()],\n      [RouteReuseStrategy, new Optional()]\n    ]\n  },\n  RouterOutletMap,\n  {provide: ActivatedRoute, useFactory: rootRoute, deps: [Router]},\n  {provide: NgModuleFactoryLoader, useClass: SystemJsNgModuleLoader},\n  RouterPreloader,\n  NoPreloading,\n  PreloadAllModules,\n  {provide: ROUTER_CONFIGURATION, useValue: {enableTracing: false}},\n];\n/**\n * @return {?}\n */\nexport function routerNgProbeToken() {\n  return new NgProbeToken('Router', Router);\n}\n/**\n * \\@whatItDoes Adds router directives and providers.\n * \n * \\@howToUse \n * \n * RouterModule can be imported multiple times: once per lazily-loaded bundle.\n * Since the router deals with a global shared resource--location, we cannot have\n * more than one router service active.\n * \n * That is why there are two ways to create the module: `RouterModule.forRoot` and\n * `RouterModule.forChild`.\n * \n * * `forRoot` creates a module that contains all the directives, the given routes, and the router\n *   service itself.\n * * `forChild` creates a module that contains all the directives and the given routes, but does not\n *   include the router service.\n * \n * When registered at the root, the module should be used as follows\n * \n * ```\n * \\@NgModule({ \n *   imports: [RouterModule.forRoot(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n * \n * For submodules and lazy loaded submodules the module should be used as follows:\n * \n * ```\n * \\@NgModule({ \n *   imports: [RouterModule.forChild(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n * \n * \\@description \n * \n * Managing state transitions is one of the hardest parts of building applications. This is\n * especially true on the web, where you also need to ensure that the state is reflected in the URL.\n * In addition, we often want to split applications into multiple bundles and load them on demand.\n * Doing this transparently is not trivial.\n * \n * The Angular router solves these problems. Using the router, you can declaratively specify\n * application states, manage state transitions while taking care of the URL, and load bundles on\n * demand.\n * \n * [Read this developer guide](https://angular.io/docs/ts/latest/guide/router.html) to get an\n * overview of how the router should be used.\n * \n * \\@stable\n */\nexport class RouterModule {\n/**\n * @param {?} guard\n * @param {?} router\n */\nconstructor(  guard: any,  router: Router) {}\n/**\n * Creates a module with all the router providers and directives. It also optionally sets up an\n * application listener to perform an initial navigation.\n * \n * Options:\n * * `enableTracing` makes the router log all its internal events to the console.\n * * `useHash` enables the location strategy that uses the URL fragment instead of the history\n * API.\n * * `initialNavigation` disables the initial navigation.\n * * `errorHandler` provides a custom error handler.\n * @param {?} routes\n * @param {?=} config\n * @return {?}\n */\nstatic forRoot(routes: Routes, config?: ExtraOptions): ModuleWithProviders {\n    return {\n      ngModule: RouterModule,\n      providers: [\n        ROUTER_PROVIDERS,\n        provideRoutes(routes),\n        {\n          provide: ROUTER_FORROOT_GUARD,\n          useFactory: provideForRootGuard,\n          deps: [[Router, new Optional(), new SkipSelf()]]\n        },\n        {provide: ROUTER_CONFIGURATION, useValue: config ? config : {}},\n        {\n          provide: LocationStrategy,\n          useFactory: provideLocationStrategy,\n          deps: [\n            PlatformLocation, [new Inject(APP_BASE_HREF), new Optional()], ROUTER_CONFIGURATION\n          ]\n        },\n        {\n          provide: PreloadingStrategy,\n          useExisting: config && config.preloadingStrategy ? config.preloadingStrategy :\n                                                             NoPreloading\n        },\n        {provide: NgProbeToken, multi: true, useFactory: routerNgProbeToken},\n        provideRouterInitializer(),\n      ],\n    };\n  }\n/**\n * Creates a module with all the router directives and a provider registering routes.\n * @param {?} routes\n * @return {?}\n */\nstatic forChild(routes: Routes): ModuleWithProviders {\n    return {ngModule: RouterModule, providers: [provideRoutes(routes)]};\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{declarations: ROUTER_DIRECTIVES, exports: ROUTER_DIRECTIVES}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ROUTER_FORROOT_GUARD, ] }, ]},\n{type: Router, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction RouterModule_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterModule.ctorParameters;\n}\n\n/**\n * @param {?} platformLocationStrategy\n * @param {?} baseHref\n * @param {?=} options\n * @return {?}\n */\nexport function provideLocationStrategy(\n    platformLocationStrategy: PlatformLocation, baseHref: string, options: ExtraOptions = {}) {\n  return options.useHash ? new HashLocationStrategy(platformLocationStrategy, baseHref) :\n                           new PathLocationStrategy(platformLocationStrategy, baseHref);\n}\n/**\n * @param {?} router\n * @return {?}\n */\nexport function provideForRootGuard(router: Router): any {\n  if (router) {\n    throw new Error(\n        `RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.`);\n  }\n  return 'guarded';\n}\n/**\n * \\@whatItDoes Registers routes.\n * \n * \\@howToUse \n * \n * ```\n * \\@NgModule({ \n *   imports: [RouterModule.forChild(ROUTES)],\n *   providers: [provideRoutes(EXTRA_ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n * \n * \\@stable\n * @param {?} routes\n * @return {?}\n */\nexport function provideRoutes(routes: Routes): any {\n  return [\n    {provide: ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: routes},\n    {provide: ROUTES, multi: true, useValue: routes},\n  ];\n}\n\n/**\n * @whatItDoes Represents an option to configure when the initial navigation is performed.\n *\n * @description\n * * 'enabled' - the initial navigation starts before the root component is created.\n * The bootstrap is blocked until the initial navigation is complete.\n * * 'disabled' - the initial navigation is not performed. The location listener is set up before\n * the root component gets created.\n * * 'legacy_enabled'- the initial navigation starts after the root component has been created.\n * The bootstrap is not blocked until the initial navigation is complete. @deprecated\n * * 'legacy_disabled'- the initial navigation is not performed. The location listener is set up\n * after @deprecated\n * the root component gets created.\n * * `true` - same as 'legacy_enabled'. @deprecated\n * * `false` - same as 'legacy_disabled'. @deprecated\n *\n * The 'enabled' option should be used for applications unless there is a reason to have\n * more control over when the router starts its initial navigation due to some complex\n * initialization logic. In this case, 'disabled' should be used.\n *\n * The 'legacy_enabled' and 'legacy_disabled' should not be used for new applications.\n *\n * @experimental\n */\nexport type InitialNavigation =\n    true | false | 'enabled' | 'disabled' | 'legacy_enabled' | 'legacy_disabled';\n\n/**\n * @whatItDoes Represents options to configure the router.\n *\n * @stable\n */\nexport interface ExtraOptions {\n  /**\n   * Makes the router log all its internal events to the console.\n   */\n  enableTracing?: boolean;\n\n  /**\n   * Enables the location strategy that uses the URL fragment instead of the history API.\n   */\n  useHash?: boolean;\n\n  /**\n   * Disables the initial navigation.\n   */\n  initialNavigation?: InitialNavigation;\n\n  /**\n   * A custom error handler.\n   */\n  errorHandler?: ErrorHandler;\n\n  /**\n   * Configures a preloading strategy. See {@link PreloadAllModules}.\n   */\n  preloadingStrategy?: any;\n}\n/**\n * @param {?} ref\n * @param {?} urlSerializer\n * @param {?} outletMap\n * @param {?} location\n * @param {?} injector\n * @param {?} loader\n * @param {?} compiler\n * @param {?} config\n * @param {?=} opts\n * @param {?=} urlHandlingStrategy\n * @param {?=} routeReuseStrategy\n * @return {?}\n */\nexport function setupRouter(\n    ref: ApplicationRef, urlSerializer: UrlSerializer, outletMap: RouterOutletMap,\n    location: Location, injector: Injector, loader: NgModuleFactoryLoader, compiler: Compiler,\n    config: Route[][], opts: ExtraOptions = {}, urlHandlingStrategy?: UrlHandlingStrategy,\n    routeReuseStrategy?: RouteReuseStrategy) {\n  const /** @type {?} */ router = new Router(\n      null, urlSerializer, outletMap, location, injector, loader, compiler, flatten(config));\n\n  if (urlHandlingStrategy) {\n    router.urlHandlingStrategy = urlHandlingStrategy;\n  }\n\n  if (routeReuseStrategy) {\n    router.routeReuseStrategy = routeReuseStrategy;\n  }\n\n  if (opts.errorHandler) {\n    router.errorHandler = opts.errorHandler;\n  }\n\n  if (opts.enableTracing) {\n    const /** @type {?} */ dom = getDOM();\n    router.events.subscribe(e => {\n      dom.logGroup(`Router Event: ${( /** @type {?} */((<any>e.constructor))).name}`);\n      dom.log(e.toString());\n      dom.log(e);\n      dom.logGroupEnd();\n    });\n  }\n\n  return router;\n}\n/**\n * @param {?} router\n * @return {?}\n */\nexport function rootRoute(router: Router): ActivatedRoute {\n  return router.routerState.root;\n}\n/**\n * To initialize the router properly we need to do in two steps:\n * \n * We need to start the navigation in a APP_INITIALIZER to block the bootstrap if\n * a resolver or a guards executes asynchronously. Second, we need to actually run\n * activation in a BOOTSTRAP_LISTENER. We utilize the afterPreactivation\n * hook provided by the router to do that.\n * \n * The router navigation starts, reaches the point when preactivation is done, and then\n * pauses. It waits for the hook to be resolved. We then resolve it only in a bootstrap listener.\n */\nexport class RouterInitializer {\nprivate initNavigation: boolean = false;\nprivate resultOfPreactivationDone = new Subject<void>();\n/**\n * @param {?} injector\n */\nconstructor(private injector: Injector) {}\n/**\n * @return {?}\n */\nappInitializer(): Promise<any> {\n    const /** @type {?} */ p: Promise<any> = this.injector.get(LOCATION_INITIALIZED, Promise.resolve(null));\n    return p.then(() => {\n      let /** @type {?} */ resolve: Function = null;\n      const /** @type {?} */ res = new Promise(r => resolve = r);\n      const /** @type {?} */ router = this.injector.get(Router);\n      const /** @type {?} */ opts = this.injector.get(ROUTER_CONFIGURATION);\n\n      if (this.isLegacyDisabled(opts) || this.isLegacyEnabled(opts)) {\n        resolve(true);\n\n      } else if (opts.initialNavigation === 'disabled') {\n        router.setUpLocationChangeListener();\n        resolve(true);\n\n      } else if (opts.initialNavigation === 'enabled') {\n        router.hooks.afterPreactivation = () => {\n          // only the initial navigation should be delayed\n          if (!this.initNavigation) {\n            this.initNavigation = true;\n            resolve(true);\n            return this.resultOfPreactivationDone;\n\n            // subsequent navigations should not be delayed\n          } else {\n            return of (null);\n          }\n        };\n        router.initialNavigation();\n\n      } else {\n        throw new Error(`Invalid initialNavigation options: '${opts.initialNavigation}'`);\n      }\n\n      return res;\n    });\n  }\n/**\n * @param {?} bootstrappedComponentRef\n * @return {?}\n */\nbootstrapListener(bootstrappedComponentRef: ComponentRef<any>): void {\n    const /** @type {?} */ opts = this.injector.get(ROUTER_CONFIGURATION);\n    const /** @type {?} */ preloader = this.injector.get(RouterPreloader);\n    const /** @type {?} */ router = this.injector.get(Router);\n    const /** @type {?} */ ref = this.injector.get(ApplicationRef);\n\n    if (bootstrappedComponentRef !== ref.components[0]) {\n      return;\n    }\n\n    if (this.isLegacyEnabled(opts)) {\n      router.initialNavigation();\n    } else if (this.isLegacyDisabled(opts)) {\n      router.setUpLocationChangeListener();\n    }\n\n    preloader.setUpPreloading();\n    router.resetRootComponentType(ref.componentTypes[0]);\n    this.resultOfPreactivationDone.next(null);\n    this.resultOfPreactivationDone.complete();\n  }\n/**\n * @param {?} opts\n * @return {?}\n */\nprivate isLegacyEnabled(opts: ExtraOptions): boolean {\n    return opts.initialNavigation === 'legacy_enabled' || opts.initialNavigation === true ||\n        opts.initialNavigation === undefined;\n  }\n/**\n * @param {?} opts\n * @return {?}\n */\nprivate isLegacyDisabled(opts: ExtraOptions): boolean {\n    return opts.initialNavigation === 'legacy_disabled' || opts.initialNavigation === false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Injector, },\n];\n}\n\nfunction RouterInitializer_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterInitializer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterInitializer.ctorParameters;\n/** @type {?} */\nRouterInitializer.prototype.initNavigation;\n/** @type {?} */\nRouterInitializer.prototype.resultOfPreactivationDone;\n/** @type {?} */\nRouterInitializer.prototype.injector;\n}\n\n/**\n * @param {?} r\n * @return {?}\n */\nexport function getAppInitializer(r: RouterInitializer) {\n  return r.appInitializer.bind(r);\n}\n/**\n * @param {?} r\n * @return {?}\n */\nexport function getBootstrapListener(r: RouterInitializer) {\n  return r.bootstrapListener.bind(r);\n}\n/**\n * A token for the router initializer that will be called after the app is bootstrapped.\n * \n * \\@experimental\n */\nexport const ROUTER_INITIALIZER =\n    new InjectionToken<(compRef: ComponentRef<any>) => void>('Router Initializer');\n/**\n * @return {?}\n */\nexport function provideRouterInitializer() {\n  return [\n    RouterInitializer,\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: getAppInitializer,\n      deps: [RouterInitializer]\n    },\n    {provide: ROUTER_INITIALIZER, useFactory: getBootstrapListener, deps: [RouterInitializer]},\n    {provide: APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER},\n  ];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n*@license\n*Copyright Google Inc. All Rights Reserved.\n*\n*Use of this source code is governed by an MIT-style license that can be\n*found in the LICENSE file at https://angular.io/license\n*/\n\n\nimport {Compiler, Injectable, Injector, NgModuleFactoryLoader, NgModuleRef} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport {from} from 'rxjs/observable/from';\nimport {of } from 'rxjs/observable/of';\nimport {_catch} from 'rxjs/operator/catch';\nimport {concatMap} from 'rxjs/operator/concatMap';\nimport {filter} from 'rxjs/operator/filter';\nimport {mergeAll} from 'rxjs/operator/mergeAll';\nimport {mergeMap} from 'rxjs/operator/mergeMap';\nimport {Route, Routes} from './config';\nimport {NavigationEnd, RouteConfigLoadEnd, RouteConfigLoadStart} from './events';\nimport {Router} from './router';\nimport {RouterConfigLoader} from './router_config_loader';\n/**\n * \\@whatItDoes Provides a preloading strategy.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class PreloadingStrategy {\n/**\n * @abstract\n * @param {?} route\n * @param {?} fn\n * @return {?}\n */\npreload(route: Route, fn: () => Observable<any>) {}\n}\n/**\n * \\@whatItDoes Provides a preloading strategy that preloads all modules as quicky as possible.\n * \n * \\@howToUse \n * \n * ```\n * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n * \n * \\@experimental\n */\nexport class PreloadAllModules implements PreloadingStrategy {\n/**\n * @param {?} route\n * @param {?} fn\n * @return {?}\n */\npreload(route: Route, fn: () => Observable<any>): Observable<any> {\n    return _catch.call(fn(), () => of (null));\n  }\n}\n/**\n * \\@whatItDoes Provides a preloading strategy that does not preload any modules.\n * \n * \\@description \n * \n * This strategy is enabled by default.\n * \n * \\@experimental\n */\nexport class NoPreloading implements PreloadingStrategy {\n/**\n * @param {?} route\n * @param {?} fn\n * @return {?}\n */\npreload(route: Route, fn: () => Observable<any>): Observable<any> { return of (null); }\n}\n/**\n * The preloader optimistically loads all router configurations to\n * make navigations into lazily-loaded sections of the application faster.\n * \n * The preloader runs in the background. When the router bootstraps, the preloader\n * starts listening to all navigation events. After every such event, the preloader\n * will check if any configurations can be loaded lazily.\n * \n * If a route is protected by `canLoad` guards, the preloaded will not load it.\n * \n * \\@stable\n */\nexport class RouterPreloader {\nprivate loader: RouterConfigLoader;\nprivate subscription: Subscription;\n/**\n * @param {?} router\n * @param {?} moduleLoader\n * @param {?} compiler\n * @param {?} injector\n * @param {?} preloadingStrategy\n */\nconstructor(\nprivate router: Router, moduleLoader: NgModuleFactoryLoader, compiler: Compiler,\nprivate injector: Injector,\nprivate preloadingStrategy: PreloadingStrategy) {\n    const onStartLoad = (r: Route) => router.triggerEvent(new RouteConfigLoadStart(r));\n    const onEndLoad = (r: Route) => router.triggerEvent(new RouteConfigLoadEnd(r));\n\n    this.loader = new RouterConfigLoader(moduleLoader, compiler, onStartLoad, onEndLoad);\n  };\n/**\n * @return {?}\n */\nsetUpPreloading(): void {\n    const /** @type {?} */ navigations = filter.call(this.router.events, (e: any) => e instanceof NavigationEnd);\n    this.subscription = concatMap.call(navigations, () => this.preload()).subscribe(() => {});\n  }\n/**\n * @return {?}\n */\npreload(): Observable<any> {\n    const /** @type {?} */ ngModule = this.injector.get(NgModuleRef);\n    return this.processRoutes(ngModule, this.router.config);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void { this.subscription.unsubscribe(); }\n/**\n * @param {?} ngModule\n * @param {?} routes\n * @return {?}\n */\nprivate processRoutes(ngModule: NgModuleRef<any>, routes: Routes): Observable<void> {\n    const /** @type {?} */ res: Observable<any>[] = [];\n    for (const /** @type {?} */ c of routes) {\n      // we already have the config loaded, just recurse\n      if (c.loadChildren && !c.canLoad && ( /** @type {?} */((<any>c)))._loadedConfig) {\n        const /** @type {?} */ childConfig = ( /** @type {?} */((<any>c)))._loadedConfig;\n        res.push(this.processRoutes(childConfig.module, childConfig.routes));\n\n        // no config loaded, fetch the config\n      } else if (c.loadChildren && !c.canLoad) {\n        res.push(this.preloadConfig(ngModule, c));\n\n        // recurse into children\n      } else if (c.children) {\n        res.push(this.processRoutes(ngModule, c.children));\n      }\n    }\n    return mergeAll.call(from(res));\n  }\n/**\n * @param {?} ngModule\n * @param {?} route\n * @return {?}\n */\nprivate preloadConfig(ngModule: NgModuleRef<any>, route: Route): Observable<void> {\n    return this.preloadingStrategy.preload(route, () => {\n      const /** @type {?} */ loaded = this.loader.load(ngModule.injector, route);\n      return mergeMap.call(loaded, (config: any): any => {\n        const /** @type {?} */ c: any = route;\n        c._loadedConfig = config;\n        return this.processRoutes(config.module, config.routes);\n      });\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Router, },\n{type: NgModuleFactoryLoader, },\n{type: Compiler, },\n{type: Injector, },\n{type: PreloadingStrategy, },\n];\n}\n\nfunction RouterPreloader_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterPreloader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterPreloader.ctorParameters;\n/** @type {?} */\nRouterPreloader.prototype.loader;\n/** @type {?} */\nRouterPreloader.prototype.subscription;\n/** @type {?} */\nRouterPreloader.prototype.router;\n/** @type {?} */\nRouterPreloader.prototype.injector;\n/** @type {?} */\nRouterPreloader.prototype.preloadingStrategy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ComponentRef} from '@angular/core';\n\nimport {ActivatedRoute, ActivatedRouteSnapshot} from './router_state';\nimport {TreeNode} from './utils/tree';\n\n/**\n * @whatItDoes Represents the detached route tree.\n *\n * This is an opaque value the router will give to a custom route reuse strategy\n * to store and retrieve later on.\n *\n * @experimental\n */\nexport type DetachedRouteHandle = {};\n\n/** @internal */\nexport type DetachedRouteHandleInternal = {\n  componentRef: ComponentRef<any>,\n  route: TreeNode<ActivatedRoute>,\n};\n/**\n * \\@whatItDoes Provides a way to customize when activated routes get reused.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class RouteReuseStrategy {\n/**\n * Determines if this route (and its subtree) should be detached to be reused later\n * @abstract\n * @param {?} route\n * @return {?}\n */\nshouldDetach(route: ActivatedRouteSnapshot) {}\n/**\n * Stores the detached route\n * @abstract\n * @param {?} route\n * @param {?} handle\n * @return {?}\n */\nstore(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle) {}\n/**\n * Determines if this route (and its subtree) should be reattached\n * @abstract\n * @param {?} route\n * @return {?}\n */\nshouldAttach(route: ActivatedRouteSnapshot) {}\n/**\n * Retrieves the previously stored route\n * @abstract\n * @param {?} route\n * @return {?}\n */\nretrieve(route: ActivatedRouteSnapshot) {}\n/**\n * Determines if a route should be reused\n * @abstract\n * @param {?} future\n * @param {?} curr\n * @return {?}\n */\nshouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot) {}\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Attribute, ComponentFactoryResolver, ComponentRef, Directive, EventEmitter, Injector, OnDestroy, Output, ReflectiveInjector, ResolvedReflectiveProvider, ViewContainerRef} from '@angular/core';\nimport {RouterOutletMap} from '../router_outlet_map';\nimport {ActivatedRoute} from '../router_state';\nimport {PRIMARY_OUTLET} from '../shared';\n/**\n * \\@whatItDoes Acts as a placeholder that Angular dynamically fills based on the current router\n * state.\n * \n * \\@howToUse \n * \n * ```\n * <router-outlet></router-outlet>\n * <router-outlet name='left'></router-outlet>\n * <router-outlet name='right'></router-outlet>\n * ```\n * \n * A router outlet will emit an activate event any time a new component is being instantiated,\n * and a deactivate event when it is being destroyed.\n * \n * ```\n * <router-outlet\n *   (activate)='onActivate($event)'\n *   (deactivate)='onDeactivate($event)'></router-outlet>\n * ```\n * \\@ngModule RouterModule\n * \n * \\@stable\n */\nexport class RouterOutlet implements OnDestroy {\nprivate activated: ComponentRef<any>;\nprivate _activatedRoute: ActivatedRoute;\npublic outletMap: RouterOutletMap;\n\n   activateEvents = new EventEmitter<any>();\n   deactivateEvents = new EventEmitter<any>();\n/**\n * @param {?} parentOutletMap\n * @param {?} location\n * @param {?} resolver\n * @param {?} name\n */\nconstructor(\nprivate parentOutletMap: RouterOutletMap,\nprivate location: ViewContainerRef,\nprivate resolver: ComponentFactoryResolver,\nprivate name: string) {\n    parentOutletMap.registerOutlet(name ? name : PRIMARY_OUTLET, this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void { this.parentOutletMap.removeOutlet(this.name ? this.name : PRIMARY_OUTLET); }\n/**\n * @deprecated since v4 *\n * @return {?}\n */\nget locationInjector(): Injector { return this.location.injector; }\n/**\n * @deprecated since v4 *\n * @return {?}\n */\nget locationFactoryResolver(): ComponentFactoryResolver { return this.resolver; }\n/**\n * @return {?}\n */\nget isActivated(): boolean { return !!this.activated; }\n/**\n * @return {?}\n */\nget component(): Object {\n    if (!this.activated) throw new Error('Outlet is not activated');\n    return this.activated.instance;\n  }\n/**\n * @return {?}\n */\nget activatedRoute(): ActivatedRoute {\n    if (!this.activated) throw new Error('Outlet is not activated');\n    return this._activatedRoute;\n  }\n/**\n * @return {?}\n */\ndetach(): ComponentRef<any> {\n    if (!this.activated) throw new Error('Outlet is not activated');\n    this.location.detach();\n    const /** @type {?} */ r = this.activated;\n    this.activated = null;\n    this._activatedRoute = null;\n    return r;\n  }\n/**\n * @param {?} ref\n * @param {?} activatedRoute\n * @return {?}\n */\nattach(ref: ComponentRef<any>, activatedRoute: ActivatedRoute) {\n    this.activated = ref;\n    this._activatedRoute = activatedRoute;\n    this.location.insert(ref.hostView);\n  }\n/**\n * @return {?}\n */\ndeactivate(): void {\n    if (this.activated) {\n      const /** @type {?} */ c = this.component;\n      this.activated.destroy();\n      this.activated = null;\n      this._activatedRoute = null;\n      this.deactivateEvents.emit(c);\n    }\n  }\n/**\n * @deprecated since v4, use {\\@link activateWith}\n * @param {?} activatedRoute\n * @param {?} resolver\n * @param {?} injector\n * @param {?} providers\n * @param {?} outletMap\n * @return {?}\n */\nactivate(\n      activatedRoute: ActivatedRoute, resolver: ComponentFactoryResolver, injector: Injector,\n      providers: ResolvedReflectiveProvider[], outletMap: RouterOutletMap): void {\n    if (this.isActivated) {\n      throw new Error('Cannot activate an already activated outlet');\n    }\n\n    this.outletMap = outletMap;\n    this._activatedRoute = activatedRoute;\n\n    const /** @type {?} */ snapshot = activatedRoute._futureSnapshot;\n    const /** @type {?} */ component: any = /** @type {?} */(( <any>snapshot._routeConfig.component));\n    const /** @type {?} */ factory = resolver.resolveComponentFactory(component);\n\n    const /** @type {?} */ inj = ReflectiveInjector.fromResolvedProviders(providers, injector);\n\n    this.activated = this.location.createComponent(factory, this.location.length, inj, []);\n    this.activated.changeDetectorRef.detectChanges();\n\n    this.activateEvents.emit(this.activated.instance);\n  }\n/**\n * @param {?} activatedRoute\n * @param {?} resolver\n * @param {?} outletMap\n * @return {?}\n */\nactivateWith(\n      activatedRoute: ActivatedRoute, resolver: ComponentFactoryResolver|null,\n      outletMap: RouterOutletMap) {\n    if (this.isActivated) {\n      throw new Error('Cannot activate an already activated outlet');\n    }\n\n    this.outletMap = outletMap;\n    this._activatedRoute = activatedRoute;\n\n    const /** @type {?} */ snapshot = activatedRoute._futureSnapshot;\n    const /** @type {?} */ component = /** @type {?} */(( <any>snapshot._routeConfig.component));\n\n    resolver = resolver || this.resolver;\n    const /** @type {?} */ factory = resolver.resolveComponentFactory(component);\n\n    const /** @type {?} */ injector = new OutletInjector(activatedRoute, outletMap, this.location.injector);\n\n    this.activated = this.location.createComponent(factory, this.location.length, injector, []);\n    this.activated.changeDetectorRef.detectChanges();\n\n    this.activateEvents.emit(this.activated.instance);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'router-outlet'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: RouterOutletMap, },\n{type: ViewContainerRef, },\n{type: ComponentFactoryResolver, },\n{type: undefined, decorators: [{ type: Attribute, args: ['name', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activateEvents': [{ type: Output, args: ['activate', ] },],\n'deactivateEvents': [{ type: Output, args: ['deactivate', ] },],\n};\n}\n\nfunction RouterOutlet_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterOutlet.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterOutlet.ctorParameters;\n/** @type {?} */\nRouterOutlet.propDecorators;\n/** @type {?} */\nRouterOutlet.prototype.activated;\n/** @type {?} */\nRouterOutlet.prototype._activatedRoute;\n/** @type {?} */\nRouterOutlet.prototype.outletMap;\n/** @type {?} */\nRouterOutlet.prototype.activateEvents;\n/** @type {?} */\nRouterOutlet.prototype.deactivateEvents;\n/** @type {?} */\nRouterOutlet.prototype.parentOutletMap;\n/** @type {?} */\nRouterOutlet.prototype.location;\n/** @type {?} */\nRouterOutlet.prototype.resolver;\n/** @type {?} */\nRouterOutlet.prototype.name;\n}\n\nclass OutletInjector implements Injector {\n/**\n * @param {?} route\n * @param {?} map\n * @param {?} parent\n */\nconstructor(\nprivate route: ActivatedRoute,\nprivate map: RouterOutletMap,\nprivate parent: Injector) {}\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue?: any): any {\n    if (token === ActivatedRoute) {\n      return this.route;\n    }\n\n    if (token === RouterOutletMap) {\n      return this.map;\n    }\n\n    return this.parent.get(token, notFoundValue);\n  }\n}\n\nfunction OutletInjector_tsickle_Closure_declarations() {\n/** @type {?} */\nOutletInjector.prototype.route;\n/** @type {?} */\nOutletInjector.prototype.map;\n/** @type {?} */\nOutletInjector.prototype.parent;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {AfterContentInit, ChangeDetectorRef, ContentChildren, Directive, ElementRef, Input, OnChanges, OnDestroy, QueryList, Renderer, SimpleChanges} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {NavigationEnd} from '../events';\nimport {Router} from '../router';\nimport {RouterLink, RouterLinkWithHref} from './router_link';\n/**\n * \\@whatItDoes Lets you add a CSS class to an element when the link's route becomes active.\n * \n * \\@howToUse \n * \n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n * ```\n * \n * \\@description \n * \n * The RouterLinkActive directive lets you add a CSS class to an element when the link's route\n * becomes active.\n * \n * Consider the following example:\n * \n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n * ```\n * \n * When the url is either '/user' or '/user/bob', the active-link class will\n * be added to the `a` tag. If the url changes, the class will be removed.\n * \n * You can set more than one class, as follows:\n * \n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\n * <a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob</a>\n * ```\n * \n * You can configure RouterLinkActive by passing `exact: true`. This will add the classes\n * only when the url matches the link exactly.\n * \n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\n * true}\">Bob</a>\n * ```\n * \n * You can assign the RouterLinkActive instance to a template variable and directly check\n * the `isActive` status.\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\n *   Bob {{ rla.isActive ? '(already open)' : ''}}\n * </a>\n * ```\n * \n * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.\n * \n * ```\n * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\n *   <a routerLink=\"/user/jim\">Jim</a>\n *   <a routerLink=\"/user/bob\">Bob</a>\n * </div>\n * ```\n * \n * This will set the active-link class on the div tag if the url is either '/user/jim' or\n * '/user/bob'.\n * \n * \\@ngModule RouterModule\n * \n * \\@stable\n */\nexport class RouterLinkActive implements OnChanges,\n    OnDestroy, AfterContentInit {\n   links: QueryList<RouterLink>;\n  \n  linksWithHrefs: QueryList<RouterLinkWithHref>;\nprivate classes: string[] = [];\nprivate subscription: Subscription;\nprivate active: boolean = false;\n\n   routerLinkActiveOptions: {exact: boolean} = {exact: false};\n/**\n * @param {?} router\n * @param {?} element\n * @param {?} renderer\n * @param {?} cdr\n */\nconstructor(\nprivate router: Router,\nprivate element: ElementRef,\nprivate renderer: Renderer,\nprivate cdr: ChangeDetectorRef) {\n    this.subscription = router.events.subscribe(s => {\n      if (s instanceof NavigationEnd) {\n        this.update();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nget isActive(): boolean { return this.active; }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this.links.changes.subscribe(_ => this.update());\n    this.linksWithHrefs.changes.subscribe(_ => this.update());\n    this.update();\n  }\n/**\n * @param {?} data\n * @return {?}\n */\nset routerLinkActive(data: string[]|string) {\n    const /** @type {?} */ classes = Array.isArray(data) ? data : data.split(' ');\n    this.classes = classes.filter(c => !!c);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void { this.update(); }\n/**\n * @return {?}\n */\nngOnDestroy(): void { this.subscription.unsubscribe(); }\n/**\n * @return {?}\n */\nprivate update(): void {\n    if (!this.links || !this.linksWithHrefs || !this.router.navigated) return;\n    const /** @type {?} */ hasActiveLinks = this.hasActiveLinks();\n\n    // react only when status has changed to prevent unnecessary dom updates\n    if (this.active !== hasActiveLinks) {\n      this.active = hasActiveLinks;\n      this.classes.forEach(\n          c => this.renderer.setElementClass(this.element.nativeElement, c, hasActiveLinks));\n      this.cdr.detectChanges();\n    }\n  }\n/**\n * @param {?} router\n * @return {?}\n */\nprivate isLinkActive(router: Router): (link: (RouterLink|RouterLinkWithHref)) => boolean {\n    return (link: RouterLink | RouterLinkWithHref) =>\n               router.isActive(link.urlTree, this.routerLinkActiveOptions.exact);\n  }\n/**\n * @return {?}\n */\nprivate hasActiveLinks(): boolean {\n    return this.links.some(this.isLinkActive(this.router)) ||\n        this.linksWithHrefs.some(this.isLinkActive(this.router));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[routerLinkActive]',\n  exportAs: 'routerLinkActive',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Router, },\n{type: ElementRef, },\n{type: Renderer, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'links': [{ type: ContentChildren, args: [RouterLink, {descendants: true}, ] },],\n'linksWithHrefs': [{ type: ContentChildren, args: [RouterLinkWithHref, {descendants: true}, ] },],\n'routerLinkActiveOptions': [{ type: Input },],\n'routerLinkActive': [{ type: Input },],\n};\n}\n\nfunction RouterLinkActive_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterLinkActive.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterLinkActive.ctorParameters;\n/** @type {?} */\nRouterLinkActive.propDecorators;\n/** @type {?} */\nRouterLinkActive.prototype.links;\n/** @type {?} */\nRouterLinkActive.prototype.linksWithHrefs;\n/** @type {?} */\nRouterLinkActive.prototype.classes;\n/** @type {?} */\nRouterLinkActive.prototype.subscription;\n/** @type {?} */\nRouterLinkActive.prototype.active;\n/** @type {?} */\nRouterLinkActive.prototype.routerLinkActiveOptions;\n/** @type {?} */\nRouterLinkActive.prototype.router;\n/** @type {?} */\nRouterLinkActive.prototype.element;\n/** @type {?} */\nRouterLinkActive.prototype.renderer;\n/** @type {?} */\nRouterLinkActive.prototype.cdr;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {LocationStrategy} from '@angular/common';\nimport {Attribute, Directive, ElementRef, HostBinding, HostListener, Input, OnChanges, OnDestroy, Renderer, isDevMode} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\n\nimport {QueryParamsHandling} from '../config';\nimport {NavigationEnd} from '../events';\nimport {Router} from '../router';\nimport {ActivatedRoute} from '../router_state';\nimport {UrlTree} from '../url_tree';\n/**\n * \\@whatItDoes Lets you link to specific parts of your app.\n * \n * \\@howToUse \n * \n * Consider the following route configuration:\n * `[{ path: 'user/:name', component: UserCmp }]`\n * \n * When linking to this `user/:name` route, you can write:\n * `<a routerLink='/user/bob'>link to user component</a>`\n * \n * \\@description \n * \n * The RouterLink directives let you link to specific parts of your app.\n * \n * When the link is static, you can use the directive as follows:\n * `<a routerLink=\"/user/bob\">link to user component</a>`\n * \n * If you use dynamic values to generate the link, you can pass an array of path\n * segments, followed by the params for each segment.\n * \n * For instance `['/team', teamId, 'user', userName, {details: true}]`\n * means that we want to generate a link to `/team/11/user/bob;details=true`.\n * \n * Multiple static segments can be merged into one\n * (e.g., `['/team/11/user', userName, {details: true}]`).\n * \n * The first segment name can be prepended with `/`, `./`, or `../`:\n * * If the first segment begins with `/`, the router will look up the route from the root of the\n *   app.\n * * If the first segment begins with `./`, or doesn't begin with a slash, the router will\n *   instead look in the children of the current activated route.\n * * And if the first segment begins with `../`, the router will go up one level.\n * \n * You can set query params and fragment as follows:\n * \n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n *   link to user component\n * </a>\n * ```\n * RouterLink will use these to generate this link: `/user/bob#education?debug=true`.\n * \n * (Deprecated in v4.0.0 use `queryParamsHandling` instead) You can also tell the\n * directive to preserve the current query params and fragment:\n * \n * ```\n * <a [routerLink]=\"['/user/bob']\" preserveQueryParams preserveFragment>\n *   link to user component\n * </a>\n * ```\n * \n * You can tell the directive to how to handle queryParams, available options are:\n *  - 'merge' merge the queryParams into the current queryParams\n *  - 'preserve' prserve the current queryParams\n *  - default / '' use the queryParams only\n *  same options for {\\@link NavigationExtras.queryParamsHandling}\n * \n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\">\n *   link to user component\n * </a>\n * ```\n * \n * The router link directive always treats the provided input as a delta to the current url.\n * \n * For instance, if the current url is `/user/(box//aux:team)`.\n * \n * Then the following link `<a [routerLink]=\"['/user/jim']\">Jim</a>` will generate the link\n * `/user/(jim//aux:team)`.\n * \n * \\@ngModule RouterModule\n * \n * See {\\@link Router.createUrlTree} for more information.\n * \n * \\@stable\n */\nexport class RouterLink {\n   queryParams: {[k: string]: any};\n   fragment: string;\n   queryParamsHandling: QueryParamsHandling;\n   preserveFragment: boolean;\n   skipLocationChange: boolean;\n   replaceUrl: boolean;\nprivate commands: any[] = [];\nprivate preserve: boolean;\n/**\n * @param {?} router\n * @param {?} route\n * @param {?} tabIndex\n * @param {?} renderer\n * @param {?} el\n */\nconstructor(\nprivate router: Router,\nprivate route: ActivatedRoute,\n       tabIndex: string, renderer: Renderer, el: ElementRef) {\n    if (tabIndex == null) {\n      renderer.setElementAttribute(el.nativeElement, 'tabindex', '0');\n    }\n  }\n/**\n * @param {?} commands\n * @return {?}\n */\nset routerLink(commands: any[]|string) {\n    if (commands != null) {\n      this.commands = Array.isArray(commands) ? commands : [commands];\n    } else {\n      this.commands = [];\n    }\n  }\n/**\n * @deprecated 4.0.0 use `queryParamsHandling` instead.\n * @param {?} value\n * @return {?}\n */\nset preserveQueryParams(value: boolean) {\n    if (isDevMode() && /** @type {?} */(( <any>console)) && /** @type {?} */(( <any>console.warn))) {\n      console.warn('preserveQueryParams is deprecated!, use queryParamsHandling instead.');\n    }\n    this.preserve = value;\n  }\n/**\n * @return {?}\n */\nonClick(): boolean {\n    const /** @type {?} */ extras = {\n      skipLocationChange: attrBoolValue(this.skipLocationChange),\n      replaceUrl: attrBoolValue(this.replaceUrl),\n    };\n    this.router.navigateByUrl(this.urlTree, extras);\n    return true;\n  }\n/**\n * @return {?}\n */\nget urlTree(): UrlTree {\n    return this.router.createUrlTree(this.commands, {\n      relativeTo: this.route,\n      queryParams: this.queryParams,\n      fragment: this.fragment,\n      preserveQueryParams: attrBoolValue(this.preserve),\n      queryParamsHandling: this.queryParamsHandling,\n      preserveFragment: attrBoolValue(this.preserveFragment),\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: ':not(a)[routerLink]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Router, },\n{type: ActivatedRoute, },\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n{type: Renderer, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'queryParams': [{ type: Input },],\n'fragment': [{ type: Input },],\n'queryParamsHandling': [{ type: Input },],\n'preserveFragment': [{ type: Input },],\n'skipLocationChange': [{ type: Input },],\n'replaceUrl': [{ type: Input },],\n'routerLink': [{ type: Input },],\n'preserveQueryParams': [{ type: Input },],\n'onClick': [{ type: HostListener, args: ['click', ] },],\n};\n}\n\nfunction RouterLink_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterLink.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterLink.ctorParameters;\n/** @type {?} */\nRouterLink.propDecorators;\n/** @type {?} */\nRouterLink.prototype.queryParams;\n/** @type {?} */\nRouterLink.prototype.fragment;\n/** @type {?} */\nRouterLink.prototype.queryParamsHandling;\n/** @type {?} */\nRouterLink.prototype.preserveFragment;\n/** @type {?} */\nRouterLink.prototype.skipLocationChange;\n/** @type {?} */\nRouterLink.prototype.replaceUrl;\n/** @type {?} */\nRouterLink.prototype.commands;\n/** @type {?} */\nRouterLink.prototype.preserve;\n/** @type {?} */\nRouterLink.prototype.router;\n/** @type {?} */\nRouterLink.prototype.route;\n}\n\n/**\n * \\@whatItDoes Lets you link to specific parts of your app.\n * \n * See {\\@link RouterLink} for more information.\n * \n * \\@ngModule RouterModule\n * \n * \\@stable\n */\nexport class RouterLinkWithHref implements OnChanges, OnDestroy {\n    target: string;\n   queryParams: {[k: string]: any};\n   fragment: string;\n   queryParamsHandling: QueryParamsHandling;\n   preserveFragment: boolean;\n   skipLocationChange: boolean;\n   replaceUrl: boolean;\nprivate commands: any[] = [];\nprivate subscription: Subscription;\nprivate preserve: boolean;\n\n  // the url displayed on the anchor element.\n   href: string;\n/**\n * @param {?} router\n * @param {?} route\n * @param {?} locationStrategy\n */\nconstructor(\nprivate router: Router,\nprivate route: ActivatedRoute,\nprivate locationStrategy: LocationStrategy) {\n    this.subscription = router.events.subscribe(s => {\n      if (s instanceof NavigationEnd) {\n        this.updateTargetUrlAndHref();\n      }\n    });\n  }\n/**\n * @param {?} commands\n * @return {?}\n */\nset routerLink(commands: any[]|string) {\n    if (commands != null) {\n      this.commands = Array.isArray(commands) ? commands : [commands];\n    } else {\n      this.commands = [];\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset preserveQueryParams(value: boolean) {\n    if (isDevMode() && /** @type {?} */(( <any>console)) && /** @type {?} */(( <any>console.warn))) {\n      console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\n    }\n    this.preserve = value;\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: {}): any { this.updateTargetUrlAndHref(); }\n/**\n * @return {?}\n */\nngOnDestroy(): any { this.subscription.unsubscribe(); }\n/**\n * @param {?} button\n * @param {?} ctrlKey\n * @param {?} metaKey\n * @return {?}\n */\nonClick(button: number, ctrlKey: boolean, metaKey: boolean): boolean {\n    if (button !== 0 || ctrlKey || metaKey) {\n      return true;\n    }\n\n    if (typeof this.target === 'string' && this.target != '_self') {\n      return true;\n    }\n\n    const /** @type {?} */ extras = {\n      skipLocationChange: attrBoolValue(this.skipLocationChange),\n      replaceUrl: attrBoolValue(this.replaceUrl),\n    };\n    this.router.navigateByUrl(this.urlTree, extras);\n    return false;\n  }\n/**\n * @return {?}\n */\nprivate updateTargetUrlAndHref(): void {\n    this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));\n  }\n/**\n * @return {?}\n */\nget urlTree(): UrlTree {\n    return this.router.createUrlTree(this.commands, {\n      relativeTo: this.route,\n      queryParams: this.queryParams,\n      fragment: this.fragment,\n      preserveQueryParams: attrBoolValue(this.preserve),\n      queryParamsHandling: this.queryParamsHandling,\n      preserveFragment: attrBoolValue(this.preserveFragment),\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'a[routerLink]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Router, },\n{type: ActivatedRoute, },\n{type: LocationStrategy, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'target': [{ type: HostBinding, args: ['attr.target', ] },{ type: Input },],\n'queryParams': [{ type: Input },],\n'fragment': [{ type: Input },],\n'queryParamsHandling': [{ type: Input },],\n'preserveFragment': [{ type: Input },],\n'skipLocationChange': [{ type: Input },],\n'replaceUrl': [{ type: Input },],\n'href': [{ type: HostBinding },],\n'routerLink': [{ type: Input },],\n'preserveQueryParams': [{ type: Input },],\n'onClick': [{ type: HostListener, args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey'], ] },],\n};\n}\n\nfunction RouterLinkWithHref_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterLinkWithHref.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterLinkWithHref.ctorParameters;\n/** @type {?} */\nRouterLinkWithHref.propDecorators;\n/** @type {?} */\nRouterLinkWithHref.prototype.target;\n/** @type {?} */\nRouterLinkWithHref.prototype.queryParams;\n/** @type {?} */\nRouterLinkWithHref.prototype.fragment;\n/** @type {?} */\nRouterLinkWithHref.prototype.queryParamsHandling;\n/** @type {?} */\nRouterLinkWithHref.prototype.preserveFragment;\n/** @type {?} */\nRouterLinkWithHref.prototype.skipLocationChange;\n/** @type {?} */\nRouterLinkWithHref.prototype.replaceUrl;\n/** @type {?} */\nRouterLinkWithHref.prototype.commands;\n/** @type {?} */\nRouterLinkWithHref.prototype.subscription;\n/** @type {?} */\nRouterLinkWithHref.prototype.preserve;\n/** @type {?} */\nRouterLinkWithHref.prototype.href;\n/** @type {?} */\nRouterLinkWithHref.prototype.router;\n/** @type {?} */\nRouterLinkWithHref.prototype.route;\n/** @type {?} */\nRouterLinkWithHref.prototype.locationStrategy;\n}\n\n/**\n * @param {?} s\n * @return {?}\n */\nfunction attrBoolValue(s: any): boolean {\n  return s === '' || !!s;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Location} from '@angular/common';\nimport {Compiler, Injector, NgModuleFactoryLoader, NgModuleRef, Type, isDevMode} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {from} from 'rxjs/observable/from';\nimport {of } from 'rxjs/observable/of';\nimport {concatMap} from 'rxjs/operator/concatMap';\nimport {every} from 'rxjs/operator/every';\nimport {first} from 'rxjs/operator/first';\nimport {map} from 'rxjs/operator/map';\nimport {mergeMap} from 'rxjs/operator/mergeMap';\nimport {reduce} from 'rxjs/operator/reduce';\n\nimport {applyRedirects} from './apply_redirects';\nimport {QueryParamsHandling, ResolveData, Route, Routes, RunGuardsAndResolvers, validateConfig} from './config';\nimport {createRouterState} from './create_router_state';\nimport {createUrlTree} from './create_url_tree';\nimport {RouterOutlet} from './directives/router_outlet';\nimport {Event, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, RouteConfigLoadEnd, RouteConfigLoadStart, RoutesRecognized} from './events';\nimport {recognize} from './recognize';\nimport {DetachedRouteHandle, DetachedRouteHandleInternal, RouteReuseStrategy} from './route_reuse_strategy';\nimport {LoadedRouterConfig, RouterConfigLoader} from './router_config_loader';\nimport {RouterOutletMap} from './router_outlet_map';\nimport {ActivatedRoute, ActivatedRouteSnapshot, RouterState, RouterStateSnapshot, advanceActivatedRoute, createEmptyState, equalParamsAndUrlSegments, inheritedParamsDataResolve} from './router_state';\nimport {PRIMARY_OUTLET, Params, isNavigationCancelingError} from './shared';\nimport {DefaultUrlHandlingStrategy, UrlHandlingStrategy} from './url_handling_strategy';\nimport {UrlSerializer, UrlTree, containsTree, createEmptyUrlTree} from './url_tree';\nimport {andObservables, forEach, merge, shallowEqual, waitForMap, wrapIntoObservable} from './utils/collection';\nimport {TreeNode} from './utils/tree';\n\ndeclare let Zone: any;\n\n/**\n * @whatItDoes Represents the extra options used during navigation.\n *\n * @stable\n */\nexport interface NavigationExtras {\n  /**\n  * Enables relative navigation from the current ActivatedRoute.\n  *\n  * Configuration:\n  *\n  * ```\n  * [{\n  *   path: 'parent',\n  *   component: ParentComponent,\n  *   children: [{\n  *     path: 'list',\n  *     component: ListComponent\n  *   },{\n  *     path: 'child',\n  *     component: ChildComponent\n  *   }]\n  * }]\n  * ```\n  *\n  * Navigate to list route from child route:\n  *\n  * ```\n  *  @Component({...})\n  *  class ChildComponent {\n  *    constructor(private router: Router, private route: ActivatedRoute) {}\n  *\n  *    go() {\n  *      this.router.navigate(['../list'], { relativeTo: this.route });\n  *    }\n  *  }\n  * ```\n  */\n  relativeTo?: ActivatedRoute;\n\n  /**\n  * Sets query parameters to the URL.\n  *\n  * ```\n  * // Navigate to /results?page=1\n  * this.router.navigate(['/results'], { queryParams: { page: 1 } });\n  * ```\n  */\n  queryParams?: Params;\n\n  /**\n  * Sets the hash fragment for the URL.\n  *\n  * ```\n  * // Navigate to /results#top\n  * this.router.navigate(['/results'], { fragment: 'top' });\n  * ```\n  */\n  fragment?: string;\n\n  /**\n  * Preserves the query parameters for the next navigation.\n  *\n  * deprecated, use `queryParamsHandling` instead\n  *\n  * ```\n  * // Preserve query params from /results?page=1 to /view?page=1\n  * this.router.navigate(['/view'], { preserveQueryParams: true });\n  * ```\n  *\n  * @deprecated\n  */\n  preserveQueryParams?: boolean;\n\n  /**\n  *  config strategy to handle the query parameters for the next navigation.\n  *\n  * ```\n  * // from /results?page=1 to /view?page=1&page=2\n  * this.router.navigate(['/view'], { queryParams: { page: 2 },  queryParamsHandling: \"merge\" });\n  * ```\n  */\n  queryParamsHandling?: QueryParamsHandling;\n  /**\n  * Preserves the fragment for the next navigation\n  *\n  * ```\n  * // Preserve fragment from /results#top to /view#top\n  * this.router.navigate(['/view'], { preserveFragment: true });\n  * ```\n  */\n  preserveFragment?: boolean;\n  /**\n  * Navigates without pushing a new state into history.\n  *\n  * ```\n  * // Navigate silently to /view\n  * this.router.navigate(['/view'], { skipLocationChange: true });\n  * ```\n  */\n  skipLocationChange?: boolean;\n  /**\n  * Navigates while replacing the current state in history.\n  *\n  * ```\n  * // Navigate to /view\n  * this.router.navigate(['/view'], { replaceUrl: true });\n  * ```\n  */\n  replaceUrl?: boolean;\n}\n\n/**\n * @whatItDoes Error handler that is invoked when a navigation errors.\n *\n * @description\n * If the handler returns a value, the navigation promise will be resolved with this value.\n * If the handler throws an exception, the navigation promise will be rejected with\n * the exception.\n *\n * @stable\n */\nexport type ErrorHandler = (error: any) => any;\n/**\n * @param {?} error\n * @return {?}\n */\nfunction defaultErrorHandler(error: any): any {\n  throw error;\n}\n\ntype NavigationSource = 'imperative' | 'popstate' | 'hashchange';\n\ntype NavigationParams = {\n  id: number,\n  rawUrl: UrlTree,\n  extras: NavigationExtras,\n  resolve: any,\n  reject: any,\n  promise: Promise<boolean>,\n  source: NavigationSource,\n};\n\n/**\n * @internal\n */\nexport type RouterHook = (snapshot: RouterStateSnapshot) => Observable<void>;\n/**\n * \\@internal\n * @param {?} snapshot\n * @return {?}\n */\nfunction defaultRouterHook(snapshot: RouterStateSnapshot): Observable<void> {\n  return of (null);\n}\n/**\n * Does not detach any subtrees. Reuses routes as long as their route config is the same.\n */\nexport class DefaultRouteReuseStrategy implements RouteReuseStrategy {\n/**\n * @param {?} route\n * @return {?}\n */\nshouldDetach(route: ActivatedRouteSnapshot): boolean { return false; }\n/**\n * @param {?} route\n * @param {?} detachedTree\n * @return {?}\n */\nstore(route: ActivatedRouteSnapshot, detachedTree: DetachedRouteHandle): void {}\n/**\n * @param {?} route\n * @return {?}\n */\nshouldAttach(route: ActivatedRouteSnapshot): boolean { return false; }\n/**\n * @param {?} route\n * @return {?}\n */\nretrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle { return null; }\n/**\n * @param {?} future\n * @param {?} curr\n * @return {?}\n */\nshouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {\n    return future.routeConfig === curr.routeConfig;\n  }\n}\n/**\n * \\@whatItDoes Provides the navigation and url manipulation capabilities.\n * \n * See {\\@link Routes} for more details and examples.\n * \n * \\@ngModule RouterModule\n * \n * \\@stable\n */\nexport class Router {\nprivate currentUrlTree: UrlTree;\nprivate rawUrlTree: UrlTree;\nprivate navigations = new BehaviorSubject<NavigationParams>(null);\nprivate routerEvents = new Subject<Event>();\nprivate currentRouterState: RouterState;\nprivate locationSubscription: Subscription;\nprivate navigationId: number = 0;\nprivate configLoader: RouterConfigLoader;\nprivate ngModule: NgModuleRef<any>;\n\n  /**\n   * Error handler that is invoked when a navigation errors.\n   *\n   * See {@link ErrorHandler} for more information.\n   */\n  errorHandler: ErrorHandler = defaultErrorHandler;\n\n\n\n  /**\n   * Indicates if at least one navigation happened.\n   */\n  navigated: boolean = false;\n/**\n * Used by RouterModule. This allows us to\n * pause the navigation either before preactivation or after it.\n * \\@internal\n */\nhooks: {beforePreactivation: RouterHook, afterPreactivation: RouterHook} = {\n    beforePreactivation: defaultRouterHook,\n    afterPreactivation: defaultRouterHook\n  };\n\n  /**\n   * Extracts and merges URLs. Used for AngularJS to Angular migrations.\n   */\n  urlHandlingStrategy: UrlHandlingStrategy = new DefaultUrlHandlingStrategy();\n\n  routeReuseStrategy: RouteReuseStrategy = new DefaultRouteReuseStrategy();\n/**\n * @param {?} rootComponentType\n * @param {?} urlSerializer\n * @param {?} outletMap\n * @param {?} location\n * @param {?} injector\n * @param {?} loader\n * @param {?} compiler\n * @param {?} config\n */\nconstructor(\nprivate rootComponentType: Type<any>,\nprivate urlSerializer: UrlSerializer,\nprivate outletMap: RouterOutletMap,\nprivate location: Location, injector: Injector,\n      loader: NgModuleFactoryLoader, compiler: Compiler,\npublic config: Routes) {\n    const onLoadStart = (r: Route) => this.triggerEvent(new RouteConfigLoadStart(r));\n    const onLoadEnd = (r: Route) => this.triggerEvent(new RouteConfigLoadEnd(r));\n\n    this.ngModule = injector.get(NgModuleRef);\n\n    this.resetConfig(config);\n    this.currentUrlTree = createEmptyUrlTree();\n    this.rawUrlTree = this.currentUrlTree;\n\n    this.configLoader = new RouterConfigLoader(loader, compiler, onLoadStart, onLoadEnd);\n    this.currentRouterState = createEmptyState(this.currentUrlTree, this.rootComponentType);\n    this.processNavigations();\n  }\n/**\n * \\@internal \n * TODO: this should be removed once the constructor of the router made internal\n * @param {?} rootComponentType\n * @return {?}\n */\nresetRootComponentType(rootComponentType: Type<any>): void {\n    this.rootComponentType = rootComponentType;\n    // TODO: vsavkin router 4.0 should make the root component set to null\n    // this will simplify the lifecycle of the router.\n    this.currentRouterState.root.component = this.rootComponentType;\n  }\n/**\n * Sets up the location change listener and performs the initial navigation.\n * @return {?}\n */\ninitialNavigation(): void {\n    this.setUpLocationChangeListener();\n    if (this.navigationId === 0) {\n      this.navigateByUrl(this.location.path(true), {replaceUrl: true});\n    }\n  }\n/**\n * Sets up the location change listener.\n * @return {?}\n */\nsetUpLocationChangeListener(): void {\n    // Zone.current.wrap is needed because of the issue with RxJS scheduler,\n    // which does not work properly with zone.js in IE and Safari\n    if (!this.locationSubscription) {\n      this.locationSubscription = /** @type {?} */(( <any>this.location.subscribe(Zone.current.wrap((change: any) => {\n        const /** @type {?} */ rawUrlTree = this.urlSerializer.parse(change['url']);\n        const /** @type {?} */ source: NavigationSource = change['type'] === 'popstate' ? 'popstate' : 'hashchange';\n        setTimeout(() => { this.scheduleNavigation(rawUrlTree, source, {replaceUrl: true}); }, 0);\n      }))));\n    }\n  }\n/**\n * The current route state\n * @return {?}\n */\nget routerState(): RouterState { return this.currentRouterState; }\n/**\n * The current url\n * @return {?}\n */\nget url(): string { return this.serializeUrl(this.currentUrlTree); }\n/**\n * An observable of router events\n * @return {?}\n */\nget events(): Observable<Event> { return this.routerEvents; }\n/**\n * \\@internal\n * @param {?} e\n * @return {?}\n */\ntriggerEvent(e: Event) { this.routerEvents.next(e); }\n/**\n * Resets the configuration used for navigation and generating links.\n * \n * ### Usage\n * \n * ```\n * router.resetConfig([\n *  { path: 'team/:id', component: TeamCmp, children: [\n *    { path: 'simple', component: SimpleCmp },\n *    { path: 'user/:name', component: UserCmp }\n *  ]}\n * ]);\n * ```\n * @param {?} config\n * @return {?}\n */\nresetConfig(config: Routes): void {\n    validateConfig(config);\n    this.config = config;\n  }\n/**\n * \\@docsNotRequired\n * @return {?}\n */\nngOnDestroy() { this.dispose(); }\n/**\n * Disposes of the router\n * @return {?}\n */\ndispose(): void {\n    if (this.locationSubscription) {\n      this.locationSubscription.unsubscribe();\n      this.locationSubscription = null;\n    }\n  }\n/**\n * Applies an array of commands to the current url tree and creates a new url tree.\n * \n * When given an activate route, applies the given commands starting from the route.\n * When not given a route, applies the given command starting from the root.\n * \n * ### Usage\n * \n * ```\n * // create /team/33/user/11\n * router.createUrlTree(['/team', 33, 'user', 11]);\n * \n * // create /team/33;expand=true/user/11\n * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n * \n * // you can collapse static segments like this (this works only with the first passed-in value):\n * router.createUrlTree(['/team/33/user', userId]);\n * \n * // If the first segment can contain slashes, and you do not want the router to split it, you\n * // can do the following:\n * \n * router.createUrlTree([{segmentPath: '/one/two'}]);\n * \n * // create /team/33/(user/11//right:chat)\n * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n * \n * // remove the right secondary node\n * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n * \n * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n * \n * // navigate to /team/33/user/11/details\n * router.createUrlTree(['details'], {relativeTo: route});\n * \n * // navigate to /team/33/user/22\n * router.createUrlTree(['../22'], {relativeTo: route});\n * \n * // navigate to /team/44/user/22\n * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n * ```\n * @param {?} commands\n * @param {?=} __1\n * @return {?}\n */\ncreateUrlTree(\n      commands: any[], {relativeTo, queryParams, fragment, preserveQueryParams, queryParamsHandling,\n                        preserveFragment}: NavigationExtras = {}): UrlTree {\n    if (isDevMode() && preserveQueryParams && /** @type {?} */(( <any>console)) && /** @type {?} */(( <any>console.warn))) {\n      console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\n    }\n    const /** @type {?} */ a = relativeTo || this.routerState.root;\n    const /** @type {?} */ f = preserveFragment ? this.currentUrlTree.fragment : fragment;\n    let /** @type {?} */ q: Params = null;\n    if (queryParamsHandling) {\n      switch (queryParamsHandling) {\n        case 'merge':\n          q = merge(this.currentUrlTree.queryParams, queryParams);\n          break;\n        case 'preserve':\n          q = this.currentUrlTree.queryParams;\n          break;\n        default:\n          q = queryParams;\n      }\n    } else {\n      q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams;\n    }\n    return createUrlTree(a, this.currentUrlTree, commands, q, f);\n  }\n/**\n * Navigate based on the provided url. This navigation is always absolute.\n * \n * Returns a promise that:\n * - resolves to 'true' when navigation succeeds,\n * - resolves to 'false' when navigation fails,\n * - is rejected when an error happens.\n * \n * ### Usage\n * \n * ```\n * router.navigateByUrl(\"/team/33/user/11\");\n * \n * // Navigate without updating the URL\n * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n * ```\n * \n * In opposite to `navigate`, `navigateByUrl` takes a whole URL\n * and does not apply any delta to the current one.\n * @param {?} url\n * @param {?=} extras\n * @return {?}\n */\nnavigateByUrl(url: string|UrlTree, extras: NavigationExtras = {skipLocationChange: false}):\n      Promise<boolean> {\n    const /** @type {?} */ urlTree = url instanceof UrlTree ? url : this.parseUrl(url);\n    const /** @type {?} */ mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);\n\n    return this.scheduleNavigation(mergedTree, 'imperative', extras);\n  }\n/**\n * Navigate based on the provided array of commands and a starting point.\n * If no starting route is provided, the navigation is absolute.\n * \n * Returns a promise that:\n * - resolves to 'true' when navigation succeeds,\n * - resolves to 'false' when navigation fails,\n * - is rejected when an error happens.\n * \n * ### Usage\n * \n * ```\n * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n * \n * // Navigate without updating the URL\n * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n * ```\n * \n * In opposite to `navigateByUrl`, `navigate` always takes a delta that is applied to the current\n * URL.\n * @param {?} commands\n * @param {?=} extras\n * @return {?}\n */\nnavigate(commands: any[], extras: NavigationExtras = {skipLocationChange: false}):\n      Promise<boolean> {\n    validateCommands(commands);\n    if (typeof extras.queryParams === 'object' && extras.queryParams !== null) {\n      extras.queryParams = this.removeEmptyProps(extras.queryParams);\n    }\n    return this.navigateByUrl(this.createUrlTree(commands, extras), extras);\n  }\n/**\n * Serializes a {\\@link UrlTree} into a string\n * @param {?} url\n * @return {?}\n */\nserializeUrl(url: UrlTree): string { return this.urlSerializer.serialize(url); }\n/**\n * Parses a string into a {\\@link UrlTree}\n * @param {?} url\n * @return {?}\n */\nparseUrl(url: string): UrlTree { return this.urlSerializer.parse(url); }\n/**\n * Returns whether the url is activated\n * @param {?} url\n * @param {?} exact\n * @return {?}\n */\nisActive(url: string|UrlTree, exact: boolean): boolean {\n    if (url instanceof UrlTree) {\n      return containsTree(this.currentUrlTree, url, exact);\n    } else {\n      const /** @type {?} */ urlTree = this.urlSerializer.parse(url);\n      return containsTree(this.currentUrlTree, urlTree, exact);\n    }\n  }\n/**\n * @param {?} params\n * @return {?}\n */\nprivate removeEmptyProps(params: Params): Params {\n    return Object.keys(params).reduce((result: Params, key: string) => {\n      const /** @type {?} */ value: any = params[key];\n      if (value !== null && value !== undefined) {\n        result[key] = value;\n      }\n      return result;\n    }, {});\n  }\n/**\n * @return {?}\n */\nprivate processNavigations(): void {\n    concatMap\n        .call(\n            this.navigations,\n            (nav: NavigationParams) => {\n              if (nav) {\n                this.executeScheduledNavigation(nav);\n                // a failed navigation should not stop the router from processing\n                // further navigations => the catch\n                return nav.promise.catch(() => {});\n              } else {\n                return /** @type {?} */(( <any>of (null)));\n              }\n            })\n        .subscribe(() => {});\n  }\n/**\n * @param {?} rawUrl\n * @param {?} source\n * @param {?} extras\n * @return {?}\n */\nprivate scheduleNavigation(rawUrl: UrlTree, source: NavigationSource, extras: NavigationExtras):\n      Promise<boolean> {\n    const /** @type {?} */ lastNavigation = this.navigations.value;\n\n    // If the user triggers a navigation imperatively (e.g., by using navigateByUrl),\n    // and that navigation results in 'replaceState' that leads to the same URL,\n    // we should skip those.\n    if (lastNavigation && source !== 'imperative' && lastNavigation.source === 'imperative' &&\n        lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n      return null;  // return value is not used\n    }\n\n    // Because of a bug in IE and Edge, the location class fires two events (popstate and\n    // hashchange) every single time. The second one should be ignored. Otherwise, the URL will\n    // flicker.\n    if (lastNavigation && source == 'hashchange' && lastNavigation.source === 'popstate' &&\n        lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n      return null;  // return value is not used\n    }\n\n    let /** @type {?} */ resolve: any = null;\n    let /** @type {?} */ reject: any = null;\n\n    const /** @type {?} */ promise = new Promise((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n\n    const /** @type {?} */ id = ++this.navigationId;\n    this.navigations.next({id, source, rawUrl, extras, resolve, reject, promise});\n\n    // Make sure that the error is propagated even though `processNavigations` catch\n    // handler does not rethrow\n    return promise.catch((e: any) => Promise.reject(e));\n  }\n/**\n * @param {?} __0\n * @return {?}\n */\nprivate executeScheduledNavigation({id, rawUrl, extras, resolve, reject}: NavigationParams):\n      void {\n    const /** @type {?} */ url = this.urlHandlingStrategy.extract(rawUrl);\n    const /** @type {?} */ urlTransition = !this.navigated || url.toString() !== this.currentUrlTree.toString();\n\n    if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(rawUrl)) {\n      this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));\n      Promise.resolve()\n          .then(\n              (_) => this.runNavigate(\n                  url, rawUrl, extras.skipLocationChange, extras.replaceUrl, id, null))\n          .then(resolve, reject);\n\n      // we cannot process the current URL, but we could process the previous one =>\n      // we need to do some cleanup\n    } else if (\n        urlTransition && this.rawUrlTree &&\n        this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree)) {\n      this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));\n      Promise.resolve()\n          .then(\n              (_) => this.runNavigate(\n                  url, rawUrl, false, false, id,\n                  createEmptyState(url, this.rootComponentType).snapshot))\n          .then(resolve, reject);\n\n    } else {\n      this.rawUrlTree = rawUrl;\n      resolve(null);\n    }\n  }\n/**\n * @param {?} url\n * @param {?} rawUrl\n * @param {?} shouldPreventPushState\n * @param {?} shouldReplaceUrl\n * @param {?} id\n * @param {?} precreatedState\n * @return {?}\n */\nprivate runNavigate(\n      url: UrlTree, rawUrl: UrlTree, shouldPreventPushState: boolean, shouldReplaceUrl: boolean,\n      id: number, precreatedState: RouterStateSnapshot): Promise<boolean> {\n    if (id !== this.navigationId) {\n      this.location.go(this.urlSerializer.serialize(this.currentUrlTree));\n      this.routerEvents.next(new NavigationCancel(\n          id, this.serializeUrl(url),\n          `Navigation ID ${id} is not equal to the current navigation id ${this.navigationId}`));\n      return Promise.resolve(false);\n    }\n\n    return new Promise((resolvePromise, rejectPromise) => {\n      // create an observable of the url and route state snapshot\n      // this operation do not result in any side effects\n      let /** @type {?} */ urlAndSnapshot$: Observable<{appliedUrl: UrlTree, snapshot: RouterStateSnapshot}>;\n      if (!precreatedState) {\n        const /** @type {?} */ moduleInjector = this.ngModule.injector;\n        const /** @type {?} */ redirectsApplied$ =\n            applyRedirects(moduleInjector, this.configLoader, this.urlSerializer, url, this.config);\n\n        urlAndSnapshot$ = mergeMap.call(redirectsApplied$, (appliedUrl: UrlTree) => {\n          return map.call(\n              recognize(\n                  this.rootComponentType, this.config, appliedUrl, this.serializeUrl(appliedUrl)),\n              (snapshot: any) => {\n\n                this.routerEvents.next(new RoutesRecognized(\n                    id, this.serializeUrl(url), this.serializeUrl(appliedUrl), snapshot));\n\n                return {appliedUrl, snapshot};\n              });\n        });\n      } else {\n        urlAndSnapshot$ = of ({appliedUrl: url, snapshot: precreatedState});\n      }\n\n      const /** @type {?} */ beforePreactivationDone$ = mergeMap.call(\n          urlAndSnapshot$, (p: {appliedUrl: string, snapshot: RouterStateSnapshot}) => {\n            return map.call(this.hooks.beforePreactivation(p.snapshot), () => p);\n          });\n\n      // run preactivation: guards and data resolvers\n      let /** @type {?} */ preActivation: PreActivation;\n      const /** @type {?} */ preactivationTraverse$ = map.call(\n          beforePreactivationDone$,\n          ({appliedUrl, snapshot}: {appliedUrl: string, snapshot: RouterStateSnapshot}) => {\n            const /** @type {?} */ moduleInjector = this.ngModule.injector;\n            preActivation =\n                new PreActivation(snapshot, this.currentRouterState.snapshot, moduleInjector);\n            preActivation.traverse(this.outletMap);\n            return {appliedUrl, snapshot};\n          });\n\n      const /** @type {?} */ preactivationCheckGuards$ = mergeMap.call(\n          preactivationTraverse$,\n          ({appliedUrl, snapshot}: {appliedUrl: string, snapshot: RouterStateSnapshot}) => {\n            if (this.navigationId !== id) return of (false);\n\n            return map.call(preActivation.checkGuards(), (shouldActivate: boolean) => {\n              return {appliedUrl: appliedUrl, snapshot: snapshot, shouldActivate: shouldActivate};\n            });\n          });\n\n      const /** @type {?} */ preactivationResolveData$ = mergeMap.call(preactivationCheckGuards$, (p: any) => {\n        if (this.navigationId !== id) return of (false);\n\n        if (p.shouldActivate) {\n          return map.call(preActivation.resolveData(), () => p);\n        } else {\n          return of (p);\n        }\n      });\n\n      const /** @type {?} */ preactivationDone$ = mergeMap.call(preactivationResolveData$, (p: any) => {\n        return map.call(this.hooks.afterPreactivation(p.snapshot), () => p);\n      });\n\n\n      // create router state\n      // this operation has side effects => route state is being affected\n      const /** @type {?} */ routerState$ =\n          map.call(preactivationDone$, ({appliedUrl, snapshot, shouldActivate}: any) => {\n            if (shouldActivate) {\n              const /** @type {?} */ state =\n                  createRouterState(this.routeReuseStrategy, snapshot, this.currentRouterState);\n              return {appliedUrl, state, shouldActivate};\n            } else {\n              return {appliedUrl, state: null, shouldActivate};\n            }\n          });\n\n\n      // applied the new router state\n      // this operation has side effects\n      let /** @type {?} */ navigationIsSuccessful: boolean;\n      const /** @type {?} */ storedState = this.currentRouterState;\n      const /** @type {?} */ storedUrl = this.currentUrlTree;\n\n      routerState$\n          .forEach(({appliedUrl, state, shouldActivate}: any) => {\n            if (!shouldActivate || id !== this.navigationId) {\n              navigationIsSuccessful = false;\n              return;\n            }\n\n            this.currentUrlTree = appliedUrl;\n            this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, rawUrl);\n\n            this.currentRouterState = state;\n\n            if (!shouldPreventPushState) {\n              const /** @type {?} */ path = this.urlSerializer.serialize(this.rawUrlTree);\n              if (this.location.isCurrentPathEqualTo(path) || shouldReplaceUrl) {\n                this.location.replaceState(path);\n              } else {\n                this.location.go(path);\n              }\n            }\n\n            new ActivateRoutes(this.routeReuseStrategy, state, storedState)\n                .activate(this.outletMap);\n\n            navigationIsSuccessful = true;\n          })\n          .then(\n              () => {\n                if (navigationIsSuccessful) {\n                  this.navigated = true;\n                  this.routerEvents.next(new NavigationEnd(\n                      id, this.serializeUrl(url), this.serializeUrl(this.currentUrlTree)));\n                  resolvePromise(true);\n                } else {\n                  this.resetUrlToCurrentUrlTree();\n                  this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url), ''));\n                  resolvePromise(false);\n                }\n              },\n              (e: any) => {\n                if (isNavigationCancelingError(e)) {\n                  this.resetUrlToCurrentUrlTree();\n                  this.navigated = true;\n                  this.routerEvents.next(\n                      new NavigationCancel(id, this.serializeUrl(url), e.message));\n                  resolvePromise(false);\n                } else {\n                  this.routerEvents.next(new NavigationError(id, this.serializeUrl(url), e));\n                  try {\n                    resolvePromise(this.errorHandler(e));\n                  } catch ( /** @type {?} */ee) {\n                    rejectPromise(ee);\n                  }\n                }\n\n                this.currentRouterState = storedState;\n                this.currentUrlTree = storedUrl;\n                this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, rawUrl);\n                this.location.replaceState(this.serializeUrl(this.rawUrlTree));\n              });\n    });\n  }\n/**\n * @return {?}\n */\nprivate resetUrlToCurrentUrlTree(): void {\n    const /** @type {?} */ path = this.urlSerializer.serialize(this.rawUrlTree);\n    this.location.replaceState(path);\n  }\n}\n\nfunction Router_tsickle_Closure_declarations() {\n/** @type {?} */\nRouter.prototype.currentUrlTree;\n/** @type {?} */\nRouter.prototype.rawUrlTree;\n/** @type {?} */\nRouter.prototype.navigations;\n/** @type {?} */\nRouter.prototype.routerEvents;\n/** @type {?} */\nRouter.prototype.currentRouterState;\n/** @type {?} */\nRouter.prototype.locationSubscription;\n/** @type {?} */\nRouter.prototype.navigationId;\n/** @type {?} */\nRouter.prototype.configLoader;\n/** @type {?} */\nRouter.prototype.ngModule;\n/**\n * Error handler that is invoked when a navigation errors.\n * \n * See {\\@link ErrorHandler} for more information.\n * @type {?}\n */\nRouter.prototype.errorHandler;\n/**\n * Indicates if at least one navigation happened.\n * @type {?}\n */\nRouter.prototype.navigated;\n/**\n * Used by RouterModule. This allows us to\n * pause the navigation either before preactivation or after it.\n * \\@internal\n * @type {?}\n */\nRouter.prototype.hooks;\n/**\n * Extracts and merges URLs. Used for AngularJS to Angular migrations.\n * @type {?}\n */\nRouter.prototype.urlHandlingStrategy;\n/** @type {?} */\nRouter.prototype.routeReuseStrategy;\n/** @type {?} */\nRouter.prototype.rootComponentType;\n/** @type {?} */\nRouter.prototype.urlSerializer;\n/** @type {?} */\nRouter.prototype.outletMap;\n/** @type {?} */\nRouter.prototype.location;\n/** @type {?} */\nRouter.prototype.config;\n}\n\nclass CanActivate {\n/**\n * @param {?} path\n */\nconstructor(public path: ActivatedRouteSnapshot[]) {}\n/**\n * @return {?}\n */\nget route(): ActivatedRouteSnapshot { return this.path[this.path.length - 1]; }\n}\n\nfunction CanActivate_tsickle_Closure_declarations() {\n/** @type {?} */\nCanActivate.prototype.path;\n}\n\nclass CanDeactivate {\n/**\n * @param {?} component\n * @param {?} route\n */\nconstructor(public component: Object,\npublic route: ActivatedRouteSnapshot) {}\n}\n\nfunction CanDeactivate_tsickle_Closure_declarations() {\n/** @type {?} */\nCanDeactivate.prototype.component;\n/** @type {?} */\nCanDeactivate.prototype.route;\n}\n\nexport class PreActivation {\nprivate checks: Array<CanActivate|CanDeactivate> = [];\n/**\n * @param {?} future\n * @param {?} curr\n * @param {?} moduleInjector\n */\nconstructor(\nprivate future: RouterStateSnapshot,\nprivate curr: RouterStateSnapshot,\nprivate moduleInjector: Injector) {}\n/**\n * @param {?} parentOutletMap\n * @return {?}\n */\ntraverse(parentOutletMap: RouterOutletMap): void {\n    const /** @type {?} */ futureRoot = this.future._root;\n    const /** @type {?} */ currRoot = this.curr ? this.curr._root : null;\n    this.traverseChildRoutes(futureRoot, currRoot, parentOutletMap, [futureRoot.value]);\n  }\n/**\n * @return {?}\n */\ncheckGuards(): Observable<boolean> {\n    if (this.checks.length === 0) return of (true);\n    const /** @type {?} */ checks$ = from(this.checks);\n    const /** @type {?} */ runningChecks$ = mergeMap.call(checks$, (s: any) => {\n      if (s instanceof CanActivate) {\n        return andObservables(\n            from([this.runCanActivateChild(s.path), this.runCanActivate(s.route)]));\n      } else if (s instanceof CanDeactivate) {\n        // workaround https://github.com/Microsoft/TypeScript/issues/7271\n        const /** @type {?} */ s2 = /** @type {?} */(( s as CanDeactivate));\n        return this.runCanDeactivate(s2.component, s2.route);\n      } else {\n        throw new Error('Cannot be reached');\n      }\n    });\n    return every.call(runningChecks$, (result: any) => result === true);\n  }\n/**\n * @return {?}\n */\nresolveData(): Observable<any> {\n    if (this.checks.length === 0) return of (null);\n    const /** @type {?} */ checks$ = from(this.checks);\n    const /** @type {?} */ runningChecks$ = concatMap.call(checks$, (s: any) => {\n      if (s instanceof CanActivate) {\n        return this.runResolve(s.route);\n      } else {\n        return of (null);\n      }\n    });\n    return reduce.call(runningChecks$, (_: any, __: any) => _);\n  }\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} outletMap\n * @param {?} futurePath\n * @return {?}\n */\nprivate traverseChildRoutes(\n      futureNode: TreeNode<ActivatedRouteSnapshot>, currNode: TreeNode<ActivatedRouteSnapshot>,\n      outletMap: RouterOutletMap, futurePath: ActivatedRouteSnapshot[]): void {\n    const /** @type {?} */ prevChildren: {[key: string]: any} = nodeChildrenAsMap(currNode);\n\n    futureNode.children.forEach(c => {\n      this.traverseRoutes(c, prevChildren[c.value.outlet], outletMap, futurePath.concat([c.value]));\n      delete prevChildren[c.value.outlet];\n    });\n    forEach(\n        prevChildren,\n        (v: any, k: string) => this.deactiveRouteAndItsChildren(v, outletMap._outlets[k]));\n  }\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} parentOutletMap\n * @param {?} futurePath\n * @return {?}\n */\ntraverseRoutes(\n      futureNode: TreeNode<ActivatedRouteSnapshot>, currNode: TreeNode<ActivatedRouteSnapshot>,\n      parentOutletMap: RouterOutletMap, futurePath: ActivatedRouteSnapshot[]): void {\n    const /** @type {?} */ future = futureNode.value;\n    const /** @type {?} */ curr = currNode ? currNode.value : null;\n    const /** @type {?} */ outlet = parentOutletMap ? parentOutletMap._outlets[futureNode.value.outlet] : null;\n\n    // reusing the node\n    if (curr && future._routeConfig === curr._routeConfig) {\n      if (this.shouldRunGuardsAndResolvers(\n              curr, future, future._routeConfig.runGuardsAndResolvers)) {\n        this.checks.push(new CanDeactivate(outlet.component, curr), new CanActivate(futurePath));\n      } else {\n        // we need to set the data\n        future.data = curr.data;\n        future._resolvedData = curr._resolvedData;\n      }\n\n      // If we have a component, we need to go through an outlet.\n      if (future.component) {\n        this.traverseChildRoutes(\n            futureNode, currNode, outlet ? outlet.outletMap : null, futurePath);\n\n        // if we have a componentless route, we recurse but keep the same outlet map.\n      } else {\n        this.traverseChildRoutes(futureNode, currNode, parentOutletMap, futurePath);\n      }\n    } else {\n      if (curr) {\n        this.deactiveRouteAndItsChildren(currNode, outlet);\n      }\n\n      this.checks.push(new CanActivate(futurePath));\n      // If we have a component, we need to go through an outlet.\n      if (future.component) {\n        this.traverseChildRoutes(futureNode, null, outlet ? outlet.outletMap : null, futurePath);\n\n        // if we have a componentless route, we recurse but keep the same outlet map.\n      } else {\n        this.traverseChildRoutes(futureNode, null, parentOutletMap, futurePath);\n      }\n    }\n  }\n/**\n * @param {?} curr\n * @param {?} future\n * @param {?} mode\n * @return {?}\n */\nprivate shouldRunGuardsAndResolvers(\n      curr: ActivatedRouteSnapshot, future: ActivatedRouteSnapshot,\n      mode: RunGuardsAndResolvers): boolean {\n    switch (mode) {\n      case 'always':\n        return true;\n\n      case 'paramsOrQueryParamsChange':\n        return !equalParamsAndUrlSegments(curr, future) ||\n            !shallowEqual(curr.queryParams, future.queryParams);\n\n      case 'paramsChange':\n      default:\n        return !equalParamsAndUrlSegments(curr, future);\n    }\n  }\n/**\n * @param {?} route\n * @param {?} outlet\n * @return {?}\n */\nprivate deactiveRouteAndItsChildren(\n      route: TreeNode<ActivatedRouteSnapshot>, outlet: RouterOutlet): void {\n    const /** @type {?} */ prevChildren: {[key: string]: any} = nodeChildrenAsMap(route);\n    const /** @type {?} */ r = route.value;\n\n    forEach(prevChildren, (v: any, k: string) => {\n      if (!r.component) {\n        this.deactiveRouteAndItsChildren(v, outlet);\n      } else if (!!outlet) {\n        this.deactiveRouteAndItsChildren(v, outlet.outletMap._outlets[k]);\n      } else {\n        this.deactiveRouteAndItsChildren(v, null);\n      }\n    });\n\n    if (!r.component) {\n      this.checks.push(new CanDeactivate(null, r));\n    } else if (outlet && outlet.isActivated) {\n      this.checks.push(new CanDeactivate(outlet.component, r));\n    } else {\n      this.checks.push(new CanDeactivate(null, r));\n    }\n  }\n/**\n * @param {?} future\n * @return {?}\n */\nprivate runCanActivate(future: ActivatedRouteSnapshot): Observable<boolean> {\n    const /** @type {?} */ canActivate = future._routeConfig ? future._routeConfig.canActivate : null;\n    if (!canActivate || canActivate.length === 0) return of (true);\n    const /** @type {?} */ obs = map.call(from(canActivate), (c: any) => {\n      const /** @type {?} */ guard = this.getToken(c, future);\n      let /** @type {?} */ observable: Observable<boolean>;\n      if (guard.canActivate) {\n        observable = wrapIntoObservable(guard.canActivate(future, this.future));\n      } else {\n        observable = wrapIntoObservable(guard(future, this.future));\n      }\n      return first.call(observable);\n    });\n    return andObservables(obs);\n  }\n/**\n * @param {?} path\n * @return {?}\n */\nprivate runCanActivateChild(path: ActivatedRouteSnapshot[]): Observable<boolean> {\n    const /** @type {?} */ future = path[path.length - 1];\n\n    const /** @type {?} */ canActivateChildGuards = path.slice(0, path.length - 1)\n                                       .reverse()\n                                       .map(p => this.extractCanActivateChild(p))\n                                       .filter(_ => _ !== null);\n\n    return andObservables(map.call(from(canActivateChildGuards), (d: any) => {\n      const /** @type {?} */ obs = map.call(from(d.guards), (c: any) => {\n        const /** @type {?} */ guard = this.getToken(c, d.node);\n        let /** @type {?} */ observable: Observable<boolean>;\n        if (guard.canActivateChild) {\n          observable = wrapIntoObservable(guard.canActivateChild(future, this.future));\n        } else {\n          observable = wrapIntoObservable(guard(future, this.future));\n        }\n        return first.call(observable);\n      });\n      return andObservables(obs);\n    }));\n  }\n/**\n * @param {?} p\n * @return {?}\n */\nprivate extractCanActivateChild(p: ActivatedRouteSnapshot):\n      {node: ActivatedRouteSnapshot, guards: any[]} {\n    const /** @type {?} */ canActivateChild = p._routeConfig ? p._routeConfig.canActivateChild : null;\n    if (!canActivateChild || canActivateChild.length === 0) return null;\n    return {node: p, guards: canActivateChild};\n  }\n/**\n * @param {?} component\n * @param {?} curr\n * @return {?}\n */\nprivate runCanDeactivate(component: Object, curr: ActivatedRouteSnapshot): Observable<boolean> {\n    const /** @type {?} */ canDeactivate = curr && curr._routeConfig ? curr._routeConfig.canDeactivate : null;\n    if (!canDeactivate || canDeactivate.length === 0) return of (true);\n    const /** @type {?} */ canDeactivate$ = mergeMap.call(from(canDeactivate), (c: any) => {\n      const /** @type {?} */ guard = this.getToken(c, curr);\n      let /** @type {?} */ observable: Observable<boolean>;\n      if (guard.canDeactivate) {\n        observable =\n            wrapIntoObservable(guard.canDeactivate(component, curr, this.curr, this.future));\n      } else {\n        observable = wrapIntoObservable(guard(component, curr, this.curr, this.future));\n      }\n      return first.call(observable);\n    });\n    return every.call(canDeactivate$, (result: any) => result === true);\n  }\n/**\n * @param {?} future\n * @return {?}\n */\nprivate runResolve(future: ActivatedRouteSnapshot): Observable<any> {\n    const /** @type {?} */ resolve = future._resolve;\n    return map.call(this.resolveNode(resolve, future), (resolvedData: any): any => {\n      future._resolvedData = resolvedData;\n      future.data = merge(future.data, inheritedParamsDataResolve(future).resolve);\n      return null;\n    });\n  }\n/**\n * @param {?} resolve\n * @param {?} future\n * @return {?}\n */\nprivate resolveNode(resolve: ResolveData, future: ActivatedRouteSnapshot): Observable<any> {\n    return waitForMap(resolve, (k, v) => {\n      const /** @type {?} */ resolver = this.getToken(v, future);\n      return resolver.resolve ? wrapIntoObservable(resolver.resolve(future, this.future)) :\n                                wrapIntoObservable(resolver(future, this.future));\n    });\n  }\n/**\n * @param {?} token\n * @param {?} snapshot\n * @return {?}\n */\nprivate getToken(token: any, snapshot: ActivatedRouteSnapshot): any {\n    const /** @type {?} */ config = closestLoadedConfig(snapshot);\n    const /** @type {?} */ injector = config ? config.module.injector : this.moduleInjector;\n    return injector.get(token);\n  }\n}\n\nfunction PreActivation_tsickle_Closure_declarations() {\n/** @type {?} */\nPreActivation.prototype.checks;\n/** @type {?} */\nPreActivation.prototype.future;\n/** @type {?} */\nPreActivation.prototype.curr;\n/** @type {?} */\nPreActivation.prototype.moduleInjector;\n}\n\nclass ActivateRoutes {\n/**\n * @param {?} routeReuseStrategy\n * @param {?} futureState\n * @param {?} currState\n */\nconstructor(\nprivate routeReuseStrategy: RouteReuseStrategy,\nprivate futureState: RouterState,\nprivate currState: RouterState) {}\n/**\n * @param {?} parentOutletMap\n * @return {?}\n */\nactivate(parentOutletMap: RouterOutletMap): void {\n    const /** @type {?} */ futureRoot = this.futureState._root;\n    const /** @type {?} */ currRoot = this.currState ? this.currState._root : null;\n\n    this.deactivateChildRoutes(futureRoot, currRoot, parentOutletMap);\n    advanceActivatedRoute(this.futureState.root);\n    this.activateChildRoutes(futureRoot, currRoot, parentOutletMap);\n  }\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} outletMap\n * @return {?}\n */\nprivate deactivateChildRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>,\n      outletMap: RouterOutletMap): void {\n    const /** @type {?} */ prevChildren: {[key: string]: any} = nodeChildrenAsMap(currNode);\n    futureNode.children.forEach(c => {\n      this.deactivateRoutes(c, prevChildren[c.value.outlet], outletMap);\n      delete prevChildren[c.value.outlet];\n    });\n    forEach(prevChildren, (v: any, k: string) => this.deactiveRouteAndItsChildren(v, outletMap));\n  }\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} outletMap\n * @return {?}\n */\nprivate activateChildRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>,\n      outletMap: RouterOutletMap): void {\n    const /** @type {?} */ prevChildren: {[key: string]: any} = nodeChildrenAsMap(currNode);\n    futureNode.children.forEach(\n        c => { this.activateRoutes(c, prevChildren[c.value.outlet], outletMap); });\n  }\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} parentOutletMap\n * @return {?}\n */\ndeactivateRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>,\n      parentOutletMap: RouterOutletMap): void {\n    const /** @type {?} */ future = futureNode.value;\n    const /** @type {?} */ curr = currNode ? currNode.value : null;\n\n    // reusing the node\n    if (future === curr) {\n      // If we have a normal route, we need to go through an outlet.\n      if (future.component) {\n        const /** @type {?} */ outlet = getOutlet(parentOutletMap, future);\n        this.deactivateChildRoutes(futureNode, currNode, outlet.outletMap);\n\n        // if we have a componentless route, we recurse but keep the same outlet map.\n      } else {\n        this.deactivateChildRoutes(futureNode, currNode, parentOutletMap);\n      }\n    } else {\n      if (curr) {\n        this.deactiveRouteAndItsChildren(currNode, parentOutletMap);\n      }\n    }\n  }\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} parentOutletMap\n * @return {?}\n */\nactivateRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>,\n      parentOutletMap: RouterOutletMap): void {\n    const /** @type {?} */ future = futureNode.value;\n    const /** @type {?} */ curr = currNode ? currNode.value : null;\n\n    // reusing the node\n    if (future === curr) {\n      // advance the route to push the parameters\n      advanceActivatedRoute(future);\n\n      // If we have a normal route, we need to go through an outlet.\n      if (future.component) {\n        const /** @type {?} */ outlet = getOutlet(parentOutletMap, future);\n        this.activateChildRoutes(futureNode, currNode, outlet.outletMap);\n\n        // if we have a componentless route, we recurse but keep the same outlet map.\n      } else {\n        this.activateChildRoutes(futureNode, currNode, parentOutletMap);\n      }\n    } else {\n      // if we have a normal route, we need to advance the route\n      // and place the component into the outlet. After that recurse.\n      if (future.component) {\n        advanceActivatedRoute(future);\n        const /** @type {?} */ outlet = getOutlet(parentOutletMap, futureNode.value);\n\n        if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {\n          const /** @type {?} */ stored =\n              ( /** @type {?} */((<DetachedRouteHandleInternal>this.routeReuseStrategy.retrieve(future.snapshot))));\n          this.routeReuseStrategy.store(future.snapshot, null);\n          outlet.attach(stored.componentRef, stored.route.value);\n          advanceActivatedRouteNodeAndItsChildren(stored.route);\n        } else {\n          const /** @type {?} */ outletMap = new RouterOutletMap();\n          this.placeComponentIntoOutlet(outletMap, future, outlet);\n          this.activateChildRoutes(futureNode, null, outletMap);\n        }\n\n        // if we have a componentless route, we recurse but keep the same outlet map.\n      } else {\n        advanceActivatedRoute(future);\n        this.activateChildRoutes(futureNode, null, parentOutletMap);\n      }\n    }\n  }\n/**\n * @param {?} outletMap\n * @param {?} future\n * @param {?} outlet\n * @return {?}\n */\nprivate placeComponentIntoOutlet(\n      outletMap: RouterOutletMap, future: ActivatedRoute, outlet: RouterOutlet): void {\n    const /** @type {?} */ config = parentLoadedConfig(future.snapshot);\n    const /** @type {?} */ cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;\n\n    outlet.activateWith(future, cmpFactoryResolver, outletMap);\n  }\n/**\n * @param {?} route\n * @param {?} parentOutletMap\n * @return {?}\n */\nprivate deactiveRouteAndItsChildren(\n      route: TreeNode<ActivatedRoute>, parentOutletMap: RouterOutletMap): void {\n    if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {\n      this.detachAndStoreRouteSubtree(route, parentOutletMap);\n    } else {\n      this.deactiveRouteAndOutlet(route, parentOutletMap);\n    }\n  }\n/**\n * @param {?} route\n * @param {?} parentOutletMap\n * @return {?}\n */\nprivate detachAndStoreRouteSubtree(\n      route: TreeNode<ActivatedRoute>, parentOutletMap: RouterOutletMap): void {\n    const /** @type {?} */ outlet = getOutlet(parentOutletMap, route.value);\n    const /** @type {?} */ componentRef = outlet.detach();\n    this.routeReuseStrategy.store(route.value.snapshot, {componentRef, route});\n  }\n/**\n * @param {?} route\n * @param {?} parentOutletMap\n * @return {?}\n */\nprivate deactiveRouteAndOutlet(route: TreeNode<ActivatedRoute>, parentOutletMap: RouterOutletMap):\n      void {\n    const /** @type {?} */ prevChildren: {[key: string]: any} = nodeChildrenAsMap(route);\n    let /** @type {?} */ outlet: RouterOutlet = null;\n\n    // getOutlet throws when cannot find the right outlet,\n    // which can happen if an outlet was in an NgIf and was removed\n    try {\n      outlet = getOutlet(parentOutletMap, route.value);\n    } catch ( /** @type {?} */e) {\n      return;\n    }\n    const /** @type {?} */ childOutletMap = outlet.outletMap;\n\n    forEach(prevChildren, (v: any, k: string) => {\n      if (route.value.component) {\n        this.deactiveRouteAndItsChildren(v, childOutletMap);\n      } else {\n        this.deactiveRouteAndItsChildren(v, parentOutletMap);\n      }\n    });\n\n    if (outlet && outlet.isActivated) {\n      outlet.deactivate();\n    }\n  }\n}\n\nfunction ActivateRoutes_tsickle_Closure_declarations() {\n/** @type {?} */\nActivateRoutes.prototype.routeReuseStrategy;\n/** @type {?} */\nActivateRoutes.prototype.futureState;\n/** @type {?} */\nActivateRoutes.prototype.currState;\n}\n\n/**\n * @param {?} node\n * @return {?}\n */\nfunction advanceActivatedRouteNodeAndItsChildren(node: TreeNode<ActivatedRoute>): void {\n  advanceActivatedRoute(node.value);\n  node.children.forEach(advanceActivatedRouteNodeAndItsChildren);\n}\n/**\n * @param {?} snapshot\n * @return {?}\n */\nfunction parentLoadedConfig(snapshot: ActivatedRouteSnapshot): LoadedRouterConfig {\n  let /** @type {?} */ s = snapshot.parent;\n  while (s) {\n    const /** @type {?} */ c: any = s._routeConfig;\n    if (c && c._loadedConfig) return c._loadedConfig;\n    if (c && c.component) return null;\n    s = s.parent;\n  }\n  return null;\n}\n/**\n * @param {?} snapshot\n * @return {?}\n */\nfunction closestLoadedConfig(snapshot: ActivatedRouteSnapshot): LoadedRouterConfig {\n  if (!snapshot) return null;\n\n  let /** @type {?} */ s = snapshot.parent;\n  while (s) {\n    const /** @type {?} */ c: any = s._routeConfig;\n    if (c && c._loadedConfig) return c._loadedConfig;\n    s = s.parent;\n  }\n  return null;\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction nodeChildrenAsMap(node: TreeNode<any>) {\n  return node ? node.children.reduce((m: any, c: TreeNode<any>) => {\n    m[c.value.outlet] = c;\n    return m;\n  }, {}) : {};\n}\n/**\n * @param {?} outletMap\n * @param {?} route\n * @return {?}\n */\nfunction getOutlet(outletMap: RouterOutletMap, route: ActivatedRoute): RouterOutlet {\n  const /** @type {?} */ outlet = outletMap._outlets[route.outlet];\n  if (!outlet) {\n    const /** @type {?} */ componentName = ( /** @type {?} */((<any>route.component))).name;\n    if (route.outlet === PRIMARY_OUTLET) {\n      throw new Error(`Cannot find primary outlet to load '${componentName}'`);\n    } else {\n      throw new Error(`Cannot find the outlet ${route.outlet} to load '${componentName}'`);\n    }\n  }\n  return outlet;\n}\n/**\n * @param {?} commands\n * @return {?}\n */\nfunction validateCommands(commands: string[]): void {\n  for (let /** @type {?} */ i = 0; i < commands.length; i++) {\n    const /** @type {?} */ cmd = commands[i];\n    if (cmd == null) {\n      throw new Error(`The requested path contains ${cmd} segment at index ${i}`);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {UrlTree} from './url_tree';\n/**\n * \\@whatItDoes Provides a way to migrate AngularJS applications to Angular.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class UrlHandlingStrategy {\n/**\n * Tells the router if this URL should be processed.\n * \n * When it returns true, the router will execute the regular navigation.\n * When it returns false, the router will set the router state to an empty state.\n * As a result, all the active components will be destroyed.\n * \n * @abstract\n * @param {?} url\n * @return {?}\n */\nshouldProcessUrl(url: UrlTree) {}\n/**\n * Extracts the part of the URL that should be handled by the router.\n * The rest of the URL will remain untouched.\n * @abstract\n * @param {?} url\n * @return {?}\n */\nextract(url: UrlTree) {}\n/**\n * Merges the URL fragment with the rest of the URL.\n * @abstract\n * @param {?} newUrlPart\n * @param {?} rawUrl\n * @return {?}\n */\nmerge(newUrlPart: UrlTree, rawUrl: UrlTree) {}\n}\n/**\n * \\@experimental\n */\nexport class DefaultUrlHandlingStrategy implements UrlHandlingStrategy {\n/**\n * @param {?} url\n * @return {?}\n */\nshouldProcessUrl(url: UrlTree): boolean { return true; }\n/**\n * @param {?} url\n * @return {?}\n */\nextract(url: UrlTree): UrlTree { return url; }\n/**\n * @param {?} newUrlPart\n * @param {?} wholeUrl\n * @return {?}\n */\nmerge(newUrlPart: UrlTree, wholeUrl: UrlTree): UrlTree { return newUrlPart; }\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {RouterOutlet} from './directives/router_outlet';\n/**\n * \\@whatItDoes Contains all the router outlets created in a component.\n * \n * \\@stable\n */\nexport class RouterOutletMap {\n/**\n * \\@internal\n */\n_outlets: {[name: string]: RouterOutlet} = {};\n/**\n * Adds an outlet to this map.\n * @param {?} name\n * @param {?} outlet\n * @return {?}\n */\nregisterOutlet(name: string, outlet: RouterOutlet): void { this._outlets[name] = outlet; }\n/**\n * Removes an outlet from this map.\n * @param {?} name\n * @return {?}\n */\nremoveOutlet(name: string): void { this._outlets[name] = undefined; }\n}\n\nfunction RouterOutletMap_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nRouterOutletMap.prototype._outlets;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Type} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {of } from 'rxjs/observable/of';\n\nimport {Data, ResolveData, Route, Routes} from './config';\nimport {ActivatedRouteSnapshot, RouterStateSnapshot, inheritedParamsDataResolve} from './router_state';\nimport {PRIMARY_OUTLET, defaultUrlMatcher} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree, mapChildrenIntoArray} from './url_tree';\nimport {forEach, last, merge} from './utils/collection';\nimport {TreeNode} from './utils/tree';\nclass NoMatch {}\n/**\n * @param {?} rootComponentType\n * @param {?} config\n * @param {?} urlTree\n * @param {?} url\n * @return {?}\n */\nexport function recognize(\n    rootComponentType: Type<any>, config: Routes, urlTree: UrlTree,\n    url: string): Observable<RouterStateSnapshot> {\n  return new Recognizer(rootComponentType, config, urlTree, url).recognize();\n}\nclass Recognizer {\n/**\n * @param {?} rootComponentType\n * @param {?} config\n * @param {?} urlTree\n * @param {?} url\n */\nconstructor(\nprivate rootComponentType: Type<any>,\nprivate config: Routes,\nprivate urlTree: UrlTree,\nprivate url: string) {}\n/**\n * @return {?}\n */\nrecognize(): Observable<RouterStateSnapshot> {\n    try {\n      const /** @type {?} */ rootSegmentGroup = split(this.urlTree.root, [], [], this.config).segmentGroup;\n\n      const /** @type {?} */ children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);\n\n      const /** @type {?} */ root = new ActivatedRouteSnapshot(\n          [], Object.freeze({}), Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, {},\n          PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});\n\n      const /** @type {?} */ rootNode = new TreeNode<ActivatedRouteSnapshot>(root, children);\n      const /** @type {?} */ routeState = new RouterStateSnapshot(this.url, rootNode);\n      this.inheriteParamsAndData(routeState._root);\n      return of (routeState);\n\n    } catch ( /** @type {?} */e) {\n      return new Observable<RouterStateSnapshot>(\n          (obs: Observer<RouterStateSnapshot>) => obs.error(e));\n    }\n  }\n/**\n * @param {?} routeNode\n * @return {?}\n */\ninheriteParamsAndData(routeNode: TreeNode<ActivatedRouteSnapshot>): void {\n    const /** @type {?} */ route = routeNode.value;\n\n    const /** @type {?} */ i = inheritedParamsDataResolve(route);\n    route.params = Object.freeze(i.params);\n    route.data = Object.freeze(i.data);\n\n    routeNode.children.forEach(n => this.inheriteParamsAndData(n));\n  }\n/**\n * @param {?} config\n * @param {?} segmentGroup\n * @param {?} outlet\n * @return {?}\n */\nprocessSegmentGroup(config: Route[], segmentGroup: UrlSegmentGroup, outlet: string):\n      TreeNode<ActivatedRouteSnapshot>[] {\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n      return this.processChildren(config, segmentGroup);\n    } else {\n      return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);\n    }\n  }\n/**\n * @param {?} config\n * @param {?} segmentGroup\n * @return {?}\n */\nprocessChildren(config: Route[], segmentGroup: UrlSegmentGroup):\n      TreeNode<ActivatedRouteSnapshot>[] {\n    const /** @type {?} */ children = mapChildrenIntoArray(\n        segmentGroup, (child, childOutlet) => this.processSegmentGroup(config, child, childOutlet));\n    checkOutletNameUniqueness(children);\n    sortActivatedRouteSnapshots(children);\n    return children;\n  }\n/**\n * @param {?} config\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\nprocessSegment(\n      config: Route[], segmentGroup: UrlSegmentGroup, segments: UrlSegment[],\n      outlet: string): TreeNode<ActivatedRouteSnapshot>[] {\n    for (const /** @type {?} */ r of config) {\n      try {\n        return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof NoMatch)) throw e;\n      }\n    }\n    if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n      return [];\n    } else {\n      throw new NoMatch();\n    }\n  }\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\nprivate noLeftoversInUrl(segmentGroup: UrlSegmentGroup, segments: UrlSegment[], outlet: string):\n      boolean {\n    return segments.length === 0 && !segmentGroup.children[outlet];\n  }\n/**\n * @param {?} route\n * @param {?} rawSegment\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\nprocessSegmentAgainstRoute(\n      route: Route, rawSegment: UrlSegmentGroup, segments: UrlSegment[],\n      outlet: string): TreeNode<ActivatedRouteSnapshot>[] {\n    if (route.redirectTo) throw new NoMatch();\n\n    if ((route.outlet ? route.outlet : PRIMARY_OUTLET) !== outlet) throw new NoMatch();\n\n    if (route.path === '**') {\n      const /** @type {?} */ params = segments.length > 0 ? last(segments).parameters : {};\n      const /** @type {?} */ snapshot = new ActivatedRouteSnapshot(\n          segments, params, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment,\n          getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment),\n          getPathIndexShift(rawSegment) + segments.length, getResolve(route));\n      return [new TreeNode<ActivatedRouteSnapshot>(snapshot, [])];\n    }\n\n    const {consumedSegments, parameters, lastChild} = match(rawSegment, route, segments);\n    const /** @type {?} */ rawSlicedSegments = segments.slice(lastChild);\n    const /** @type {?} */ childConfig = getChildConfig(route);\n\n    const {segmentGroup, slicedSegments} =\n        split(rawSegment, consumedSegments, rawSlicedSegments, childConfig);\n\n    const /** @type {?} */ snapshot = new ActivatedRouteSnapshot(\n        consumedSegments, parameters, Object.freeze(this.urlTree.queryParams),\n        this.urlTree.fragment, getData(route), outlet, route.component, route,\n        getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length,\n        getResolve(route));\n\n\n    if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n      const /** @type {?} */ children = this.processChildren(childConfig, segmentGroup);\n      return [new TreeNode<ActivatedRouteSnapshot>(snapshot, children)];\n\n    } else if (childConfig.length === 0 && slicedSegments.length === 0) {\n      return [new TreeNode<ActivatedRouteSnapshot>(snapshot, [])];\n\n    } else {\n      const /** @type {?} */ children =\n          this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);\n      return [new TreeNode<ActivatedRouteSnapshot>(snapshot, children)];\n    }\n  }\n}\n\nfunction Recognizer_tsickle_Closure_declarations() {\n/** @type {?} */\nRecognizer.prototype.rootComponentType;\n/** @type {?} */\nRecognizer.prototype.config;\n/** @type {?} */\nRecognizer.prototype.urlTree;\n/** @type {?} */\nRecognizer.prototype.url;\n}\n\n/**\n * @param {?} nodes\n * @return {?}\n */\nfunction sortActivatedRouteSnapshots(nodes: TreeNode<ActivatedRouteSnapshot>[]): void {\n  nodes.sort((a, b) => {\n    if (a.value.outlet === PRIMARY_OUTLET) return -1;\n    if (b.value.outlet === PRIMARY_OUTLET) return 1;\n    return a.value.outlet.localeCompare(b.value.outlet);\n  });\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getChildConfig(route: Route): Route[] {\n  if (route.children) {\n    return route.children;\n  } else if (route.loadChildren) {\n    return ( /** @type {?} */((<any>route)))._loadedConfig.routes;\n  } else {\n    return [];\n  }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\nfunction match(segmentGroup: UrlSegmentGroup, route: Route, segments: UrlSegment[]) {\n  if (route.path === '') {\n    if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {\n      throw new NoMatch();\n    } else {\n      return {consumedSegments: [], lastChild: 0, parameters: {}};\n    }\n  }\n\n  const /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;\n  const /** @type {?} */ res = matcher(segments, segmentGroup, route);\n  if (!res) throw new NoMatch();\n\n  const /** @type {?} */ posParams: {[n: string]: string} = {};\n  forEach(res.posParams, (v: UrlSegment, k: string) => { posParams[k] = v.path; });\n  const /** @type {?} */ parameters = merge(posParams, res.consumed[res.consumed.length - 1].parameters);\n\n  return {consumedSegments: res.consumed, lastChild: res.consumed.length, parameters};\n}\n/**\n * @param {?} nodes\n * @return {?}\n */\nfunction checkOutletNameUniqueness(nodes: TreeNode<ActivatedRouteSnapshot>[]): void {\n  const /** @type {?} */ names: {[k: string]: ActivatedRouteSnapshot} = {};\n  nodes.forEach(n => {\n    const /** @type {?} */ routeWithSameOutletName = names[n.value.outlet];\n    if (routeWithSameOutletName) {\n      const /** @type {?} */ p = routeWithSameOutletName.url.map(s => s.toString()).join('/');\n      const /** @type {?} */ c = n.value.url.map(s => s.toString()).join('/');\n      throw new Error(`Two segments cannot have the same outlet name: '${p}' and '${c}'.`);\n    }\n    names[n.value.outlet] = n.value;\n  });\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction getSourceSegmentGroup(segmentGroup: UrlSegmentGroup): UrlSegmentGroup {\n  let /** @type {?} */ s = segmentGroup;\n  while (s._sourceSegment) {\n    s = s._sourceSegment;\n  }\n  return s;\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction getPathIndexShift(segmentGroup: UrlSegmentGroup): number {\n  let /** @type {?} */ s = segmentGroup;\n  let /** @type {?} */ res = (s._segmentIndexShift ? s._segmentIndexShift : 0);\n  while (s._sourceSegment) {\n    s = s._sourceSegment;\n    res += (s._segmentIndexShift ? s._segmentIndexShift : 0);\n  }\n  return res - 1;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} slicedSegments\n * @param {?} config\n * @return {?}\n */\nfunction split(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], slicedSegments: UrlSegment[],\n    config: Route[]) {\n  if (slicedSegments.length > 0 &&\n      containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n    const /** @type {?} */ s = new UrlSegmentGroup(\n        consumedSegments, createChildrenForEmptyPaths(\n                              segmentGroup, consumedSegments, config,\n                              new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return {segmentGroup: s, slicedSegments: []};\n\n  } else if (\n      slicedSegments.length === 0 &&\n      containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {\n    const /** @type {?} */ s = new UrlSegmentGroup(\n        segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(\n                                   segmentGroup, slicedSegments, config, segmentGroup.children));\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return {segmentGroup: s, slicedSegments};\n\n  } else {\n    const /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return {segmentGroup: s, slicedSegments};\n  }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @param {?} children\n * @return {?}\n */\nfunction addEmptyPathsToChildrenIfNeeded(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[],\n    children: {[name: string]: UrlSegmentGroup}): {[name: string]: UrlSegmentGroup} {\n  const /** @type {?} */ res: {[name: string]: UrlSegmentGroup} = {};\n  for (const /** @type {?} */ r of routes) {\n    if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n      const /** @type {?} */ s = new UrlSegmentGroup([], {});\n      s._sourceSegment = segmentGroup;\n      s._segmentIndexShift = segmentGroup.segments.length;\n      res[getOutlet(r)] = s;\n    }\n  }\n  return merge(children, res);\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} routes\n * @param {?} primarySegment\n * @return {?}\n */\nfunction createChildrenForEmptyPaths(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], routes: Route[],\n    primarySegment: UrlSegmentGroup): {[name: string]: UrlSegmentGroup} {\n  const /** @type {?} */ res: {[name: string]: UrlSegmentGroup} = {};\n  res[PRIMARY_OUTLET] = primarySegment;\n  primarySegment._sourceSegment = segmentGroup;\n  primarySegment._segmentIndexShift = consumedSegments.length;\n\n  for (const /** @type {?} */ r of routes) {\n    if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n      const /** @type {?} */ s = new UrlSegmentGroup([], {});\n      s._sourceSegment = segmentGroup;\n      s._segmentIndexShift = consumedSegments.length;\n      res[getOutlet(r)] = s;\n    }\n  }\n  return res;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathMatchesWithNamedOutlets(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes\n             .filter(\n                 r => emptyPathMatch(segmentGroup, slicedSegments, r) &&\n                     getOutlet(r) !== PRIMARY_OUTLET)\n             .length > 0;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathMatches(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes.filter(r => emptyPathMatch(segmentGroup, slicedSegments, r)).length > 0;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} r\n * @return {?}\n */\nfunction emptyPathMatch(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], r: Route): boolean {\n  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full')\n    return false;\n  return r.path === '' && r.redirectTo === undefined;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getOutlet(route: Route): string {\n  return route.outlet ? route.outlet : PRIMARY_OUTLET;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getData(route: Route): Data {\n  return route.data ? route.data : {};\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getResolve(route: Route): ResolveData {\n  return route.resolve ? route.resolve : {};\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ActivatedRoute} from './router_state';\nimport {PRIMARY_OUTLET, Params} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree} from './url_tree';\nimport {forEach, last, shallowEqual} from './utils/collection';\n/**\n * @param {?} route\n * @param {?} urlTree\n * @param {?} commands\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\nexport function createUrlTree(\n    route: ActivatedRoute, urlTree: UrlTree, commands: any[], queryParams: Params,\n    fragment: string): UrlTree {\n  if (commands.length === 0) {\n    return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);\n  }\n\n  const /** @type {?} */ nav = computeNavigation(commands);\n\n  if (nav.toRoot()) {\n    return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);\n  }\n\n  const /** @type {?} */ startingPosition = findStartingPosition(nav, urlTree, route);\n\n  const /** @type {?} */ segmentGroup = startingPosition.processChildren ?\n      updateSegmentGroupChildren(\n          startingPosition.segmentGroup, startingPosition.index, nav.commands) :\n      updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);\n  return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);\n}\n/**\n * @param {?} command\n * @return {?}\n */\nfunction isMatrixParams(command: any): boolean {\n  return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;\n}\n/**\n * @param {?} oldSegmentGroup\n * @param {?} newSegmentGroup\n * @param {?} urlTree\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\nfunction tree(\n    oldSegmentGroup: UrlSegmentGroup, newSegmentGroup: UrlSegmentGroup, urlTree: UrlTree,\n    queryParams: Params, fragment: string): UrlTree {\n  let /** @type {?} */ qp: any = {};\n  if (queryParams) {\n    forEach(queryParams, (value: any, name: any) => {\n      qp[name] = Array.isArray(value) ? value.map((v: any) => `${v}`) : `${value}`;\n    });\n  }\n\n  if (urlTree.root === oldSegmentGroup) {\n    return new UrlTree(newSegmentGroup, qp, fragment);\n  }\n\n  return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), qp, fragment);\n}\n/**\n * @param {?} current\n * @param {?} oldSegment\n * @param {?} newSegment\n * @return {?}\n */\nfunction replaceSegment(\n    current: UrlSegmentGroup, oldSegment: UrlSegmentGroup,\n    newSegment: UrlSegmentGroup): UrlSegmentGroup {\n  const /** @type {?} */ children: {[key: string]: UrlSegmentGroup} = {};\n  forEach(current.children, (c: UrlSegmentGroup, outletName: string) => {\n    if (c === oldSegment) {\n      children[outletName] = newSegment;\n    } else {\n      children[outletName] = replaceSegment(c, oldSegment, newSegment);\n    }\n  });\n  return new UrlSegmentGroup(current.segments, children);\n}\nclass Navigation {\n/**\n * @param {?} isAbsolute\n * @param {?} numberOfDoubleDots\n * @param {?} commands\n */\nconstructor(\npublic isAbsolute: boolean,\npublic numberOfDoubleDots: number,\npublic commands: any[]) {\n    if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {\n      throw new Error('Root segment cannot have matrix parameters');\n    }\n\n    const cmdWithOutlet = commands.find(c => typeof c === 'object' && c != null && c.outlets);\n    if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {\n      throw new Error('{outlets:{}} has to be the last command');\n    }\n  }\n/**\n * @return {?}\n */\npublic toRoot(): boolean {\n    return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';\n  }\n}\n\nfunction Navigation_tsickle_Closure_declarations() {\n/** @type {?} */\nNavigation.prototype.isAbsolute;\n/** @type {?} */\nNavigation.prototype.numberOfDoubleDots;\n/** @type {?} */\nNavigation.prototype.commands;\n}\n\n/**\n * Transforms commands to a normalized `Navigation`\n * @param {?} commands\n * @return {?}\n */\nfunction computeNavigation(commands: any[]): Navigation {\n  if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {\n    return new Navigation(true, 0, commands);\n  }\n\n  let /** @type {?} */ numberOfDoubleDots = 0;\n  let /** @type {?} */ isAbsolute = false;\n\n  const /** @type {?} */ res: any[] = commands.reduce((res, cmd, cmdIdx) => {\n    if (typeof cmd === 'object' && cmd != null) {\n      if (cmd.outlets) {\n        const /** @type {?} */ outlets: {[k: string]: any} = {};\n        forEach(cmd.outlets, (commands: any, name: string) => {\n          outlets[name] = typeof commands === 'string' ? commands.split('/') : commands;\n        });\n        return [...res, {outlets}];\n      }\n\n      if (cmd.segmentPath) {\n        return [...res, cmd.segmentPath];\n      }\n    }\n\n    if (!(typeof cmd === 'string')) {\n      return [...res, cmd];\n    }\n\n    if (cmdIdx === 0) {\n      cmd.split('/').forEach((urlPart, partIndex) => {\n        if (partIndex == 0 && urlPart === '.') {\n          // skip './a'\n        } else if (partIndex == 0 && urlPart === '') {  //  '/a'\n          isAbsolute = true;\n        } else if (urlPart === '..') {  //  '../a'\n          numberOfDoubleDots++;\n        } else if (urlPart != '') {\n          res.push(urlPart);\n        }\n      });\n\n      return res;\n    }\n\n    return [...res, cmd];\n  }, []);\n\n  return new Navigation(isAbsolute, numberOfDoubleDots, res);\n}\nclass Position {\n/**\n * @param {?} segmentGroup\n * @param {?} processChildren\n * @param {?} index\n */\nconstructor(\npublic segmentGroup: UrlSegmentGroup,\npublic processChildren: boolean,\npublic index: number) {\n  }\n}\n\nfunction Position_tsickle_Closure_declarations() {\n/** @type {?} */\nPosition.prototype.segmentGroup;\n/** @type {?} */\nPosition.prototype.processChildren;\n/** @type {?} */\nPosition.prototype.index;\n}\n\n/**\n * @param {?} nav\n * @param {?} tree\n * @param {?} route\n * @return {?}\n */\nfunction findStartingPosition(nav: Navigation, tree: UrlTree, route: ActivatedRoute): Position {\n  if (nav.isAbsolute) {\n    return new Position(tree.root, true, 0);\n  }\n\n  if (route.snapshot._lastPathIndex === -1) {\n    return new Position(route.snapshot._urlSegment, true, 0);\n  }\n\n  const /** @type {?} */ modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;\n  const /** @type {?} */ index = route.snapshot._lastPathIndex + modifier;\n  return createPositionApplyingDoubleDots(\n      route.snapshot._urlSegment, index, nav.numberOfDoubleDots);\n}\n/**\n * @param {?} group\n * @param {?} index\n * @param {?} numberOfDoubleDots\n * @return {?}\n */\nfunction createPositionApplyingDoubleDots(\n    group: UrlSegmentGroup, index: number, numberOfDoubleDots: number): Position {\n  let /** @type {?} */ g = group;\n  let /** @type {?} */ ci = index;\n  let /** @type {?} */ dd = numberOfDoubleDots;\n  while (dd > ci) {\n    dd -= ci;\n    g = g.parent;\n    if (!g) {\n      throw new Error('Invalid number of \\'../\\'');\n    }\n    ci = g.segments.length;\n  }\n  return new Position(g, false, ci - dd);\n}\n/**\n * @param {?} command\n * @return {?}\n */\nfunction getPath(command: any): any {\n  if (typeof command === 'object' && command != null && command.outlets) {\n    return command.outlets[PRIMARY_OUTLET];\n  }\n  return `${command}`;\n}\n/**\n * @param {?} commands\n * @return {?}\n */\nfunction getOutlets(commands: any[]): {[k: string]: any[]} {\n  if (!(typeof commands[0] === 'object')) return {[PRIMARY_OUTLET]: commands};\n  if (commands[0].outlets === undefined) return {[PRIMARY_OUTLET]: commands};\n  return commands[0].outlets;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction updateSegmentGroup(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  if (!segmentGroup) {\n    segmentGroup = new UrlSegmentGroup([], {});\n  }\n  if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n    return updateSegmentGroupChildren(segmentGroup, startIndex, commands);\n  }\n\n  const /** @type {?} */ m = prefixedWith(segmentGroup, startIndex, commands);\n  const /** @type {?} */ slicedCommands = commands.slice(m.commandIndex);\n  if (m.match && m.pathIndex < segmentGroup.segments.length) {\n    const /** @type {?} */ g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});\n    g.children[PRIMARY_OUTLET] =\n        new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);\n    return updateSegmentGroupChildren(g, 0, slicedCommands);\n  } else if (m.match && slicedCommands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else if (m.match && !segmentGroup.hasChildren()) {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  } else if (m.match) {\n    return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);\n  } else {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction updateSegmentGroupChildren(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  if (commands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else {\n    const /** @type {?} */ outlets = getOutlets(commands);\n    const /** @type {?} */ children: {[key: string]: UrlSegmentGroup} = {};\n\n    forEach(outlets, (commands: any, outlet: string) => {\n      if (commands !== null) {\n        children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);\n      }\n    });\n\n    forEach(segmentGroup.children, (child: UrlSegmentGroup, childOutlet: string) => {\n      if (outlets[childOutlet] === undefined) {\n        children[childOutlet] = child;\n      }\n    });\n    return new UrlSegmentGroup(segmentGroup.segments, children);\n  }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction prefixedWith(segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]) {\n  let /** @type {?} */ currentCommandIndex = 0;\n  let /** @type {?} */ currentPathIndex = startIndex;\n\n  const /** @type {?} */ noMatch = {match: false, pathIndex: 0, commandIndex: 0};\n  while (currentPathIndex < segmentGroup.segments.length) {\n    if (currentCommandIndex >= commands.length) return noMatch;\n    const /** @type {?} */ path = segmentGroup.segments[currentPathIndex];\n    const /** @type {?} */ curr = getPath(commands[currentCommandIndex]);\n    const /** @type {?} */ next =\n        currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\n\n    if (currentPathIndex > 0 && curr === undefined) break;\n\n    if (curr && next && (typeof next === 'object') && next.outlets === undefined) {\n      if (!compare(curr, next, path)) return noMatch;\n      currentCommandIndex += 2;\n    } else {\n      if (!compare(curr, {}, path)) return noMatch;\n      currentCommandIndex++;\n    }\n    currentPathIndex++;\n  }\n\n  return {match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex};\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction createNewSegmentGroup(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  const /** @type {?} */ paths = segmentGroup.segments.slice(0, startIndex);\n\n  let /** @type {?} */ i = 0;\n  while (i < commands.length) {\n    if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {\n      const /** @type {?} */ children = createNewSegmentChildren(commands[i].outlets);\n      return new UrlSegmentGroup(paths, children);\n    }\n\n    // if we start with an object literal, we need to reuse the path part from the segment\n    if (i === 0 && isMatrixParams(commands[0])) {\n      const /** @type {?} */ p = segmentGroup.segments[startIndex];\n      paths.push(new UrlSegment(p.path, commands[0]));\n      i++;\n      continue;\n    }\n\n    const /** @type {?} */ curr = getPath(commands[i]);\n    const /** @type {?} */ next = (i < commands.length - 1) ? commands[i + 1] : null;\n    if (curr && next && isMatrixParams(next)) {\n      paths.push(new UrlSegment(curr, stringify(next)));\n      i += 2;\n    } else {\n      paths.push(new UrlSegment(curr, {}));\n      i++;\n    }\n  }\n  return new UrlSegmentGroup(paths, {});\n}\n/**\n * @param {?} outlets\n * @return {?}\n */\nfunction createNewSegmentChildren(outlets: {[name: string]: any}): any {\n  const /** @type {?} */ children: {[key: string]: UrlSegmentGroup} = {};\n  forEach(outlets, (commands: any, outlet: string) => {\n    if (commands !== null) {\n      children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);\n    }\n  });\n  return children;\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction stringify(params: {[key: string]: any}): {[key: string]: string} {\n  const /** @type {?} */ res: {[key: string]: string} = {};\n  forEach(params, (v: any, k: string) => res[k] = `${v}`);\n  return res;\n}\n/**\n * @param {?} path\n * @param {?} params\n * @param {?} segment\n * @return {?}\n */\nfunction compare(path: string, params: {[key: string]: any}, segment: UrlSegment): boolean {\n  return path == segment.path && shallowEqual(params, segment.parameters);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\n\nimport {DetachedRouteHandleInternal, RouteReuseStrategy} from './route_reuse_strategy';\nimport {ActivatedRoute, ActivatedRouteSnapshot, RouterState, RouterStateSnapshot} from './router_state';\nimport {TreeNode} from './utils/tree';\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?} prevState\n * @return {?}\n */\nexport function createRouterState(\n    routeReuseStrategy: RouteReuseStrategy, curr: RouterStateSnapshot,\n    prevState: RouterState): RouterState {\n  const /** @type {?} */ root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);\n  return new RouterState(root, curr);\n}\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?=} prevState\n * @return {?}\n */\nfunction createNode(\n    routeReuseStrategy: RouteReuseStrategy, curr: TreeNode<ActivatedRouteSnapshot>,\n    prevState?: TreeNode<ActivatedRoute>): TreeNode<ActivatedRoute> {\n  // reuse an activated route that is currently displayed on the screen\n  if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {\n    const /** @type {?} */ value = prevState.value;\n    value._futureSnapshot = curr.value;\n    const /** @type {?} */ children = createOrReuseChildren(routeReuseStrategy, curr, prevState);\n    return new TreeNode<ActivatedRoute>(value, children);\n\n    // retrieve an activated route that is used to be displayed, but is not currently displayed\n  } else if (routeReuseStrategy.retrieve(curr.value)) {\n    const /** @type {?} */ tree: TreeNode<ActivatedRoute> =\n        ( /** @type {?} */((<DetachedRouteHandleInternal>routeReuseStrategy.retrieve(curr.value)))).route;\n    setFutureSnapshotsOfActivatedRoutes(curr, tree);\n    return tree;\n\n  } else {\n    const /** @type {?} */ value = createActivatedRoute(curr.value);\n    const /** @type {?} */ children = curr.children.map(c => createNode(routeReuseStrategy, c));\n    return new TreeNode<ActivatedRoute>(value, children);\n  }\n}\n/**\n * @param {?} curr\n * @param {?} result\n * @return {?}\n */\nfunction setFutureSnapshotsOfActivatedRoutes(\n    curr: TreeNode<ActivatedRouteSnapshot>, result: TreeNode<ActivatedRoute>): void {\n  if (curr.value.routeConfig !== result.value.routeConfig) {\n    throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');\n  }\n  if (curr.children.length !== result.children.length) {\n    throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');\n  }\n  result.value._futureSnapshot = curr.value;\n  for (let /** @type {?} */ i = 0; i < curr.children.length; ++i) {\n    setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);\n  }\n}\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?} prevState\n * @return {?}\n */\nfunction createOrReuseChildren(\n    routeReuseStrategy: RouteReuseStrategy, curr: TreeNode<ActivatedRouteSnapshot>,\n    prevState: TreeNode<ActivatedRoute>) {\n  return curr.children.map(child => {\n    for (const /** @type {?} */ p of prevState.children) {\n      if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) {\n        return createNode(routeReuseStrategy, child, p);\n      }\n    }\n    return createNode(routeReuseStrategy, child);\n  });\n}\n/**\n * @param {?} c\n * @return {?}\n */\nfunction createActivatedRoute(c: ActivatedRouteSnapshot) {\n  return new ActivatedRoute(\n      new BehaviorSubject(c.url), new BehaviorSubject(c.params), new BehaviorSubject(c.queryParams),\n      new BehaviorSubject(c.fragment), new BehaviorSubject(c.data), c.outlet, c.component, c);\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Type} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\n\nimport {Data, ResolveData, Route} from './config';\nimport {PRIMARY_OUTLET, Params} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree, equalSegments} from './url_tree';\nimport {merge, shallowEqual, shallowEqualArrays} from './utils/collection';\nimport {Tree, TreeNode} from './utils/tree';\n/**\n * \\@whatItDoes Represents the state of the router.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'template.html'}) \n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n * \n * \\@description \n * RouterState is a tree of activated routes. Every node in this tree knows about the \"consumed\" URL\n * segments,\n * the extracted parameters, and the resolved data.\n * \n * See {\\@link ActivatedRoute} for more information.\n * \n * \\@stable\n */\nexport class RouterState extends Tree<ActivatedRoute> {\n/**\n * \\@internal\n * @param {?} root\n * @param {?} snapshot\n */\nconstructor(\n      root: TreeNode<ActivatedRoute>,\npublic snapshot: RouterStateSnapshot) {\n    super(root);\n    setRouterStateSnapshot<RouterState, ActivatedRoute>(this, root);\n  }\n/**\n * @return {?}\n */\ntoString(): string { return this.snapshot.toString(); }\n}\n\nfunction RouterState_tsickle_Closure_declarations() {\n/**\n * The current snapshot of the router state\n * @type {?}\n */\nRouterState.prototype.snapshot;\n}\n\n/**\n * @param {?} urlTree\n * @param {?} rootComponent\n * @return {?}\n */\nexport function createEmptyState(urlTree: UrlTree, rootComponent: Type<any>): RouterState {\n  const /** @type {?} */ snapshot = createEmptyStateSnapshot(urlTree, rootComponent);\n  const /** @type {?} */ emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);\n  const /** @type {?} */ emptyParams = new BehaviorSubject({});\n  const /** @type {?} */ emptyData = new BehaviorSubject({});\n  const /** @type {?} */ emptyQueryParams = new BehaviorSubject({});\n  const /** @type {?} */ fragment = new BehaviorSubject('');\n  const /** @type {?} */ activated = new ActivatedRoute(\n      emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent,\n      snapshot.root);\n  activated.snapshot = snapshot.root;\n  return new RouterState(new TreeNode<ActivatedRoute>(activated, []), snapshot);\n}\n/**\n * @param {?} urlTree\n * @param {?} rootComponent\n * @return {?}\n */\nexport function createEmptyStateSnapshot(\n    urlTree: UrlTree, rootComponent: Type<any>): RouterStateSnapshot {\n  const /** @type {?} */ emptyParams = {};\n  const /** @type {?} */ emptyData = {};\n  const /** @type {?} */ emptyQueryParams = {};\n  const /** @type {?} */ fragment = '';\n  const /** @type {?} */ activated = new ActivatedRouteSnapshot(\n      [], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null,\n      urlTree.root, -1, {});\n  return new RouterStateSnapshot('', new TreeNode<ActivatedRouteSnapshot>(activated, []));\n}\n/**\n * \\@whatItDoes Contains the information about a route associated with a component loaded in an\n * outlet.\n * An `ActivatedRoute` can also be used to traverse the router state tree.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({...}) \n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: Observable<string> = route.params.map(p => p.id);\n *     const url: Observable<string> = route.url.map(segments => segments.join(''));\n *     // route.data includes both `data` and `resolve`\n *     const user = route.data.map(d => d.user);\n *   }\n * }\n * ```\n * \n * \\@stable\n */\nexport class ActivatedRoute {\n  /** The current snapshot of this route */\n  snapshot: ActivatedRouteSnapshot;\n/**\n * \\@internal\n */\n_futureSnapshot: ActivatedRouteSnapshot;\n/**\n * \\@internal\n */\n_routerState: RouterState;\n/**\n * \\@internal\n * @param {?} url\n * @param {?} params\n * @param {?} queryParams\n * @param {?} fragment\n * @param {?} data\n * @param {?} outlet\n * @param {?} component\n * @param {?} futureSnapshot\n */\nconstructor(\npublic url: Observable<UrlSegment[]>,\npublic params: Observable<Params>,\npublic queryParams: Observable<Params>,\npublic fragment: Observable<string>,\npublic data: Observable<Data>,\npublic outlet: string,\npublic component: Type<any>|string, futureSnapshot: ActivatedRouteSnapshot) {\n    this._futureSnapshot = futureSnapshot;\n  }\n/**\n * The configuration used to match this route\n * @return {?}\n */\nget routeConfig(): Route { return this._futureSnapshot.routeConfig; }\n/**\n * The root of the router state\n * @return {?}\n */\nget root(): ActivatedRoute { return this._routerState.root; }\n/**\n * The parent of this route in the router state tree\n * @return {?}\n */\nget parent(): ActivatedRoute { return this._routerState.parent(this); }\n/**\n * The first child of this route in the router state tree\n * @return {?}\n */\nget firstChild(): ActivatedRoute { return this._routerState.firstChild(this); }\n/**\n * The children of this route in the router state tree\n * @return {?}\n */\nget children(): ActivatedRoute[] { return this._routerState.children(this); }\n/**\n * The path from the root of the router state tree to this route\n * @return {?}\n */\nget pathFromRoot(): ActivatedRoute[] { return this._routerState.pathFromRoot(this); }\n/**\n * @return {?}\n */\ntoString(): string {\n    return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;\n  }\n}\n\nfunction ActivatedRoute_tsickle_Closure_declarations() {\n/**\n * The current snapshot of this route\n * @type {?}\n */\nActivatedRoute.prototype.snapshot;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRoute.prototype._futureSnapshot;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRoute.prototype._routerState;\n/**\n * An observable of the URL segments matched by this route\n * @type {?}\n */\nActivatedRoute.prototype.url;\n/**\n * An observable of the matrix parameters scoped to this route\n * @type {?}\n */\nActivatedRoute.prototype.params;\n/**\n * An observable of the query parameters shared by all the routes\n * @type {?}\n */\nActivatedRoute.prototype.queryParams;\n/**\n * An observable of the URL fragment shared by all the routes\n * @type {?}\n */\nActivatedRoute.prototype.fragment;\n/**\n * An observable of the static and resolved data of this route.\n * @type {?}\n */\nActivatedRoute.prototype.data;\n/**\n * The outlet name of the route. It's a constant\n * @type {?}\n */\nActivatedRoute.prototype.outlet;\n/** @type {?} */\nActivatedRoute.prototype.component;\n}\n\n\n/** @internal */\nexport type Inherited = {\n  params: Params,\n  data: Data,\n  resolve: Data,\n};\n/**\n * \\@internal\n * @param {?} route\n * @return {?}\n */\nexport function inheritedParamsDataResolve(route: ActivatedRouteSnapshot): Inherited {\n  const /** @type {?} */ pathToRoot = route.pathFromRoot;\n\n  let /** @type {?} */ inhertingStartingFrom = pathToRoot.length - 1;\n\n  while (inhertingStartingFrom >= 1) {\n    const /** @type {?} */ current = pathToRoot[inhertingStartingFrom];\n    const /** @type {?} */ parent = pathToRoot[inhertingStartingFrom - 1];\n    // current route is an empty path => inherits its parent's params and data\n    if (current.routeConfig && current.routeConfig.path === '') {\n      inhertingStartingFrom--;\n\n      // parent is componentless => current route should inherit its params and data\n    } else if (!parent.component) {\n      inhertingStartingFrom--;\n\n    } else {\n      break;\n    }\n  }\n\n  return pathToRoot.slice(inhertingStartingFrom).reduce((res, curr) => {\n    const /** @type {?} */ params = merge(res.params, curr.params);\n    const /** @type {?} */ data = merge(res.data, curr.data);\n    const /** @type {?} */ resolve = merge(res.resolve, curr._resolvedData);\n    return {params, data, resolve};\n  }, /** @type {?} */(( <any>{params: {}, data: {}, resolve: {}})));\n}\n/**\n * \\@whatItDoes Contains the information about a route associated with a component loaded in an\n * outlet\n * at a particular moment in time. ActivatedRouteSnapshot can also be used to traverse the router\n * state tree.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'./my-component.html'}) \n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n * \n * \\@stable\n */\nexport class ActivatedRouteSnapshot {\n/**\n * \\@internal *\n */\n_routeConfig: Route;\n/**\n * \\@internal *\n */\n_urlSegment: UrlSegmentGroup;\n/**\n * \\@internal\n */\n_lastPathIndex: number;\n/**\n * \\@internal\n */\n_resolve: ResolveData;\n/**\n * \\@internal\n */\n_resolvedData: Data;\n/**\n * \\@internal\n */\n_routerState: RouterStateSnapshot;\n/**\n * \\@internal\n * @param {?} url\n * @param {?} params\n * @param {?} queryParams\n * @param {?} fragment\n * @param {?} data\n * @param {?} outlet\n * @param {?} component\n * @param {?} routeConfig\n * @param {?} urlSegment\n * @param {?} lastPathIndex\n * @param {?} resolve\n */\nconstructor(\npublic url: UrlSegment[],\npublic params: Params,\npublic queryParams: Params,\npublic fragment: string,\npublic data: Data,\npublic outlet: string,\npublic component: Type<any>|string, routeConfig: Route, urlSegment: UrlSegmentGroup,\n      lastPathIndex: number, resolve: ResolveData) {\n    this._routeConfig = routeConfig;\n    this._urlSegment = urlSegment;\n    this._lastPathIndex = lastPathIndex;\n    this._resolve = resolve;\n  }\n/**\n * The configuration used to match this route\n * @return {?}\n */\nget routeConfig(): Route { return this._routeConfig; }\n/**\n * The root of the router state\n * @return {?}\n */\nget root(): ActivatedRouteSnapshot { return this._routerState.root; }\n/**\n * The parent of this route in the router state tree\n * @return {?}\n */\nget parent(): ActivatedRouteSnapshot { return this._routerState.parent(this); }\n/**\n * The first child of this route in the router state tree\n * @return {?}\n */\nget firstChild(): ActivatedRouteSnapshot { return this._routerState.firstChild(this); }\n/**\n * The children of this route in the router state tree\n * @return {?}\n */\nget children(): ActivatedRouteSnapshot[] { return this._routerState.children(this); }\n/**\n * The path from the root of the router state tree to this route\n * @return {?}\n */\nget pathFromRoot(): ActivatedRouteSnapshot[] { return this._routerState.pathFromRoot(this); }\n/**\n * @return {?}\n */\ntoString(): string {\n    const /** @type {?} */ url = this.url.map(segment => segment.toString()).join('/');\n    const /** @type {?} */ matched = this._routeConfig ? this._routeConfig.path : '';\n    return `Route(url:'${url}', path:'${matched}')`;\n  }\n}\n\nfunction ActivatedRouteSnapshot_tsickle_Closure_declarations() {\n/**\n * \\@internal *\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._routeConfig;\n/**\n * \\@internal *\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._urlSegment;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._lastPathIndex;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._resolve;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._resolvedData;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._routerState;\n/**\n * The URL segments matched by this route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.url;\n/**\n * The matrix parameters scoped to this route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.params;\n/**\n * The query parameters shared by all the routes\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.queryParams;\n/**\n * The URL fragment shared by all the routes\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.fragment;\n/**\n * The static and resolved data of this route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.data;\n/**\n * The outlet name of the route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.outlet;\n/**\n * The component of the route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.component;\n}\n\n/**\n * \\@whatItDoes Represents the state of the router at a moment in time.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'template.html'}) \n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n * \n * \\@description \n * RouterStateSnapshot is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n * \n * \\@stable\n */\nexport class RouterStateSnapshot extends Tree<ActivatedRouteSnapshot> {\n/**\n * \\@internal\n * @param {?} url\n * @param {?} root\n */\nconstructor(\npublic url: string, root: TreeNode<ActivatedRouteSnapshot>) {\n    super(root);\n    setRouterStateSnapshot<RouterStateSnapshot, ActivatedRouteSnapshot>(this, root);\n  }\n/**\n * @return {?}\n */\ntoString(): string { return serializeNode(this._root); }\n}\n\nfunction RouterStateSnapshot_tsickle_Closure_declarations() {\n/**\n * The url from which this snapshot was created\n * @type {?}\n */\nRouterStateSnapshot.prototype.url;\n}\n\n/**\n * @template U, T\n * @param {?} state\n * @param {?} node\n * @return {?}\n */\nfunction setRouterStateSnapshot<U, T extends{_routerState: U}>(state: U, node: TreeNode<T>): void {\n  node.value._routerState = state;\n  node.children.forEach(c => setRouterStateSnapshot(state, c));\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction serializeNode(node: TreeNode<ActivatedRouteSnapshot>): string {\n  const /** @type {?} */ c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(\", \")} } ` : '';\n  return `${node.value}${c}`;\n}\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n * @param {?} route\n * @return {?}\n */\nexport function advanceActivatedRoute(route: ActivatedRoute): void {\n  if (route.snapshot) {\n    const /** @type {?} */ currentSnapshot = route.snapshot;\n    route.snapshot = route._futureSnapshot;\n    if (!shallowEqual(currentSnapshot.queryParams, route._futureSnapshot.queryParams)) {\n      ( /** @type {?} */((<any>route.queryParams))).next(route._futureSnapshot.queryParams);\n    }\n    if (currentSnapshot.fragment !== route._futureSnapshot.fragment) {\n      ( /** @type {?} */((<any>route.fragment))).next(route._futureSnapshot.fragment);\n    }\n    if (!shallowEqual(currentSnapshot.params, route._futureSnapshot.params)) {\n      ( /** @type {?} */((<any>route.params))).next(route._futureSnapshot.params);\n    }\n    if (!shallowEqualArrays(currentSnapshot.url, route._futureSnapshot.url)) {\n      ( /** @type {?} */((<any>route.url))).next(route._futureSnapshot.url);\n    }\n    if (!equalParamsAndUrlSegments(currentSnapshot, route._futureSnapshot)) {\n      ( /** @type {?} */((<any>route.data))).next(route._futureSnapshot.data);\n    }\n  } else {\n    route.snapshot = route._futureSnapshot;\n\n    // this is for resolved data\n    ( /** @type {?} */((<any>route.data))).next(route._futureSnapshot.data);\n  }\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function equalParamsAndUrlSegments(\n    a: ActivatedRouteSnapshot, b: ActivatedRouteSnapshot): boolean {\n  const /** @type {?} */ equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n  const /** @type {?} */ parentsMismatch = !a.parent !== !b.parent;\n\n  return equalUrlParams && !parentsMismatch &&\n      (!a.parent || equalParamsAndUrlSegments(a.parent, b.parent));\n}","\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport class Tree<T> {\n/**\n * \\@internal\n */\n_root: TreeNode<T>;\n/**\n * @param {?} root\n */\nconstructor(root: TreeNode<T>) { this._root = root; }\n/**\n * @return {?}\n */\nget root(): T { return this._root.value; }\n/**\n * \\@internal\n * @param {?} t\n * @return {?}\n */\nparent(t: T): T {\n    const /** @type {?} */ p = this.pathFromRoot(t);\n    return p.length > 1 ? p[p.length - 2] : null;\n  }\n/**\n * \\@internal\n * @param {?} t\n * @return {?}\n */\nchildren(t: T): T[] {\n    const /** @type {?} */ n = findNode(t, this._root);\n    return n ? n.children.map(t => t.value) : [];\n  }\n/**\n * \\@internal\n * @param {?} t\n * @return {?}\n */\nfirstChild(t: T): T {\n    const /** @type {?} */ n = findNode(t, this._root);\n    return n && n.children.length > 0 ? n.children[0].value : null;\n  }\n/**\n * \\@internal\n * @param {?} t\n * @return {?}\n */\nsiblings(t: T): T[] {\n    const /** @type {?} */ p = findPath(t, this._root, []);\n    if (p.length < 2) return [];\n\n    const /** @type {?} */ c = p[p.length - 2].children.map(c => c.value);\n    return c.filter(cc => cc !== t);\n  }\n/**\n * \\@internal\n * @param {?} t\n * @return {?}\n */\npathFromRoot(t: T): T[] { return findPath(t, this._root, []).map(s => s.value); }\n}\n\nfunction Tree_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nTree.prototype._root;\n}\n\n/**\n * @template T\n * @param {?} expected\n * @param {?} c\n * @return {?}\n */\nfunction findNode<T>(expected: T, c: TreeNode<T>): TreeNode<T> {\n  if (expected === c.value) return c;\n  for (const /** @type {?} */ cc of c.children) {\n    const /** @type {?} */ r = findNode(expected, cc);\n    if (r) return r;\n  }\n  return null;\n}\n/**\n * @template T\n * @param {?} expected\n * @param {?} c\n * @param {?} collected\n * @return {?}\n */\nfunction findPath<T>(expected: T, c: TreeNode<T>, collected: TreeNode<T>[]): TreeNode<T>[] {\n  collected.push(c);\n  if (expected === c.value) return collected;\n\n  for (const /** @type {?} */ cc of c.children) {\n    const /** @type {?} */ cloned = collected.slice(0);\n    const /** @type {?} */ r = findPath(expected, cc, cloned);\n    if (r.length > 0) return r;\n  }\n\n  return [];\n}\nexport class TreeNode<T> {\n/**\n * @param {?} value\n * @param {?} children\n */\nconstructor(public value: T,\npublic children: TreeNode<T>[]) {}\n/**\n * @return {?}\n */\ntoString(): string { return `TreeNode(${this.value})`; }\n}\n\nfunction TreeNode_tsickle_Closure_declarations() {\n/** @type {?} */\nTreeNode.prototype.value;\n/** @type {?} */\nTreeNode.prototype.children;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModuleFactory, Type} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\n\nimport {ActivatedRouteSnapshot, RouterStateSnapshot} from './router_state';\nimport {PRIMARY_OUTLET} from './shared';\nimport {UrlSegment, UrlSegmentGroup} from './url_tree';\n\n\n/**\n * @whatItDoes Represents router configuration.\n *\n * @description\n * `Routes` is an array of route configurations. Each one has the following properties:\n *\n * - `path` is a string that uses the route matcher DSL.\n * - `pathMatch` is a string that specifies the matching strategy.\n * - `matcher` defines a custom strategy for path matching and supersedes `path` and `pathMatch`.\n *   See {@link UrlMatcher} for more info.\n * - `component` is a component type.\n * - `redirectTo` is the url fragment which will replace the current matched segment.\n * - `outlet` is the name of the outlet the component should be placed into.\n * - `canActivate` is an array of DI tokens used to look up CanActivate handlers. See\n *   {@link CanActivate} for more info.\n * - `canActivateChild` is an array of DI tokens used to look up CanActivateChild handlers. See\n *   {@link CanActivateChild} for more info.\n * - `canDeactivate` is an array of DI tokens used to look up CanDeactivate handlers. See\n *   {@link CanDeactivate} for more info.\n * - `canLoad` is an array of DI tokens used to look up CanDeactivate handlers. See\n *   {@link CanLoad} for more info.\n * - `data` is additional data provided to the component via `ActivatedRoute`.\n * - `resolve` is a map of DI tokens used to look up data resolvers. See {@link Resolve} for more\n *   info.\n * - `runGuardsAndResolvers` defines when guards and resovlers will be run. By default they run only\n *    when the matrix parameters of the route change. When set to `paramsOrQueryParamsChange` they\n *    will also run when query params change. And when set to `always`, they will run every time.\n * - `children` is an array of child route definitions.\n * - `loadChildren` is a reference to lazy loaded child routes. See {@link LoadChildren} for more\n *   info.\n *\n * ### Simple Configuration\n *\n * ```\n * [{\n *   path: 'team/:id',\n  *  component: Team,\n *   children: [{\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * When navigating to `/team/11/user/bob`, the router will create the team component with the user\n * component in it.\n *\n * ### Multiple Outlets\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team\n * }, {\n *   path: 'chat/:user',\n *   component: Chat\n *   outlet: 'aux'\n * }]\n * ```\n *\n * When navigating to `/team/11(aux:chat/jim)`, the router will create the team component next to\n * the chat component. The chat component will be placed into the aux outlet.\n *\n * ### Wild Cards\n *\n * ```\n * [{\n *   path: '**',\n *   component: Sink\n * }]\n * ```\n *\n * Regardless of where you navigate to, the router will instantiate the sink component.\n *\n * ### Redirects\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: 'legacy/user/:name',\n *     redirectTo: 'user/:name'\n *   }, {\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * When navigating to '/team/11/legacy/user/jim', the router will change the url to\n * '/team/11/user/jim', and then will instantiate the team component with the user component\n * in it.\n *\n * If the `redirectTo` value starts with a '/', then it is an absolute redirect. E.g., if in the\n * example above we change the `redirectTo` to `/user/:name`, the result url will be '/user/jim'.\n *\n * ### Empty Path\n *\n * Empty-path route configurations can be used to instantiate components that do not 'consume'\n * any url segments. Let's look at the following configuration:\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: '',\n *     component: AllUsers\n *   }, {\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * When navigating to `/team/11`, the router will instantiate the AllUsers component.\n *\n * Empty-path routes can have children.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: '',\n *     component: WrapperCmp,\n *     children: [{\n *       path: 'user/:name',\n *       component: User\n *     }]\n *   }]\n * }]\n * ```\n *\n * When navigating to `/team/11/user/jim`, the router will instantiate the wrapper component with\n * the user component in it.\n *\n * An empty path route inherits its parent's params and data. This is because it cannot have its\n * own params, and, as a result, it often uses its parent's params and data as its own.\n *\n * ### Matching Strategy\n *\n * By default the router will look at what is left in the url, and check if it starts with\n * the specified path (e.g., `/team/11/user` starts with `team/:id`).\n *\n * We can change the matching strategy to make sure that the path covers the whole unconsumed url,\n * which is akin to `unconsumedUrl === path` or `$` regular expressions.\n *\n * This is particularly important when redirecting empty-path routes.\n *\n * ```\n * [{\n *   path: '',\n *   pathMatch: 'prefix', //default\n *   redirectTo: 'main'\n * }, {\n *   path: 'main',\n *   component: Main\n * }]\n * ```\n *\n * Since an empty path is a prefix of any url, even when navigating to '/main', the router will\n * still apply the redirect.\n *\n * If `pathMatch: full` is provided, the router will apply the redirect if and only if navigating to\n * '/'.\n *\n * ```\n * [{\n *   path: '',\n *   pathMatch: 'full',\n *   redirectTo: 'main'\n * }, {\n *   path: 'main',\n *   component: Main\n * }]\n * ```\n *\n * ### Componentless Routes\n *\n * It is useful at times to have the ability to share parameters between sibling components.\n *\n * Say we have two components--ChildCmp and AuxCmp--that we want to put next to each other and both\n * of them require some id parameter.\n *\n * One way to do that would be to have a bogus parent component, so both the siblings can get the id\n * parameter from it. This is not ideal. Instead, you can use a componentless route.\n *\n * ```\n * [{\n *    path: 'parent/:id',\n *    children: [\n *      { path: 'a', component: MainChild },\n *      { path: 'b', component: AuxChild, outlet: 'aux' }\n *    ]\n * }]\n * ```\n *\n * So when navigating to `parent/10/(a//aux:b)`, the route will instantiate the main child and aux\n * child components next to each other. In this example, the application component\n * has to have the primary and aux outlets defined.\n *\n * The router will also merge the `params`, `data`, and `resolve` of the componentless parent into\n * the `params`, `data`, and `resolve` of the children. This is done because there is no component\n * that can inject the activated route of the componentless parent.\n *\n * This is especially useful when child components are defined as follows:\n *\n * ```\n * [{\n *    path: 'parent/:id',\n *    children: [\n *      { path: '', component: MainChild },\n *      { path: '', component: AuxChild, outlet: 'aux' }\n *    ]\n * }]\n * ```\n *\n * With this configuration in place, navigating to '/parent/10' will create the main child and aux\n * components.\n *\n * ### Lazy Loading\n *\n * Lazy loading speeds up our application load time by splitting it into multiple bundles, and\n * loading them on demand. The router is designed to make lazy loading simple and easy. Instead of\n * providing the children property, you can provide the `loadChildren` property, as follows:\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   loadChildren: 'team'\n * }]\n * ```\n *\n * The router will use registered NgModuleFactoryLoader to fetch an NgModule associated with 'team'.\n * Then it will extract the set of routes defined in that NgModule, and will transparently add\n * those routes to the main configuration.\n *\n * @stable use Routes\n */\nexport type Routes = Route[];\n\n/**\n * @whatItDoes Represents the results of the URL matching.\n *\n * * `consumed` is an array of the consumed URL segments.\n * * `posParams` is a map of positional parameters.\n *\n * @experimental\n */\nexport type UrlMatchResult = {\n  consumed: UrlSegment[]; posParams?: {[name: string]: UrlSegment};\n};\n\n/**\n * @whatItDoes A function matching URLs\n *\n * @description\n *\n * A custom URL matcher can be provided when a combination of `path` and `pathMatch` isn't\n * expressive enough.\n *\n * For instance, the following matcher matches html files.\n *\n * ```\n * function htmlFiles(url: UrlSegment[]) {\n *  return url.length === 1 && url[0].path.endsWith('.html') ? ({consumed: url}) : null;\n * }\n *\n * const routes = [{ matcher: htmlFiles, component: HtmlCmp }];\n * ```\n *\n * @experimental\n */\nexport type UrlMatcher = (segments: UrlSegment[], group: UrlSegmentGroup, route: Route) =>\n    UrlMatchResult;\n\n/**\n * @whatItDoes Represents the static data associated with a particular route.\n * See {@link Routes} for more details.\n * @stable\n */\nexport type Data = {\n  [name: string]: any\n};\n\n/**\n * @whatItDoes Represents the resolved data associated with a particular route.\n * See {@link Routes} for more details.\n * @stable\n */\nexport type ResolveData = {\n  [name: string]: any\n};\n\n/**\n * @whatItDoes The type of `loadChildren`.\n * See {@link Routes} for more details.\n * @stable\n */\nexport type LoadChildrenCallback = () =>\n    Type<any>| NgModuleFactory<any>| Promise<Type<any>>| Observable<Type<any>>;\n\n/**\n * @whatItDoes The type of `loadChildren`.\n * See {@link Routes} for more details.\n * @stable\n */\nexport type LoadChildren = string | LoadChildrenCallback;\n\n/**\n * @whatItDoes The type of `queryParamsHandling`.\n * See {@link RouterLink} for more details.\n * @stable\n */\nexport type QueryParamsHandling = 'merge' | 'preserve' | '';\n\n/**\n * @whatItDoes The type of `runGuardsAndResolvers`.\n * See {@link Routes} for more details.\n * @experimental\n */\nexport type RunGuardsAndResolvers = 'paramsChange' | 'paramsOrQueryParamsChange' | 'always';\n\n/**\n * See {@link Routes} for more details.\n * @stable\n */\nexport interface Route {\n  path?: string;\n  pathMatch?: string;\n  matcher?: UrlMatcher;\n  component?: Type<any>;\n  redirectTo?: string;\n  outlet?: string;\n  canActivate?: any[];\n  canActivateChild?: any[];\n  canDeactivate?: any[];\n  canLoad?: any[];\n  data?: Data;\n  resolve?: ResolveData;\n  children?: Routes;\n  loadChildren?: LoadChildren;\n  runGuardsAndResolvers?: RunGuardsAndResolvers;\n}\n/**\n * @param {?} config\n * @param {?=} parentPath\n * @return {?}\n */\nexport function validateConfig(config: Routes, parentPath: string = ''): void {\n  // forEach doesn't iterate undefined values\n  for (let /** @type {?} */ i = 0; i < config.length; i++) {\n    const /** @type {?} */ route: Route = config[i];\n    const /** @type {?} */ fullPath: string = getFullPath(parentPath, route);\n    validateNode(route, fullPath);\n  }\n}\n/**\n * @param {?} route\n * @param {?} fullPath\n * @return {?}\n */\nfunction validateNode(route: Route, fullPath: string): void {\n  if (!route) {\n    throw new Error(`\n      Invalid configuration of route '${fullPath}': Encountered undefined route.\n      The reason might be an extra comma.\n\n      Example:\n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    `);\n  }\n  if (Array.isArray(route)) {\n    throw new Error(`Invalid configuration of route '${fullPath}': Array cannot be specified`);\n  }\n  if (!route.component && (route.outlet && route.outlet !== PRIMARY_OUTLET)) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': a componentless route cannot have a named outlet set`);\n  }\n  if (route.redirectTo && route.children) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': redirectTo and children cannot be used together`);\n  }\n  if (route.redirectTo && route.loadChildren) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': redirectTo and loadChildren cannot be used together`);\n  }\n  if (route.children && route.loadChildren) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': children and loadChildren cannot be used together`);\n  }\n  if (route.redirectTo && route.component) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': redirectTo and component cannot be used together`);\n  }\n  if (route.path && route.matcher) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': path and matcher cannot be used together`);\n  }\n  if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}'. One of the following must be provided: component, redirectTo, children or loadChildren`);\n  }\n  if (route.path === void 0 && route.matcher === void 0) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': routes must have either a path or a matcher specified`);\n  }\n  if (typeof route.path === 'string' && route.path.charAt(0) === '/') {\n    throw new Error(`Invalid configuration of route '${fullPath}': path cannot start with a slash`);\n  }\n  if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {\n    const /** @type {?} */ exp =\n        `The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.`;\n    throw new Error(\n        `Invalid configuration of route '{path: \"${fullPath}\", redirectTo: \"${route.redirectTo}\"}': please provide 'pathMatch'. ${exp}`);\n  }\n  if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': pathMatch can only be set to 'prefix' or 'full'`);\n  }\n  if (route.children) {\n    validateConfig(route.children, fullPath);\n  }\n}\n/**\n * @param {?} parentPath\n * @param {?} currentRoute\n * @return {?}\n */\nfunction getFullPath(parentPath: string, currentRoute: Route): string {\n  if (!currentRoute) {\n    return parentPath;\n  }\n  if (!parentPath && !currentRoute.path) {\n    return '';\n  } else if (parentPath && !currentRoute.path) {\n    return `${parentPath}/`;\n  } else if (!parentPath && currentRoute.path) {\n    return currentRoute.path;\n  } else {\n    return `${parentPath}/${currentRoute.path}`;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injector, NgModuleRef} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {from} from 'rxjs/observable/from';\nimport {of } from 'rxjs/observable/of';\nimport {_catch} from 'rxjs/operator/catch';\nimport {concatAll} from 'rxjs/operator/concatAll';\nimport {first} from 'rxjs/operator/first';\nimport {map} from 'rxjs/operator/map';\nimport {mergeMap} from 'rxjs/operator/mergeMap';\nimport {EmptyError} from 'rxjs/util/EmptyError';\n\nimport {Route, Routes} from './config';\nimport {LoadedRouterConfig, RouterConfigLoader} from './router_config_loader';\nimport {PRIMARY_OUTLET, Params, defaultUrlMatcher, navigationCancelingError} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree} from './url_tree';\nimport {andObservables, forEach, merge, waitForMap, wrapIntoObservable} from './utils/collection';\nclass NoMatch {\n/**\n * @param {?=} segmentGroup\n */\nconstructor(public segmentGroup: UrlSegmentGroup = null) {}\n}\n\nfunction NoMatch_tsickle_Closure_declarations() {\n/** @type {?} */\nNoMatch.prototype.segmentGroup;\n}\n\nclass AbsoluteRedirect {\n/**\n * @param {?} urlTree\n */\nconstructor(public urlTree: UrlTree) {}\n}\n\nfunction AbsoluteRedirect_tsickle_Closure_declarations() {\n/** @type {?} */\nAbsoluteRedirect.prototype.urlTree;\n}\n\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction noMatch(segmentGroup: UrlSegmentGroup): Observable<UrlSegmentGroup> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new NoMatch(segmentGroup)));\n}\n/**\n * @param {?} newTree\n * @return {?}\n */\nfunction absoluteRedirect(newTree: UrlTree): Observable<any> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new AbsoluteRedirect(newTree)));\n}\n/**\n * @param {?} redirectTo\n * @return {?}\n */\nfunction namedOutletsRedirect(redirectTo: string): Observable<any> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new Error(\n          `Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`)));\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction canLoadFails(route: Route): Observable<LoadedRouterConfig> {\n  return new Observable<LoadedRouterConfig>(\n      (obs: Observer<LoadedRouterConfig>) => obs.error(navigationCancelingError(\n          `Cannot load children because the guard of the route \"path: '${route.path}'\" returned false`)));\n}\n/**\n * @param {?} moduleInjector\n * @param {?} configLoader\n * @param {?} urlSerializer\n * @param {?} urlTree\n * @param {?} config\n * @return {?}\n */\nexport function applyRedirects(\n    moduleInjector: Injector, configLoader: RouterConfigLoader, urlSerializer: UrlSerializer,\n    urlTree: UrlTree, config: Routes): Observable<UrlTree> {\n  return new ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();\n}\nclass ApplyRedirects {\nprivate allowRedirects: boolean = true;\nprivate ngModule: NgModuleRef<any>;\n/**\n * @param {?} moduleInjector\n * @param {?} configLoader\n * @param {?} urlSerializer\n * @param {?} urlTree\n * @param {?} config\n */\nconstructor(\n      moduleInjector: Injector,\nprivate configLoader: RouterConfigLoader,\nprivate urlSerializer: UrlSerializer,\nprivate urlTree: UrlTree,\nprivate config: Routes) {\n    this.ngModule = moduleInjector.get(NgModuleRef);\n  }\n/**\n * @return {?}\n */\napply(): Observable<UrlTree> {\n    const /** @type {?} */ expanded$ =\n        this.expandSegmentGroup(this.ngModule, this.config, this.urlTree.root, PRIMARY_OUTLET);\n    const /** @type {?} */ urlTrees$ = map.call(\n        expanded$, (rootSegmentGroup: UrlSegmentGroup) => this.createUrlTree(\n                       rootSegmentGroup, this.urlTree.queryParams, this.urlTree.fragment));\n    return _catch.call(urlTrees$, (e: any) => {\n      if (e instanceof AbsoluteRedirect) {\n        // after an absolute redirect we do not apply any more redirects!\n        this.allowRedirects = false;\n        // we need to run matching, so we can fetch all lazy-loaded modules\n        return this.match(e.urlTree);\n      }\n\n      if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      }\n\n      throw e;\n    });\n  }\n/**\n * @param {?} tree\n * @return {?}\n */\nprivate match(tree: UrlTree): Observable<UrlTree> {\n    const /** @type {?} */ expanded$ =\n        this.expandSegmentGroup(this.ngModule, this.config, tree.root, PRIMARY_OUTLET);\n    const /** @type {?} */ mapped$ = map.call(\n        expanded$, (rootSegmentGroup: UrlSegmentGroup) =>\n                       this.createUrlTree(rootSegmentGroup, tree.queryParams, tree.fragment));\n    return _catch.call(mapped$, (e: any): Observable<UrlTree> => {\n      if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      }\n\n      throw e;\n    });\n  }\n/**\n * @param {?} e\n * @return {?}\n */\nprivate noMatchError(e: NoMatch): any {\n    return new Error(`Cannot match any routes. URL Segment: '${e.segmentGroup}'`);\n  }\n/**\n * @param {?} rootCandidate\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\nprivate createUrlTree(rootCandidate: UrlSegmentGroup, queryParams: Params, fragment: string):\n      UrlTree {\n    const /** @type {?} */ root = rootCandidate.segments.length > 0 ?\n        new UrlSegmentGroup([], {[PRIMARY_OUTLET]: rootCandidate}) :\n        rootCandidate;\n    return new UrlTree(root, queryParams, fragment);\n  }\n/**\n * @param {?} ngModule\n * @param {?} routes\n * @param {?} segmentGroup\n * @param {?} outlet\n * @return {?}\n */\nprivate expandSegmentGroup(\n      ngModule: NgModuleRef<any>, routes: Route[], segmentGroup: UrlSegmentGroup,\n      outlet: string): Observable<UrlSegmentGroup> {\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n      return map.call(\n          this.expandChildren(ngModule, routes, segmentGroup),\n          (children: any) => new UrlSegmentGroup([], children));\n    }\n\n    return this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, true);\n  }\n/**\n * @param {?} ngModule\n * @param {?} routes\n * @param {?} segmentGroup\n * @return {?}\n */\nprivate expandChildren(\n      ngModule: NgModuleRef<any>, routes: Route[],\n      segmentGroup: UrlSegmentGroup): Observable<{[name: string]: UrlSegmentGroup}> {\n    return waitForMap(\n        segmentGroup.children,\n        (childOutlet, child) => this.expandSegmentGroup(ngModule, routes, child, childOutlet));\n  }\n/**\n * @param {?} ngModule\n * @param {?} segmentGroup\n * @param {?} routes\n * @param {?} segments\n * @param {?} outlet\n * @param {?} allowRedirects\n * @return {?}\n */\nprivate expandSegment(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[],\n      segments: UrlSegment[], outlet: string,\n      allowRedirects: boolean): Observable<UrlSegmentGroup> {\n    const /** @type {?} */ routes$ = of (...routes);\n    const /** @type {?} */ processedRoutes$ = map.call(routes$, (r: any) => {\n      const /** @type {?} */ expanded$ = this.expandSegmentAgainstRoute(\n          ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);\n      return _catch.call(expanded$, (e: any) => {\n        if (e instanceof NoMatch) {\n          return of (null);\n        }\n\n        throw e;\n      });\n    });\n    const /** @type {?} */ concattedProcessedRoutes$ = concatAll.call(processedRoutes$);\n    const /** @type {?} */ first$ = first.call(concattedProcessedRoutes$, (s: any) => !!s);\n    return _catch.call(first$, (e: any, _: any): Observable<UrlSegmentGroup> => {\n      if (e instanceof EmptyError) {\n        if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n          return of (new UrlSegmentGroup([], {}));\n        }\n\n        throw new NoMatch(segmentGroup);\n      }\n\n      throw e;\n    });\n  }\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\nprivate noLeftoversInUrl(segmentGroup: UrlSegmentGroup, segments: UrlSegment[], outlet: string):\n      boolean {\n    return segments.length === 0 && !segmentGroup.children[outlet];\n  }\n/**\n * @param {?} ngModule\n * @param {?} segmentGroup\n * @param {?} routes\n * @param {?} route\n * @param {?} paths\n * @param {?} outlet\n * @param {?} allowRedirects\n * @return {?}\n */\nprivate expandSegmentAgainstRoute(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      paths: UrlSegment[], outlet: string, allowRedirects: boolean): Observable<UrlSegmentGroup> {\n    if (getOutlet(route) !== outlet) {\n      return noMatch(segmentGroup);\n    }\n\n    if (route.redirectTo !== undefined && !(allowRedirects && this.allowRedirects)) {\n      return noMatch(segmentGroup);\n    }\n\n    if (route.redirectTo === undefined) {\n      return this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths);\n    }\n\n    return this.expandSegmentAgainstRouteUsingRedirect(\n        ngModule, segmentGroup, routes, route, paths, outlet);\n  }\n/**\n * @param {?} ngModule\n * @param {?} segmentGroup\n * @param {?} routes\n * @param {?} route\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\nprivate expandSegmentAgainstRouteUsingRedirect(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      segments: UrlSegment[], outlet: string): Observable<UrlSegmentGroup> {\n    if (route.path === '**') {\n      return this.expandWildCardWithParamsAgainstRouteUsingRedirect(\n          ngModule, routes, route, outlet);\n    }\n\n    return this.expandRegularSegmentAgainstRouteUsingRedirect(\n        ngModule, segmentGroup, routes, route, segments, outlet);\n  }\n/**\n * @param {?} ngModule\n * @param {?} routes\n * @param {?} route\n * @param {?} outlet\n * @return {?}\n */\nprivate expandWildCardWithParamsAgainstRouteUsingRedirect(\n      ngModule: NgModuleRef<any>, routes: Route[], route: Route,\n      outlet: string): Observable<UrlSegmentGroup> {\n    const /** @type {?} */ newTree = this.applyRedirectCommands([], route.redirectTo, {});\n    if (route.redirectTo.startsWith('/')) {\n      return absoluteRedirect(newTree);\n    }\n\n    return mergeMap.call(this.lineralizeSegments(route, newTree), (newSegments: UrlSegment[]) => {\n      const /** @type {?} */ group = new UrlSegmentGroup(newSegments, {});\n      return this.expandSegment(ngModule, group, routes, newSegments, outlet, false);\n    });\n  }\n/**\n * @param {?} ngModule\n * @param {?} segmentGroup\n * @param {?} routes\n * @param {?} route\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\nprivate expandRegularSegmentAgainstRouteUsingRedirect(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      segments: UrlSegment[], outlet: string): Observable<UrlSegmentGroup> {\n    const {matched, consumedSegments, lastChild, positionalParamSegments} =\n        match(segmentGroup, route, segments);\n    if (!matched) return noMatch(segmentGroup);\n\n    const /** @type {?} */ newTree = this.applyRedirectCommands(\n        consumedSegments, route.redirectTo, /** @type {?} */(( <any>positionalParamSegments)));\n    if (route.redirectTo.startsWith('/')) {\n      return absoluteRedirect(newTree);\n    }\n\n    return mergeMap.call(this.lineralizeSegments(route, newTree), (newSegments: UrlSegment[]) => {\n      return this.expandSegment(\n          ngModule, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet,\n          false);\n    });\n  }\n/**\n * @param {?} ngModule\n * @param {?} rawSegmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\nprivate matchSegmentAgainstRoute(\n      ngModule: NgModuleRef<any>, rawSegmentGroup: UrlSegmentGroup, route: Route,\n      segments: UrlSegment[]): Observable<UrlSegmentGroup> {\n    if (route.path === '**') {\n      if (route.loadChildren) {\n        return map.call(\n            this.configLoader.load(ngModule.injector, route), (cfg: LoadedRouterConfig) => {\n              ( /** @type {?} */((<any>route)))._loadedConfig = cfg;\n              return new UrlSegmentGroup(segments, {});\n            });\n      }\n\n      return of (new UrlSegmentGroup(segments, {}));\n    }\n\n    const {matched, consumedSegments, lastChild} = match(rawSegmentGroup, route, segments);\n    if (!matched) return noMatch(rawSegmentGroup);\n\n    const /** @type {?} */ rawSlicedSegments = segments.slice(lastChild);\n    const /** @type {?} */ childConfig$ = this.getChildConfig(ngModule, route);\n\n    return mergeMap.call(childConfig$, (routerConfig: LoadedRouterConfig) => {\n      const /** @type {?} */ childModule = routerConfig.module;\n      const /** @type {?} */ childConfig = routerConfig.routes;\n\n      const {segmentGroup, slicedSegments} =\n          split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig);\n\n      if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n        const /** @type {?} */ expanded$ = this.expandChildren(childModule, childConfig, segmentGroup);\n        return map.call(\n            expanded$, (children: any) => new UrlSegmentGroup(consumedSegments, children));\n      }\n\n      if (childConfig.length === 0 && slicedSegments.length === 0) {\n        return of (new UrlSegmentGroup(consumedSegments, {}));\n      }\n\n      const /** @type {?} */ expanded$ = this.expandSegment(\n          childModule, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);\n      return map.call(\n          expanded$, (cs: UrlSegmentGroup) =>\n                         new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children));\n    });\n  }\n/**\n * @param {?} ngModule\n * @param {?} route\n * @return {?}\n */\nprivate getChildConfig(ngModule: NgModuleRef<any>, route: Route): Observable<LoadedRouterConfig> {\n    if (route.children) {\n      // The children belong to the same module\n      return of (new LoadedRouterConfig(route.children, ngModule));\n    }\n\n    if (route.loadChildren) {\n      return mergeMap.call(runGuards(ngModule.injector, route), (shouldLoad: any) => {\n\n        if (shouldLoad) {\n          return ( /** @type {?} */((<any>route)))._loadedConfig ?\n              of (( /** @type {?} */((<any>route)))._loadedConfig) :\n              map.call(\n                  this.configLoader.load(ngModule.injector, route), (cfg: LoadedRouterConfig) => {\n                    ( /** @type {?} */((<any>route)))._loadedConfig = cfg;\n                    return cfg;\n                  });\n        }\n\n        return canLoadFails(route);\n      });\n    }\n\n    return of (new LoadedRouterConfig([], ngModule));\n  }\n/**\n * @param {?} route\n * @param {?} urlTree\n * @return {?}\n */\nprivate lineralizeSegments(route: Route, urlTree: UrlTree): Observable<UrlSegment[]> {\n    let /** @type {?} */ res: UrlSegment[] = [];\n    let /** @type {?} */ c = urlTree.root;\n    while (true) {\n      res = res.concat(c.segments);\n      if (c.numberOfChildren === 0) {\n        return of (res);\n      }\n\n      if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\n        return namedOutletsRedirect(route.redirectTo);\n      }\n\n      c = c.children[PRIMARY_OUTLET];\n    }\n  }\n/**\n * @param {?} segments\n * @param {?} redirectTo\n * @param {?} posParams\n * @return {?}\n */\nprivate applyRedirectCommands(\n      segments: UrlSegment[], redirectTo: string, posParams: {[k: string]: UrlSegment}): UrlTree {\n    return this.applyRedirectCreatreUrlTree(\n        redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);\n  }\n/**\n * @param {?} redirectTo\n * @param {?} urlTree\n * @param {?} segments\n * @param {?} posParams\n * @return {?}\n */\nprivate applyRedirectCreatreUrlTree(\n      redirectTo: string, urlTree: UrlTree, segments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlTree {\n    const /** @type {?} */ newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\n    return new UrlTree(\n        newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams),\n        urlTree.fragment);\n  }\n/**\n * @param {?} redirectToParams\n * @param {?} actualParams\n * @return {?}\n */\nprivate createQueryParams(redirectToParams: Params, actualParams: Params): Params {\n    const /** @type {?} */ res: Params = {};\n    forEach(redirectToParams, (v: any, k: string) => {\n      res[k] = v.startsWith(':') ? actualParams[v.substring(1)] : v;\n    });\n    return res;\n  }\n/**\n * @param {?} redirectTo\n * @param {?} group\n * @param {?} segments\n * @param {?} posParams\n * @return {?}\n */\nprivate createSegmentGroup(\n      redirectTo: string, group: UrlSegmentGroup, segments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlSegmentGroup {\n    const /** @type {?} */ updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\n\n    let /** @type {?} */ children: {[n: string]: UrlSegmentGroup} = {};\n    forEach(group.children, (child: UrlSegmentGroup, name: string) => {\n      children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);\n    });\n\n    return new UrlSegmentGroup(updatedSegments, children);\n  }\n/**\n * @param {?} redirectTo\n * @param {?} redirectToSegments\n * @param {?} actualSegments\n * @param {?} posParams\n * @return {?}\n */\nprivate createSegments(\n      redirectTo: string, redirectToSegments: UrlSegment[], actualSegments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlSegment[] {\n    return redirectToSegments.map(\n        s => s.path.startsWith(':') ? this.findPosParam(redirectTo, s, posParams) :\n                                      this.findOrReturn(s, actualSegments));\n  }\n/**\n * @param {?} redirectTo\n * @param {?} redirectToUrlSegment\n * @param {?} posParams\n * @return {?}\n */\nprivate findPosParam(\n      redirectTo: string, redirectToUrlSegment: UrlSegment,\n      posParams: {[k: string]: UrlSegment}): UrlSegment {\n    const /** @type {?} */ pos = posParams[redirectToUrlSegment.path.substring(1)];\n    if (!pos)\n      throw new Error(\n          `Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`);\n    return pos;\n  }\n/**\n * @param {?} redirectToUrlSegment\n * @param {?} actualSegments\n * @return {?}\n */\nprivate findOrReturn(redirectToUrlSegment: UrlSegment, actualSegments: UrlSegment[]): UrlSegment {\n    let /** @type {?} */ idx = 0;\n    for (const /** @type {?} */ s of actualSegments) {\n      if (s.path === redirectToUrlSegment.path) {\n        actualSegments.splice(idx);\n        return s;\n      }\n      idx++;\n    }\n    return redirectToUrlSegment;\n  }\n}\n\nfunction ApplyRedirects_tsickle_Closure_declarations() {\n/** @type {?} */\nApplyRedirects.prototype.allowRedirects;\n/** @type {?} */\nApplyRedirects.prototype.ngModule;\n/** @type {?} */\nApplyRedirects.prototype.configLoader;\n/** @type {?} */\nApplyRedirects.prototype.urlSerializer;\n/** @type {?} */\nApplyRedirects.prototype.urlTree;\n/** @type {?} */\nApplyRedirects.prototype.config;\n}\n\n/**\n * @param {?} moduleInjector\n * @param {?} route\n * @return {?}\n */\nfunction runGuards(moduleInjector: Injector, route: Route): Observable<boolean> {\n  const /** @type {?} */ canLoad = route.canLoad;\n  if (!canLoad || canLoad.length === 0) return of (true);\n\n  const /** @type {?} */ obs = map.call(from(canLoad), (c: any) => {\n    const /** @type {?} */ guard = moduleInjector.get(c);\n    return wrapIntoObservable(guard.canLoad ? guard.canLoad(route) : guard(route));\n  });\n\n  return andObservables(obs);\n}\n/**\n * @param {?} segmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\nfunction match(segmentGroup: UrlSegmentGroup, route: Route, segments: UrlSegment[]): {\n  matched: boolean,\n  consumedSegments: UrlSegment[],\n  lastChild: number,\n  positionalParamSegments: {[k: string]: UrlSegment}\n} {\n  const /** @type {?} */ noMatch =\n      {matched: false, consumedSegments: /** @type {?} */(( <any[]>[])), lastChild: 0, positionalParamSegments: {}};\n  if (route.path === '') {\n    if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {\n      return {matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {}};\n    }\n\n    return {matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {}};\n  }\n\n  const /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;\n  const /** @type {?} */ res = matcher(segments, segmentGroup, route);\n  if (!res) return noMatch;\n\n  return {\n    matched: true,\n    consumedSegments: res.consumed,\n    lastChild: res.consumed.length,\n    positionalParamSegments: res.posParams\n  };\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} slicedSegments\n * @param {?} config\n * @return {?}\n */\nfunction split(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], slicedSegments: UrlSegment[],\n    config: Route[]) {\n  if (slicedSegments.length > 0 &&\n      containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n    const /** @type {?} */ s = new UrlSegmentGroup(\n        consumedSegments, createChildrenForEmptySegments(\n                              config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n    return {segmentGroup: mergeTrivialChildren(s), slicedSegments: []};\n  }\n\n  if (slicedSegments.length === 0 &&\n      containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {\n    const /** @type {?} */ s = new UrlSegmentGroup(\n        segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(\n                                   segmentGroup, slicedSegments, config, segmentGroup.children));\n    return {segmentGroup: mergeTrivialChildren(s), slicedSegments};\n  }\n\n  return {segmentGroup, slicedSegments};\n}\n/**\n * @param {?} s\n * @return {?}\n */\nfunction mergeTrivialChildren(s: UrlSegmentGroup): UrlSegmentGroup {\n  if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n    const /** @type {?} */ c = s.children[PRIMARY_OUTLET];\n    return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n  }\n\n  return s;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @param {?} children\n * @return {?}\n */\nfunction addEmptySegmentsToChildrenIfNeeded(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[],\n    children: {[name: string]: UrlSegmentGroup}): {[name: string]: UrlSegmentGroup} {\n  const /** @type {?} */ res: {[name: string]: UrlSegmentGroup} = {};\n  for (const /** @type {?} */ r of routes) {\n    if (emptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n      res[getOutlet(r)] = new UrlSegmentGroup([], {});\n    }\n  }\n  return merge(children, res);\n}\n/**\n * @param {?} routes\n * @param {?} primarySegmentGroup\n * @return {?}\n */\nfunction createChildrenForEmptySegments(\n    routes: Route[], primarySegmentGroup: UrlSegmentGroup): {[name: string]: UrlSegmentGroup} {\n  const /** @type {?} */ res: {[name: string]: UrlSegmentGroup} = {};\n  res[PRIMARY_OUTLET] = primarySegmentGroup;\n  for (const /** @type {?} */ r of routes) {\n    if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n      res[getOutlet(r)] = new UrlSegmentGroup([], {});\n    }\n  }\n  return res;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathRedirectsWithNamedOutlets(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes\n             .filter(\n                 r => emptyPathRedirect(segmentGroup, slicedSegments, r) &&\n                     getOutlet(r) !== PRIMARY_OUTLET)\n             .length > 0;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathRedirects(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes.filter(r => emptyPathRedirect(segmentGroup, slicedSegments, r)).length > 0;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} r\n * @return {?}\n */\nfunction emptyPathRedirect(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], r: Route): boolean {\n  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {\n    return false;\n  }\n\n  return r.path === '' && r.redirectTo !== undefined;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getOutlet(route: Route): string {\n  return route.outlet ? route.outlet : PRIMARY_OUTLET;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PRIMARY_OUTLET} from './shared';\nimport {forEach, shallowEqual} from './utils/collection';\n/**\n * @return {?}\n */\nexport function createEmptyUrlTree() {\n  return new UrlTree(new UrlSegmentGroup([], {}), {}, null);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @param {?} exact\n * @return {?}\n */\nexport function containsTree(container: UrlTree, containee: UrlTree, exact: boolean): boolean {\n  if (exact) {\n    return equalQueryParams(container.queryParams, containee.queryParams) &&\n        equalSegmentGroups(container.root, containee.root);\n  }\n\n  return containsQueryParams(container.queryParams, containee.queryParams) &&\n      containsSegmentGroup(container.root, containee.root);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction equalQueryParams(\n    container: {[k: string]: string}, containee: {[k: string]: string}): boolean {\n  return shallowEqual(container, containee);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction equalSegmentGroups(container: UrlSegmentGroup, containee: UrlSegmentGroup): boolean {\n  if (!equalPath(container.segments, containee.segments)) return false;\n  if (container.numberOfChildren !== containee.numberOfChildren) return false;\n  for (const /** @type {?} */ c in containee.children) {\n    if (!container.children[c]) return false;\n    if (!equalSegmentGroups(container.children[c], containee.children[c])) return false;\n  }\n  return true;\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction containsQueryParams(\n    container: {[k: string]: string}, containee: {[k: string]: string}): boolean {\n  return Object.keys(containee).length <= Object.keys(container).length &&\n      Object.keys(containee).every(key => containee[key] === container[key]);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction containsSegmentGroup(container: UrlSegmentGroup, containee: UrlSegmentGroup): boolean {\n  return containsSegmentGroupHelper(container, containee, containee.segments);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @param {?} containeePaths\n * @return {?}\n */\nfunction containsSegmentGroupHelper(\n    container: UrlSegmentGroup, containee: UrlSegmentGroup, containeePaths: UrlSegment[]): boolean {\n  if (container.segments.length > containeePaths.length) {\n    const /** @type {?} */ current = container.segments.slice(0, containeePaths.length);\n    if (!equalPath(current, containeePaths)) return false;\n    if (containee.hasChildren()) return false;\n    return true;\n\n  } else if (container.segments.length === containeePaths.length) {\n    if (!equalPath(container.segments, containeePaths)) return false;\n    for (const /** @type {?} */ c in containee.children) {\n      if (!container.children[c]) return false;\n      if (!containsSegmentGroup(container.children[c], containee.children[c])) return false;\n    }\n    return true;\n\n  } else {\n    const /** @type {?} */ current = containeePaths.slice(0, container.segments.length);\n    const /** @type {?} */ next = containeePaths.slice(container.segments.length);\n    if (!equalPath(container.segments, current)) return false;\n    if (!container.children[PRIMARY_OUTLET]) return false;\n    return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);\n  }\n}\n/**\n * \\@whatItDoes Represents the parsed URL.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'template.html'}) \n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n * \n * \\@description \n * \n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n * \n * \\@stable\n */\nexport class UrlTree {\n/**\n * \\@internal\n * @param {?} root\n * @param {?} queryParams\n * @param {?} fragment\n */\nconstructor(\npublic root: UrlSegmentGroup,\npublic queryParams: {[key: string]: string},\npublic fragment: string) {}\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string { return new DefaultUrlSerializer().serialize(this); }\n}\n\nfunction UrlTree_tsickle_Closure_declarations() {\n/**\n * The root segment group of the URL tree\n * @type {?}\n */\nUrlTree.prototype.root;\n/**\n * The query params of the URL\n * @type {?}\n */\nUrlTree.prototype.queryParams;\n/**\n * The fragment of the URL\n * @type {?}\n */\nUrlTree.prototype.fragment;\n}\n\n/**\n * \\@whatItDoes Represents the parsed URL segment group.\n * \n * See {\\@link UrlTree} for more information.\n * \n * \\@stable\n */\nexport class UrlSegmentGroup {\n/**\n * \\@internal\n */\n_sourceSegment: UrlSegmentGroup;\n/**\n * \\@internal\n */\n_segmentIndexShift: number;\n  /** The parent node in the url tree */\n  parent: UrlSegmentGroup = null;\n/**\n * @param {?} segments\n * @param {?} children\n */\nconstructor(\npublic segments: UrlSegment[],\npublic children: {[key: string]: UrlSegmentGroup}) {\n    forEach(children, (v: any, k: any) => v.parent = this);\n  }\n/**\n * Wether the segment has child segments\n * @return {?}\n */\nhasChildren(): boolean { return this.numberOfChildren > 0; }\n/**\n * Number of child segments\n * @return {?}\n */\nget numberOfChildren(): number { return Object.keys(this.children).length; }\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string { return serializePaths(this); }\n}\n\nfunction UrlSegmentGroup_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nUrlSegmentGroup.prototype._sourceSegment;\n/**\n * \\@internal\n * @type {?}\n */\nUrlSegmentGroup.prototype._segmentIndexShift;\n/**\n * The parent node in the url tree\n * @type {?}\n */\nUrlSegmentGroup.prototype.parent;\n/**\n * The URL segments of this group. See {\\@link UrlSegment} for more information\n * @type {?}\n */\nUrlSegmentGroup.prototype.segments;\n/**\n * The list of children of this group\n * @type {?}\n */\nUrlSegmentGroup.prototype.children;\n}\n\n/**\n * \\@whatItDoes Represents a single URL segment.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'template.html'}) \n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n * \n * \\@description \n * \n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n * \n * \\@stable\n */\nexport class UrlSegment {\n/**\n * @param {?} path\n * @param {?} parameters\n */\nconstructor(\npublic path: string,\npublic parameters: {[name: string]: string}) {}\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string { return serializePath(this); }\n}\n\nfunction UrlSegment_tsickle_Closure_declarations() {\n/**\n * The path part of a URL segment\n * @type {?}\n */\nUrlSegment.prototype.path;\n/**\n * The matrix parameters associated with a segment\n * @type {?}\n */\nUrlSegment.prototype.parameters;\n}\n\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function equalSegments(a: UrlSegment[], b: UrlSegment[]): boolean {\n  if (a.length !== b.length) return false;\n  for (let /** @type {?} */ i = 0; i < a.length; ++i) {\n    if (a[i].path !== b[i].path) return false;\n    if (!shallowEqual(a[i].parameters, b[i].parameters)) return false;\n  }\n  return true;\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function equalPath(a: UrlSegment[], b: UrlSegment[]): boolean {\n  if (a.length !== b.length) return false;\n  for (let /** @type {?} */ i = 0; i < a.length; ++i) {\n    if (a[i].path !== b[i].path) return false;\n  }\n  return true;\n}\n/**\n * @template T\n * @param {?} segment\n * @param {?} fn\n * @return {?}\n */\nexport function mapChildrenIntoArray<T>(\n    segment: UrlSegmentGroup, fn: (v: UrlSegmentGroup, k: string) => T[]): T[] {\n  let /** @type {?} */ res: T[] = [];\n  forEach(segment.children, (child: UrlSegmentGroup, childOutlet: string) => {\n    if (childOutlet === PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  forEach(segment.children, (child: UrlSegmentGroup, childOutlet: string) => {\n    if (childOutlet !== PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  return res;\n}\n/**\n * \\@whatItDoes Serializes and deserializes a URL string into a URL tree.\n * \n * \\@description The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n * \n * See {\\@link DefaultUrlSerializer} for an example of a URL serializer.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class UrlSerializer {\n/**\n * Parse a url into a {\\@link UrlTree}\n * @abstract\n * @param {?} url\n * @return {?}\n */\nparse(url: string) {}\n/**\n * Converts a {\\@link UrlTree} into a url\n * @abstract\n * @param {?} tree\n * @return {?}\n */\nserialize(tree: UrlTree) {}\n}\n/**\n * \\@whatItDoes A default implementation of the {\\@link UrlSerializer}.\n * \n * \\@description \n * \n * Example URLs:\n * \n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n * \n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n * \n * \\@stable\n */\nexport class DefaultUrlSerializer implements UrlSerializer {\n/**\n * Parses a url into a {\\@link UrlTree}\n * @param {?} url\n * @return {?}\n */\nparse(url: string): UrlTree {\n    const /** @type {?} */ p = new UrlParser(url);\n    return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\n  }\n/**\n * Converts a {\\@link UrlTree} into a url\n * @param {?} tree\n * @return {?}\n */\nserialize(tree: UrlTree): string {\n    const /** @type {?} */ segment = `/${serializeSegment(tree.root, true)}`;\n    const /** @type {?} */ query = serializeQueryParams(tree.queryParams);\n    const /** @type {?} */ fragment =\n        tree.fragment !== null && tree.fragment !== undefined ? `#${encodeURI(tree.fragment)}` : '';\n    return `${segment}${query}${fragment}`;\n  }\n}\n/**\n * @param {?} segment\n * @return {?}\n */\nexport function serializePaths(segment: UrlSegmentGroup): string {\n  return segment.segments.map(p => serializePath(p)).join('/');\n}\n/**\n * @param {?} segment\n * @param {?} root\n * @return {?}\n */\nfunction serializeSegment(segment: UrlSegmentGroup, root: boolean): string {\n  if (segment.hasChildren() && root) {\n    const /** @type {?} */ primary = segment.children[PRIMARY_OUTLET] ?\n        serializeSegment(segment.children[PRIMARY_OUTLET], false) :\n        '';\n    const /** @type {?} */ children: string[] = [];\n    forEach(segment.children, (v: UrlSegmentGroup, k: string) => {\n      if (k !== PRIMARY_OUTLET) {\n        children.push(`${k}:${serializeSegment(v, false)}`);\n      }\n    });\n    if (children.length > 0) {\n      return `${primary}(${children.join('//')})`;\n    } else {\n      return `${primary}`;\n    }\n\n  } else if (segment.hasChildren() && !root) {\n    const /** @type {?} */ children = mapChildrenIntoArray(segment, (v: UrlSegmentGroup, k: string) => {\n      if (k === PRIMARY_OUTLET) {\n        return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];\n      } else {\n        return [`${k}:${serializeSegment(v, false)}`];\n      }\n    });\n    return `${serializePaths(segment)}/(${children.join('//')})`;\n\n  } else {\n    return serializePaths(segment);\n  }\n}\n/**\n * @param {?} s\n * @return {?}\n */\nexport function encode(s: string): string {\n  return encodeURIComponent(s);\n}\n/**\n * @param {?} s\n * @return {?}\n */\nexport function decode(s: string): string {\n  return decodeURIComponent(s);\n}\n/**\n * @param {?} path\n * @return {?}\n */\nexport function serializePath(path: UrlSegment): string {\n  return `${encode(path.path)}${serializeParams(path.parameters)}`;\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction serializeParams(params: {[key: string]: string}): string {\n  return pairs(params).map(p => `;${encode(p.first)}=${encode(p.second)}`).join('');\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction serializeQueryParams(params: {[key: string]: any}): string {\n  const /** @type {?} */ strParams: string[] = Object.keys(params).map((name) => {\n    const /** @type {?} */ value = params[name];\n    return Array.isArray(value) ? value.map(v => `${encode(name)}=${encode(v)}`).join('&') :\n                                  `${encode(name)}=${encode(value)}`;\n  });\n\n  return strParams.length ? `?${strParams.join(\"&\")}` : '';\n}\nclass Pair<A, B> {\n/**\n * @param {?} first\n * @param {?} second\n */\nconstructor(public first: A,\npublic second: B) {}\n}\n\nfunction Pair_tsickle_Closure_declarations() {\n/** @type {?} */\nPair.prototype.first;\n/** @type {?} */\nPair.prototype.second;\n}\n\n/**\n * @template T\n * @param {?} obj\n * @return {?}\n */\nfunction pairs<T>(obj: {[key: string]: T}): Pair<string, T>[] {\n  const /** @type {?} */ res: Pair<string, T>[] = [];\n  for (const /** @type {?} */ prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      res.push(new Pair<string, T>(prop, obj[prop]));\n    }\n  }\n  return res;\n}\n\nconst /** @type {?} */ SEGMENT_RE = /^[^\\/()?;=&#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchSegments(str: string): string {\n  SEGMENT_RE.lastIndex = 0;\n  const /** @type {?} */ match = str.match(SEGMENT_RE);\n  return match ? match[0] : '';\n}\n\nconst /** @type {?} */ QUERY_PARAM_RE = /^[^=?&#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchQueryParams(str: string): string {\n  QUERY_PARAM_RE.lastIndex = 0;\n  const /** @type {?} */ match = str.match(SEGMENT_RE);\n  return match ? match[0] : '';\n}\n\nconst /** @type {?} */ QUERY_PARAM_VALUE_RE = /^[^?&#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchUrlQueryParamValue(str: string): string {\n  QUERY_PARAM_VALUE_RE.lastIndex = 0;\n  const /** @type {?} */ match = str.match(QUERY_PARAM_VALUE_RE);\n  return match ? match[0] : '';\n}\nclass UrlParser {\nprivate remaining: string;\n/**\n * @param {?} url\n */\nconstructor(private url: string) { this.remaining = url; }\n/**\n * @param {?} str\n * @return {?}\n */\npeekStartsWith(str: string): boolean { return this.remaining.startsWith(str); }\n/**\n * @param {?} str\n * @return {?}\n */\ncapture(str: string): void {\n    if (!this.remaining.startsWith(str)) {\n      throw new Error(`Expected \"${str}\".`);\n    }\n    this.remaining = this.remaining.substring(str.length);\n  }\n/**\n * @return {?}\n */\nparseRootSegment(): UrlSegmentGroup {\n    if (this.remaining.startsWith('/')) {\n      this.capture('/');\n    }\n\n    if (this.remaining === '' || this.remaining.startsWith('?') || this.remaining.startsWith('#')) {\n      return new UrlSegmentGroup([], {});\n    }\n\n    return new UrlSegmentGroup([], this.parseChildren());\n  }\n/**\n * @return {?}\n */\nparseChildren(): {[key: string]: UrlSegmentGroup} {\n    if (this.remaining.length == 0) {\n      return {};\n    }\n\n    if (this.peekStartsWith('/')) {\n      this.capture('/');\n    }\n\n    const /** @type {?} */ paths: any[] = [];\n    if (!this.peekStartsWith('(')) {\n      paths.push(this.parseSegments());\n    }\n\n    while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {\n      this.capture('/');\n      paths.push(this.parseSegments());\n    }\n\n    let /** @type {?} */ children: {[key: string]: UrlSegmentGroup} = {};\n    if (this.peekStartsWith('/(')) {\n      this.capture('/');\n      children = this.parseParens(true);\n    }\n\n    let /** @type {?} */ res: {[key: string]: UrlSegmentGroup} = {};\n    if (this.peekStartsWith('(')) {\n      res = this.parseParens(false);\n    }\n\n    if (paths.length > 0 || Object.keys(children).length > 0) {\n      res[PRIMARY_OUTLET] = new UrlSegmentGroup(paths, children);\n    }\n\n    return res;\n  }\n/**\n * @return {?}\n */\nparseSegments(): UrlSegment {\n    const /** @type {?} */ path = matchSegments(this.remaining);\n    if (path === '' && this.peekStartsWith(';')) {\n      throw new Error(`Empty path url segment cannot have parameters: '${this.remaining}'.`);\n    }\n\n    this.capture(path);\n    let /** @type {?} */ matrixParams: {[key: string]: any} = {};\n    if (this.peekStartsWith(';')) {\n      matrixParams = this.parseMatrixParams();\n    }\n    return new UrlSegment(decode(path), matrixParams);\n  }\n/**\n * @return {?}\n */\nparseQueryParams(): {[key: string]: any} {\n    const /** @type {?} */ params: {[key: string]: any} = {};\n    if (this.peekStartsWith('?')) {\n      this.capture('?');\n      this.parseQueryParam(params);\n      while (this.remaining.length > 0 && this.peekStartsWith('&')) {\n        this.capture('&');\n        this.parseQueryParam(params);\n      }\n    }\n    return params;\n  }\n/**\n * @return {?}\n */\nparseFragment(): string {\n    if (this.peekStartsWith('#')) {\n      return decodeURI(this.remaining.substring(1));\n    }\n\n    return null;\n  }\n/**\n * @return {?}\n */\nparseMatrixParams(): {[key: string]: any} {\n    const /** @type {?} */ params: {[key: string]: any} = {};\n    while (this.remaining.length > 0 && this.peekStartsWith(';')) {\n      this.capture(';');\n      this.parseParam(params);\n    }\n    return params;\n  }\n/**\n * @param {?} params\n * @return {?}\n */\nparseParam(params: {[key: string]: any}): void {\n    const /** @type {?} */ key = matchSegments(this.remaining);\n    if (!key) {\n      return;\n    }\n    this.capture(key);\n    let /** @type {?} */ value: any = '';\n    if (this.peekStartsWith('=')) {\n      this.capture('=');\n      const /** @type {?} */ valueMatch = matchSegments(this.remaining);\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n\n    params[decode(key)] = decode(value);\n  }\n/**\n * @param {?} params\n * @return {?}\n */\nparseQueryParam(params: {[key: string]: any}): void {\n    const /** @type {?} */ key = matchQueryParams(this.remaining);\n    if (!key) {\n      return;\n    }\n    this.capture(key);\n    let /** @type {?} */ value: any = '';\n    if (this.peekStartsWith('=')) {\n      this.capture('=');\n      const /** @type {?} */ valueMatch = matchUrlQueryParamValue(this.remaining);\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n\n    const /** @type {?} */ decodedKey = decode(key);\n    const /** @type {?} */ decodedVal = decode(value);\n\n    if (params.hasOwnProperty(decodedKey)) {\n      // Append to existing values\n      let /** @type {?} */ currentVal = params[decodedKey];\n      if (!Array.isArray(currentVal)) {\n        currentVal = [currentVal];\n        params[decodedKey] = currentVal;\n      }\n      currentVal.push(decodedVal);\n    } else {\n      // Create a new value\n      params[decodedKey] = decodedVal;\n    }\n  }\n/**\n * @param {?} allowPrimary\n * @return {?}\n */\nparseParens(allowPrimary: boolean): {[key: string]: UrlSegmentGroup} {\n    const /** @type {?} */ segments: {[key: string]: UrlSegmentGroup} = {};\n    this.capture('(');\n    while (!this.peekStartsWith(')') && this.remaining.length > 0) {\n      const /** @type {?} */ path = matchSegments(this.remaining);\n\n      const /** @type {?} */ next = this.remaining[path.length];\n\n      // if is is not one of these characters, then the segment was unescaped\n      // or the group was not closed\n      if (next !== '/' && next !== ')' && next !== ';') {\n        throw new Error(`Cannot parse url '${this.url}'`);\n      }\n\n      let /** @type {?} */ outletName: string;\n      if (path.indexOf(':') > -1) {\n        outletName = path.substr(0, path.indexOf(':'));\n        this.capture(outletName);\n        this.capture(':');\n      } else if (allowPrimary) {\n        outletName = PRIMARY_OUTLET;\n      }\n\n      const /** @type {?} */ children = this.parseChildren();\n      segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :\n                                                                  new UrlSegmentGroup([], children);\n      if (this.peekStartsWith('//')) {\n        this.capture('//');\n      }\n    }\n    this.capture(')');\n    return segments;\n  }\n}\n\nfunction UrlParser_tsickle_Closure_declarations() {\n/** @type {?} */\nUrlParser.prototype.remaining;\n/** @type {?} */\nUrlParser.prototype.url;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Compiler, InjectionToken, Injector, NgModuleFactory, NgModuleFactoryLoader, NgModuleRef} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {fromPromise} from 'rxjs/observable/fromPromise';\nimport {of } from 'rxjs/observable/of';\nimport {map} from 'rxjs/operator/map';\nimport {mergeMap} from 'rxjs/operator/mergeMap';\nimport {LoadChildren, Route} from './config';\nimport {flatten, wrapIntoObservable} from './utils/collection';\n/**\n * \\@docsNotRequired\n * \\@experimental\n */\nexport const ROUTES = new InjectionToken<Route[][]>('ROUTES');\nexport class LoadedRouterConfig {\n/**\n * @param {?} routes\n * @param {?} module\n */\nconstructor(public routes: Route[],\npublic module: NgModuleRef<any>) {}\n}\n\nfunction LoadedRouterConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nLoadedRouterConfig.prototype.routes;\n/** @type {?} */\nLoadedRouterConfig.prototype.module;\n}\n\nexport class RouterConfigLoader {\n/**\n * @param {?} loader\n * @param {?} compiler\n * @param {?=} onLoadStartListener\n * @param {?=} onLoadEndListener\n */\nconstructor(\nprivate loader: NgModuleFactoryLoader,\nprivate compiler: Compiler,\nprivate onLoadStartListener?: (r: Route) => void,\nprivate onLoadEndListener?: (r: Route) => void) {}\n/**\n * @param {?} parentInjector\n * @param {?} route\n * @return {?}\n */\nload(parentInjector: Injector, route: Route): Observable<LoadedRouterConfig> {\n    if (this.onLoadStartListener) {\n      this.onLoadStartListener(route);\n    }\n\n    const /** @type {?} */ moduleFactory$ = this.loadModuleFactory(route.loadChildren);\n\n    return map.call(moduleFactory$, (factory: NgModuleFactory<any>) => {\n      if (this.onLoadEndListener) {\n        this.onLoadEndListener(route);\n      }\n\n      const /** @type {?} */ module = factory.create(parentInjector);\n\n      return new LoadedRouterConfig(flatten(module.injector.get(ROUTES)), module);\n    });\n  }\n/**\n * @param {?} loadChildren\n * @return {?}\n */\nprivate loadModuleFactory(loadChildren: LoadChildren): Observable<NgModuleFactory<any>> {\n    if (typeof loadChildren === 'string') {\n      return fromPromise(this.loader.load(loadChildren));\n    } else {\n      return mergeMap.call(wrapIntoObservable(loadChildren()), (t: any) => {\n        if (t instanceof NgModuleFactory) {\n          return of (t);\n        } else {\n          return fromPromise(this.compiler.compileModuleAsync(t));\n        }\n      });\n    }\n  }\n}\n\nfunction RouterConfigLoader_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterConfigLoader.prototype.loader;\n/** @type {?} */\nRouterConfigLoader.prototype.compiler;\n/** @type {?} */\nRouterConfigLoader.prototype.onLoadStartListener;\n/** @type {?} */\nRouterConfigLoader.prototype.onLoadEndListener;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModuleFactory, ÉµisObservable as isObservable, ÉµisPromise as isPromise} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {fromPromise} from 'rxjs/observable/fromPromise';\nimport {of } from 'rxjs/observable/of';\nimport {concatAll} from 'rxjs/operator/concatAll';\nimport {every} from 'rxjs/operator/every';\nimport * as l from 'rxjs/operator/last';\nimport {map} from 'rxjs/operator/map';\nimport {mergeAll} from 'rxjs/operator/mergeAll';\nimport {PRIMARY_OUTLET} from '../shared';\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function shallowEqualArrays(a: any[], b: any[]): boolean {\n  if (a.length !== b.length) return false;\n  for (let /** @type {?} */ i = 0; i < a.length; ++i) {\n    if (!shallowEqual(a[i], b[i])) return false;\n  }\n  return true;\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function shallowEqual(a: {[x: string]: any}, b: {[x: string]: any}): boolean {\n  const /** @type {?} */ k1 = Object.keys(a);\n  const /** @type {?} */ k2 = Object.keys(b);\n  if (k1.length != k2.length) {\n    return false;\n  }\n  let /** @type {?} */ key: string;\n  for (let /** @type {?} */ i = 0; i < k1.length; i++) {\n    key = k1[i];\n    if (a[key] !== b[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * @template T\n * @param {?} a\n * @return {?}\n */\nexport function flatten<T>(a: T[][]): T[] {\n  const /** @type {?} */ target: T[] = [];\n  for (let /** @type {?} */ i = 0; i < a.length; ++i) {\n    for (let /** @type {?} */ j = 0; j < a[i].length; ++j) {\n      target.push(a[i][j]);\n    }\n  }\n  return target;\n}\n/**\n * @template T\n * @param {?} a\n * @return {?}\n */\nexport function first<T>(a: T[]): T {\n  return a.length > 0 ? a[0] : null;\n}\n/**\n * @template T\n * @param {?} a\n * @return {?}\n */\nexport function last<T>(a: T[]): T {\n  return a.length > 0 ? a[a.length - 1] : null;\n}\n/**\n * @param {?} bools\n * @return {?}\n */\nexport function and(bools: boolean[]): boolean {\n  return !bools.some(v => !v);\n}\n/**\n * @template V\n * @param {?} m1\n * @param {?} m2\n * @return {?}\n */\nexport function merge<V>(m1: {[key: string]: V}, m2: {[key: string]: V}): {[key: string]: V} {\n  const /** @type {?} */ m: {[key: string]: V} = {};\n\n  for (const /** @type {?} */ attr in m1) {\n    if (m1.hasOwnProperty(attr)) {\n      m[attr] = m1[attr];\n    }\n  }\n\n  for (const /** @type {?} */ attr in m2) {\n    if (m2.hasOwnProperty(attr)) {\n      m[attr] = m2[attr];\n    }\n  }\n\n  return m;\n}\n/**\n * @template K, V\n * @param {?} map\n * @param {?} callback\n * @return {?}\n */\nexport function forEach<K, V>(map: {[key: string]: V}, callback: (v: V, k: string) => void): void {\n  for (const /** @type {?} */ prop in map) {\n    if (map.hasOwnProperty(prop)) {\n      callback(map[prop], prop);\n    }\n  }\n}\n/**\n * @template A, B\n * @param {?} obj\n * @param {?} fn\n * @return {?}\n */\nexport function waitForMap<A, B>(\n    obj: {[k: string]: A}, fn: (k: string, a: A) => Observable<B>): Observable<{[k: string]: B}> {\n  const /** @type {?} */ waitFor: Observable<B>[] = [];\n  const /** @type {?} */ res: {[k: string]: B} = {};\n\n  forEach(obj, (a: A, k: string) => {\n    if (k === PRIMARY_OUTLET) {\n      waitFor.push(map.call(fn(k, a), (_: B) => {\n        res[k] = _;\n        return _;\n      }));\n    }\n  });\n\n  forEach(obj, (a: A, k: string) => {\n    if (k !== PRIMARY_OUTLET) {\n      waitFor.push(map.call(fn(k, a), (_: B) => {\n        res[k] = _;\n        return _;\n      }));\n    }\n  });\n\n  if (waitFor.length > 0) {\n    const /** @type {?} */ concatted$ = concatAll.call(of (...waitFor));\n    const /** @type {?} */ last$ = l.last.call(concatted$);\n    return map.call(last$, () => res);\n  }\n\n  return of (res);\n}\n/**\n * @param {?} observables\n * @return {?}\n */\nexport function andObservables(observables: Observable<Observable<any>>): Observable<boolean> {\n  const /** @type {?} */ merged$ = mergeAll.call(observables);\n  return every.call(merged$, (result: any) => result === true);\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nexport function wrapIntoObservable<T>(value: T | NgModuleFactory<T>| Promise<T>| Observable<T>):\n    Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return fromPromise(value);\n  }\n\n  return of (value);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\nimport {Route, UrlMatchResult} from './config';\nimport {UrlSegment, UrlSegmentGroup} from './url_tree';\n/**\n * \\@whatItDoes Name of the primary outlet.\n * \n * \\@stable\n */\nexport const PRIMARY_OUTLET = 'primary';\n\n/**\n * A collection of parameters.\n *\n * @stable\n */\nexport type Params = {\n  [key: string]: any\n};\n\nconst /** @type {?} */ NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';\n/**\n * @param {?} message\n * @return {?}\n */\nexport function navigationCancelingError(message: string) {\n  const /** @type {?} */ error = Error('NavigationCancelingError: ' + message);\n  ( /** @type {?} */((error as any)))[NAVIGATION_CANCELING_ERROR] = true;\n  return error;\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function isNavigationCancelingError(error: Error) {\n  return ( /** @type {?} */((error as any)))[NAVIGATION_CANCELING_ERROR];\n}\n/**\n * @param {?} segments\n * @param {?} segmentGroup\n * @param {?} route\n * @return {?}\n */\nexport function defaultUrlMatcher(\n    segments: UrlSegment[], segmentGroup: UrlSegmentGroup, route: Route): UrlMatchResult {\n  const /** @type {?} */ path = route.path;\n  const /** @type {?} */ parts = path.split('/');\n  const /** @type {?} */ posParams: {[key: string]: UrlSegment} = {};\n  const /** @type {?} */ consumed: UrlSegment[] = [];\n\n  let /** @type {?} */ currentIndex = 0;\n\n  for (let /** @type {?} */ i = 0; i < parts.length; ++i) {\n    if (currentIndex >= segments.length) return null;\n    const /** @type {?} */ current = segments[currentIndex];\n\n    const /** @type {?} */ p = parts[i];\n    const /** @type {?} */ isPosParam = p.startsWith(':');\n\n    if (!isPosParam && p !== current.path) return null;\n    if (isPosParam) {\n      posParams[p.substring(1)] = current;\n    }\n    consumed.push(current);\n    currentIndex++;\n  }\n\n  if (route.pathMatch === 'full' &&\n      (segmentGroup.hasChildren() || currentIndex < segments.length)) {\n    return null;\n  } else {\n    return {consumed, posParams};\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Route} from './config';\nimport {RouterStateSnapshot} from './router_state';\n/**\n * \\@whatItDoes Represents an event triggered when a navigation starts.\n * \n * \\@stable\n */\nexport class NavigationStart {\n/**\n * @param {?} id\n * @param {?} url\n */\nconstructor(\npublic id: number,\npublic url: string) {}\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string { return `NavigationStart(id: ${this.id}, url: '${this.url}')`; }\n}\n\nfunction NavigationStart_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationStart.prototype.id;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationStart.prototype.url;\n}\n\n/**\n * \\@whatItDoes Represents an event triggered when a navigation ends successfully.\n * \n * \\@stable\n */\nexport class NavigationEnd {\n/**\n * @param {?} id\n * @param {?} url\n * @param {?} urlAfterRedirects\n */\nconstructor(\npublic id: number,\npublic url: string,\npublic urlAfterRedirects: string) {}\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string {\n    return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;\n  }\n}\n\nfunction NavigationEnd_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationEnd.prototype.id;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationEnd.prototype.url;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationEnd.prototype.urlAfterRedirects;\n}\n\n/**\n * \\@whatItDoes Represents an event triggered when a navigation is canceled.\n * \n * \\@stable\n */\nexport class NavigationCancel {\n/**\n * @param {?} id\n * @param {?} url\n * @param {?} reason\n */\nconstructor(\npublic id: number,\npublic url: string,\npublic reason: string) {}\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string { return `NavigationCancel(id: ${this.id}, url: '${this.url}')`; }\n}\n\nfunction NavigationCancel_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationCancel.prototype.id;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationCancel.prototype.url;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationCancel.prototype.reason;\n}\n\n/**\n * \\@whatItDoes Represents an event triggered when a navigation fails due to an unexpected error.\n * \n * \\@stable\n */\nexport class NavigationError {\n/**\n * @param {?} id\n * @param {?} url\n * @param {?} error\n */\nconstructor(\npublic id: number,\npublic url: string,\npublic error: any) {}\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string {\n    return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;\n  }\n}\n\nfunction NavigationError_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationError.prototype.id;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationError.prototype.url;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationError.prototype.error;\n}\n\n/**\n * \\@whatItDoes Represents an event triggered when routes are recognized.\n * \n * \\@stable\n */\nexport class RoutesRecognized {\n/**\n * @param {?} id\n * @param {?} url\n * @param {?} urlAfterRedirects\n * @param {?} state\n */\nconstructor(\npublic id: number,\npublic url: string,\npublic urlAfterRedirects: string,\npublic state: RouterStateSnapshot) {}\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string {\n    return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\nfunction RoutesRecognized_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nRoutesRecognized.prototype.id;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nRoutesRecognized.prototype.url;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nRoutesRecognized.prototype.urlAfterRedirects;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nRoutesRecognized.prototype.state;\n}\n\n/**\n * \\@whatItDoes Represents an event triggered before lazy loading a route config.\n * \n * \\@experimental\n */\nexport class RouteConfigLoadStart {\n/**\n * @param {?} route\n */\nconstructor(public route: Route) {}\n/**\n * @return {?}\n */\ntoString(): string { return `RouteConfigLoadStart(path: ${this.route.path})`; }\n}\n\nfunction RouteConfigLoadStart_tsickle_Closure_declarations() {\n/** @type {?} */\nRouteConfigLoadStart.prototype.route;\n}\n\n/**\n * \\@whatItDoes Represents an event triggered when a route has been lazy loaded.\n * \n * \\@experimental\n */\nexport class RouteConfigLoadEnd {\n/**\n * @param {?} route\n */\nconstructor(public route: Route) {}\n/**\n * @return {?}\n */\ntoString(): string { return `RouteConfigLoadEnd(path: ${this.route.path})`; }\n}\n\nfunction RouteConfigLoadEnd_tsickle_Closure_declarations() {\n/** @type {?} */\nRouteConfigLoadEnd.prototype.route;\n}\n\n\n/**\n * @whatItDoes Represents a router event.\n *\n * One of:\n * - {@link NavigationStart},\n * - {@link NavigationEnd},\n * - {@link NavigationCancel},\n * - {@link NavigationError},\n * - {@link RoutesRecognized},\n * - {@link RouteConfigLoadStart},\n * - {@link RouteConfigLoadEnd}\n *\n * @stable\n */\nexport type Event = NavigationStart | NavigationEnd | NavigationCancel | NavigationError |\n    RoutesRecognized | RouteConfigLoadStart | RouteConfigLoadEnd;\n"],"names":["getOutlet"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AqBAA,OAAA,EAAA,QAAA,EAAA,MAAA,wBAAA,CAAA;;;;;;;;;;;;;;;;IAqBA;;;OAAA;;;;;IAOA;;;;;;;;;;;;;;;;;OAWA;IAAA,uBAAA,EAAA,EAAA,GAAA,EAAA,iBAAA;;;;;IAwBA;;;OAGA;IAEA,gCAAA,GAAA;;;;;;;;;;;;;;;OATA;IAAA,0BAAA,EAAA,EAAA,GAAA,EAAA,MAAA;;;;;IA8CA;;;;;;;;;;;;;;;;;OA5BA;IAAA,yBAAA,EAAA,EAAA,GAAA,EAAA,KAAA;;;;;IAoEA;;;OAGA;IAEA,kCAAA,GAAA;;;;;;;;;;;;;;;;OArDA;IAEA,0BAAA,EAAa,EAAb,GAAA,EAAA,iBAAA,EAAA,KAAA;QAAA,IAAA,CAAA,EAAA,GAAA,EAAA,CAAA;;;;;IA0FA;;;OAGA;IAEA,mCAAA,GAAA;;;;;;;;;;AAgCA;IAjHA;;;;;IAqHA,CAAA;IACA;;;;;CALA;;;;;;AAqBA;IA3HA;;;;;IA+HA,CAAA;IACA;;OD5PA;;;CCuPA;;;;;;;;;;;;;;;ADtNA;;;GAGA;AACA,kCAAA,OAAA;;;;;AAKA;;;;;;;;;;;;GAaA;AACA,2BAVQ,QAAA,EAUR,YAAA,EAAA,KAAA;IAEE,IAAF,gBAAA,CAAA,IAAA,GAAA,KAAA,CAVqB,IAUrB,CAAA;IAEE,IAAF,gBAAA,CAAA,KAAA,GAVe,IAUf,CAAA,KAAA,CAVsB,GAUtB,CAAA,CAAA;IACA,IAAA,gBAAA,CAAA,SAVwB,GAUxB,EAAA,CAAA;IAVA,IAAA,gBAAA,CAAA,QAAA,GAAA,EAAA,CAAA;IAWA,IAAI,gBAAJ,CAAA,YAAA,GAAA,CAVoB,CAUpB;IAEA,GAAA,CAAI,CAAJ,IAAA,gBAAA,CAAA,CAVU,GAUV,CAVc,EAUd,CAAA,GAVoB,KAUpB,CAAA,MAAA,EAAA,EAAA,CAAA,EAAA,CAAA;QACI,EAAJ,CAAA,CAAA,YAAA,IAAA,QAAA,CAAA,MAAA,CAVuB;YAYf,MAAR,CAAA,IAVU,CAUV;QAVA,IAAA,gBAAA,CAAA,OAAA,GAAA,QAAA,CAAA,YAAA,CAAA,CAAA;QAWI,IAAJ,gBAAA,CAAA,CAAA,GAAA,KAAA,CAAA,CAAA,CAAA,CAAA;QACA,IAAA,gBAAA,CAAA,UAAA,GAAA,CAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA;QACA,EAAA,CAAA,CAAA,CAAA,UAAA,IAAA,CAAA,KAAA,OAAA,CAAA,IAAA,CAAA;YACA,MAAA,CAAA,IAAA,CAAA;QACI,EAAJ,CAAA,CAAA,UAViB,CAAE,CAUnB,CAAA;YACA,SAAA,CAAA,CAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,GAAA,OAAA,CAAA;QAEM,CAAN;QACM,QAAN,CAAA,IAVQ,CAAY,OAUpB,CAAA,CAAA;QACI,YAVY,EAUhB,CAAA;IACA,CAAG;IAVH,EAAA,CAAA,CAAA,KAAA,CAAA,SAAA,KAAA,MAAA;QAWI,CAAJ,YAAA,CAAA,WAAA,EAAA,IAViC,YAUjC,GAAA,QAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA;QACA,MAAA,CAAA,IAAA,CAAA;IACA,CAAA;;QD9DA,MAAA,CAAA,EAAA,QAAA,UAAA,EAAA,SAAA,WAAA,EAAA,CAAA;;;;;;;GAOA;AACA,4BALwB,CAAC,EAKzB,CAL4B;IAA5B,EAAA,CAAA,CAAA,CAAA,CAAA,MAAA,KAAA,CAAA,CAAA,MAAA,CAAA;QAMA,MAAA,CAAA,KAAA,CAAA;IACE,GAAF,CAAA,CAAA,IAAA,gBAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,MAAA,EAAA,EAAA,CAAA,EAAA,CAAA;QACA,EAAA,CAAA,CAAA,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;;;;;;;;;GASA;AACA,sBAAA,CAAA,EAAA,CAAA;IACA,IAAA,gBAAA,CAAA,EAAA,GAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;IACE,IAAF,gBAAA,CAAA,EATkB,GASlB,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;IACE,EAAF,CAAA,CAAA,EAAA,CAAA,MAAA,IAAA,EAAA,CAAA,MATW,CAAA,CASX,CAAA;QACI,MATM,CASV,KATgB,CAShB;IACA,CAAA;IACA,IAAA,gBATa,CAAM,GASnB,CAAA;IACA,GAAA,CAAA,CAAK,IAAL,gBAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,EAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA,CAAA;QACA,GAAA,GAAA,EAAA,CAAA,CAAA,CAAA,CAAA;QACA,EAAA,CATS,CAST,CAAA,CAAA,GAAA,CAAA,KAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;YACA,MAAA,CAAA,KAAA,CAAA;;;;;;;;;GASA;AACA,iBAAA,CAAY;IACZ,IAAA,gBAAA,CAAA,MAAA,GAAA,EAAA,CAAA;IACA,GAAA,CAAA,CAAA,IAAA,gBAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,MAAA,EAAA,EAAA,CAAA,EAAA,CAAA;QACA,GAbS,CAaT,CAAA,IAbS,gBAaT,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,EAAA,EAAA,CAAA,EAAA,CAAA;YACA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;QACA,CAAA;;;;;;;;GAgBA;;;;;;;;;GAiBA;AACA,eAAA,EAAA,EA7Ba,EA6Bb;IACA,IAAA,gBAAA,CAAA,CAAA,GAAA,EAAA,CAAA;IACA,GAAA,CAAA,CAAA,IAAA,gBAAA,CAAA,IAAA,IAAA,EAAA,CAAA,CAAA,CAAA;QAEA,EAAA,CAAA,CAAA,EAAA,CAAA,cAAA,CAAA,IAAA,CAAA,CA7Ba,CA6Bb,CAAA;YACQ,CAAR,CA7BS,IA6BT,CAAA,GAAA,EAAA,CAAA,IA7BY,CAAc,CA6B1B;QACA,CAAA;IACA,CAAA;IACA,GAAA,CAAA,CAAA,IAAA,gBAAA,CAAA,IAAA,IAAA,EAAA,CAAA,CAAA,CAAA;QAEA,EAAA,CA7BS,CAAA,EA6BT,CAAA,cAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;YACA,CAAA,CAAA,IAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,CAAA;;;;;;;;;;GAUA;AACA,iBAAA,GAAA,EAAA,QAAA;IACA,GAAA,CAAA,CAAA,IAAA,gBAAA,CAAA,IAAA,IAAA,GAAA,CAAA,CAAA,CAAA;QACA,EAAA,CAAA,CAAA,GAAA,CAAA,cAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;;;;;;;;;;GAYA;AACA,oBAAA,GAAA,EAAA,EAAA;IACA,IAAA,gBAAA,CAAA,OAvC4B,GAAG,EAuC/B,CAvCkC;IAwClC,IAAA,gBAvCiB,CAAE,GAuCnB,GAAA,EAAA,CAAA;IACA,OAAA,CAAA,GAAA,EAAA,UAAA,CAAA,EAAA,CAAA;QACA,EAAA,CAAA,CAAA,CAAO,KAAP,cAAA,CAAA,CAAA,CAAA;YACA,OAAA,CAAA,IAAA,CAAA,GAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,UAAA,CAAA;gBACA,GAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;gBAEA,MAvCyB,CAuCzB,CAAA,CAAA;YACQ,CAvCC,CAuCT,CAAA,CAAA;QACA,CAAA;IACA,CAAA,CAAA,CAAA;IACA,OAAA,CAAA,GAAA,EAAA,UAAA,CAAA,EAAA,CAAA;QACA,EAAA,CAAA,CAAA,CAAO,KAAP,cAAA,CAAA,CAAA,CAAA;YACA,OAAA,CAAA,IAAA,CAAA,GAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,UAAA,CAAA;gBACA,GAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;gBArCc,MAAC,CAuCf,CAAA,CAvCuB;YAwCvB,CAAA,CAAA,CAAA,CAAA;QACI,CAAJ;IACA,CAAA,CAAA,CAAA;IACA,EAAA,CAAA,CAAA,OAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,CAAA;QAEA,IAvCY,gBAuCZ,CAAA,UAAA,GAAA,SAAA,CAAA,IAAA,CAAA,EAAA,eAAA,OAAA,EAAA,CAAA;QACA,IAAA,gBAAA,CAAA,KAAA,GAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,UAAA,CAAA,CAAA;;;;;AAKA;;;GAGA;;;;;;;;;GAUA;AAEA,4BAAA,KAAA;IACA,EAAA,CAAA,CAAI,aAAJ,CAAA,KA9CuB,CA8CvB,CAAA,CAAA,CAAA;QACA,MAAA,CAAA,KAAA,CAAA;IAEE,CAAF;IACA,EAAA,CAAA,CAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;;IDxKA,CAAA;;;AAIA;;;;;;IAMA;;;OAHA;IAKA,4BAAA,MAAA,EAAA,MAAA;QAEA,IAAA,CAAA,MAAA,GAAA,MAAA,CAAA;;;;;;;;;;;OADA;IACA,4BAAA,MAAA,EAAA,QAAA,EAAA,mBAAA,EAAA,iBAAA;QAAA,IAAA,CAAA,MAAA,GAAA,MAAA,CAAA;;;;;;;;;OA2BA;IAEA,iCAAI,GAAJ,UAAA,cAAA,EAAA,KAAA;QAAA;QAEI,EAAJ,CAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,CAtBqB,CAsBrB;YACM,IAAI,CAAV,mBAAA,CAAA,KAAA,CAAA,CAAA;QACA,CAAA;QACA,IAAA,gBAAA,CAAA,cAAA,GAAA,IAAA,CAAA,iBAAA,CAAA,KAAA,CAAA,YAAA,CAAA,CAAA;QAEA,MAAA,CAAA,GAAA,CAAA,IAAA,CAAA,cAAA,EAAA,UAtBY,OAsBZ;YAEM,EAAN,CAAA,CAAA,KAAA,CAAA,iBAAA,CAAA,CAAA,CAtBiB;gBAuBjB,KAAA,CAAA,iBAAA,CAAA,KAAA,CAAA,CAAA;YACA,CAAA;;;;;IApBG;;;OA4BH;IAzBA,8CAAA,GAAA,UAAA,YAAA;QAAA;QA0BA,EAAA,CAAA,CAAM,OAzBO,YAyBb,KAAA,QAAA,CAAA,CAAA,CAAA;YACA,MAAA,CAAA,WAAA,CAAA,IAAA,CAAA,MAAA,CAAA,IAAA,CAzByB,YAyBzB,CAAA,CAAA,CAAA;QACA,CAAA;QACA,IAAA,CAAA,CAAA;YAzBA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,kBAAA,CAAA,YAAA,EAAA,CAAA,EAAA,UAAA,CAAA;gBA0BA,EAAA,CAAA,CAAU,CAAV,YAAA,eAAA,CAAA,CAAA,CAAA;oBACA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA;gBACA,CAAA;gBACA,IAAA,CAAA,CAAA;oBACA,MAAA,CAAA,WAAA,CAAA,KAAA,CAAA,QAAA,CAAA,kBAAA,CAAA,CAAA,CAAA,CAAA,CAAA;gBACA,CAAA;;QD9EA,CAAA;;;;AAIA;;;;;;;;;;;GAWA;AACA,sBAAA,SAAA,EAAA,SAAA,EAAA,KAAA;IAEE,EAAF,CAAA,CAAA,KAAA,CAAA,CAAA,CAAA;QACM,MAAN,CAAA,gBAAA,CAAA,SAAA,CAAA,WAAA,EARqD,SAQrD,CAAA,WAAA,CAAA;YACA,kBAAA,CAAA,SAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;GAiBA;AAhBA,4BAAA,SAAA,EAAA,SAAA;IAiBE,EAAF,CAAA,CAAA,CAAO,SAAP,CAAA,SAAA,CAAA,QAhBkB,EAgBlB,SAAA,CAAA,QAhBsC,CAgBtC,CAAA;QACI,MAAJ,CAAA,KAAA,CAAA;IAhBA,EAAA,CAAA,CAAA,SAAA,CAAA,gBAAA,KAAA,SAAA,CAAA,gBAAA,CAAA;QAiBI,MAAJ,CAAA,KAAA,CAAA;IAhBA,GAAA,CAAA,CAAA,IAAA,gBAAA,CAAA,CAAA,IAAA,SAAA,CAAA,QAAA,CAAA,CAAA,CAAA;QAiBA,EAAA,CAAA,CAAA,CAAA,SAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA;YACA,MAAA,CAAA,KAAA,CAAA;QACA,EAAA,CAAA,CAAA,CAAA,kBAAA,CAAA,SAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAA,SAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA;;;;;;;;;GAUA;;;;;;;;;;;;;;;;;;GAmBA;AA7BA,oCAAA,SAAA,EAAA,SAAA,EAAA,cAAA;IA8BA,EAAA,CAAA,CAAI,SAAJ,CAAA,QAAA,CAAA,MA7BmB,GA6BnB,cAAA,CAAA,MAAA,CAAA,CAAA,CAAA;QA7BA,IAAA,gBAAA,CAAA,OAAA,GAAA,SAAA,CAAA,QAAA,CAAA,KAAA,CAAA,CAAA,EAAA,cAAA,CAAA,MAAA,CAAA,CAAA;QA8BI,EAAJ,CAAA,CAAA,CAAA,SAAA,CAAA,OAAA,EAAA,cAAA,CAAA,CAAA;YAEA,MAAA,CAAA,KAAA,CAAA;QA7BA,EAAA,CAAA,CAAA,SAAA,CAAc,WAAd,EAAA,CAAA;YA8BQ,MAAR,CAAA,KAAA,CAAA;QA7BA,MAAA,CAAA,IAA+D,CAA/D;IA8BA,CAAA;IACA,IAAA,CAAA,EAAA,CAAM,CAAN,SAAA,CAAA,QAAA,CAAA,MA7BgC,KA6BhC,cAAA,CAAA,MAAA,CAAA,CAAA,CAAA;QA7BA,EAAA,CAAA,CAAA,CAAA,SAAA,CAAyC,SAAzC,CAAA,QAAA,EAAA,cAAA,CAAA,CAAA;YA8BM,MAAN,CAAA,KAAA,CAAA;QA7BA,GAAA,CAAA,CAAA,IAAA,gBAAA,CAAA,CAAA,IAAA,SAAA,CAAA,QAAA,CAAA,CAAA,CAAA;YA8BA,EAAA,CAAA,CAAA,CAAA,SAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA;gBACA,MAAA,CAAA,KAAA,CAAA;YAEA,EAAA,CAAA,CAAA,CAAA,oBAAA,CAAA,SAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAA,SAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA;gBA7BA,MAAA,CAAA,KAAA,CAAA;QA8BI,CAAJ;QACI,MAAJ,CAAA,IAAA,CAAA;IACA,CAAA;IA7BA,IAAA,CAAA,CAAA;QA8BI,IAAJ,gBAAA,CA7BoB,OA6BpB,GAAA,cAAA,CAAA,KAAA,CAAA,CAAA,EAAA,SAAA,CAAA,QAAA,CAAA,MAAA,CAAA,CAAA;QA7BA,IAAA,gBAAA,CAAA,IAAA,GAAA,cAAA,CAAA,KAAA,CAAA,SAAA,CAAA,QAAA,CAAA,MAAA,CAAA,CAAA;QA8BI,EAAJ,CAAA,CAAA,CAAA,SAAA,CAAA,SAAA,CAAA,QA7BW,EA6BX,OAAA,CA7BuC,CAAS;YA8BhD,MAAA,CAAA,KAAA,CAAA;QACA,EAAA,CAAA,CAAA,CAAA,SAAA,CAAA,QAAA,CAAA,cAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAUA;IAAA,iBAAA,IAAA,EAAA,WAAA,EAAA,QAAA;;;;;IAmCA;;;;;;;;;;;;;;;IA2CA;;;;IALA,yBAAA,QAAA,EAtD4B,QAsD5B;QAAA;QAQI,IAAJ,CAAA,QAAA,GAAoB,QAApB,CAAA;QACA,IAAA,CAAA,QAAA,GAAA,QAAA,CAAA;;;;;IAKA;;;;;;QAKA;;;;;;;;IAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA6DA;;;OAvFA;;;;;IA8FA;;;;;;;;;;;GAuBA;AACA,uBAAA,CAAA,EA7GsB,CAAA;IAAtB,EAAA,CAAA,CAAA,CAAA,CAAA,MAAA,KAAA,CAAA,CAAA,MAAA,CAAA;QA8GI,MAAJ,CAAA,KAAA,CAAA;IA7GA,GAAA,CAAA,CAAA,IAAA,gBAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,MAAA,EAAA,EAAA,CAAA,EAAA,CAAA;QA8GA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA;YACA,MAAA,CAAA,KAAA,CAAA;QACA,EAAA,CAAA,CAAA,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,UAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,UAAA,CAAA,CAAA;;;;;;;;;GAQA;AACA,mBAAA,CAAA,EAAA,CAAA;IAjHA,EAAA,CAAA,CAAA,CAAA,CAAA,MAAA,KAAA,CAAA,CAAA,MAAA,CAAA;QAkHA,MAAA,CAAA,KAAA,CAAA;IACE,GAAF,CAAA,CAAA,IAAA,gBAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,MAAA,EAAA,EAAA,CAAA,EAAA,CAAA;QACA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA;;;;;;;;;;GAWA;AACA,8BAAA,OAtH2B,EAAM,EAsHjC;IACA,IAAA,gBAAA,CAAA,GAAA,GAAA,EAAA,CAAA;IACA,OAAA,CAAA,OAAA,CAAA,QAAA,EAAA,UAAA,KAAA,EAAA,WAAA;QACA,EAAA,CAAS,CAtHC,WAsHV,KAtHmB,cAsHnB,CAAA,CAAA,CAAA;YACQ,GAAR,GAAA,GAAA,CAAA,MAtHwB,CAsHxB,EAAA,CAAA,KAAA,EAAA,WAAA,CAAA,CAAA,CAAA;QACA,CAAA;IACA,CAAA,CAAA,CAAA;IACA,OAAA,CAAA,OAAA,CAAA,QAAA,EAAA,UAAA,KAAA,EAAA,WAAA;QACA,EAAA,CAtHS,CAsHT,WAAA,KAAA,cAAA,CAAA,CAAA,CAAA;YACA,GAAA,GAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,KAAA,EAAA,WAAA,CAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAuDA;;;;;;;;;OASA;IAEA,wCAAA,GAAA,UAAA,IApIW;QAqIX,IAAA,gBAAA,CAAA,OAAA,GAAA,MAAA,gBAAA,CAAA,IAAA,CAAA,IAAA,EAAA,IAAA,CAAA,CAAA;QACA,IAAA,gBAAA,CAAA,KAAA,GAAA,oBAAA,CAAA,IAAA,CAAA,WAAA,CAAA,CAAA;;;;;;AAKA;;;;;;;;;;;GAWA;AACA,0BAAA,OAAA,EAAA,IAAA;IACA,EAAA,CAAA,CAAI,OAAJ,CAAA,WAAA,EAAA,IAAA,IAAA,CAAA,CA3IU,CA2IV;QACI,IAAJ,gBAAA,CAAA,OA3ImD,GA2InD,OAAA,CAAA,QAAA,CAAA,cAAA,CAAA;YACM,gBAAN,CAAA,OA3IgB,CA2IhB,QAAA,CAAA,cAAA,CAAA,EAAA,KAAA,CAAA;YACA,EAAA,CAAA;QACA,IAAA,gBAAA,CAAA,UAAA,GAAA,EAAA,CAAA;QACA,OAAA,CAAA,OAAA,CAAA,QAAA,EAAA,UAAA,CAAA,EAAA,CAAA;YACQ,EAAR,CAAA,CAAA,CAAA,KAAA,cAAA,CAAA,CAAA,CAAA;gBACA,UAAA,CAAA,IA3IiB,CAAO,CA2IxB,SAAA,gBAAA,CA3I+C,CAAG,EA2IlD,KAAA,CAAA,CAAA,CAAA;YACA,CAAA;QA3IA,CAAA,CAAA,CAAA;QA4IA,EAAA,CAAA,CAAM,UAAN,CAAA,MAAA,GAAA,CA3IwB,CAAE,CA2I1B,CAAA;YACA,MAAA,CAAA,OAAA,SAAA,UAAA,CAAA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA;QAEA,CAAA;QA3IA,IAAA,CAAS,CAAT;YA4IA,MAAA,CAAA,KAAA,OA3IU,CA2IV;QACA,CAAA;IACA,CAAA;IACA,IAAA,CAAA,EAAA,CAAA,CAAO,OAAP,CAAA,WAAA,EAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA;QA3IA,IAAA,gBAAA,CAAA,QAAA,GAAA,oBAAA,CAAA,OAAA,EAAA,UAAA,CAAA,EAAA,CAAA;YA4IA,EAAA,CAAA,CAAQ,CAAR,KAAA,cAAA,CAAA,CAAA,CAAA;gBACA,MAAA,CAAA,CAAA,gBAAA,CAAA,OAAA,CAAA,QAAA,CAAA,cAAA,CAAA,EAAA,KAAA,CAAA,CAAA,CAAA;YACA,CAAA;YACA,IAAA,CAAA,CA3IW;gBA6IX,MAAA,CAAA,CAAA,CAAA,SAAA,gBAAA,CAAA,CAAA,EAAA,KAAA,CAAA,CAAA,CAAA;YA3IA,CAAA;QA4II,CAAJ,CAAA,CAAA;QACA,MAAA,CAAA,cAAA,CAAA,OAAA,CAAA,UAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA;IACA,CAAA;;;;;AAKA;;;;;;;AAOA;;;;;;;AAOA;;;;;;;AAOA;;;;;;;AAOA;;;GAGA;AACA,8BAAA,MAAA;IACA,IAAA,gBAAA,CAAA,SAAA,GAAA,MAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA,GAAA,CAAA,UAAA,IAAA;QAEA,IAAA,gBA1J4B,CA0J5B,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,CA1JgD;QA2JhD,MAAA,CAAA,KAAA,CAAA,OAAA,CAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,UAAA,CAAA,IAAA,OAAA,MAAA,CAAA,IAAA,CAAA,SAAA,MAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA;YACA,MAAA,CAAA,IAAA,CAAA,SAAA,MAAA,CAAA,KAAA,CAAA,CAAA;;;;;IAKA;;;OA7JA;IA+JA,cAAA,KAAA,EAAA,MAAA;QAEA,IAAA,CAAA,KAAA,GAAA,KAAA,CAAA;;;;;;;;;GAeA;AACA,eAAS,GAAT;IACA,IAAA,gBAAA,CAAA,GAAA,GAAA,EAAA,CAAA;IACA,GAAA,CAAA,CAAA,IAAA,gBAAA,CAAA,IAAA,IAAA,GAAA,CAAA,CAAA,CAAA;QACA,EAAA,CA1KS,CA0KT,GA1Ka,CA0Kb,cAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;YACA,GAAA,CAAA,IAAA,CAAA,IAAA,IAAA,CAAA,IAAA,EAAA,GAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;QAEA,CAAA;;;;;AAKA;;;GAGA;AACA,uBAAA,GAAA;IAEA,UAAA,CAAA,SAAA,GAAA,CAAA,CAAA;;;;;AAKA;;;GAGA;AACA,0BAAA,GAAA;IAEA,cAAA,CAAA,SAAA,GAAA,CAAA,CAAA;;;;;AAKA;;;GAGA;AACA,iCAAA,GAAA;IACA,oBAAA,CAAA,SAAA,GAAA,CAAA,CAAA;;;;AAKA;IAtLA;;OAAA;;;;;IA2LA;;;;;IAKA;;;OAGA;IACA,2BAAA,GAAA,UAAQ,GAAR;QACA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,SAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;;;;IAIA,CAAA;IACA;;OAEA;IAEA,oCAAA,GAAA;QACA,EAAA,CAAA,CAAM,IAAN,CAAA,SAAA,CAAA,UAAA,CA9LiB,GAAiB,CA8LlC,CA9LqC,CA8LrC,CA9LqC;YA+LrC,IAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA;QAEI,CAAJ;QACA,EAAA,CAAA,CAAA,IAAA,CAAA,SAAA,KAAA,EAAA,IAAA,IAAA,CAAA,SAAA,CAAA,UAAA,CAAA,GAAA,CAAA,IAAA,IAAA,CAAA,SAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;;;;IAIA,CAAA;IACA;;OAEA;IAEA,iCAhMa,GAgMb;QACA,EAAA,CAAA,CAAM,IAAI,CAhMC,SAgMX,CAAA,MAAA,IAAA,CAAA,CAAA,CAAA,CAAA;YACA,MAAA,CAAA,EAAA,CAAA;QAEI,CAAJ;QACI,EAAJ,CAAA,CAAQ,IAAR,CAhMU,cAgMV,CAhMe,GAgMf,CAhM8B,CAAG,CAgMjC,CAhMmC;YAiM7B,IAAN,CAAW,OAAX,CAAA,GAhMsB,CAgMtB,CAAA;QACA,CAAK;QAED,IAAJ,gBAAA,CAAA,KAAA,GAhMmC,EAgMnC,CAAA;QACA,EAAA,CAAA,CAAM,CAAN,IAhMW,CAgMX,cAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;YACM,KAAK,CAhMC,IAAC,CAAI,IAAC,CAAI,aAAC,EAAa,CAAE,CAAC;QAiMvC,CAAK;QAED,OAAJ,IAAA,CAAA,cAAA,CAAA,GAAA,CAAA,IAhMwD,CAgMxD,IAAA,CAAA,cAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA,cAAA,CAAA,IAAA,CAAA,EAAA,CAAA;YACQ,IAhMC,CAAI,OAgMb,CAAA,GAAA,CAAA,CAAA;YACM,KAhMK,CAgMX,IAAA,CAAA,IAAA,CAhMoB,aAgMpB,EAAA,CAAA,CAAA;QACA,CAAA;QACA,IAAA,gBAAA,CAAA,QAAA,GAAA,EAAA,CAAA;QAEI,EAAJ,CAAA,CAAA,IAAA,CAAA,cAAA,CAhMQ,IAgMR,CAhMgD,CAAG,CAgMnD,CAAA;YACQ,IAhMC,CAAI,OAgMb,CAAA,GAAA,CAAA,CAAA;YACM,QAAN,GAhMiB,IAgMjB,CAAA,WAAA,CAhM8B,IAgM9B,CAAA,CAAA;QACA,CAAK;QAED,IAAI,gBAhMe,CAgMvB,GAhM4B,GAgM5B,EAAA,CAhM4B;QAiM5B,EAAA,CAAA,CAAM,IAhMI,CAgMV,cAhMyB,CAgMzB,GAAA,CAAA,CAAA,CAhMgC,CAgMhC;YACA,GAAA,GAAA,IAAA,CAAA,WAAA,CAAA,KAAA,CAAA,CAAA;QAEI,CAAJ;QACA,EAAA,CAAA,CAAA,KAAA,CAAA,MAAA,GAAA,CAAA,IAAA,MAAA,CAAA,IAAA,CAAA,QAAA,CAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,CAAA;;;;IAIA,CAAA;IACA;;OAEA;IACA,iCAAA,GAAA;QAEI,IAAJ,gBAAA,CAAA,IAAA,GAAA,aAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA;QACI,EAAJ,CAAA,CAAA,IAAA,KAAA,EAAA,IAAA,IAAA,CAAA,cAlM6C,CAAG,GAkMhD,CAAA,CAAA,CAAA,CAAA;YACQ,MAAR,IAAA,KAAA,CAAA,qDAAA,IAAA,CAAA,SAAA,OAAA,CAAA,CAAA;QACA,CAAA;QACA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA;QACI,IAAJ,gBAAA,CAlMe,YAAmB,GAAM,EAkMxC,CAAA;QACA,EAAA,CAAA,CAAA,IAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;;;;IAIA,CAAA;IACA;;OAEA;IACA,oCAAA,GAAA;QACA,IAAA,gBAAA,CAAA,MAAA,GApM6B,EAoM7B,CApMqC;QAqMrC,EAAA,CAAA,CAAA,IAAQ,CAAR,cAAA,CApMsB,GAoMtB,CAAA,CAAA,CAAA,CAAA;YACA,IAAQ,CAAR,OAAA,CAAA,GAAA,CAAA,CAAA;YACA,IAAA,CAAA,eAAA,CAAA,MAAA,CAAA,CAAA;YACA,OAAA,IAAA,CAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,IAAA,CAAA,cAAA,CAAA,GAAA,CAAA,EAAA,CAAA;gBACA,IAAA,CApMW,OAoMX,CAAA,GAAA,CAAA,CAAA;gBACA,IAAA,CAAA,eAAA,CAAA,MAAA,CAAA,CAAA;;;;IAIA,CAAA;IACA;;OAEA;IAEA,iCAAA,GAAA;QACA,EAAA,CAAA,CAAA,IAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;;;;IAIA,CAAA;IACA;;OAEA;IACA,qCAAA,GAAA;QACA,IAAA,gBAAA,CAAA,MAAA,GAAA,EAAA,CAAA;QACI,OAxMO,IAwMX,CAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,IAAA,CAAA,cAAA,CAAA,GAAA,CAAA,EAAA,CAAA;YACA,IAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA;;;;;IAKA;;;OAGA;IACA,8BAAA,GAAA,UAAA,MAAA;QACI,IAAJ,gBAAA,CAAA,GAAA,GAAA,aAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA;QACI,EAAJ,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA;YACQ,MAAR,CAAA;QACA,CAAA;QACA,IAAM,CAAN,OAAA,CAAA,GAAA,CAAA,CAAA;QACA,IAAM,gBA3MgB,CA2MtB,KAAA,GAAA,EAAA,CAAA;QACA,EAAA,CAAA,CAAA,IAAQ,CAAR,cAAA,CAAA,GA3M2B,CA2M3B,CAAA,CAAA,CAAA;YACA,IAAQ,CAAR,OAAA,CAAA,GA3Mc,CAAO,CA2MrB;YACA,IAAA,gBAAA,CAAA,UAAA,GAAA,aAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA;YACA,EAAA,CAAA,CAAA,UAAA,CAAA,CAAA,CAAA;gBAEA,KA3MY,GA2MZ,UAAA,CAAA;gBACA,IAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAAA;;;;;IAKA;;;OAGA;IACA,mCAAA,GAAA,UAAA,MAAA;QACI,IAAJ,gBAAA,CAAA,GAAA,GAAA,gBAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA;QACI,EAAJ,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA;YACQ,MAAR,CAAA;QACA,CAAA;QACA,IAAM,CAAN,OAAA,CAAA,GAAA,CAAA,CAAA;QACA,IAAM,gBA7MgB,CA6MtB,KAAA,GAAA,EAAA,CAAA;QACA,EAAA,CAAA,CAAA,IAAQ,CAAR,cAAA,CAAA,GA7M2B,CA6M3B,CAAA,CAAA,CAAA;YACA,IAAQ,CAAR,OAAA,CAAA,GA7Mc,CAAO,CA6MrB;YACA,IAAA,gBAAA,CAAA,UAAA,GAAA,uBAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA;YACA,EAAA,CAAA,CAAA,UAAA,CAAA,CAAA,CAAA;gBAEA,KAAA,GAAA,UAAA,CAAA;gBACA,IAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAAA;YAEQ,CAAR;;QAEA,IAAA,gBAAA,CAAA,UAAA,GAAA,MAAA,CAAA,GAAA,CAAA,CAAA;QACA,IAAA,gBA7MkB,CAAO,UAAC,GAAY,MA6MtC,CAAA,KAAA,CAAA,CAAA;QACA,EAAA,CAAA,CAAA,MAAA,CAAA,cAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CAAA;YACA,4BAAA;YACA,IAAA,gBAAA,CAAA,UAAA,GAAA,MAAA,CAAA,UAAA,CAAA,CAAA;YACM,EAAN,CAAA,CAAA,CAAA,KAAgB,CA7MC,OA6MjB,CAAA,UAAA,CAAA,CAAA,CAAA,CAAA;gBACA,UAAA,GAAA,CAAA,UAAA,CAAA,CAAA;gBA7MA,MAAA,CAAA,UAAA,CAAA,GAAA,UAAA,CAAA;;YA+MM,UAAN,CAAA,IAAA,CAAA,UAAA,CAAA,CAAA;QACA,CAAK;QACL,IAAA,CAAA,CAAA;;;;;IAKA;;;OAGA;IACA,+BAAA,GAAA,UAAA,YAAA;QAEA,IAAA,gBAAA,CAAA,QAhNY,GAAO,EAgNnB,CAAA;;;YAIM,IAAN,gBAAA,CAAA,IAAA,GAAA,aAAA,CAAA,IAhNmD,CAgNnD,SAAA,CAAA,CAAA;YACA,IAAA,gBAAA,CAAA,IAAA,GAAA,IAAA,CAAA,SAAA,CAhN8C,IAAK,CAgNnD,MAAA,CAAA,CAAA;YACA,uEAAA;YAEM,8BAAN;YACM,EAAN,CAAA,CAAU,IAhNC,KAgNX,GAhNgB,IAAQ,IAAM,KAgN9B,GAAA,IAAA,IAAA,KAAA,GAAA,CAAA,CAAA,CAAA;gBACQ,MAAR,IAAkB,KAAlB,CAAA,uBAAA,IAhNiD,CAgNjD,GAhNqD,MAgNrD,CAAA,CAAA;YACA,CAAA;YACA,IAAQ,gBAhNc,CAAG,UAgNzB,SAAA,CAAA;YACA,EAAA,CAAA,CAAA,IAAA,CAAA,OAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA;gBAhNA,UAAA,GAAA,IAAkB,CAAlB,MAAA,CAAA,CAAA,EAAA,IAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,CAAA;gBAiNQ,IAAR,CAAA,OAAA,CAhNqB,UAgNrB,CAAA,CAAA;gBACA,IAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA;YAEM,CAAN;YACM,IAAN,CAAA,EAAA,CAAc,CAhNC,YAgNf,CAAA,CAhN6B,CAgN7B;gBACkE,UAAlE,GAAA,cAAA,CAAA;YACM,CAAN;YACA,IAAA,gBAhN0B,CAAC,QAgN3B,GAAA,IAAA,CAAA,aAAA,EAAA,CAAA;YACA,QAAA,CAAA,UAAA,CAAA,GAAA,MAAA,CAAA,IAAA,CAAA,QAAA,CAAA,CAAA,MAAA,KAAA,CAAA,GAAA,QAAA,CAAA,cAAA,CAAA;gBACA,IAAA,eAAA,CAAA,EAAA,EAAA,QAAA,CAAA,CAAA;YACQ,EAAR,CAAA,CAAA,IAhNU,CAAO,cAgNjB,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;gBACA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA;YACA,CAAA;QACA,CAAA;;QD7uBA,MAAA,CAAA,QAAA,CAAA;;;CCqhBA;ADjhBA;IAHA;;OAIA;IAEA,iBAAA,YAAA;QAAA,6BAAA,EAAA,mBAAA;;;;CAHA;AAYA;IAXA;;OAYA;IAEA,0BAAA,OAAA;;;;CAHA;AAYA;;;;;;;AAQA;;;;;;;AAQA;;;;;;;AASA;;;;;;;;;;;;;;GAkBA;;;;;;;;;;;OA7BA;IAAA,wBAAA,cAAA,EAAA,YAAA,EAAA,aAAA,EAAA,OAAA,EAAA,MAAA;QALU,IAAV,CAAA,YAAA,GAAA,YAAA,CAAA;QAkDI,IAAI,CAAC,aAAT,GAAA,aAAsC,CAAC;QACvC,IAAA,CAAA,OAAA,GAAA,OAAA,CAAA;;;;IAIA,CAAA;IACA;;OAKA;IACA,8BAAA,GAAA;QAAA;;QAEA,IAAA,gBAAA,CAAA,SAAA,GA9C8B,GA8C9B,CAAA,IAAA,CAAA,SAAA,EAAA,UAAA,gBAAA,IAAA,OAAA,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA,KAAA,CAAA,OAAA,CAAA,WAAA,EAAA,KAAA,CAAA,OAAA,CAAA,QAAA,CAAA,EAAA,CAAA,CAAA,CAAA;;YAEA,EAAA,CAAA,CAAQ,CAAR,YAAA,gBA9CqC,CA8CrC,CAAA,CAAA;gBACA,iEAAA;gBAEU,KAAV,CAAA,cAAA,GA9CgC,KA8ChC,CAAA;gBACQ,mEAAR;gBACA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAA,CAAA,OAAA,CAAA,CAAA;YAEM,CAAN;YACA,EAAA,CAAA,CAAA,CAAA,YAAA,OAAA,CAAA,CAAA,CAAA;gBACA,MAAA,KAAA,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA;;;;;IA5CG;;;OAuDH;IACA,8BAAA,GAAA,UAAA,IAAA;QAAA;QACA,IAAA,gBAAA,CAAA,SAjDgC,GAAG,IAiDnC,CAAA,kBAAA,CAAA,IAAA,CAAA,QAAA,EAAA,IAAA,CAAA,MAAA,EAAA,IAAA,CAAA,IAAA,EAAA,cAAA,CAAA,CAAA;QACA,IAAA,gBAAA,CAAA,OAAA,GAAA,GAAA,CAAA,IAAA,CAAA,SAAA,EAAA,UAAA,gBAAA,IAAA,OAAA,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA,IAAA,CAAA,WAAA,EAAA,IAAA,CAAA,QAAA,CAAA,EAAA,CAAA,CAAA,CAAA;QAEA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,OAAA,EAAA,UAAA,CAAA;YACA,EAAA,CAAA,CAAA,CAAA,YAAA,OAAA,CAAA,CAAA,CAAA;gBACA,MAAA,KAAA,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA;;;;;IA/CG;;;;;;;;;;;;OAiEH;IACA,sCAAA,GAAA,UAAA,aAzDwB,EAAK,WAAA,EAAa,QAAA;QA0D1C,IAAA,gBAAA,CAAA,IAAA,GAAA,aAAA,CAAA,QAAA,CAAA,MAAA,GAAA,CAAA;;;;;;;;;;;;OAeA;IAEA,2CAAA,GAAA,UAAA,QAAA,EA/DiB,MA+DjB,EAAA,YAAA,EAAA,MAAA;QACA,EAAA,CAAA,CAAA,YAAA,CAAA,QAAA,CAAA,MAAA,KAAA,CAAA,IAAA,YAAA,CAAA,WAAA,EAAA,CAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;OA6BA;IAEA,sCAAA,GAAA,UAAA,QA5EoB,EA4EpB,YA5E0B,EAAU,MA4EpC,EAAA,QAAA,EAAA,MAAA,EAAA,cAAA;QAAA;QACA,IAAA,gBAAA,CAAA,OAAA,GAAA,EAAA,eAAA,MAAA,CAAA,CAAA;QACA,IAAA,gBA5EoB,CA4EpB,gBAAA,GAAA,GAAA,CAAA,IAAA,CAAA,OAAA,EAAA,UAAA,CAAA;YACA,IAAA,gBAAA,CAAA,SAAA,GAAA,KAAA,CAAA,yBAAA,CAAA,QAAA,EAAA,YAAA,EAAA,MAAA,EAAA,CAAA,EAAA,QAAA,EAAA,MAAA,EAAA,cAAA,CAAA,CAAA;YAEA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,SAAA,EAAA,UAAA,CAAA;gBACA,EAAA,CAAA,CAAA,CAAA,YAAA,OAAA,CAAA,CAAA,CAAA;oBACA,MAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAAA;gBACA,CAAA;gBACA,MAAA,CAAA,CAAA;YACA,CAAA,CAAA,CA5EW;QA6EX,CAAA,CAAA,CAAA;QACA,IAAA,gBAAA,CAAA,yBA5EgD,GA4EhD,SAAA,CAAA,IA5EiE,CA4EjE,gBAAA,CAAA,CAAA;QACA,IAAA,gBA5EoB,CA4EpB,MAAA,GAAA,KAAA,CAAA,IA5EyC,CA4EzC,yBAAA,EAAA,UAAA,CAAA,IAAA,OAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;QACA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,MAAA,EAAA,UAAA,CAAA,EAAA,CAAA;YAEA,EAAA,CAAA,CAAQ,CAAR,YAAA,UAAA,CAAA,CAAA,CAAA;gBACA,EAAA,CAAA,CAAA,KAAA,CAAA,gBAAA,CAAA,YAAA,EAAA,QAAA,EAAA,MAAA,CAAA,CAAA,CAAA,CAAA;oBA1Ec,MA4Ed,CAAA,EAAA,CAAA,IAAA,eAAA,CAAA,EAAA,EAAA,EAAA,CAAA,CAAA,CAAA;gBACA,CAAA;gBACA,MAAA,IAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;OA0BA;IAEA,kDAAA,GAAA,UAAA,QAAA,EAAA,YAAA,EAAA,MAAA,EA1F6C,KA0F7C,EAAA,KAAA,EAAA,MAAA,EAAA,cAAA;QACA,EAAA,CAAA,CAAM,WAAN,CAAA,KAAA,CAAA,KAAA,MA1FmC,CA0FnC,CAAA,CAAA;YACA,MAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;QAEI,CAAJ;QACA,EAAA,CAAA,CAAM,KAAN,CAAA,UAAA,KAAA,SAAA,IAAA,CAAA,CA1FmB,cA0FnB,IAAA,IAAA,CA1FqD,cAAqB,CAAM,CAAC,CA0FjF,CAAA;YACA,MAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;QAEI,CAAJ;QAEA,EAAA,CAAA,CAAA,KAAA,CAAA,UAAA,KAAA,SAAA,CAAA,CAAA,CAAA;;;;;;;;;;;;;OAgBA;IAEA,+DAAA,GAAA,UAAA,QAAA,EAAA,YAlGiB,EAkGjB,MAAA,EAAA,KAAA,EAAA,QAjGgC,EAiGhC,MAjGwC;QAmGxC,EAAA,CAAA,CAAA,KAAA,CAAA,IAAA,KAAA,IAAA,CAAA,CAAA,CAAA;;;;;;;;;;;OAaA;IACA,0EAAA,GAAA,UAAA,QAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA;QAAA;QAEI,IAAJ,gBAAA,CAAA,OAAA,GAAA,IAAA,CAAA,qBAxGwD,CAAQ,EAAE,EAwGlE,KAAA,CAAA,UAAA,EAAA,EAAA,CAAA,CAAA;QACA,EAAA,CAAA,CAAM,KAAN,CAAA,UAAA,CAAA,UAAA,CAxGY,GAAQ,CAwGpB,CAAA,CAAA,CAxGwB;YAyGlB,MAAN,CAxGa,gBAwGb,CAAA,OAAA,CAAA,CAAA;QACA,CAAK;QACL,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,kBAAA,CAAA,KAAA,EAAA,OAAA,CAAA,EAAA,UAAA,WAAA;;;;;;;;;;;;;OAjGA;IAkHA,sEAAA,GAAA,UAAA,QAAA,EAAA,YAAA,EAAA,MAAA,EAAA,KAAA,EAAA,QAAA,EAAA,MAAA;QAAA;QAEA,IAAA,yCAAA,EAAA,oBAAA,EAAA,sCAAA,EAhHqC,wBAgHrC,EAAA,oDAAA,CAAA;QACA,EAAA,CAAA,CAAM,CAAN,OAAA,CAAA;YACA,MAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;QAEI,IAAJ,gBAAA,CAAA,OAAA,GAAA,IAAA,CAAA,qBAhHwD,CAAQ,gBAgHhE,EAAA,KAAA,CAAA,UAAA,EAAA,gBAAA,CAAA,CAAA,uBAAA,CAAA,CAAA,CAAA;QACA,EAAA,CAAA,CAAM,KAAN,CAAA,UAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,CACkB,CADlB;YAGA,MAAA,CAAA,gBAAA,CAAA,OAAA,CAAA,CAAA;QACA,CAAA;;;;;;;;;;;OAaA;IAEA,iDAtHqB,GAsHrB,UAtH0B,QAsH1B,EAAA,eAAA,EAAA,KAAA,EAAA,QAAA;QAAA;QACA,EAAA,CAAA,CAAA,KAAA,CAAA,IAAA,KAtHqB,IAAI,CAsHzB,CAAA,CAAA;YACA,EAAA,CAAA,CAAA,KAAA,CAAA,YAAA,CAAA,CAAA,CAAA;gBACA,MAAA,CAAA,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,YAAA,CAAA,IAAA,CAAA,QAAA,CAAA,QAAA,EAAA,KAAA,CAAA,EAAA,UAAA,GAAA;oBAEA,CAtHa,CAAG,KAsHhB,CAAA,CAAA,CAAA,aAAA,GAAA,GAAA,CAtHsC;oBAuHtC,MAAA,CAAA,IAAA,eAAA,CAAA,QAAA,EAAA,EAAA,CAAA,CAAA;gBApHU,CAsHV,CAAA,CAAA;YACQ,CAtHC;YAAS,MAAlB,CAAyB,EAAzB,CAAA,IAAyB,eAAzB,CAAkC,QAAlC,EAAA,EAAA,CAAA,CAAA,CAAA;QAwHI,CAAJ;QACA,IAAA,4CAAA,EAAA,oBAAA,EAAA,sCAAA,EAtHU,wBAsHV,CAAA;QAEI,EAAJ,CAAA,CAAA,CAAA,OAAA,CAAA;YACM,MAAN,CAAA,OAAA,CAAA,eAAA,CAAA,CAAA;QACA,IAAA,gBAAA,CAAA,iBAAA,GAAA,QAAA,CAAA,KAAA,CAAA,SAAA,CAAA,CAAA;QAEA,IAAA,gBAAA,CAAA,YAAA,GAAA,IAtH0C,CAsH1C,cAAA,CAAA,QArHiB,EAAgB,KAqHjC,CAAA,CAAA;QAGA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,YAAA,EAtHoC,UAsHpC,YAAA;YACA,IAAA,gBAAA,CAAA,WAAA,GAAA,YAAA,CAAA,MAAA,CAAA;YACA,IAAA,gBAAA,CAAA,WAAA,GAAA,YArH8C,CAqH9C,MAAA,CAAA;YAEA,IAAA,6EAAA,EAAA,8BAAA,EAAA,kCAAA,CAAA;YAEM,EAAN,CAAA,CAAU,cAAV,CAAA,MAAA,KAAA,CAAA,IAAA,YAtHqD,CAsHrD,WAtHgE,EAAG,CAsHnE,CAAA,CAAA;gBACQ,IAAR,gBAAA,CAAA,WAAA,GAAA,KAAA,CAAA,cAAA,CAAA,WAAA,EAAA,WAAA,EAAA,YAAA,CAAA,CAAA;gBACA,MAAA,CAAA,GAAA,CAAA,IAAA,CAAA,WAAA,EAAA,UAAA,QAAA,IAAA,OAAA,IAAA,eAAA,CAAA,gBAAA,EAAA,QAAA,CAAA,EAAA,CAAA,CAAA,CAAA;YAEM,CAAN;YAEM,EAAN,CAAA,CAAA,WAtHkB,CAuHR,MADV,KArHqB,CAAA,IAqHrB,cAAA,CAAA,MAAA,KAAA,CAAA,CAAA,CAAA,CAAA;gBAGA,MAAA,CAAA,EAAA,CAAA,IAAA,eAAA,CAAA,gBAAA,EAAA,EAAA,CAAA,CAAA,CAAA;YACA,CAAA;;;;;;;;;OASA;IACA,uCAAA,GAAA,UAAA,QAAA,EAAA,KAAA;QAAA;QAEI,EAAJ,CAAA,CAAQ,KA1HC,CAAK,QA0Hd,CAAA,CAAA,CAAA;YACM,yCAAN;YAEA,MAAA,CAAA,EAAA,CAAA,IAAA,kBAAA,CAAA,KAAA,CAAA,QAAA,EAAA,QAAA,CAAA,CAAA,CAAA;QACA,CAAA;QACA,EAAA,CAAA,CAAA,KAAA,CAAA,YAAA,CAAA,CAAA,CAAA;YACA,MAAA,CAAA,QAAiB,CA1HC,IAAC,CA2HD,SADlB,CAAA,QAzHoC,CAyHpC,QAAA,EAAA,KAAA,CAAA,EAAA,UAAA,UAzHkE;gBA2HlE,EAAA,CAAA,CAAA,UA1H0B,CA0H1B,CAAA,CAAA;oBACA,MAAA,CAAA,CAAoB,CAApB,KAAA,CA1H2B,CA0H3B,CAAA,aAAA;wBACA,EA1HoB,CAAC,CA0HrB,CAAA,KAAA,CAAA,CAAA,CAAA,aAAA,CAAA;wBACA,GAAA,CAAA,IAAA,CAAA,KAAA,CAAA,YAAA,CAAA,IAAA,CAAA,QAAA,CAAA,QAAA,EAAA,KAAA,CAAA,EAAA,UAAA,GAAA;4BAEA,CAAA,CAAA,KA1He,CAAa,CA0H5B,CAAA,aAAA,GAAA,GAAA,CAAA;4BACA,MAAA,CAAA,GAAA,CAAA;wBACA,CAAA,CAAA,CAAA;gBAEA,CA1HW;gBA2HX,MAAA,CAAA,YAAA,CAAA,KAAA,CAAA,CAAA;;;;;;;;;OASA;IACA,2CA9HgB,GA8HhB,UAAA,KA9HiB,EAAO,OA8HxB;QACA,IAAM,gBAAN,CAAA,GAAA,GAAA,EAAA,CAAA;QACA,IAAA,gBAAA,CA9HoB,CAAG,GA8HvB,OAAA,CAAA,IAAA,CAAA;QACA,OAAA,IAAA,EAAA,CAAA;YAEM,GAAN,GA9HY,GA8HZ,CAAA,MAAA,CAAA,CAAA,CAAA,QAAA,CAAA,CAAA;YACA,EAAA,CAAA,CAAQ,CAAR,CAAA,gBAAA,KAAA,CAAA,CAAA,CAAA,CA9He;gBA+Hf,MAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA;YAEM,CAAC;YACP,EAAA,CAAA,CAAA,CAAA,CAAA,gBAAA,GAAA,CAAA,IAAA,CAAA,CAAA,CAAA,QAAA,CAAA,cAAA,CAAA,CAAA,CAAA,CAAA;gBACA,MAAA,CAAA,oBAAA,CAAA,KAAA,CAAA,UAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;OA0BA;;;;;;;;;OASA;IACA,0CAAA,GAAA,UAAA,gBAAA,EAAA,YAAA;QACI,IAAJ,gBAAA,CAAA,GAAA,GAAA,EAAA,CAAA;QACA,OAAA,CAAA,gBAAA,EAAA,UAAA,CAAA,EAAA,CAAA;;;;;;;;;;;OAcA;IACA,2CAAA,GAAA,UAAA,UAnJuB,EAmJvB,KAAA,EAAA,QAAA,EAnJ6B,SAmJ7B;QAAA;QACA,IAAA,gBAAA,CAAA,eAAA,GAAA,IAAA,CAAA,cAAA,CAAA,UAAA,EAAA,KAAA,CAAA,QAAA,EAAA,QAAA,EAAA,SAAA,CAAA,CAAA;QAEI,IAAJ,gBAAA,CAAA,QAAA,GAAA,EAAA,CAAA;QACA,OAAA,CAAA,KAAA,CAAA,QAAA,EAAA,UAAA,KAAA,EAAA,IAAA;;;;;;;;;;;OAcA;;;;;;;;;;;OAYA;IAEA,qCAAA,GAAA,UAAA,UAAA,EAAA,oBAAA,EAAA,SAAA;QACA,IAAA,gBAAA,CAAA,GAAA,GAAA,SAAA,CAAA,oBAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,CAAA;;;;;;;;;OASA;IACA,qCAAQ,GAAR,UAAA,oBAlKwB,EAkKxB,cAAA;QACA,IAAA,gBAAA,CAAA,GAAA,GAAA,CAAA,CAAA;QACA,GAAA,CAAA,CAAA,UAAA,EAAA,iCAAA,EAAA,4BAAA,EAAA,IAAA;YAAO,IAAP,CAAA,uBAAA;YACM,EAAN,CAAS,CAAT,CAlKU,CAAE,IAkKZ,KAAA,oBAAA,CAAA,IAAA,CAAA,CAAA,CAAA;gBACA,cAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA;gBACA,MAAA,CAAA,CAAA,CAAA;YACA,CAAA;YACA,GAAA,EAAA,CAAA;SAEA;;;;;;;;;GAhKA;AAwLA,mBAAA,cAtLc,EAsLd,KAAA;IACA,IAAA,gBAAA,CAAA,OAAA,GAAA,KAAA,CAAA,OAAA,CAAA;IACA,EAAA,CAAA,CAAI,CAAJ,OAAA,IAAA,OAAA,CAAA,MAtL8B,KAAC,CAAK,CAsLpC;QACA,MAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAAA;IAEE,IAAF,gBAtLwB,CAsLxB,GAtL4B,GAsL5B,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,EAAA,UAAA,CAAA;QACA,IAAA,gBAAA,CAAA,KAAA,GAAA,cAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;;;;;;;;;;GAgBA;AACA,eAAA,YAAA,EAAA,KAAA,EAAA,QAAA;IACA,IAAA,gBAAA,CAAA,OAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,gBAAA,EAAA,gBAAA,CAAA,CAAA,EAAA,CAAA,EAAA,SAAA,EAAA,CAAA,EAAA,uBAAA,EAAA,EAAA,EAAA,CAAA;IAEA,EAAA,CAAA,CAAI,KAAJ,CAAA,IAAA,KAAA,EAAA,CA3LqB,CA2LrB,CAAA;QACA,EAAA,CAAA,CAAA,CAAA,KAAA,CAAA,SAAA,KAAA,MAAA,CAAA,IAAA,CAAA,YAAA,CAAA,WAAA,EAAA,IAAA,QAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA;YAEA,MAAA,CAAA,EAAA,OAAA,EAAA,KAAA,EA3LkB,gBA2LlB,EAAA,EAAA,EAAA,SAAA,EAAA,CA3LmC,EA2LnC,uBAAA,EAAA,EAAA,EAAA,CAAA;QACA,CAAA;QACM,MAAN,CAAA,EAAA,OAAA,EAAA,IAAA,EAAA,gBAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CAAA,EAAA,uBAAA,EAAA,EAAA,EAAA,CAAA;IA3LA,CAAA;IA6LE,IAAF,gBAAA,CAAA,OAAA,GAAA,KAAA,CAAA,OAAA,IAAA,iBAAA,CAAA;IACA,IAAA,gBAAA,CAAA,GAAA,GAAA,OAAA,CAAA,QAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA;IACA,EAAA,CAAA,CAAI,CAAJ,GAAA,CAAA;QACI,MAAJ,CAAA,OA3Le,CAAI;IA4LnB,MAAA,CAAA;QACA,OAAA,EAAA,IAAA;QACA,gBAAA,EAAA,GAAA,CAAA,QAAA;;;;;;;;;;;GAaA;AAGA,eAjMW,YAiMX,EAjMa,gBAiMb,EAAA,cAAA,EAAA,MAAA;IACA,EAAA,CAAA,CAAA,cAAA,CAAA,MAAA,GAAA,CAAA;QAEM,0CAAN,CAAA,YAAA,EAAA,cAAA,EAAA,MAAA,CAAA,CAAA,CAAA,CAAA;QACM,IAAN,gBAAA,CAAA,CAAA,GAjMiC,IAiMjC,eAAA,CAAA,gBAjM+D,EAiM/D,8BAAA,CAAA,MAAA,EAAA,IAAA,eAAA,CAAA,cAAA,EAAA,YAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA;QACI,MAAJ,CAAA,EAAA,YAAA,EAjMU,oBAiMV,CAAA,CAAA,CAjMkB,EAiMlB,cAAA,EAAA,EAAA,EAhMsB,CAgMtB;IAGA,CAAA;IACA,EAAA,CAAA,CAAA,cAAA,CAAA,MAAA,KAAA,CAAA;QAEA,0BAAA,CAAA,YAAA,EAAA,cAAA,EAAA,MAAA,CAAA,CAAA,CAAA,CAAA;QACA,IAAA,gBAAA,CAAA,CAAA,GAAA,IAAA,eAAA,CAAA,YAAA,CAAA,QAAA,EAAA,kCAAA,CAAA,YAAA,EAAA,cAAA,EAAA,MAAA,EAAA,YAAA,CAAA,QAAA,CAAA,CAAA,CAAA;;;;;AAKA;;;GAGA;AACA,8BAAA,CAAA;IAEE,EAAF,CAAA,CAAA,CAAA,CAAA,gBAAA,KAAA,CAAA,IAAA,CAAA,CAAA,QAAA,CAAA,cAAA,CAAA,CAAA,CAAA,CAAA;QACA,IAAA,gBAAA,CAAA,CAAA,GAAA,CAAA,CAAA,QAAA,CAAA,cAAA,CAAA,CAAA;;;;;;;;;;;GAaA;AACA,4CAAA,YA1M+C,EAAG,cA0MlD,EAAA,MAAA,EAAA,QAAA;IACA,IAAA,gBAAA,CAAA,GAAA,GAAA,EAAA,CAAA;IACA,GAAA,CAAA,CAAA,UAAA,EAAA,iBAAA,EAAA,oBAAA,EAAA,IAAA;QAAA,IAAA,CAAA,eAAA;QACA,EAAA,CA1MS,CA0MT,iBAAA,CA1MyB,YA0MzB,EAAA,cAAA,EAAA,CAAA,CAAA,IAAA,CAAA,QAAA,CAAA,WAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;YACA,GAAA,CAAA,WAAA,CAAA,CAAA,CAAA,CAAA,GAAA,IAAA,eAAA,CAAA,EAAA,EAAA,EAAA,CAAA,CAAA;;;;;;;;;GAUA;AACA,wCA9MyB,MA8MzB,EA9M0C,mBA8M1C;IACA,IAAA,gBAAA,CA9MW,GAAW,GA8MtB,EAAA,CAAA;IACA,GAAA,CAAA,cAAA,CAAA,GAAA,mBAAA,CAAA;IACA,GAAA,CAAA,CAAA,UAAA,EAAA,iBAAA,EAAA,oBAAA,EAAA,IAAA;QAAA,IAAA,CAAA,eAAA;QACA,EAAA,CA9MS,CA8MT,CAAA,CA9MS,IA8MT,KAAA,EAAA,IAAA,WAAA,CAAA,CAAA,CAAA,KAAA,cAAA,CAAA,CAAA,CAAA;YACA,GAAA,CAAA,WAAA,CAAA,CAAA,CAAA,CAAA,GAAA,IAAA,eAAA,CAAA,EAAA,EAAA,EAAA,CAAA,CAAA;;;;;;;;;;GAYAA;AACA,oDAAA,YAAA,EAAA,cAAA,EAAA,MAAA;IACA,MAAA,CAAA,MAAA;;;;;;;;;;;;;;;;;;;GAqBA;AAEA,2BAAA,YAAA,EAAA,cA7NqD,EA6NrD,CAAA;IACA,EAAA,CAAA,CAAA,CAAA,YAAA,CAAA,WAAA,EAAA,IAAA,cAAA,CAAA,MAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,SAAA,KAAA,MAAA,CAAA,CAAA,CAAA;;;;;AAKA;;;;ADxXA,qBAAA,KAAA;;;;;;;GAQA;AACA,wBAAA,MAAA,EAAA,UAAA;IAAA,2BAAA,EAAA,eAAA;IACA,2CAAA;IACA,GAAA,CAAA,CAAA,IAAA,gBAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,MAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA,CAAA;QACA,IAAA,gBAAA,CAAA,KAAA,GAAA,MAAA,CAAA,CAAA,CAAA,CAAA;;;;;;;;;GASA;;;ibAaG,CAAH,CAAA;IACE,CAAF;IACA,EAAA,CAAA,CAAI,KAAJ,CATU,OASV,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;QAEA,MAAA,IAAA,KAAA,CAAA,qCAAA,QAAA,iCAAA,CAAA,CAAA;IACE,CAAF;IACA,EAAA,CAAA,CAAI,CAAJ,KATU,CASV,SACQ,IADR,CAAA,KAAA,CAAA,MAAA,IAAA,KAAA,CAAA,MAAA,KAAA,cAAA,CAAA,CAAA,CAAA,CAAA;QAEA,MAAA,IAAA,KAAA,CAAA,qCAAA,QAAA,4DAAA,CAAA,CAAA;IACE,CAAF;IACA,EAAA,CAAA,CAAI,KAAJ,CATU,UAUF,IADR,KAAA,CAAA,QAAA,CAAA,CAAA,CAAA;QAEA,MAAA,IAAA,KAAA,CAAA,qCAAA,QAAA,uDAAA,CAAA,CAAA;IACE,CAAF;IACA,EAAA,CAAA,CAAI,KAAJ,CATU,UAUF,IADR,KAAA,CAAA,YAAA,CAAA,CAAA,CAAA;QAEA,MAAA,IAAA,KAAA,CAAA,qCAAA,QAAA,2DAAA,CAAA,CAAA;IACE,CAAF;IACA,EAAA,CAAA,CAAI,KAAJ,CATU,QASV,IAAA,KAAA,CAAA,YAAA,CAAA,CAAA,CAAA;QAEA,MAAA,IAAA,KAAA,CAAA,qCAAA,QAAA,yDAAA,CAAA,CAAA;IACE,CAAF;IACA,EAAA,CAAA,CAAI,KAAJ,CATU,UAUF,IADR,KAAA,CAAA,SAAA,CAAA,CAAA,CAAA;QAEA,MAAA,IAAA,KAAA,CAAA,qCAAA,QAAA,wDAAA,CAAA,CAAA;IACE,CAAF;IACA,EAAA,CAAA,CAAI,KAAJ,CATU,IAAI,IASd,KAAA,CAAA,OAAA,CAAA,CAAA,CAAA;QAEA,MAAA,IAAA,KAAA,CAAA,qCAAA,QAAA,gDAAA,CAAA,CAAA;IACE,CAAF;IACA,EAAA,CAAA,CAAI,KAAJ,CATU,UAUF,KADR,KAAA,CAAA,IAAA,CAAA,KAAA,CAAA,SAAA,IAC2C,CAD3C,KAAA,CAAA,QAAA,IAAA,CAAA,KAAA,CAAA,YAAA,CAAA,CAAA,CAAA;QAEA,MAAA,IAAA,KAAA,CAAA,qCAAA,QAAA,8FAAA,CAAA,CAAA;IACE,CAAF;IACA,EAAA,CAAA,CAAI,KAAJ,CATU,IAAI,KAAA,KASd,CAAA,IAAA,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,CAAA,CATqB,CASrB;QACA,MAAA,IAAA,KAAA,CAAA,qCAAA,QAAA,6DAAA,CAAA,CAAA;IACE,CAAF;IACA,EAAA,CAAA,CAAI,OAAJ,KAAA,CAAA,IAAA,KAAA,QAAA,IAAA,KAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA,CAAA,KAAA,GAAA,CAAA,CAAA,CAAA;QAEI,MATM,IAAI,KAAA,CAUN,qCADR,QACmD,sCADnD,CAAA,CAAA;IAEA,CAAG;IACD,EAAF,CAAA,CAAM,KATC,CAAK,IASZ,KATa,EASb,IAAA,KAT+B,CAS/B,UAAA,KAAA,KAAA,CAAA,IAAA,KAAA,CAAA,SAAA,KAAA,KAAA,CAAA,CAAA,CATsF,CAStF;QACI,IATM,gBASV,CAAA,GAAA,GAAA,sFAAA,CAAA;QAEA,MAAA,IAAA,KAAA,CAAA,8CAAA,QAAA,0BAAA,KAAA,CAAA,UAAA,0CAAA,GAAA,CAAA,CAAA;IACE,CAAF;IACA,EAAA,CAAA,CAAI,KAAJ,CAAA,SATmB,KAAC,KASpB,CAAA,IAAA,KAAA,CAAA,SAAA,KAAA,MAAA,IAAA,KAAA,CAAA,SAAA,KAAA,QAAA,CAAA,CAAA,CAAA;QACA,MAAA,IAAA,KAAA,CAAA,qCAAA,QAAA,uDAAA,CAAA,CAAA;IACA,CAAA;;;;;;;;;GASA;AACA,qBAAA,UAAA,EAAA,YAAA;IACA,EAAA,CAAA,CAAI,CAAJ,YAAA,CAAA,CAAA,CAAA;QACA,MAAA,CAAA,UAAA,CAAA;IAbA,CAAA;IAcA,EAAA,CAAA,CAAI,CAAJ,UAAA,IAAA,CAAA,YAAA,CAAA,IAAA,CAAA,CAAA,CAAA;QACA,MAAA,CAAA,EAAA,CAAA;IAbA,CAAA;IAcA,IAAI,CAAJ,EAAA,CAAA,CAAA,UAAA,IAbW,CAAa,YAaxB,CAAA,IAAA,CAAA,CAAA,CAAA;QACA,MAAA,CAAA,UAAA,MAAA,CAAA;IAbA,CAAA;IAcA,IAAI,CAAJ,EAAA,CAAA,CAAA,CAAA,UAAA,IAbe,YAaf,CAAA,IAbyC,CAazC,CAAA,CAAA;QACA,MAAA,CAAA,YAAA,CAAA,IAAA,CAAA;IACA,CAAA;;QDjdA,MAAA,CAAA,UAAA,SAAA,YAAA,CAAA,IAAA,CAAA;;;;;;;;;;AAeA;;;;IAIA,cAAA,IAAA;QANyB,IAAA,CAAK,KAAC,GAM/B,IAN0C,CAM1C;IAN2C,CAM3C;;;;;;;;;;;;;OASA;;;;;;;;;OASA;;;;;;;;;OASA;;;;;;;;;OAFA;IAYA,uBAAA,GAAA,UAAA,CAAA;QACI,IAAJ,gBAV0B,CAU1B,CAV0B,GAU1B,QAAA,CAAA,CAAA,EAAA,IAAA,CAAA,KAAA,EAAA,EAAA,CAAA,CAAA;QACA,EAAA,CAAA,CAAA,CAAA,CAAA,MAAA,GAAA,CAAA,CAAA;;;;;;;;;;;;CA3CA;;;;;;GAoEA;AACA,kBAAA,QAAA,EAAA,CAAA;IACA,EAAA,CAAA,CAAI,QAAJ,KAAA,CAAA,CAAA,KAAA,CAAA;QAzBA,MAAA,CAAA,CAAA,CAAA;IA0BA,GAAA,CAAA,CAAA,UAAA,EAAA,KAAA,CAAA,CAAA,QAAA,EAAA,cAAA,EAAA,IAAA;QAAA,IAAA,EAAA,SAAA;QACA,IAAA,gBAAA,CAAA,CAAA,GAAA,QAAA,CAAA,QAAA,EAAA,EAAA,CAAA,CAAA;QACA,EAAA,CAAA,CAAA,CAAA,CAAA;;;;;;;;;;;GArBA;AAiCA,kBAAA,QAAA,EAAA,CAAA,EAAA,SA/BqB;IAgCrB,SAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;IACA,EAAA,CAAA,CAAI,QAAJ,KAAA,CAAA,CAAA,KAAA,CAAA;QACI,MA/BM,CA+BV,SA/BmB,CA+BnB;IA/BA,GAAA,CAAA,CAAA,UAAA,EAAA,KAAA,CAAA,CAAA,QAAA,EAAA,cAAA,EAAA,IAAA;QAAA,IAAA,EAAA,SAAA;QAgCA,IAAA,gBAAA,CAAA,MAAA,GAAA,SAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;QAEA,IA/BY,gBA+BZ,CAAA,CAAA,GAAA,QAAA,CAAA,QAAA,EAAA,EAAA,EAAA,MAAA,CAAA,CAAA;QACA,EAAA,CAAA,CAAA,CAAA,CAAA,MAAA,GAAA,CAAA,CAAA;YACA,MAAA,CAAA,CAAA,CAAA;;;;;IAKA;;;OAlCA;;;;IAuCA,CAAA;IACA;;ODtGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAqCA;IACA,qBAAA,IAAA,EAAA,QAAA;QAAA,4CAIA;;;;IAAA,CAAA;IACA;;;;;;;;;;GAkBA;AACA,0BAAA,OAAA,EAAA,aAAA;IACE,IAAF,gBAAA,CAlBQ,QAkBR,GAAA,wBAAA,CAAA,OAlBmD,EAkBnD,aAAA,CAAA,CAAA;IACE,IAAF,gBAAA,CAlBQ,QAAA,GAAW,IAAI,eAAA,CAAgB,CAkBvC,IAAA,UAAA,CAAA,EAAA,EAAA,EAAA,CAAA,CAAA,CAAA,CAAA;IACE,IAAF,gBAAA,CAlBQ,WAkBR,GAAA,IAAA,eAAA,CAAA,EAAA,CAAA,CAAA;IAGE,IAAF,gBAAA,CAAA,SAAA,GAlBqC,IAkBrC,eAAA,CAAA,EAAA,CAAA,CAAA;IACE,IAAF,gBAlBa,CAAY,gBAkBzB,GAAA,IAAA,eAlB+E,CAAC,EAkBhF,CAAA,CAAA;IACA,IAAA,gBAAA,CAAA,QAAA,GAAA,IAAA,eAAA,CAAA,EAAA,CAAA,CAAA;;;;;;;;;GAUA;AACA,kCAAA,OAtBsB,EAsBtB,aAAA;IACE,IAAF,gBAAA,CAtBQ,WAsBR,GAAA,EAtBwB,CAsBxB;IAGE,IAAF,gBAAA,CAAA,SAAA,GAtBqC,EAsBrC,CAAA;IACA,IAAA,gBAAA,CAAA,gBAAA,GAAA,EAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAgBA;IAEA,wBAAA,GAAA,EAAa,MAAb,EAAA,WAAA,EAAA,QAAA,EAAA,IAAA,EAAA,MAAA,EAAA,SAAA,EAAA,cAAA;QAEa,IAAb,CAAA,GAAA,GAAA,GAAA,CAAA;QAEa,IAAb,CAAA,MAAa,GAAA,MAAA,CAAQ;QAGR,IAAb,CAAA,WAAA,GAAA,WAAA,CAAA;QA2BI,IAAI,CAAC,QAAT,GAAA,QAAA,CAAA;QACA,IAAA,CAAA,IAAA,GAAA,IAAA,CAAA;;;;;;QAKA;;;;;;;;;QAKA;;;;;;;;;QAKA;;;;;;;;;QAKA;;;;;;;;;QAKA;;;;;;;;IASA,sBAAA,wCAAA;QAJA;;;;aAIA,cAAA,MAAA,CAAA,IAAA,CAAA,YAAA,CAAA,YAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;;;OAAA;IACA;;OAEA;IAEA,iCAAA,GAAA;;;;;;;;;GAmEA;AACA,oCAAA,KA9FoB;IA+FpB,IAAA,gBAAA,CAAA,UA9FU,GAAS,KA8FnB,CAAA,YAAA,CAAA;;IAEA,OAAA,qBAAA,IAAA,CAAA,EAAA,CAAA;QACA,IAAA,gBAAA,CAAA,OAAA,GAAA,UAAA,CAAA,qBAAA,CAAA,CAAA;QAGA,IAAA,gBAAA,CAAA,MAAA,GAAA,UAAA,CAAA,qBAAA,GAAA,CAAA,CAAA,CAAA;QA9FA,0EAAA;QA+FA,EAAA,CAAA,CAAM,OAAN,CAAA,WAAA,IA9F4B,OA8F5B,CAAA,WAAA,CAAA,IAAA,KAAA,EAAA,CAAA,CAAA,CAAA;YAEA,qBAAA,EAAA,CAAA;QA9FA,CAAA;QA+FA,IAAM,CAAN,EAAA,CAAA,CAAA,CAAY,MAAZ,CAAA,SAAA,CAAA,CAAA,CAAA;YACA,qBAAA,EAAA,CAAA;QACA,CAAA;QAEA,IAAA,CAAA,CAAA;YACA,KAAA,CAAA;QACI,CAAJ;IACA,CAAA;IACA,MAAA,CAAA,UAAA,CAAA,KAAA,CAAA,qBAAA,CAAA,CAAA,MAAA,CAAA,UAAA,GAAA,EAAA,IAAA;QACA,IAAA,gBAAA,CAAA,MA9FmB,GA8FnB,KA9F6B,CA8F7B,GA9FiC,CA8FjC,MA9FiC,EAAS,IAAG,CAAA,MA8F7C,CAAA,CAAA;QACA,IAAA,gBAAA,CAAA,IAAA,GAAA,KAAA,CAAA,GAAA,CAAA,IAAA,EAAA,IAAA,CAAA,IAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAlDA;IAEA,gCAAA,GAAA,EAAa,MAAb,EAAA,WAAA,EAAA,QAAA,EAAA,IAAA,EAAA,MAAA,EAAA,SAAA,EAAA,WAAA,EAAA,UAAA,EAAA,aAAA,EAAA,OAAA;QAEa,IAAb,CAAA,GAAA,GAAA,GAAA,CAAA;QAEa,IAAb,CAAA,MAAa,GAAA,MAAA,CAAQ;QAER,IAAb,CAAA,WAAA,GAAA,WAAA,CAAA;QAgHI,IAAI,CAAC,QAAT,GAAA,QAAA,CAAA;QACI,IAAI,CAAC,IAAT,GAAA,IAAoB,CAApB;QACI,IAAI,CAAC,MAAT,GAAA,MAAA,CAAA;QACI,IAAI,CAAC,SAAT,GAAA,SAAA,CAAA;QACA,IAAA,CAAA,YAAA,GAAA,WAAA,CAAA;;;;;;QAKA;;;;;;;;;QAKA;;;;;;;;;QAKA;;;;;;;;;QAKA;;;;;;;;;QAKA;;;;;;;;IASA,sBAAA,gDAAA;QAJA;;;;aAIA,cAAA,MAAA,CAAA,IAAA,CAAA,YAAA,CAAA,YAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;;;OAAA;IACA;;OAEA;IACA,yCAAA,GAAA;QACA,IAAA,gBAAA,CAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,CAAA,UAAA,OAAA,IAAA,OAAA,OAAA,CAAA,QAAA,EAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA;QAEA,IAAA,gBAAA,CAAA,OAAA,GAAA,IAAA,CAAA,YAAA,GAAA,IAAA,CAAA,YAAA,CAAA,IAAA,GAAA,EAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAsGA;IACA,6BAAA,GAAA,EAAA,IAAA;QAAA,4CAIA;;;;IAAA,CAAA;IACA;;;;;;;;;;;GAmBA;;;;;AAKA;;;GAGA;;;;;;;;;;;GAWA;AACA,+BAAA,KAAA;IACA,EAAA,CAAA,CAAA,KAAwB,CAvNZ,QAuNZ,CAAA,CAAA,CAAA;QACA,IAAA,gBAAA,CAAA,eAAA,GAAA,KAAA,CAAA,QAAA,CAAA;QACI,KAAJ,CAAA,QAAA,GAAA,KAAA,CAAA,eAvNqC,CAAM;QAwN3C,EAAA,CAAA,CAAM,CAAkB,YAAxB,CAAA,eAvNkC,CAAK,WAuNvC,EAAA,KAAA,CAAA,eAAA,CAAA,WAAA,CAAA,CAAA,CAAA,CAAA;YACA,CAAA,CAAA,KAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAA,CAAA,KAAA,CAAA,eAAA,CAAA,WAAA,CAAA,CAAA;QACI,CAAJ;QACA,EAAA,CAAA,CAAM,eAvNa,CAAM,QAuNzB,KAAA,KAAA,CAAA,eAvNsD,CAAM,QAuN5D,CAAA,CAAA,CAAA;YACA,CAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,CAAA,IAAA,CAAA,KAAA,CAAA,eAAA,CAAA,QAAA,CAAA,CAAA;QACI,CAAJ;QACA,EAAA,CAAA,CAAM,CAAkB,YAvNF,CAAC,eAuNvB,CAAA,MAAA,EAAA,KAAA,CAvNmD,eAuNnD,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA;YACA,CAAA,CAAA,KAAA,CAAA,MAAA,CAAA,CAAA,CAAA,IAAA,CAAA,KAAA,CAAA,eAAA,CAAA,MAAA,CAAA,CAAA;QACI,CAAJ;QACA,EAAA,CAAA,CAAM,CAAkB,kBAvNC,CAAI,eAuN7B,CAAA,GAAA,EAvNoC,KAAgB,CAAI,eAuNxD,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;YACA,CAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,CAAA,IAAA,CAAA,KAAA,CAAA,eAAA,CAAA,GAAA,CAAA,CAAA;QACA,CAAA;QAvNA,EAAA,CAAA,CAAA,CAAA,yBAAA,CAAA,eAAA,EAAA,KAAA,CAAA,eAAA,CAAA,CAAA,CAAA,CAAA;YAwNA,CAAS,CAvNC,KAuNV,CAAA,IAAA,CAvNqB,CAuNrB,CAAA,IAvN2B,CAuN3B,KAAA,CAAA,eAAA,CAAA,IAAA,CAAA,CAAA;;IAGA,CAAA;IACA,IAAA,CAAA,CAAA;QACA,KAAA,CAAA,QAAA,GAAA,KAAA,CAAA,eAAA,CAAA;;;;;;;;;GAWA;AACA,mCAAA,CAAA,EAAA,CAAA;IACA,IAAA,gBAAA,CAAA,cAAA,GAAA,YAAA,CAAA,CAAA,CAAA,MAAA,EAAA,CAAA,CAAA,MAAA,CAAA,IAAA,aAAA,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA;;IDvjBA,MAAA,CAAA,cAAA,IAAA,CAAA,eAAA;;;;;;;;GAWA;;;;;;;;;;GAYA;AACA,oBAAA,kBAAA,EAAA,IAAA,EAAA,SAAA;IACA,qEAAA;IACA,EAAA,CAAA,CAAI,SAAJ,IAAA,kBAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,KAAA,EAAA,SAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA;QAGA,IAAA,gBAAA,CAAA,KAAA,GAAA,SAAA,CAAA,KAAA,CAAA;QAXA,KAAS,CAAT,eAAA,GAAgC,IAAhC,CAAA,KAAA,CAAA;QAYI,IAAJ,gBAAA,CAXU,QAYgB,GAD1B,qBAAA,CAAA,kBAV+E,EAU/E,IAVqF,EAUrF,SAAA,CAAA,CAAA;QAEI,MAAJ,CAAA,IAAA,QAAA,CAAA,KAAA,EAAA,QAAuC,CAXC,CAWxC;IACA,CAAA;IAEA,IAAA,CAAA,EAAA,CAAA,CAAA,kBAAA,CAAA,QAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;QAXA,IAAA,gBAAA,CAAA,MAAA,GAAA,CAAA,CAAA,kBAAA,CAAA,QAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA;QAYI,mCAAJ,CAAA,IAAA,EAAA,MAAA,CAAA,CAAA;QACI,MAAJ,CAAA,MAAA,CAAA;IACA,CAAA;IACA,IAAA,CAAA,CAAA;QACA,IAAA,gBAAA,CAAA,KAAA,GAAA,oBAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA;;;;;;;;;GAUA;AACA,6CAAA,IAf+C,EAe/C,MAfuD;IAgBvD,EAAA,CAAA,CAAI,IAAJ,CAAA,KAfc,CAed,WAAA,KAAA,MAAA,CAAA,KAAA,CAAA,WAAA,CAAA,CAAA,CAAA;QACA,MAAA,IAAA,KAAA,CAAA,uEAAA,CAAA,CAAA;IACE,CAAF;IACE,EAAF,CAAA,CAAA,IAAA,CAAA,QAAA,CAAA,MAAA,KAAA,MAAA,CAAA,QAAA,CAAA,MAfoC,CAepC,CAAA,CAAA;QACI,MAAJ,IAAA,KAAA,CAAA,4EAAA,CAAA,CAAA;IACA,CAAG;IACH,MAAA,CAAA,KAAA,CAAA,eAAA,GAAA,IAAA,CAAA,KAAA,CAAA;;;;;;;;;;GAYA;AACA,+BAAA,kBAAA,EAAA,IAAA,EAAA,SAAA;IACA,MAAA,CAAA,IAAA,CAAA,QAAA,CAAA,GAAA,CAAA,UAAA,KAAA;QACA,GAAA,CAAA,CAAA,UAAA,EAAA,KAAA,SAAA,CAAA,QAAA,EAAA,cAAA,EAAA,IAAA;YAAA,IAAA,CAAA,SAAA;YACA,EAAA,CApBW,CAoBX,kBAAA,CAAA,gBApB0C,CAAM,CAAC,CAoBjD,KAAA,CAAA,QAAA,EAAA,KAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;gBACA,MAAA,CAAA,UAAA,CAAA,kBAAA,EAAA,KAAA,EAAA,CAAA,CAAA,CAAA;YACA,CAAA;;;;;AAKA;;;;ADlFA,8BAAA,CAAA;;;;;;;;;;GAaA;AAEA,uBAAA,KAAA,EARQ,OAQR,EAAA,QAAA,EAAA,WARyC,EAQzC,QAAA;IAEE,EAAF,CAAA,CAAM,QAAN,CAAA,MAAA,KAAA,CAAA,CAAA,CAAA,CAAA;QACI,MAAJ,CARW,IAAA,CAAK,OAAC,CAAO,IAAC,EAAK,OAQ9B,CAAA,IAAA,EAAA,OAAA,EAAA,WAAA,EAR2D,QAQ3D,CAAA,CAAA;IACA,CAAG;IAED,IAAF,gBAAA,CARQ,GAQR,GAAA,iBAAA,CAAA,QAAA,CAAA,CAAA;IAEE,EAAF,CAAA,CAAA,GAAA,CAAA,MAAA,EAAA,CAAA,CAAA,CAAA;QACM,MAAN,CAAA,IAAA,CAAA,OAAA,CAAA,IAAA,EAAgC,IAAhC,eAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,OAAA,EAAA,WAP0D,EAO1D,QAPiE,CAAI,CAOrE;IAEA,CAAA;IACE,IAAF,gBAAA,CAAA,gBAAA,GAAA,oBAAA,CAAA,GARoE,EAQpE,OAAA,EARoE,KAQpE,CAAA,CAAA;IACA,IAAA,gBAAA,CAAA,YAAA,GAAA,gBAAA,CAAA,eAAA;;;;;AAKA;;;;;;;;;;;;;;GAgBA;AACA,cAAQ,eAlBe,EAkBvB,eAlBwC,EAkBxC,OAlB+C,EAAI,WAkBnD,EAlBqE,QAkBrE;IACA,IAAA,gBAAA,CAAA,EAAA,GAAA,EAAA,CAAA;IACA,EAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA;QAEM,OAlBC,CAAO,WAkBd,EAAA,UAAA,KAAA,EAAA,IAAA;YACA,EAAA,CAlBW,IAAI,CAkBf,GAAA,KAAA,CAAA,OAAA,CAAA,KAlBwB,CAkBxB,GAlBwC,KAkBxC,CAAA,GAAA,CAlB4C,UAAS,CAAC,IAkBtD,OAAA,KAAA,CAAA,EAAA,CAAA,CAAA,GAAA,KAAA,KAAA,CAAA;QACA,CAAA,CAAA,CAAA;IAEE,CAAF;IACA,EAAA,CAAA,CAAA,OAAA,CAAA,IAAA,KAAA,eAAA,CAAA,CAAA,CAAA;;;;;;;;;;GAYA;AACA,wBAAA,OAvBgB,EAuBhB,UAAA,EAvB6B,UAuB7B;IACA,IAAA,gBAAA,CAAA,QAAA,GAAA,EAAA,CAAA;IAvBA,OAAA,CAAA,OAAA,CAAA,QAAA,EAAA,UAAA,CAAA,EAAA,UAAA;QAwBA,EAAA,CAAA,CAAM,CAAN,KAAA,UAAA,CAAA,CAAA,CAvBgB;YAwBhB,QAAA,CAAA,UAAA,CAAA,GAAA,UAAA,CAAA;QACA,CAAA;QACA,IAAA,CAAA,CAAA;YACA,QAAA,CAAA,UAAA,CAAA,GAAA,cAAA,CAAA,CAAA,EAAA,UAAA,EAAA,UAAA,CAAA,CAAA;QACA,CAAA;;;;;;;;;OApBA;IA8BA,oBAAA,UAAsB,EAAtB,kBAAA,EAAA,QAAA;QACA,IAAM,CAAN,UAAA,GAAA,UAAA,CAAA;QACA,IAAA,CAAA,kBAAA,GAAA,kBAAA,CAAA;QAEI,IAAJ,CAAA,QAAA,GAAA,QAAA,CAAA;QACI,EAAJ,CAAA,CAAQ,UAAR,IAAA,QAAA,CAAA,MAAA,GAAA,CAAA,IAAA,cAA2D,CAA3D,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;YACM,MAAM,IAAI,KAAK,CAAC,4CAAtB,CAAA,CAAA;QACA,CAAK;QACL,IAAA,aAAA,GAAA,QAAA,CAAA,IAAA,CAAA,UAAA,CAAA,IAAA,OAAA,OAAA,CAAA,KAAA,QAAA,IAAA,CAAA,IAAA,IAAA,IAAA,CAAA,CAAA,OAAA,EAAA,CAAA,CAAA,CAAA;;;;IA3BG,CAAH;IAgCA;;OAEA;IAEA,2BAAA,GAAA;;;;;;;;;GAiBA;AAEA,2BAAA,QAAA;IACE,EAAF,CAAA,CAAA,CAAA,OAAA,QAAA,CA5CM,CA4CN,CAAA,KAAA,QAAA,CAAA,IAAA,QAAA,CAAA,MAAA,KAAA,CAAA,IAAA,QAAA,CAAA,CAAA,CAAA,KAAA,GAAA,CAAA,CAAA,CAAA;QAEA,MAAA,CAAA,IAAA,UAAA,CA5CQ,IA4CR,EAAA,CAAA,EAAA,QAAA,CA5C+B,CAAM;IA6CrC,CAAA;IACA,IAAA,gBAAA,CAAA,kBAAA,GAAA,CAAA,CAAA;IACA,IAAA,gBAAA,CAAA,UAAA,GAAA,KAAA,CAAA;IACA,IAAA,gBAAA,CA5CiB,GA4CjB,GAAA,QAAA,CAAA,MA5C6C,CA4C7C,UAAA,GAAA,EAAA,GAAA,EAAA,MAAA;QACA,EAAA,CAAA,CAAA,OAAA,GAAA,KAAiB,QAAjB,IAAA,GAAA,IAAA,IAAA,CA5CiC,CA4CjC,CAAA;YACA,EAAA,CAAA,CAAA,GA5CW,CA4CX,OAAA,CAAA,CAAA,CAAA;gBACQ,IAAR,gBAAA,CAAA,SAAA,GAAA,EAAA,CAAA;gBACA,OAAA,CAAA,GAAA,CAAA,OAAA,EAAA,UAAA,QAAA,EAAA,IAAA;oBA1Cc,SA4Cd,CAAA,IAAA,CA5C2B,GA4C3B,OAAA,QAAA,KAAA,QAAA,GAAA,QAAA,CAAA,KAAA,CAAA,GAAA,CAAA,GAAA,QAAA,CAAA;gBACQ,CAAR,CAAA,CAAA;gBACA,MAAA,CAAA,GAAA,SAAA,EAAA,OAAA,WAAA,EAAA,GAAA;YACA,CAAA;YAEQ,EA5CE,CA4CV,CAAA,GAAA,CAAA,WAAA,CAAA,CAAA,CAAA;gBACA,MAAA,CAAA,GAAA,SA5C0B,GA4C1B,CAAA,WAAA,GAAA;YACA,CAAA;QAEI,CAAJ;QACA,EAAA,CAAA,CAAM,CAAN,CAAA,OA5CW,GA4CX,KAAA,QAAA,CAAA,CAAA,CAAA,CAAA;YACA,MAAA,CAAA,GAAA,SAAA,GAAA,GA5CyB;QA8CzB,CAAA;QA5CA,EAAA,CAAA,CAAA,MAAA,KAAA,CAAA,CAAe,CAAf,CAAA;YA6CA,GAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,OAAA,CAAA,UAAA,OAAA,EAAA,SAAA;gBACA,EAAA,CAAA,CAAA,SAAA,IAAA,CAAA,IAAA,OAAA,KAAA,GAAA,CAAA,CAAA,CAAA;gBA5CA,CAAA;gBA6CA,IAAU,CAAV,EAAA,CAAA,CAAA,SAAA,IAA4B,CAA5B,IAAA,OAAA,KAAA,EAAA,CAAA,CAAA,CAAA;oBACA,UAAA,GAAA,IAAA,CAAA;gBA5CA,CAAA;gBA6CA,IAAU,CAAV,EAAa,CA5CC,CA4Cd,OAAA,KA5C2B,IA4C3B,CAAA,CAAA,CAAA;oBACA,kBAAA,EAAA,CAAA;gBACA,CAAA;gBAEA,IAAA,CAAA,EA5CiB,CA4CjB,CAAA,OAAA,IAAA,EAAA,CAAA,CAAA,CAAA;oBACA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA;gBA1CW,CA4CX;YACA,CAAA,CAAA,CAAA;YAEA,MAAA,CAAA,GAAA,CAAA;QACA,CAAA;QACA,MAAA,CAAA,GAAA,SAAA,GAAA,GAAA;;;;;;;;;OAzCA;IAmDA,kBAAA,YAAA,EAAA,eAAA,EAAA,KAAA;QACA,IAAA,CAAA,YAAA,GAAA,YAAA,CAAA;QAEA,IAAA,CAAA,eAAA,GAAA,eAAA,CAAA;;;;;;;;;;GAkBA;AAEA,8BAAA,GAAA,EAAA,IAAA,EAAA,KAjE4C;IAkE5C,EAAA,CAAA,CAAI,GAAJ,CAAA,UAAA,CAAA,CAAA,CAAA;QACA,MAAA,CAAA,IAAA,QAAA,CAAA,IAAA,CAAA,IAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA;IAEE,CAAF;IACE,EAAF,CAAA,CAAA,KAAA,CAAA,QAAA,CAAA,cAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA;QACA,MAAA,CAAA,IAAA,QAAA,CAAA,KAAA,CAAA,QAAA,CAjES,WAiET,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA;IAEA,CAAA;;;;;;;;;;GAWA;AACA,0CAAA,KAAA,EAAA,KAAA,EAAA,kBAAA;IACA,IAAI,gBAAJ,CAAA,CAAA,GAAA,KAAA,CAAA;IACA,IAAI,gBAAJ,CAAA,EAAA,GAAA,KAAA,CAAA;IACA,IAAI,gBAAJ,CAAA,EAAA,GAAA,kBAAA,CAAA;IACA,OAAA,EAAA,GAAA,EAtEY,EAsEZ,CAAA;QACA,EAAA,IAAA,EAAA,CAAA;QACI,CAAJ,GAAA,CAtES,CAAA,MAsET,CAAA;QACA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;YACA,MAAA,IAAA,KAtEyB,CAsEzB,2BAAA,CAAA,CAAA;QACA,CAAA;;;;;AAKA;;;GAGA;AACA,iBAAA,OAzEsB;IA0EtB,EAAA,CAAA,CAAA,OAAA,OAAA,KAAA,QAAA,IAAA,OAAA,IAAA,IAAA,IAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CAAA;;;;;AAKA;;;GAEA;AA5EA,oBAAA,QAAA;IA6EE,EAAF,CAAA,CAAA,CAAA,CAAA,OAAA,QAAA,CAAA,CAAA,CAAA,KAAA,QAAA,CAAA,CAAA;QACA,MAAA,UAAA,GAAA,cAAA,IAAA,QAAA,KAAA;;;;;;;;;;;GAWA;AACA,4BAAA,YAAA,EAjFuC,UAiFvC,EAAA,QAAA;IACA,EAAA,CAAA,CAAI,CAAJ,YAAA,CAAA,CAAA,CAAA;QACA,YAAA,GAAA,IAAA,eAAA,CAAA,EAAA,EAAA,EAAA,CAAA,CAAA;IAEE,CAAF;IACE,EAAF,CAAA,CAAA,YAAA,CAAA,QAAA,CAAA,MAAA,KAjFQ,CAiFR,IAAA,YAjFmC,CAAK,WAiFxC,EAAA,CAjF2C,CAAY,CAAC;QAkFlD,MAAN,CAjFS,0BAiFT,CAAA,YAjF6C,EAiF7C,UAAA,EAAA,QAAA,CAAA,CAAA;IACA,CAAA;IACA,IAjFM,gBAiFN,CAAA,CAAA,GAAA,YAAA,CAAA,YAAA,EAAA,UAAA,EAAA,QAAA,CAAA,CAAA;IACA,IAAA,gBAAA,CAAA,cAAA,GAjF6B,QAiF7B,CAjF0C,KAiF1C,CAjFmD,CAAK,CAAC,YAiFzD,CAjFsE,CAiFtE;IACA,EAAA,CAAA,CAAI,CAAJ,CAAA,KAjFW,IAiFX,CAAA,CAAA,SAAA,GAAA,YAjFyC,CAAA,QAiFzC,CAAA,MAAA,CAjF4C,CAAe,CAAC;QAkF5D,IAAA,gBAAA,CAAA,CAAA,GAAA,IAAA,eAAA,CAAA,YAAA,CAAA,QAAA,CAAA,KAAA,CAAA,CAAA,EAAA,CAAA,CAAA,SAAA,CAAA,EAAA,EAAA,CAAA,CAAA;QAjFA,CAAS,CAAT,QAAA,CAAA,cAAA,CAAA;YAkFA,IAAA,eAAA,CAAA,YAAA,CAAA,QAAA,CAAA,KAAA,CAjFsD,CAAG,CAAC,SAiF1D,CAAA,EAAA,YAAA,CAAA,QAAA,CAAA,CAAA;QACA,MAAA,CAAA,0BAAA,CAAA,CAAA,EAAA,CAAA,EAAA,cAAA,CAAA,CAAA;IAjFA,CAAA;IAkFA,IAAI,CAAJ,EAAA,CAAA,CAAA,CAAA,CAjFW,KAiFX,IAAA,cAAA,CAAA,MAAA,KAAA,CAjF+C,CAiF/C,CAAA,CAAA;QACA,MAAA,CAAA,IAAA,eAAA,CAAA,YAAA,CAAA,QAAA,EAAA,EAAA,CAAA,CAAA;IAjFA,CAAA;IAkFA,IAAI,CAAJ,EAAA,CAAA,CAAA,CAAA,CAjFW,KAiFX,IAAA,CAAA,YAAA,CAAA,WAAA,EAAA,CAAA,CAAA,CAjFuC;QAkFvC,MAAA,CAAA,qBAAA,CAAA,YAAA,EAAA,UAAA,EAAA,QAAA,CAAA,CAAA;IAjFA,CAAA;IAkFA,IAAI,CAAJ,EAAA,CAAA,CAAA,CAAA,CAjFW,KAiFX,CAAA,CAAA,CAAA;QACA,MAAA,CAAA,0BAAA,CAAA,YAAA,EAAA,CAAA,EAAA,cAAA,CAAA,CAAA;IACA,CAAA;;;;;;;;;;GAWA;AAtFA,oCAAA,YAAA,EAAA,UAAA,EAAA,QAAA;IAuFA,EAAA,CAAA,CAAI,QAAJ,CAAA,MAAA,KAAA,CAAA,CAAA,CAtFU,CAsFV;QACI,MAAJ,CAAA,IAAA,eAAA,CAAA,YAAA,CAAA,QAAA,EAAA,EAAA,CAAA,CAAA;IAEA,CAAA;IACA,IAAA,CAAA,CAAA;QACA,IAAA,gBAAA,CAtFkB,SAsFlB,GAAA,UAAA,CAAA,QAAA,CAAA,CAAA;QACA,IAAA,gBAAA,CAAA,UAAA,GAAA,EAAA,CAAA;QACA,OAAA,CAAA,SAAA,EAAA,UAAA,QAAA,EAAA,MAAA;YAEA,EAAA,CAAW,CAtFC,QAsFZ,KAtFyB,IAsFzB,CAAA,CAAA,CAAA;gBACU,UAtFQ,CAsFlB,MAAA,CAAA,GAtFmB,kBAsFnB,CAAA,YAAA,CAAA,QAAA,CAAA,MAAA,CAAA,EAAA,UAAA,EAAA,QAAA,CAAA,CAAA;YACA,CAAA;QACA,CAAA,CAAA,CAAA;QACA,OAAA,CAAA,YAAA,CAAA,QAAA,EAAA,UAAA,KAAA,EAAA,WAAA;YACA,EAAA,CAtFW,CAsFX,SAAA,CAAA,WAtF+B,CAsF/B,KAAA,SAAA,CAAA,CAAA,CAAA;gBACA,UAAA,CAAA,WAAA,CAAA,GAAA,KAAA,CAAA;YACA,CAAA;;;;;;;;;;GAWA;AACA,sBAAA,YAAA,EAAA,UAAA,EAAA,QAAA;IACA,IAAI,gBAAJ,CAAA,mBA3FwC,GA2FxC,CAAA,CAAA;IA3FA,IAAA,gBAAA,CAAA,gBAAA,GAAA,UAAA,CAAA;IA4FA,IAAA,gBAAA,CAAA,OAAA,GAAA,EAAA,KAAA,EAAA,KA3F8B,EA2F9B,SAAA,EAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,CAAA;IACA,OAAA,gBAAA,GAAA,YAAA,CAAA,QAAA,CAAA,MAAA,EAAA,CAAA;QACI,EAAJ,CAAA,CAAA,mBA3FU,IAAA,QA2FV,CAAA,MAAA,CAAA;YAGQ,MAAR,CAAA,OAAA,CAAA;QA3FA,IAAA,gBAAA,CAAA,IAAA,GAAA,YAAA,CAAA,QAAA,CAAA,gBAAA,CAAA,CAAA;QA6FI,IAAJ,gBAAA,CAAA,IAAA,GAAA,OA3FyC,CA2FzC,QA3FkD,CA2FlD,mBAAA,CA3FuE,CA2FvE,CAAA;QACA,IAAA,gBAAA,CA3FyB,IAAA,GA2FzB,mBAAA,GAAA,QAAA,CAAA,MAAA,GAAA,CAAA,GAAA,QAAA,CAAA,mBAAA,GAAA,CAAA,CAAA,GAAA,IAAA,CAAA;QA3FA,EAAA,CAAA,CAAA,gBAAA,GAAqD,CAArD,IAAA,IAAA,KAAA,SAAA,CAAA;YA4FM,KAAN,CAAA;QACA,EAAA,CAAA,CAAA,IAAA,IAAA,IAAA,IAAA,CAAA,OAAA,IAAA,KAAA,QAAA,CAAA,IAAA,IAAA,CAAA,OAAA,KAAA,SAAA,CAAA,CAAA,CAAA;YA3FA,EAAA,CAAA,CAAA,CAAA,OAAA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,CAAA,CAAA;gBA4FU,MAAV,CAAA,OAAA,CA3FyB;YAAzB,mBAAmD,IAAnD,CAAA,CAAA;QA4FA,CAAA;QACA,IAAA,CAAA,CAAA;YACA,EAAA,CAAA,CAAA,CAAA,OAAoB,CAApB,IAAA,EAAA,EAAA,EAAA,IAAA,CAAA,CAAA;gBACA,MAAA,CAAA,OAAA,CAAA;YAEA,mBAAA,EAAA,CAAA;QACA,CAAA;;;;;;;;;;GAYA;AACA,+BAAA,YAhG+B,EAgG/B,UAhG2C,EAAU,QAgGrD;IACA,IAAA,gBAAA,CAAA,KAAA,GAhGY,YAgGZ,CAAA,QAAA,CAAA,KAAA,CAAA,CAAA,EAAA,UAAA,CAAA,CAAA;IACA,IAAA,gBAAA,CAAA,CAAA,GAAA,CAAA,CAAA;IACA,OAAA,CAAA,GAAA,QAAA,CAAA,MAAA,EAAA,CAAA;;YAGQ,IAhGM,gBAgGd,CAAA,QAAA,GAhGmC,wBAgGnC,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA,CAAA;YACM,MAAN,CAAA,IAAA,eAAA,CAhGgB,KAgGhB,EAAA,QAAA,CAAA,CAAA;QACA,CAAA;QACA,sFAAA;QACA,EAAA,CAAA,CAAM,CAAN,KAAA,CAAA,IAAA,cAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;YACA,IAAA,gBAAA,CAAA,CAAA,GAAA,YAAA,CAAA,QAAA,CAAA,UAAA,CAAA,CAAA;YAEA,KAAA,CAAA,IAAA,CAAA,IAAA,UAAA,CAhGiB,CAgGjB,CAAA,IAAA,EAhGyB,QAAC,CAAQ,CAAC,CAAC,CAAC,CAAC,CAgGtC;YACA,CAAA,EAAA,CAAA;YACQ,QAhGQ,CAgGhB;QACA,CAAA;QACA,IAAA,gBAAA,CAAA,IAAA,GAAA,OAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA;QACA,IAAA,gBAAA,CAAA,IAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA,MAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAA,CAAA;QAhGA,EAAA,CAAA,CAAA,IAAA,IAAA,IAAA,IAAA,cAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;YAiGM,KAAK,CAhGC,IAAC,CAAI,IAAI,UAAA,CAAW,IAAC,EAAK,SAgGtC,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;YACM,CAAC,IAAP,CAAA,CAAA;QACA,CAAK;QACL,IAAA,CAAA,CAAA;YACA,KAAA,CAAA,IAAA,CAAA,IAAA,UAAA,CAhGoC,IAAI,EAgGxC,EAAA,CAAA,CAAA,CAAA;YACA,CAAA,EAAA,CAAA;;;;;AAKA;;;GAGA;AACA,kCAAA,OAAA;IACA,IAAA,gBAAA,CAAA,QAAA,GAAA,EAAA,CAAA;IACA,OAAA,CAAA,OAAA,EAAA,UAAA,QAAA,EAAA,MAAA;QACA,EAAA,CAnGS,CAmGT,QAnGkB,KAmGlB,IAAA,CAAA,CAAA,CAAA;YACA,QAAA,CAAA,MAAA,CAAA,GAAA,qBAAA,CAAA,IAAA,eAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,QAAA,CAAA,CAAA;;;;;AAKA;;;GAGA;AACA,mBAAA,MAAA;;;;;;;;;;;ADzYA,iBAAA,IAAA,EAAA,MAAA,EAAA,OAAA;IAAA,MAAA,CAAA,IAAA,IAAA,OAAA,CAAA,IAAA,IAAA,YAAA,CAAA,MAAA,EAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;;;;;;;;;;;;GAaA;;;;;;;;;;OAHA;IACA,oBAAc,iBAAd,EAAA,MAAA,EAAA,OAAA,EAAA,GAAA;QAAA,IAAA,CAAA,iBAAA,GAAA,iBAAA,CAAA;;;;IAiBA,CAAA;IACA;;OAGA;IAEA,8BAAA,GAAA;QAIA,IAAM,CAAN;YACM,IAAN,gBAAA,CAfY,gBAeZ,GAAA,OAAA,CAAA,IAAA,CAAA,OAAA,CAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,CAAA,MAAA,CAAA,CAAA,YAAA,CAAA;YACM,IAAN,gBAAA,CAAA,QAAA,GAAA,IAf4C,CAe5C,mBAAA,CAAA,IAAA,CAAA,MAAA,EAAA,gBAAA,EAAA,cAAA,CAAA,CAAA;YACM,IAAN,gBAf6B,CAe7B,IAAA,GAAA,IAAA,sBAAA,CAAA,EAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,CAAA,EAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,OAAA,CAAA,WAAA,CAAA,EAAA,IAAA,CAAA,OAAA,CAAA,QAAA,EAAA,EAAA,EAAA,cAAA,EAAA,IAAA,CAAA,iBAAA,EAAA,IAAA,EAAA,IAAA,CAAA,OAAA,CAAA,IAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA;YAEA,IAAA,gBAAA,CAAA,QAAA,GAAA,IAAA,QAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAA;YAfA,IAAgB,gBAAhB,CAAA,UAAA,GAAA,IAAA,mBAAA,CAAA,IAAA,CAAA,GAAA,EAAA,QAAA,CAAA,CAAA;YAgBM,IAAN,CAAA,qBAd6C,CAc7C,UAAA,CAAA,KAd8D,CAAC,CAAC;YAgBhE,MAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA;QACA,CAAA;;;;;IAKA;;;OAIA;IACA,0CAAA,GAAA,UAAA,SAlB+B;QAkB/B;QAEI,IAAJ,gBAAA,CAAA,KAlBgC,GAkBhC,SAAA,CAAA,KAAA,CAAA;QACA,IAAA,gBAAA,CAAA,CAAA,GAAA,0BAAA,CAAA,KAAA,CAAA,CAAA;;;;;;;;;;OAWA;IAvBA,wCAAA,GAAA,UAAA,MAAA,EAAA,YAAA,EAAA,MAAA;QAwBA,EAAA,CAAA,CAAM,YAvBY,CAuBlB,QAAA,CAAA,MAAA,KAvBkC,CAuBlC,IAAA,YAAA,CAAA,WAvBoE,EAuBpE,CAAA,CAAA,CAAA;YACA,MAAA,CAAA,IAAA,CAAA,eAAA,CAAA,MAAA,EAAA,YAAA,CAAA,CAAA;QACA,CAAA;;;;;;;;;OAWA;IACA,oCAAA,GAAA,UAAA,MAAA,EAAA,YAAA;QAAA;QACA,IAAA,gBAAA,CAAA,QAAA,GAAA,oBAAA,CAAA,YAAA,EAAA,UAAA,KAAA,EAAA,WAAA,IAAA,OAAA,KAAA,CAAA,mBAAA,CAAA,MAAA,EAAA,KAAA,EAAA,WAAA,CAAA,EAAA,CAAA,CAAA,CAAA;;;;;;;;;;;OAaA;IACA,mCAAA,GAAA,UAAA,MAAA,EAAA,YAAA,EAAA,QAAA,EAAA,MAAA;QAjCA,GAAA,CAAQ,CAAR,UAAA,EAAA,iBAAA,EAAA,oBAAA,EAAA,IAAA;YAAA,IAAA,CAAA,eAAA;YAkCA,IAAQ,CAAR;gBAjCA,MAAA,CAAA,IAA2C,CAAE,0BAA7C,CAAA,CAAA,EAAA,YAAA,EAAA,QAAA,EAAA,MAAA,CAAA,CAAA;YAkCA,CAAO;YACP,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;gBAhCS,EAiCT,CAAA,CAAA,CAAA,CAAA,CAAA,YAAA,SAAA,CAAA,CAjC+B;oBAkC/B,MAAA,CAAA,CAAA;YACA,CAAA;SAjCA;QAkCA,EAAA,CAAA,CAAM,IAAN,CAAA,gBAjCwB,CAAE,YAiC1B,EAAA,QAAA,EAAA,MAAA,CAAA,CAAA,CAAA,CAAA;YACA,MAAA,CAAA,EAAA,CAAA;QACA,CAAA;;;;;;;;;;;;;;;;;;;;OAuBA;IA5CA,+CAAA,GAAA,UAA6E,KAA7E,EAAA,UAAA,EAAA,QAAA,EAAA,MAAA;QA8CI,EAAJ,CAAA,CAAQ,KA5CC,CAAK,UA4Cd,CAAA;YACM,MAAN,IAAA,SAAA,EAAA,CAAA;QACA,EAAA,CAAA,CAAM,CAAN,KAAA,CAAA,MAAA,GAAA,KAAA,CAAA,MAAA,GA5CY,cA4CZ,CAAA,KAAA,MAAA,CAAA;YAIM,MAAN,IAAA,SAAA,EA5CkD,CA4ClD;QACA,EAAA,CAAA,CAAA,KAAA,CAAA,IAAA,KAAA,IAAA,CAAA,CAAA,CAAA;YAEA,IAAA,gBA5C6B,CA4C7B,MAAA,GA5C6B,QA4C7B,CAAA,MAAA,GAAA,CAAA,GAAA,IAAA,CAAA,QAAA,CA5CwE,CA4CxE,UAAA,GAAA,EA5CwF,CAAC;YA6CzF,IAAA,gBAAA,CAAA,UAAA,GAAA,IAAA,sBAAA,CAAA,QAAA,EAAA,MAAA,EAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,OAAA,CAAA,WAAA,CAAA,EAAA,IAAA,CAAA,OAAA,CAAA,QAAA,EAAA,OAAA,CAAA,KAAA,CAAA,EAAA,MAAA,EAAA,KAAA,CAAA,SAAA,EAAA,KAAA,EAAA,qBAAA,CAAA,UAAA,CAAA,EAAA,iBAAA,CAAA,UAAA,CAAA,GAAA,QAAA,CAAA,MAAA,EAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA;YACA,MAAA,CAAA,CAAA,IAAA,QAAA,CAAA,UAAA,EAAA,EA5CwB,CA4CxB,CAAA,CAAA;QAEI,CAAJ;QAGA,IAAA,yCAAA,EAAA,sCAAA,EAAA,0BAAA,EA5CyB,wBA4CzB,CA3C0B;QAkDtB,IAAJ,gBAAA,CAAA,iBAAA,GAAA,QAAA,CAAA,KAAA,CAAA,SAAA,CAAA,CAAA;QACA,IAAA,gBAAA,CAAA,WAAA,GAAA,cAAA,CAAA,KAAA,CA5C6B,CAAe;QA6C5C,IAAA,0EAAA,EAAA,8BAAA,EAAA,kCAAA,CAAA;QAEA,IAAA,gBAAA,CAAA,QAAA,GAAA,IAAA,sBAAA,CAAA,gBAAA,EAAA,UAAA,EAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,OAAA,CAAA,WAAA,CAAA,EAAA,IAAA,CAAA,OAAA,CAAA,QAAA,EAAA,OAAA,CAAA,KAAA,CAAA,EAAA,MAAA,EAAA,KAAA,CAAA,SAAA,EAAA,KAAA,EAAA,qBAAA,CAAA,UAAA,CAAA,EAAA,iBAAA,CAAA,UAAA,CAAA,GAAA,gBAAA,CAAA,MAAA,EAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA;QA5CA,EAAA,CAAA,CAAA,cAAA,CAAA,MAAA,KAAA,CAAA,IAAA,YAAA,CAAA,WAAA,EAAA,CAAA,CAAqE,CAAA;YA6C/D,IAAN,gBAAA,CAAA,QA5C6D,GAAG,IA4ChE,CAAA,eAAA,CAAA,WAAA,EAAA,YAAA,CAAA,CAAA;YAEA,MAAA,CAAA,CAAA,IAAA,QAAA,CAAA,QAAA,EAAA,QAAA,CAAA,CAAA,CAAA;QA5CA,CAAA;QA6CA,IAAM,CAAN,EAAA,CAAA,CAAA,WAAA,CAAA,MA5CY,KA4CZ,CAAA,IAAA,cAAA,CAAA,MA3C8B,KA2C9B,CAAA,CAAA,CAAA,CAAA;YAEM,MAAN,CA5Ca,CAAA,IAAK,QAAA,CAAgC,QAAE,EAAS,EA4C7D,CAAA,CAAA,CAAA;QACA,CAAK;QACL,IAAA,CAAA,CAAA;YACA,IAAA,gBAAA,CAAA,QAAA,GAAA,IAAA,CAAA,cAAA,CAAA,WAAA,EAAA,YAAA,EAAA,cAAA,EAAA,cAAA,CAAA,CAAA;YAEA,MAAA,CAAA,CAAA,IAAA,QAAA,CAAA,QAAA,EAAA,QAAA,CAAA,CAAA,CAAA;;;;;AAeA;;;GAzDA;AA4DA,qCAAA,KAAA;IA3DA,KAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAkD,CAAA;QA4D9C,EAAJ,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA,MAAA,KAAA,cA3DyC,CAAC;YA4D1C,MAAA,CAAA,CAAA,CAAA,CAAA;QACA,EAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA,MAAA,KAAA,cAAA,CAAA;;;;;AAKA;;;GAGA;AA9DA,wBAAA,KAAA;IA+DA,EAAA,CAAA,CAAI,KAAJ,CAAA,QA9DkB,CAAA,CAAK,CAAC;QA+DxB,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA;IA9DA,CAAA;IA+DA,IAAI,CAAJ,EAAA,CAAA,CAAA,KA9Dc,CA8Dd,YAAA,CAAA,CAAA,CAAA;QACA,MAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,CAAA,aAAA,CAAA,MAAA,CAAA;IACA,CAAA;;;;;;;;;;GAUA;AACA,iBAAA,YAAA,EAAA,KAAA,EAAA,QAAA;IAnEA,EAAA,CAAA,CAAA,KAAW,CAAX,IAAA,KAAA,EAAA,CAAA,CAAA,CAAA;QAoEA,EAAA,CAAA,CAAM,KAAN,CAAA,SAAA,KAAA,MAAA,IAAA,CAnEoC,YAAW,CAmE/C,WAnEkD,EAAY,IAAG,QAmEjE,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA;YACA,MAAA,IAAA,SAAA,EAAA,CAAA;QACA,CAAA;QAEA,IAAA,CAAA,CAAA;YACA,MAAA,CAAA,EAAA,gBAAA,EAAA,EAnEsB,EAmEtB,SAAA,EAAA,CAAA,EAAA,UAAA,EAAA,EAnEoD,EAmEpD,CAAA;QACM,CAnEC;IAAP,CAAA;IAqEE,IAAF,gBAAA,CAnEQ,OAmER,GAAA,KAnE8C,CAmE9C,OAAA,IAAA,iBAAA,CAAA;IACE,IAAF,gBAAA,CAnEyB,GAmEzB,GAAA,OAAA,CAAA,QAnEmE,EAAE,YAAW,EAAG,KAmEnF,CAAA,CAAA;IACE,EAAF,CAAA,CAAA,CAAA,GAAA,CAAA;QAEA,MAAA,IAAA,SAAA,EAnEW,CAmEX;IACA,IAAA,gBAAA,CAAA,SAAA,GAAA,EAAA,CAAA;;;;;AAKA;;;GAGA;AACA,mCAtES,KAsET;IACA,IAAA,gBAAA,CAAA,KAAA,GAtEY,EAsEZ,CAAA;IACA,KAAA,CAAA,OAAA,CAAA,UAAA,CAAA;QACA,IAAA,gBAAA,CAAA,uBAAA,GAAA,KAAA,CAAA,CAAA,CAAA,KAAA,CAAA,MAAA,CAAA,CAtEuB;QAuEvB,EAAA,CAAA,CAAA,uBAAA,CAAA,CAAA,CAAA;YACA,IAAA,gBAtE8B,CAsE9B,CAAA,GAtE+B,uBAsE/B,CAAA,GAAA,CAAA,GAAA,CAAA,UAAA,CAAA,IAAA,OAAA,CAAA,CAAA,QAAA,EAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA;YACA,IAAA,gBAAA,CAAA,CAAA,GAAA,CAAA,CAAA,KAAA,CAAA,GAAA,CAAA,GAAA,CAAA,UAAA,CAAA,IAAA,OAAA,CAAA,CAAA,QAAA,EAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA;YACA,MAAA,IAAA,KAAA,CAAA,qDAAA,CAAA,eAAA,CAAA,OAAA,CAAA,CAAA;;;;;AAKA;;;GAGA;AACA,+BAAA,YAAA;IACE,IAAF,gBAAA,CAAA,CAAA,GAAA,YAAA,CAAA;IACA,OAAA,CAAA,CAAA,cAAA,EAAA,CAAA;;;;;AAKA;;;GAGA;AACA,2BAAA,YAAA;IACA,IAAI,gBAAJ,CAAA,CAAA,GAAA,YA5EqC,CA4ErC;IACA,IAAA,gBAAA,CAAA,GAAA,GAAA,CAAA,CAAA,CAAA,kBAAA,GAAA,CAAA,CAAA,kBAAA,GAAA,CAAA,CAAA,CAAA;IACE,OA5EO,CA4ET,CAAA,cAAA,EAAA,CAAA;QACA,CAAA,GAAA,CAAA,CAAA,cAAA,CAAA;;;;;;;;;;;GAaA;AAIA,iBAAA,YAAA,EAAA,gBAAA,EAAA,cAAA,EAAA,MAAA;IACA,EAAA,CAAA,CAAI,cAAJ,CAAA,MAAA,GAAA,CAAA;QACI,wCAlFyB,CAkF7B,YAAA,EAAA,cAAA,EAAA,MAAA,CAAA,CAAA,CAAA,CAAA;QAEA,IAAA,gBAAA,CAAA,CAAA,GAAA,IAAA,eAAA,CAAA,gBAAA,EAAA,2BAAA,CAAA,YAAA,EAAA,gBAAA,EAAA,MAAA,EAAA,IAAA,eAAA,CAAA,cAAA,EAAA,YAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA;QAlFA,CAAS,CAAT,cAAA,GAmFoB,YAlFY,CAAA;QAmF1B,CAAN,CAAA,kBAAA,GAAA,gBAlF6C,CAkF7C,MAAA,CAAA;QACI,MAAJ,CAAA,EAAA,YAAA,EAlFU,CAAA,EAkFV,cAAA,EAAA,EAAA,EAlFkB,CAmFV;IAER,CAAA;IACA,IAAI,CAAC,EAAL,CAAA,CAAA,cAAA,CAlFO,MAkFP,KAAA,CAAA;QACI,wBAlFsB,CAkF1B,YAAA,EAAA,cAAA,EAAA,MAAA,CAAA,CAAA,CAAA,CAAA;QAEA,IAAA,gBAAA,CAAA,CAAA,GAAA,IAAA,eAAA,CAAA,YAAA,CAAA,QAAA,EAAA,+BAAA,CAAA,YAAA,EAAA,cAAA,EAAA,MAAA,EAAA,YAAA,CAAA,QAAA,CAAA,CAAA,CAAA;QAlFA,CAAS,CAAT,cAAA,GAAA,YAAA,CAAA;QAmFI,CAAJ,CAAA,kBAAA,GAlFU,gBAkFV,CAAA,MAlFkB,CAAgB;QAmF9B,MAAJ,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,cAAA,gBAAA,EAAA,CAAA;IACA,CAAA;IACA,IAAI,CAAJ,CAAA;QACA,IAAA,gBAAA,CAAA,CAAA,GAAA,IAAA,eAAA,CAAA,YAAA,CAAA,QAAA,EAAA,YAAA,CAAA,QAAA,CAAA,CAAA;QACA,CAAA,CAAA,cAAA,GAAA,YAAA,CAAA;;;;;;;;;;;GAaA;AACA,yCAAA,YAAA,EAAA,cAAA,EAAA,MAAA,EAAA,QAAA;IACA,IAAA,gBAAA,CAAA,GAAA,GAAA,EAAA,CAAA;IACA,GAAA,CAAA,CAAA,UAAA,EAAA,iBAAA,EAAA,oBAAA,EAAA,IAAA;QAAA,IAxFS,CAwFT,eAAA;QACA,EAAA,CAAA,CAAM,cAAN,CAxFW,YAwFX,EAAA,cAAA,EAAA,CAAA,CAAA,IAAA,CAAA,QAAA,CAAA,WAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;YACA,IAAA,gBAAA,CAAA,CAAA,GAAA,IAAA,eAAA,CAAA,EAAA,EAAA,EAAA,CAAA,CAAA;YACA,CAAA,CAAA,cAAA,GAAA,YAAA,CAAA;YACA,CAAA,CAAA,kBAxF8B,GAwF9B,YAAA,CAAA,QAAA,CAAA,MAAA,CAAA;YACA,GAAA,CAAA,WAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;;;;;;;;;;;GAaA;AACA,qCA9FkB,YA8FlB,EAAA,gBAAA,EAAA,MAAA,EAAA,cAAA;IAEE,IAAF,gBAAA,CAAA,GAAA,GA9Fa,EA8Fb,CAAA;IACA,GAAA,CAAI,cAAJ,CA9FmB,GA8FnB,cA9FyB,CAAU;IA+FnC,cAAA,CAAA,cAAA,GA9FY,YA8FZ,CAAA;IACA,cAAA,CAAA,kBAAA,GAAA,gBAAA,CAAA,MAAA,CAAA;IACA,GAAA,CAAA,CAAA,UAAA,EAAA,iBAAA,EAAA,oBAAA,EAAA,IAAA;QAAA,IA9FS,CA8FT,eAAA;QACA,EAAA,CAAA,CAAM,CAAN,CAAA,IAAA,KAAA,EAAA,IA9FqB,WA8FrB,CAAA,CAAA,CAAA,KAAA,cAAA,CAAA,CAAA,CAAA;YACA,IAAA,gBAAA,CAAA,CAAA,GAAA,IAAA,eAAA,CAAA,EAAA,EAAA,EAAA,CAAA,CAAA;YACA,CAAA,CAAA,cAAA,GAAA,YAAA,CAAA;YACA,CAAA,CA9FS,kBA8FT,GAAA,gBAAA,CAAA,MAAA,CAAA;YACA,GAAA,CAAA,WAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;;;;;;;;;;GAYAA;AACA,kDAAA,YAAA,EAAA,cAAA,EAAA,MAAA;IACA,MAAA,CAAA,MAAA;;;;;;;;;;;;;;;;;;;GAqBA;AACA,wBAAA,YAAA,EAAA,cAAA,EAAA,CAAA;;;;;AAKA;;;;;;;AAOA;;;;;;;AAOA;;;;AD9aA,oBAAA,KAAA;;;;;;;;;;;;;;;;IAmBA;QAcA;;;;;;;;;;;;;;;;ODjCA;;;;;;;;;;;;;;;;;;;IAiDA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,0BAAA;AAAA,CAAA,IAAA;;;;;;;IAKA;;;;;IAKA;;;;;;;;;OD2GA;;;;AAIA;;;;;;;;;;;;;;AA+BA,CAAA;;;;;;;IAKA;;;;;;;;;;;IAWA;;;;;IAKA;;;;;;;;;OASA;;;;;;;;;;;;;;;;;;;;;;;;;OAmCA;IAAA,gBAAA,iBAA4D,EAA5D,aAAA,EAAA,SAAA,EAAA,QAAA,EAAA,QAAA,EAAA,MAAA,EAAA,QAAA,EAAA,MAAA;QAAA;QACgE,IAAhE,CAAA,iBAAA,GAAA,iBAAA,CAAA;QA/CU,IAAV,CAAA,aAAA,GAAA,aAAA,CAAA;QACU,IAAV,CAAA,SAAA,GAAU,SAAV,CAAA;QAIU,IAAV,CAAA,QAAA,GAAA,QAAA,CAAA;;;;;;;;;;QAuCE,IAAF,CAAA,YAvBuB,GAuBvB,mBAAA,CAAA;;;;;;;;;WASA;;;;SAKA,CAAA;QAEE;;WAmBF;QAEI,IAAI,CAAC,mBAAmB,GAA5B,IAAA,0BAAA,EAAA,CAAA;QAEI,IAAI,CAAC,kBAAkB,GAA3B,IAAA,yBAAA,EAAA,CAAA;QACI,IAAJ,WAAA,GAAA,UAAA,CAA0B,IAA1B,OAAA,KAAA,CAAA,YAAA,CAAA,IAAA,oBAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA;QACI,IAAJ,SAAmB,GAAG,UAAtB,CAAA,IAAA,OAAA,KAAA,CAAA,YAAA,CAAA,IAAA,kBAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA;QAEI,IAAI,CAAC,QAAT,GAAA,QAA4B,CAA5B,GAAA,CAAA,WAAA,CAAA,CAA8C;QAC1C,IAAI,CAAC,WAAT,CAAA,MAA2B,CAA3B,CAAA;QACI,IAAI,CAAC,cAAT,GAAA,kBAAA,EAAA,CAAA;QACA,IAAA,CAAA,UAAA,GAAA,IAAA,CAAA,cAAA,CAAA;;;;;;;;;;;IAWA,uCAAA,GAAA,UAAA,iBAAA;QACA,IAAA,CAAA,iBAAA,GAAA,iBAAA,CAAA;;;;;IAKA;;;OAGA;IACA,kCAAA,GAAA;QACA,IAAA,CAAA,2BAAA,EAAA,CAAA;;;;;IAKA;;;OAGA;IACA,4CAAA,GAAA;QAAA;QACA,wEAAA;QACA,6DAAA;QACA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,oBAAA,CA/B2B,CAAK,CA+BhC;YACA,IA/BS,CAAC,oBA+BV,GAAA,CAAA,IAAA,CAAA,QAAA,CAAA,SAAA,CAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,UAAA,MAAA;gBACA,IAAA,gBAAA,CAAA,UAAA,GAAA,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,CAAA,CAAA;gBACA,IAAA,gBAAA,CAAA,MAAA,GAAA,MAAA,CAAA,MAAA,CAAA,KAAA,UAAA,GAAA,UAAA,GAAA,YAAA,CAAA;;;;;;QAKA;;;;;;;;;QAKA;;;;;;;;;QAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA0BA;;;;;IAKA;;;;;IAKA;;;OAGA;IACA,wBAAA,GAAA;QACA,EAAA,CAAA,CAAA,IAAA,CAAA,oBAAA,CAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAkDA;IACA,8BAAA,GAAA,UAAA,QAAA,EAAA,EAAA;YAAA,4BAAA,EAAA,0BAAA,EAAA,4BA/C4B,EA+C5B,sBAAA,EA/CkC,4CA+ClC,EAAA,4CAAA,EAAA,sCAAA;QACI,EAAJ,CAAA,CAAA,SAAA,EAAA,IAAA,mBAAA,IAAA,CA/Cc,OAAmB,CAAK,IA+CtC,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;YACA,OAAA,CAAA,IAAA,CAAA,qEAAA,CAAA,CAAA;QACI,CAAJ;QACA,IAAA,gBAAA,CAAA,CAAA,GAAA,UAAA,IAAA,IAAA,CAAA,WAAA,CAAA,IAAA,CAAA;QACA,IAAA,gBAAA,CAAA,CAAA,GAAA,gBAAA,GAAA,IAAA,CAAA,cAAA,CAAA,QAAA,GAAA,QAAA,CAAA;QACA,IAAA,gBAAA,CA/Cc,CAAM,GA+CpB,IAAA,CAAA;QACA,EAAA,CAAA,CAAA,mBAAA,CAAA,CAAA,CAAA;YACA,MAAA,CAAA,CAAA,mBAAA,CAAA,CAAA,CAAA;gBACA,KAAW,OA/CG;oBAgDJ,CAAV,GAAA,KAAA,CAAA,IAAA,CAAA,cAAA,CAAA,WAAA,EAAA,WAAA,CAAA,CAAA;oBACA,KAAA,CAAA;gBACA,KAAW,UAAX;oBACA,CAAA,GAAA,IAAA,CAAA,cAAA,CAAA,WAAA,CAAA;oBACA,KAAA,CAAA;gBA/CA;oBAgDA,CAAA,GAAA,WA/CU,CA+CV;YACA,CAAA;QACI,CAAJ;QACA,IAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;OA6BA;IACA,8BAAA,GAAA,UAAA,GAAA,EAAA,MAAA;QAAA,uBAAA,EAAA,WAAA,kBAAA,EAAA,KAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA6BA;IACA,yBAAA,GAAA,UAAA,QAAA,EAAA,MAAA;QAAA,uBAAA,EAAA,WAAA,kBAAA,EAAA,KAAA,EAAA;QACI,gBAAJ,CAAA,QAnDiB,CAAa,CAmD9B;QACA,EAAA,CAAA,CAAA,OAAA,MAAA,CAAA,WAAA,KAAA,QAAA,IAAA,MAAA,CAAA,WAAA,KAAA,IAAA,CAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;OAsBA;IA7DA,yBAAA,GAAA,UAAW,GAAX,EAAA,KAAA;QA8DA,EAAA,CAAA,CAAM,GAAN,YAAA,OAAA,CA7DY,CA6DZ,CAAA;YACM,MAAN,CA7Da,YAAA,CAAa,IAAC,CAAI,cAAC,EAAe,GA6D/C,EAAA,KAAA,CAAA,CAAA;QACA,CAAK;QACL,IAAA,CAAA,CAAA;;;;;IA3DG;;;OAmEH;IACA,iCAAA,GAAA,UAAA,MAhEmB;QAiEnB,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA,MAAA,CAAA,UAAA,MAAA,EAAA,GAAA;YACM,IAAN,gBAAA,CAAA,KAAA,GAAA,MAAA,CAAA,GAAA,CAAA,CAAA;YACA,EAhEU,CAAC,CAgEX,KAAA,KAAA,IAAA,IAAA,KAAA,KAAA,SAAA,CAAA,CAAA,CAAA;gBACA,MAAA,CAAA,GAAA,CAAA,GAAA,KAAA,CAAA;;;;IA9DG,CAAH;IAmEA;;OAIA;IACA,mCAAA,GAAA;QAAA;;;YAGA,EAAA,CAAA,CAAgB,GAAhB,CAAA,CAAA,CAAA;gBACA,KAAA,CAAA,0BAAA,CAAA,GAAA,CAAA,CAAA;gBAlEA,iEAAA;gBAmEgB,mCAAhB;gBACA,MAAA,CAAA,GAAA,CAAA,OAAA,CAAA,KAAA,CAAA,cAAA,CAAA,CAAA,CAAA;YACA,CAAA;YACA,IAAA,CAAA,CAAA;gBACA,MAAA,CAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAAA,CAAA;;;;;;;;;;;;QAcI,IAAJ,gBAvE0B,CAuE1B,cAAA,GAAA,IAAA,CAvEqC,WAuErC,CAAA,KAAA,CAvEqD;QAwErD,iFAAA;QACA,4EAAA;QACA,wBAAA;;;;QAKI,CAAJ;QACA,qFAAA;QACA,2FAAA;QACA,WAAA;QAEI,EAAJ,CAAA,CAAA,cAAA,IAAA,MAvEQ,IAuER,YAAA,IAAA,cAAA,CAAA,MAAA,KAAA,UAAA;YACA,cAAA,CAAA,MAAA,CAAA,QAvEsB,EAuEtB,KAAA,MAAA,CAAA,QAAA,EAAA,CAAA,CAAA,CAAA;YAEA,MAAA,CAAA,IAAA,CAAA,CAAA,2BAvEwB;QAwExB,CAAA;QACA,IAAM,gBAAN,CAAA,OAAA,GAAA,IAAA,CAAA;QACA,IAAA,gBAAA,CAAA,MAAA,GAAA,IAAA,CAAA;QAEI,IAAJ,gBAAA,CAvEU,OAAK,GAuEf,IAAA,OAAA,CAAA,UAAA,GAAA,EAAA,GAAA;YACQ,OAAR,GAAA,GAvEqB,CAuErB;;;QAII,IAAJ,gBAvE0B,CAAG,EAuE7B,GAvEqC,EAuErC,IAAA,CAvEqC,YAAmB,CAuExD;QACA,IAAA,CAAA,WAAA,CAAA,IAAA,CAAA,EAAA,EAAA,IAAA,EAAA,MAAA,QAAA,EAAA,MAAA,QAAA,EAAA,MAAA,QAAA,EAAA,OAAA,SAAA,EAAA,MAAA,QAAA,EAAA,OAAA,SAAA,EAAA,CAAA,CAAA;;;;;IArEG;;;OA+EH;IACA,2CA1EwB,GA0ExB,UAAA,EAAA;QAAA;YAAA,UA1E6B,EA0E7B,kBAAA,EAAA,kBAAA,EAAA,oBAAA,EAAA,kBAAA;QACA,IAAA,gBAAA,CAAA,GAAA,GAAA,IAAA,CAAA,mBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;QACA,IAAA,gBAAA,CAAA,aAAA,GAAA,CAAA,IAAA,CAAA,SAAA,IAxEsC,GAwEtC,CAAA,QAAA,EAAA,KAAA,IAAA,CAAA,cAAA,CAxE6E,QAAI,EAAM,CAwEvF;QAGA,EAAA,CAAA,CAAA,aAAA,IA1EiB,IA0EjB,CAAA,mBAAA,CAAA,gBAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA;YAIA,IAAA,CAAA,YAAA,CAAA,IAAA,CAAA,IAAA,eAAA,CAAA,EAAA,EAAA,IAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;YA1EA,OAAA,CAAA,OAAA,EAAA;iBAEa,IA0Eb,CAAA,UAAA,CAAA,IAAA,OAAA,KAAA,CAAA,WAAA,CAAA,GAAA,EAAA,MAAA,EA1EuD,MA0EvD,CAAA,kBAAA,EAAA,MAAA,CAAA,UAAA,EAAA,EAAA,EAAA,IAAA,CAAA,EAAA,CAAA,CAAA;iBAzEW,IA0EX,CAAA,OA1EY,EA0EZ,MAAA,CAAA,CA1EiC;QA2EjC,CAAA;QACA,IAAA,CAAA,EAAA,CAAA,CAAW,aAAX,IAzE0B,IAyE1B,CAAA,UAEqB;YAErB,IAAA,CAAW,mBAAX,CA1EyB,gBA0EzB,CAAA,IAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CAAA;YAEA,IAAA,CAAA,YAAA,CAAA,IAAA,CAAA,IAAA,eAAA,CAAA,EAAA,EAAA,IAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;YA1EA,OAAA,CAAA,OAAA,EAAA;iBACW,IA0EX,CAAA,UAAA,CAAA,IAAA,OAAA,KAAA,CAAA,WAAA,CAAA,GAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAA,EAAA,EAAA,gBAAA,CAAA,GAAA,EAAA,KAAA,CAAA,iBAAA,CAAA,CAAA,QAAA,CAAA,EAAA,CAAA,CAAA;iBACA,IAAA,CAAA,OAAA,EAAA,MAAA,CAAA,CAAA;QACA,CAAK;QACL,IAAA,CAAA,CAAA;;;;;;;;;;;;;OAeA;IAGA,4BAAA,GAAA,UAAA,GAlFa,EAkFb,MAlFqB,EAkFrB,sBAAA,EAAA,gBAAA,EAAA,EAAA,EAAA,eAAA;QAAA,iBAuEA;QAtEA,EAAA,CAAA,CAAA,EAAA,KAAA,IAAA,CAAA,YAAA,CAAA,CAAA,CAAA;YAEA,IAAA,CAAA,QAAA,CAlFe,EAAS,CAkFxB,IAAA,CAAA,aAAA,CAAA,SAlFwC,CAkFxC,IAAA,CAAA,cAAA,CAAA,CAAA,CAAA;;;QAGA,CAAA;QACA,MAAA,CAAA,IAAA,OAAA,CAAA,UAAA,cAAA,EAAA,aAAA;YACA,2DAAA;YACA,mDAAA;YAGA,IAAQ,gBAAR,CAAA,eAlFwC,CAkFxC;YACA,EAAA,CAAA,CAAA,CAAA,eAAA,CAAA,CAAA,CAlFsB;gBAuFtB,IAAA,gBAAA,CAAA,cAAA,GAAA,KAAA,CAAA,QAAA,CACsB,QADtB,CAAA;gBAGA,IAAA,gBAAA,CAAA,iBAlF8C,GAkF9C,cAAA,CAAA,cAAA,EAAA,KAAA,CAAA,YAAA,EAAA,KAAA,CAAA,aAAA,EAAA,GAAA,EAAA,KAAA,CAAA,MAAA,CAAA,CAAA;gBACA,eAAA,GAAA,QAAA,CAAA,IAAA,CAAA,iBAAA,EAAA,UAAA,UAAA;oBACA,MAAA,CAAA,GAAA,CAAA,IAAA,CAAA,SAAA,CAAA,KAAA,CAAA,iBAAA,EAAA,KAAA,CAAA,MAAA,EAAA,UAAA,EAAA,KAAA,CAAA,YAAA,CAAA,UAAA,CAAA,CAAA,EAAA,UAAA,QAAA;wBACA,KAAA,CAAA,YAAA,CAAA,IAAA,CAAA,IAAA,gBAAA,CAAA,EAAA,EAAA,KAAA,CAAA,YAAA,CAAA,GAAA,CAAA,EAAA,KAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,QAAA,CAAA,CAAA,CAAA;wBAlFA,MAAA,CAAA,EAAA,UAAA,YAAA,EAAA,QAAA,UAAA,EAAA,CAAA;oBAmFA,CAAA,CAAA,CAAA;gBACA,CAAA,CAAA,CAAA;YAEM,CAAN;YAEA,IAAY,CAAZ,CAAA;gBACA,eAAA,GAAA,EAAA,CAAA,EAAA,UAAA,EAAA,GAAA,EAAA,QAAA,EAAA,eAAA,EAAA,CAAA,CAAA;;YAGM,IAAN,gBAAA,CAAA,wBAAA,GAAA,QAAA,CAAA,IAAA,CAAA,eAAA,EAAA,UAAA,CAAA;gBACA,MAAA,CAAA,GAAA,CAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA,mBAAA,CAlFqC,CAAI,CAkFzC,QAAA,CAAA,EAAA,cAAA,OAAA,CAAA,EAAA,CAAA,CAAA,CAAA;YAGA,CAAA,CAAA,CAAA;YACA,+CAAA;YACA,IAAA,gBAAA,CAAA,aAlFmC,CAkFnC;YACA,IAAA,gBAAA,CAAA,sBAAA,GAAA,GAAA,CAAA,IAAA,CAAA,wBAAA,EAAA,UAAA,EAAA;oBAAA,0BAAA,EAAA,sBAAA;gBACY,IAAZ,gBAAA,CAAA,cAAA,GAAA,KAAA,CAAA,QAAA,CAAA,QAAA,CAAA;gBACA,aAAA;oBAEA,IAAA,aAAA,CAAA,QAAA,EAAA,KAAA,CAAA,kBAlFwC,CAAS,QAkFjD,EAAA,cAAA,CAAA,CAAA;gBAGY,aAAZ,CAAA,QAAA,CAAA,KAAA,CAlFsC,SAkFtC,CAAA,CAAA;gBAlFA,MAAA,CAAA,EAAA,UAAsD,YAAA,EAAM,QAA5D,UAAA,EAAA,CAAA;YAoFA,CAAA,CAAA,CAAA;YACA,IAAA,gBAAA,CAAA,yBAAA,GAlFwD,QAAA,CAkFxD,IAAA,CAAA,sBAAA,EAAA,UAAA,EAAA;oBAAA,0BAAA,EAAA,sBAAA;gBACA,EAlFc,CAAC,CAkFf,KAAA,CAAA,YAAA,KAAA,EAAA,CAAA;oBACA,MAAA,CAAA,EAAA,CAAA,KAAA,CAAA,CAAA;gBAEA,MAAA,CAAA,GAAA,CAAA,IAAA,CAAA,aAAA,CAAA,WAAA,EAAA,EAAA,UAAA,cAlFkD;oBAmFtC,MAAZ,CAAA,EAAA,UAAA,EAAA,UAAA,EAAA,QAAA,EAAA,QAAA,EAAA,cAAA,EAAA,cAAA,EAAA,CAAA;gBAlFA,CAAA,CAAA,CAAA;YAoFA,CAAA,CAAA,CAAA;YACA,IAAA,gBAAA,CAlFsB,yBAkFtB,GAlFoD,QAAS,CAAA,IAkF7D,CAAA,yBAAA,EAAA,UAAA,CAAA;gBACA,EAAA,CAAA,CAAA,KAAA,CAAA,YAAA,KAAA,EAAA,CAAA;oBAlFA,MAAA,CAAA,EAAA,CAAA,KAAA,CAAA,CAAA;gBAmFA,EAAA,CAAA,CAAU,CAAV,CAAA,cAAA,CAAA,CAAA,CAAA;oBACA,MAAA,CAAA,GAAA,CAAA,IAAA,CAAA,aAAA,CAAA,WAAA,EAAA,EAAA,cAAA,OAAA,CAAA,EAAA,CAAA,CAAA,CAAA;gBACA,CAAA;gBAEA,IAAA,CAAA,CAAA;oBACA,MAlFe,CAAI,EAkFnB,CAAA,CAlFoB,CAAI,CAkFxB;gBACA,CAAA;;;gBAKA,MAAA,CAAA,GAAA,CAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA,kBAAA,CAAA,CAAA,CAAA,QAAA,CAAA,EAAA,cAAA,OAAA,CAjFyC,EAiFzC,CAjFyC,CAiFzC,CAAA;YAEA,CAAA,CAAA,CAAA;YACA,sBAAA;YAEA,mEAAA;YACA,IAAA,gBAAA,CAAA,YAAA,GAAA,GAAA,CAAA,IAAA,CAAA,kBAAA,EAAA,UAAA,EAAA;oBAAA,0BAAA,EAAA,sBAAA,EAAA,kCAAA;gBAlFA,EAAA,CAAA,CAAA,cAAA,CAAA,CAAA,CAAA;oBAmFc,IAAd,gBAAA,CAAA,KAlFyC,GAkFzC,iBAlF+C,CAkF/C,KAAA,CAAA,kBAAA,EAAA,QAAA,EAAA,KAAA,CAAA,kBAAA,CAAA,CAAA;oBACA,MAAA,CAAA,EAAA,UAAA,YAAA,EAAA,KAAA,OAAA,EAAA,cAAA,gBAAA,EAAA,CAAA;gBACA,CAAA;;;gBAKA,CAAA;YACM,CAAN,CAAA,CAAA;YACM,+BAAN;YAEM,kCAAN;YACA,IAAA,gBAAA,CAAA,sBAAA,CAAA;YACA,IAAA,gBAAA,CAlFkB,WAAwB,GAkF1C,KAAA,CAAA,kBAAA,CAAA;YACA,IAAA,gBAAA,CAAA,SAAA,GAAA,KAlF6C,CAkF7C,cAAA,CAAA;YACA,YAAA;iBACa,OAAb,CAAA,UAAA,EAAA;oBAAA,0BAAA,EAAA,gBAAA,EAAA,kCAAA;gBAEY,EAAZ,CAAA,CAAgB,CAlFC,cAAC,IAkFlB,EAAA,KAAA,KAAA,CAAA,YAAA,CAAA,CAAA,CAAA;oBACgB,sBAAhB,GAAA,KAAA,CAAA;oBAEgB,MAAhB,CAAA;gBAEY,CAAZ;gBACA,KAAc,CAAd,cAAA,GAAA,UAAA,CAAA;gBACA,KAAc,CAAd,UAAA,GAAA,KAlFgC,CAkFhC,mBAlFiC,CAAoB,KAAK,CAkF1D,KAAA,CAAA,cAlF8D,EAAkB,MAkFhF,CAAA,CAAA;gBACA,KAAA,CAAA,kBAAA,GAAA,KAAA,CAAA;gBACA,EAAA,CAAA,CAAA,CAAe,sBAAf,CAAA,CAAA,CAAA;oBAlFA,IAAA,gBAAA,CAAA,IAAA,GAAA,KAAA,CAAA,aAAA,CAAA,SAAA,CAAA,KAAA,CAAA,UAAA,CAAA,CAAA;oBAmFA,EAAA,CAAA,CAAgB,KAAI,CAlFC,QAAC,CAAQ,oBAkF9B,CAAA,IAAA,CAAA,IAAA,gBAAA,CAAA,CAAA,CAAA;wBACA,KAAA,CAAA,QAAA,CAAA,YAAA,CAAA,IAAA,CAAA,CAAA;oBACA,CAAA;oBAhFgB,IAkFhB,CAAA,CAAA;wBACA,KAAA,CAlFkB,QAkFlB,CAAA,EAAA,CAAA,IAlFyC,CAAC,CAkF1C;oBAEA,CAAA;gBACA,CAAA;gBACA,IAAA,cAAA,CAAA,KAAA,CAAA,kBAAA,EAAA,KAAA,EAAA,WAAA,CAAA;qBAEA,QAAA,CAAA,KAAA,CAAA,SAlF4C,CAkF5C,CAAA;gBACA,sBAAA,GAlFmC,IAkFnC,CAAA;YACA,CAAA,CAAA;iBAEA,IAAA,CAAA;gBACA,EAAA,CAAA,CAAA,sBAAA,CAAA,CAAA,CAAA;oBAlFA,KAAA,CAAA,SAAA,GAAA,IAAA,CAAA;oBAmFkB,KAAI,CAlFC,YAkFvB,CAAA,IAAA,CAAA,IAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,YAAA,CAAA,GAAA,CAAA,EAAA,KAAA,CAAA,YAAA,CAAA,KAAA,CAAA,cAAA,CAAA,CAAA,CAAA,CAAA;oBACkB,cAAlB,CAAA,IAAA,CAAA,CAAA;gBACA,CAAA;gBACA,IAAA,CAAA,CAAA;oBACA,KAAA,CAAA,wBAAA,EAAA,CAAA;oBAEoB,KAApB,CAAA,YAAA,CAAA,IAAA,CAAA,IAlF+C,gBAkF/C,CAAA,EAAA,EAAA,KAAA,CAAA,YAAA,CAAA,GAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA;oBACkB,cAAlB,CAAA,KAAA,CAAA,CAAA;gBACA,CAAA;YACA,CAAA,EAAA,UAAA,CAAA;gBAEA,EAAA,CAAA,CAAkB,0BAAlB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;oBACA,KAAA,CAAA,wBAAA,EAAA,CAAA;oBAlFA,KAAA,CAAA,SAAA,GAAA,IAAA,CAAA;oBAmFkB,KAAI,CAlFC,YAAC,CAAY,IAAC,CAAI,IAAI,gBAAgB,CAkF7D,EAAA,EAAA,KAlFsE,CAkFtE,YAlFmF,CAkFnF,GAlFuF,CAkFvF,EAlFyF,CAAE,CAAC,OAkF5F,CAAA,CAAA,CAAA;oBACkB,cAAlB,CAAA,KAAA,CAAA,CAAA;gBACA,CAAA;gBACA,IAAA,CAAmB,CAAnB;oBAlFoB,KAApB,CAAA,YAAA,CAAA,IAAA,CAAA,IAAA,eAAA,CAAA,EAAA,EAAA,KAAA,CAAA,YAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA;oBAmFA,IAAoB,CAApB;wBACA,cAAA,CAAA,KAAA,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA,CAAA;oBACA,CAAA;oBAEoB,KAApB,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;wBACA,aAAA,CAlFsC,EAkFtC,CAAA,CAAA;oBACoB,CAlFC;gBAmFL,CAAhB;gBACA,KAAA,CAAA,kBAAA,GAAA,WAAA,CAAA;gBACA,KAAA,CAAA,cAAA,GAAA,SAAA,CAAA;gBACA,KAAA,CAAA,UAAA,GAAA,KAAA,CAAA,mBAAA,CAAA,KAAA,CAAA,KAAA,CAAA,cAAA,EAAA,MAAA,CAAA,CAAA;;;;IAhFG,CAAH;IAqFA;;OAEA;IACA,yCAAA,GAAA;QAEA,IAAA,gBAAA,CAAA,IAAA,GAAA,IAAA,CAAA,aAAA,CAAA,SAAA,CAAA,IAAA,CAAA,UAAA,CAAA,CAAA;;;;;AA6DA;IA/IA;;;;;IAmJA,CAAA;;QACA;;;;;;;;CALA;;IAiBA;;;OA3JA;IA6JA,uBAAA,SAAA,EAAA,KAAA;QAEA,IAAA,CAAA,SAAA,GAAA,SAAA,CAAA;;;;;;;;;;OAvJA;IAHA,uBAAA,MAAqD,EAAA,IAArD,EAAA,cAAA;QAGA,IAAA,CAAA,MAAA,GAAA,MAAA,CAAA;;;;;IA6KA;;;OAGA;IACA,gCAAA,GAAA,UAAA,eAAA;;;;IAIA,CAAA;IACA;;OACA;IACA,mCAAA,GAAA;QAAA,iBAiBA;QAhBA,EAAA,CAAA,CAAM,IAAI,CA7KC,MA6KX,CAAA,MAAA,KAAA,CAAA,CAAA;YACA,MAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAAA;QAEA,IAAA,gBAAA,CAAA,OAAA,GAAA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA;QA7KA,IAAA,gBAAA,CAAA,cAAA,GAAA,QAAA,CAAA,IAAA,CAAA,OAAA,EAAA,UAAA,CAAA;;gBA+KQ,MAAR,CAAA,cAAA,CAAA,IAAA,CAAA,CA7KiB,KAAqB,CA6KtC,mBAAA,CAAA,CAAA,CAAA,IAAA,CAAA,EAAA,KAAA,CAAA,cAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA;YACA,CAAA;YACA,IAAA,CAAA,EAAA,CAAA,CAAA,CAAA,YAAA,aAAA,CAAA,CAAA,CAAA;gBA7KA,iEAAA;gBA8KQ,IA7KM,gBA6Kd,CAAA,EAAA,GAAA,CAAA,CAAA,CAAA,CAAA;gBACA,MAAA,CAAA,KAAA,CAAA,gBAAA,CAAA,EAAA,CAAA,SAAA,EAAA,EAAA,CAAA,KAAA,CAAA,CAAA;YACA,CAAA;YACA,IAAA,CAAA,CAAA;gBACA,MAAA,IAAA,KAAA,CAAA,mBAAA,CAAA,CAAA;;;;IAIA,CAAA;IACA;;OACA;IACA,mCAAA,GAAA;QAAA;QACA,EAAA,CAAA,CAAM,IAAI,CA/KC,MA+KX,CAAA,MAAA,KAAA,CAAA,CAAA;YACA,MAAA,CAAA,EAAA,CAAA,IAAA,CA/Ke,CAAK;QAgLpB,IAAA,gBAAA,CAAA,OAAA,GAAA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA;QA/KA,IAAA,gBAAA,CAAA,cAAA,GAAA,SAAA,CAAA,IAAA,CAAA,OAAA,EAAA,UAAA,CAAA;YAgLA,EAAA,CAAA,CAAQ,CAAR,YAAA,WAAA,CAAA,CAAA,CAAA;gBACA,MAAA,CAAA,KAAA,CAAA,UAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA;YACA,CAAA;YACA,IAAA,CAAA,CAAA;gBACA,MAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAAA;;;;;;;;;;;OAcA;IACA,2CAAA,GAAA,UAAA,UArL4B,EAqL5B,QAAA,EArLmC,SAqLnC,EAAA,UAAA;QAAA;QACA,IAAA,gBAAA,CAAA,YAAA,GAAA,iBAAA,CAAA,QAAA,CAAA,CAAA;QACI,UAAJ,CAAA,QAAA,CACoB,OApLA,CAmLpB,UAAA,CAAA;YAGA,KAAA,CAAA,cAAA,CAAA,CAAA,EAAA,YAAA,CAAA,CAAA,CAAA,KAAA,CAAA,MAAA,CAAA,EAAA,SAAA,EAAA,UAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;;;;;;;;;;;OAaA;;QAGI,IAAJ,gBAAA,CAAA,MAAA,GAAA,UAAA,CAAA,KAAA,CAAA;QACA,IAAA,gBAAA,CAAA,IAAA,GAAA,QAAA,GACc,QADd,CAAA,KA1L4B,GA0L5B,IA1LmC,CA0LnC;QAEA,IAAA,gBAAA,CAAA,MA3L6B,GA2L7B,eAAA,GA3LkD,eAAW,CAAK,QA2LlE,CAAA,UAAA,CAAA,KAAA,CAAA,MAAA,CAAA,GAAA,IAAA,CAAA;QACA,mBAAA;QA3LA,EAAA,CAAA,CAAA,IAAA,IAAA,MAAA,CAAA,YAAA,KAAA,IAAA,CAAA,YAAA,CAAA,CAAA,CAAA;;gBA6LQ,IAAR,CAAA,MA3LgB,CA2LhB,IAAA,CAAA,IAAA,aAAA,CAAA,MAAA,CAAA,SAAA,EAAA,IAAA,CAAA,EAAA,IAAA,WAAA,CAAA,UAAA,CAAA,CAAA,CAAA;YACA,CAAA;YACA,IAAA,CAAA,CAAA;;gBAGU,MA3LC,CAAM,IA2LjB,GAAA,IA3L4B,CA2L5B,IAAA,CAAA;gBACQ,MAAR,CAAA,aAAA,GAAA,IAAA,CAAA,aAAA,CAAA;YAIA,CAAO;YA3LP,2DAAA;YA4LA,EAAA,CAAA,CAAQ,MAAR,CAAA,SAAA,CAAA,CAAA,CAAA;gBACA,IAAA,CAAA,mBAAA,CAAA,UAAA,EAAA,QAAA,EAAA,MAAA,GAAA,MAAA,CAAA,SAAA,GAAA,IAAA,EAAA,UAAA,CAAA,CAAA;YACA,CAAA;YA3LA,IAAA,CAAA,CAAA;gBA4LU,IA3LC,CA2LX,mBAAA,CAAA,UAAA,EAAA,QAAA,EAAA,eAAA,EAAA,UAAA,CAAA,CAAA;YACA,CAAA;QACA,CAAA;QAEA,IAAM,CAAN,CAAA;;gBAEU,IAAV,CAAA,2BAAA,CAAA,QAAA,EAAA,MAAA,CAAA,CAAA;YACA,CAAA;YAGA,IAAA,CAAA,MAAA,CAAA,IAAA,CAAA,IAAA,WAAA,CAAA,UAAA,CAAA,CAAA,CAAA;YA3LA,2DAAA;YA4LA,EAAA,CAAA,CAAQ,MAAR,CAAA,SAAA,CAAA,CAAA,CAAA;gBACA,IAAA,CAAA,mBAAA,CAAA,UAAA,EAAA,IAAA,EAAA,MAAA,GAAA,MAAA,CAAA,SAAA,GAAA,IAAA,EAAA,UAAA,CAAA,CAAA;YACA,CAAA;YACA,IAAA,CAAA,CAAA;;;;;;;;;;OAYA;IAEA,mDAAA,GAAA,UAAA,IAAA,EAAA,MAhMW,EAgMX,IAAA;QACA,MAAA,CAAA,CAAQ,IAAR,CAAA,CAAA,CAhMe;YAiMf,KAAA,QAAA;gBAEA,MAAA,CAAA,IAAA,CAAA;YACM,KAAN,2BAAA;gBACQ,MAAR,CAhMe,CAAA,yBAAE,CAAyB,IAAC,EAAK,MAAA,CAAO;oBAiMvD,CAAA,YAAA,CAAA,IAAA,CAAA,WAAA,EAAA,MAAA,CAAA,WAAA,CAAA,CAAA;YACA,KAAA,cAAA,CAAA;;;;;;;;;OAWA;IACA,mDAAA,GAAA,UAAA,KAAA,EAAA,MAAA;QAAA;QACA,IAAA,gBAAA,CAAA,YAAA,GAAA,iBAAA,CAAA,KAAA,CAAA,CAAA;QACA,IAAA,gBAAA,CAAA,CAAA,GAAA,KAAA,CAAA,KAAA,CAAA;QApMA,OAAA,CAAA,YAAA,EAAA,UAA2B,CAA3B,EAAA,CAAA;YAqMA,EAAA,CAAA,CAAQ,CAAR,CAAA,CAAA,SAAA,CAAA,CAAA,CAAA;gBACA,KAAA,CAAA,2BAAA,CAAA,CAAA,EAAA,MAAA,CAAA,CAAA;YApMA,CAAA;YAqMA,IAAQ,CAAR,EAAA,CAAY,CApMC,CAoMb,CAAA,MAAA,CAAA,CAAA,CAAA;gBACA,KAAA,CAAA,2BAAA,CAAA,CAAA,EAAA,MAAA,CAAA,SAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA;YACA,CAAA;YAEQ,IAAR,CAAA,CAAA;gBACU,KAAV,CAAA,2BAAA,CAAA,CAAA,EAAA,IApMkD,CAAC,CAoMnD;YACA,CAAA;QApMA,CAAA,CAAA,CAAA;QAqMA,EAAA,CAAA,CAAM,CAAN,CAAA,CAAA,SApMkB,CAoMlB,CAAA,CAAA;YACA,IAAA,CAAA,MAAA,CAAA,IAAA,CAAA,IAAA,aAAA,CAAA,IAAA,EAAA,CAAA,CAAA,CAAA,CAAA;QApMA,CAAA;QAqMA,IAAM,CAAN,EAAA,CAAU,CApMC,MAAC,IAoMZ,MApM2B,CAoM3B,WAAA,CApM2B,CAAc,CAoMzC;YACA,IAAA,CAAA,MAAA,CAAA,IAAA,CAAA,IAAA,aAAA,CAAA,MAAA,CAAA,SAAA,EAAA,CAAA,CAAA,CAAA,CAAA;QACA,CAAA;;;;;IAlMG;;;OAEH;IAwMA,sCAAA,GAAA,UAAA,MAAA;QAAA;QACA,IAAA,gBAAA,CAAA,WAAA,GAAA,MAAA,CAAA,YAAA,GAvM4C,MAuM5C,CAAA,YAAA,CAAA,WAAA,GAAA,IAAA,CAAA;QACA,EAAA,CAAA,CAAM,CAAN,WAAA,IAAA,WAAA,CAAA,MAAA,KAAA,CAAA,CAAA;YACM,MAAN,CAAA,EAvMW,CAAK,IAuMhB,CAAA,CAAA;QACA,IAAA,gBAAA,CAAA,GAAA,GAAA,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,WAAA,CAAA,EAvM+C,UAAW,CAuM1D;YACA,IAAA,gBAAA,CAAA,KAAA,GAAA,KAAA,CAAA,QAAA,CAAA,CAAA,EAAA,MAAA,CAAA,CAAA;YAvMA,IAAA,gBAAA,CAAA,UAAA,CAAA;YAwMA,EAAA,CAAA,CAAQ,KAAR,CAAA,WAAA,CAAA,CAAA,CAAA;gBACA,UAAA,GAAA,kBAAA,CAAA,KAAA,CAAA,WAAA,CAAA,MAAA,EAAA,KAAA,CAAA,MAAA,CAAA,CAAA,CAAA;YACM,CAAN;YACA,IAAA,CAAA,CAAA;gBACA,UAAA,GAvMW,kBAuMX,CAAA,KAAA,CAAA,MAAA,EAAA,KAAA,CAAA,MAAA,CAAA,CAAA,CAAA;YACA,CAAA;;;;;IArMG;;;OA8MH;IACA,2CAAA,GAAA,UAAA,IAAA;QAAA;QACA,IAAA,gBAAA,CA1M0D,MAAM,GA0MhE,IAAA,CAAA,IAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA;QAEI,IAAJ,gBA1M0B,CA0M1B,sBAAA,GAAA,IAAA,CAAA,KA1MyC,CAAsB,CA0M/D,EA1MiE,IA0MjE,CAAA,MAAA,GAAA,CAAA,CAAA;aACA,OAAA,EAAA;aACA,GAAQ,CAAR,UAAA,CAAA,IAAA,OAAA,KAAA,CAAA,uBAAA,CA1MsB,CAAK,CA0M3B,EAAA,CAAA,CAAA;aACA,MAAA,CAAA,UAAA,CAAA,IAAA,OAAA,CAAA,KAAA,IAAA,EAAA,CAAA,CAAA,CA1MY;QA2MZ,MAAA,CAAA,cAAA,CAAA,GAAA,CAAA,IAAA,CAAA,IAAA,CA1MoC,sBA0MpC,CAAA,EAAA,UAAA,CAAA;YACA,IAAA,gBAAA,CAAA,GAAA,GAAA,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CA1M2C,MA0M3C,CAAA,EAAA,UAAA,CAAA;gBACA,IAAA,gBAAA,CAAA,KAAA,GAAA,KAAA,CAAA,QAAA,CAAA,CAAA,EAAA,CAAA,CAAA,IAAA,CAAA,CAAA;gBA1MA,IAAA,gBAAA,CAAA,UAAA,CAAA;gBA2MA,EAAA,CAAA,CAAU,KAAV,CAAA,gBAAA,CAAA,CAAA,CAAA;oBACA,UAAA,GAAA,kBAAA,CAAA,KAAA,CAAA,gBAAA,CAAA,MAAA,EAAA,KAAA,CAAA,MAAA,CAAA,CAAA,CAAA;gBACQ,CAAR;gBACA,IAAA,CAAA,CAAA;oBACA,UAAA,GA1Ma,kBA0Mb,CAAA,KAAA,CAAA,MAAA,EAAA,KAAA,CAAA,MAAA,CAAA,CAAA,CAAA;gBACA,CAAA;gBACA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,UAAA,CAAA,CAAA;;;;;IAxMG;;;OAGH;IA8MA,+CAAA,GAAA,UAAA,CAAA;QACA,IAAA,gBAAA,CAAA,gBAAA,GAAA,CAAA,CAAA,YAAA,GAAA,CAAA,CAAA,YAAA,CAAA,gBAAA,GAAA,IAAA,CAAA;;;;;;;;;OAzMA;IAkNA,wCAAA,GAAA,UAAA,SAAA,EAAA,IAAA;QAAA;QACA,IAAA,gBAAA,CAAA,aAAA,GAjNoB,IAiNpB,IAAA,IAAA,CAjNqC,YAiNrC,GAAA,IAAA,CAAA,YAAA,CAAA,aAAA,GAAA,IAAA,CAAA;QACA,EAAA,CAAA,CAAM,CAAN,aAAA,IAAA,aAjNyC,CAAC,MAiN1C,KAAA,CAAA,CAAA;YACM,MAAN,CAAA,EAjNW,CAAK,IAiNhB,CAAA,CAAA;QACA,IAAA,gBAAA,CAAA,cAAA,GAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,aAAA,CAAA,EAAA,UAAA,CAAA;YACA,IAAA,gBAAA,CAAA,KAAA,GAAA,KAAA,CAAA,QAAA,CAAA,CAjNsC,EAiNtC,IAAA,CAAA,CAAA;YACA,IAAA,gBAAA,CAAA,UAAA,CAAA;YAjNA,EAAA,CAAA,CAAA,KAAA,CAAA,aAAA,CAAA,CAAA,CAAA;gBAkNQ,UAAU;oBAClB,kBAAA,CAAA,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,IAAA,EAAA,KAAA,CAAA,IAAA,EAAA,KAAA,CAAA,MAAA,CAAA,CAAA,CAAA;YACM,CAAN;YACA,IAAA,CAAA,CAAA;gBACA,UAjNsB,GAiNtB,kBAAA,CAAA,KAAA,CAjNuD,SAiNvD,EAjNkE,IAAA,EAAM,KAiNxE,CAAA,IAAA,EAAA,KAAA,CAAA,MAAA,CAAA,CAAA,CAAA;YACA,CAAA;;;;;IA/MG;;;OAuNH;IACA,kCAAA,GAAA,UAAA,MAAA;QACA,IAAA,gBAAA,CAAA,OAAA,GAAA,MAAA,CAAA,QAAA,CAAA;QACA,MAAA,CAAA,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,WAAA,CAAA,OAAA,EAAA,MAAA,CAAA,EAAA,UAAA,YAAA;YACA,MAAA,CAAA,aAAA,GAAA,YAAA,CAAA;;;;;;;;;OASA;IACA,mCAAA,GAAA,UAAgC,OAAhC,EAAA,MAAA;QAAA;QACA,MAAA,CAAA,UAAA,CAAA,OAAA,EAAA,UAAA,CAAA,EAAA,CAAA;YACA,IAAA,gBAAA,CAAA,QAAA,GAAA,KAAA,CAAA,QAAA,CAAA,CAAA,EAAA,MAAA,CAAA,CAAA;;;;;;;;;OASA;IACA,gCAAA,GAAA,UAAA,KAAA,EAAA,QAAA;QACA,IAAA,gBAAA,CAAA,MAAA,GAAA,mBAAA,CAAA,QAAA,CAAA,CAAA;QAEA,IAAA,gBAAA,CAAA,QAAA,GAAA,MAAA,GAAA,MAAA,CAAA,MAAA,CAAA,QAAA,GAAA,IAAA,CAAA,cAAA,CAAA;;;;;;;;;;OAzNA;IAAA,wBAAA,kBAAA,EAAA,WAAA,EAAA,SAAA;;;;;IAkPA;;;OAIA;IACA,iCAAA,GAAA,UAAA,eAAA;QACI,IAAJ,gBAAA,CAAA,UAAA,GAAA,IAAA,CAAA,WAAA,CAAA,KAAA,CAAA;QACA,IAAA,gBAAA,CAAA,QAAA,GAAA,IAAA,CAAA,SAAA,GAAA,IAAA,CAAA,SAAA,CAAA,KAAA,GAAA,IAAA,CAAA;;;;;;;;;;OAYA;IACA,8CAAA,GAAA,UAAA,UAAA,EAAA,QArPmC,EAAO,SAqP1C;QAAA;QACA,IAAA,gBAAA,CAAA,YAAA,GAAA,iBAAA,CAAA,QAAA,CAAA,CAAA;QACI,UAAJ,CAAA,QAAA,CArPa,OAAyB,CAqPtC,UAAA,CAAA;YACA,KAAA,CAAA,gBAAA,CAAA,CAAA,EAAA,YAAA,CAAA,CAAA,CAAA,KAAA,CAAA,MAAA,CAAA,EAAA,SAAA,CAAA,CAAA;;;;;;;;;;OAaA;;;;;;;;;;;;IAcA,yCAAA,GAAA,UAAA,UAAA,EAAA,QAAA,EAAA,eAAA;;QAEA,IAAA,gBAAA,CAAA,IAAA,GAAA,QAAA,GAAA,QAAA,CAAA,KAAA,GAAA,IAAA,CAAA;QACA,mBAAA;QACA,EAAA,CAAA,CAAA,MAAA,KAAA,IAAA,CAAA,CAAA,CAAA;YAGA,8DAAA;YA/PA,EAAA,CAAA,CAAA,MAAA,CAAA,SAAA,CAAA,CAAA,CAAA;gBAgQQ,IAAR,gBAAA,CAAA,MAAA,GAAA,SAAA,CAAA,eAAA,EAAA,MA/PyE,CAAC,CA+P1E;gBACA,IAAA,CAAA,qBAAA,CAAA,UAAA,EAAA,QAAA,EAAA,MAAA,CAAA,SAAA,CAAA,CAAA;YACA,CAAA;YA/PA,IAAA,CAAA,CAAA;gBAgQU,IA/PC,CA+PX,qBAAA,CAAA,UAAA,EAAA,QAAA,EAAA,eAAA,CAAA,CAAA;YACA,CAAA;QACA,CAAA;QACA,IAAA,CAAA,CAAA;YACA,EAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA;;;;;;;;;;;IAcA,uCApQS,GAoQT,UAAA,UApQyB,EAoQzB,QAAA,EAAA,eAAA;;QAEA,IAAA,gBAAA,CAAA,IAAA,GAAA,QAAA,GAAA,QAAA,CAAA,KAAA,GAAA,IAAA,CAAA;;QAGA,EAAA,CAAA,CAAM,MAAN,KApQiB,IAoQjB,CAAA,CAAA,CAAA;YACA,2CAAA;YACA,qBAAA,CAAA,MApQc,CAAmB,CAoQjC;YAGA,8DAAA;YApQA,EAAA,CAAA,CAAA,MAAA,CAAA,SAAA,CAAA,CAAA,CAAA;gBAqQQ,IAAR,gBAAA,CAAA,MAAA,GAAA,SAAA,CAAA,eAAA,EAAA,MAAA,CAAA,CAAA;gBACA,IAAA,CAAA,mBAAA,CAAA,UAAA,EAAA,QAAA,EAAA,MAAA,CAAA,SAAA,CAAA,CAAA;YACA,CAAA;YApQA,IAAA,CAAA,CAAA;;;QAuQA,CAAA;QACA,IAAA,CAAA,CAAA;YACA,0DAAA;YAEA,+DApQmE;YAqQnE,EAAA,CAAA,CAAA,MAAA,CAAA,SAAA,CAAA,CAAA,CAAA;gBAEA,qBAAA,CAAA,MApQkC,CAoQlC,CAAA;gBACA,IAAA,gBAAA,CAAA,MAAA,GAAA,SAAA,CAAA,eApQ2D,EAAM,UAoQjE,CAAA,KAAA,CAAA,CAAA;gBACA,EAAA,CAAA,CAAU,IAAV,CAAA,kBAAA,CAAA,YAAA,CAAA,MAAA,CAAA,QApQ0D,CAAK,CAAC,CAoQhE,CAAA;oBACA,IAAA,gBAAA,CAAA,MAAA,GAAA,CAAA,CAAA,IAAA,CAAA,kBAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA;oBApQA,IAAA,CAAA,kBAAA,CAAA,KAAA,CAAA,MAAA,CAAA,QAAA,EAAA,IAAA,CAAA,CAAA;oBAqQU,MAAV,CAAA,MAAA,CAAA,MAAA,CAAA,YAAA,EApQ4B,MAoQ5B,CAAA,KAAA,CAAA,KAAA,CApQgC,CAoQhC;oBACU,uCApQ+B,CAoQzC,MAAA,CApQmD,KAoQnD,CAAA,CAAA;gBACA,CAAA;gBACA,IAAA,CAAA,CAAA;oBAGA,IAAA,gBAAA,CAAA,SAAA,GAAA,IAAA,eAAA,EAAA,CAAA;oBApQA,IAAA,CAAA,wBAAA,CAAA,SAAA,EAAA,MAAA,EAAA,MAAA,CAAA,CAAA;oBAqQA,IAAA,CAAA,mBApQ+B,CAAM,UAoQrC,EAAA,IAAA,EAAA,SAAA,CAAA,CAAA;gBACQ,CAAR;YACA,CAAO;YACP,IAAA,CAAA,CAAA;gBACA,qBAAA,CAAA,MAAA,CAAA,CAAA;;;;;;;;;;OAYA;IACA,iDAAA,GAAA,UAAA,SAAA,EAAA,MAAA,EAAA,MAAA;;;;;;;;;OAUA;IA7QA,oDAAA,GAAA,UAAA,KAAA,EAAA,eAAA;QA8QA,EAAA,CAAA,CAAM,IAAI,CA7QC,kBA6QX,CAAA,YAAA,CAAA,KAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA;YACA,IAAA,CAAA,0BAAA,CAAA,KAAA,EAAA,eAAA,CAAA,CAAA;QACA,CAAA;;;;;;;;;OAUA;IACA,mDAAA,GAAA,UAAA,KAAA,EAAA,eAAA;;;;;;;;;;;;QAaI,IAAJ,gBAAA,CAAA,YAAA,GAAA,iBAAA,CAAA,KAAA,CAAA,CAAA;QACA,IAAM,gBAAN,CAAA,MAAA,GAAA,IAAA,CAAA;QACA,sDAAA;QArRM,+DAAN;QAsRA,IAAM,CAAN;YACA,MAAA,GAAA,SAAA,CAAA,eAAA,EAAA,KAAA,CAAA,KAAA,CAAA,CAAA;QACI,CAAJ;QAEI,KAAJ,CAAA,CAAW,CArRC,CAqRZ,CAAA,CAAA;YACM,MAAN,CAAA;QACA,CAAA;QACA,IAAA,gBAAA,CAAA,cAAA,GAAA,MAAA,CAAA,SAAA,CAAA;QArRA,OAAA,CAAA,YAAA,EAAA,UAAA,CAAA,EAAA,CAAA;YAsRA,EAAA,CAAA,CAAQ,KArRK,CAqRb,KAAA,CAAA,SAAA,CAAA,CAAA,CAAA;gBACA,KAAA,CAAA,2BAAA,CAAA,CAAA,EAAA,cAAA,CAAA,CAAA;YACA,CAAA;YAEQ,IAAR,CAAA,CArRS;gBAsRT,KAAA,CAAA,2BAAA,CAAA,CAAA,EAAA,eAAA,CAAA,CAAA;YACA,CAAA;QACA,CAAA,CAAA,CAAA;QACA,EAAA,CAAA,CAAA,MAAA,IAAA,MAAA,CAAA,WAAA,CAAA,CAAA,CAAA;YAEA,MAAA,CAAA,UAAA,EAAA,CAAA;;;;;AAaA;;;GAGA;;;;;AAKA;;;GAGA;AACA,4BAAA,QAAA;IArSA,IAAA,gBAAA,CAAA,CAAA,GAAA,QAAA,CAAA,MAAA,CAAA;IAsSA,OAAA,CAAQ,EAAR,CAAA;QArSA,IAAA,gBAAA,CAAA,CAAA,GAAA,CAAA,CAAA,YAAA,CAAA;QAsSI,EAAJ,CAAA,CArSQ,CAAA,IAqSR,CAAA,CAAA,aAAA,CAAA;YACA,MAAA,CAAA,CAAA,CAAA,aAAA,CAAA;QACA,EAAA,CArSS,CAqST,CAAA,IAAA,CAAA,CAAA,SAAA,CAAA;YACA,MAAA,CAAA,IAAA,CAAA;;;;;AAKA;;;GAGA;AACA,6BAAA,QAAA;IACA,EAAA,CAAA,CAAI,CAAJ,QAAA,CAAA;QACI,MAAJ,CAAA,IAxSe,CAwSf;IAxSA,IAAA,gBAAA,CAAA,CAAA,GAAA,QAAA,CAAA,MAAA,CAAA;IAySA,OAAA,CAxSQ,EAAE,CAwSV;QACA,IAAA,gBAAA,CAAA,CAAA,GAAA,CAAA,CAAA,YAAA,CAAA;QACA,EAAA,CAxSS,CAwST,CAAA,IAAA,CAAA,CAAA,aAAA,CAAA;YACA,MAAA,CAAA,CAAA,CAAA,aAAA,CAAA;;;;;AAKA;;;GAGA;AACA,2BAAA,IAAA;IACA,MAAA,CAAA,IAAA,GAAA,IAAA,CAAA,QAAA,CAAA,MAAA,CAAA,UAAA,CAAA,EAAA,CAAA;;;;;;;;;GASA;AACA,mBAAA,SAAA,EAAA,KAAA;IACA,IAAA,gBAAA,CA/SgB,MA+ShB,GAAA,SAAA,CAAA,QAAA,CAAA,KAAA,CAAA,MA/SuB,CA+SvB,CAAA;IACA,EAAA,CAAA,CAAA,CAAK,MAAL,CAAA,CAAA,CAAA;QA/SA,IAAA,gBAAA,CAAA,aAAA,GAAA,CAAA,CAAA,KAAA,CAAA,SAAA,CAAA,CAAA,CAAA,IAAA,CAAA;QAgTA,EAAA,CAAA,CAAM,KAAN,CA/SY,MA+SZ,KAAA,cAAA,CAAA,CAAA,CAAA;YACA,MAAA,IAAA,KAAA,CAAA,yCAAA,aAAA,MAAA,CAAA,CAAA;QACA,CAAA;QACA,IAAA,CAAA,CAAA;YACA,MAAA,IAAA,KAAA,CAAA,4BAAA,KAAA,CAAA,MAAA,kBAAA,aAAA,MAAA,CAAA,CAAA;;;;;AAKA;;;GAGA;AACA,0BAAA,QAAA;IACA,GAAA,CAAA,CAAK,IAAL,gBAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,QAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA,CAAA;QACA,IAAA,gBAAA,CAAA,GAAA,GAAA,QAAA,CAAA,CAAA,CAAA,CAAA;QACA,EAAA,CAAA,CAAA,GAAA,IAAA,IAAA,CAAA,CAAA,CAAA;;QD99CA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAqFA;IAYA,oBAAA,MAAA,EAAoB,KAApB,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA;QACA,IAAM,CAAN,MAAA,GAAA,MAAA,CAAA;QACA,IAAA,CAAA,KAAA,GAAA,KAAA,CAAA;QACA,IAAA,CAAA,QAAA,GAAA,EAAA,CAAA;;;;;IAAA,sBAAA,kCAAA;QAKA;;;WAGA;aARA,UAAA,QAAA;YASA,EAAA,CAAA,CAAM,QAAN,IAAA,IARsB,CAQtB,CARsB,CAAG;gBASzB,IAAA,CAAA,QAAA,GAAA,KAAA,CAAA,OAAA,CAAA,QAAA,CAAA,GAAA,QAAA,GAAA,CAAA,QAAA,CAAA,CAAA;YACA,CAAA;;;;;;;;IAUA,sBAAI,2CAAJ;;;;;WADA;aACA,UAAA,KAAA;YACA,EAAA,CAAA,CAAA,SAAA,EAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;;;;QAIA,CAAA;;;OAAA;IACA;;OAEA;IACA,4BAAA,GAAA;QACI,IAAJ,gBAAA,CAAA,MAAA,GAAA;YACA,kBAAA,EAAA,aAAA,CAAA,IAAA,CAAA,kBAAA,CAAA;YACA,UAAA,EAAA,aAAA,CAAA,IAAA,CAAA,UAAA,CAAA;;;;IAIA,CAAA;IAIA,sBAAA,+BAAA;QAHA;;WAEA;aACA;YACA,MAAA,CAAA,IAAA,CAAA,MAAA,CAAA,aAAA,CAAA,IAAA,CAX2B,QAW3B,EAAA;gBACM,UAAN,EAAA,IAAA,CAAA,KAAA;gBACM,WAAN,EAAA,IAAA,CAXwB,WAWxB;gBACA,QAAA,EAAA,IAAA,CAAA,QAAA;gBACA,mBAAA,EAAA,aAAA,CAAA,IAAA,CAAA,QAAA,CAAA;;gBAVA,gBAAA,EAAA,aAAA,CAAA,IAAA,CAAA,gBAAA,CAAA;aAYA,CAXE,CAWF;QACA,CAAA;;;OAAA;;;;;CATA,CAAA;AAcA;;GAEA;AACA,UAAK,CAAL,cAAA,GAAA,cAAA,OAAA;IACA,EAAC,IAAI,EAAE,MAAP,GAAA;IACA,EAAA,IAAA,EAAA,cAAA,GAAA;IAZA,EAAA,IAAA,EAAA,SAAA,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,SAAA,EAAA,IAAA,EAAA,CAAA,UAAA,EAAA,EAAA,EAAA,EAAA;IAcA,EAAA,IAAA,EAAA,QAbe,GAaf;IACA,EAAA,IAAA,EAAA,UAAA,GAbqB;CAcrB,EANA,CAMA,CAAA;AACA,UAAA,CAAA,cAboB,GAapB;IACA,aAAA,EAAA,CAAA,EAAA,IAbsB,EAatB,KAbyB,EAAM,EAa/B;IACA,UAAA,EAAY,CAAZ,EAbc,IAad,EAbiB,KAajB,EAbuB,EAAM;IAc7B,qBAbiB,EAAM,CAavB,EAAA,IAb6B,EAAE,KAa/B,EAAA,EAAA;IACA,kBAAA,EAAA,CAAqB,EAbE,IAavB,EAAA,KAAA,EAAA,EAAA;IACA,oBAboB,EAapB,CAAA,EAAA,IAAA,EAAA,KAAA,EAbkC,EAAM;IAcxC,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,EAAA;IAGA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,EAAA;;;;;;;;;;;;;;;;;;OAcA;IATA,4BAAA,MAAA,EAA4B,KAA5B,EAAA,gBAAA;QAAA;QA2DI,IAAI,CAAC,MAAT,GAAA,MAAwB,CAAxB;QACA,IAAM,CAAN,KAAA,GAAA,KAAA,CAAA;QACA,IAAA,CAAA,gBAAA,GAAA,gBAAA,CAAA;QACA,IAAA,CAAO,QAAP,GAAA,EAAA,CAAA;QACA,IAAA,CAAA,YAAA,GAAA,MAAA,CAAA,MAAA,CAAA,SAAA,CAAA,UAAA,CAAA;YACA,EAAA,CAAA,CAAA,CAAA,YAAA,aAAA,CAAA,CAAA,CAAA;;;;;IA3CA,sBAAA,0CAAA;QAgDA;;;WAGA;aAnDA,UAAA,QAAA;YAoDA,EAAA,CAAA,CAAM,QAAN,IAAA,IAnDsB,CAmDtB,CAnDsB,CAAG;gBAoDzB,IAAA,CAAA,QAAA,GAAA,KAAA,CAAA,OAAA,CAAA,QAAA,CAAA,GAAA,QAAA,GAAA,CAAA,QAAA,CAAA,CAAA;YACA,CAAA;;;;;;;;IASA,sBAAI,mDAAJ;QAJA;;;WAGA;aACA,UAAA,KAAA;YACA,EAAA,CAAA,CAAA,SAAA,EAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;;;;;;;;IAKA;;;;IAIA,wCA3DG,GA2DH,UAAA,OAAA,IAAA,IAAA,CAAA,sBA3DwD,EA2DxD,CAAA,CAAA,CAAA;;;;;;;;;;OAUA;IAEA,oCAAA,GAAA,UAAQ,MAAR,EAAA,OAAA,EAAA,OAAA;QACA,EAAA,CAAA,CAAM,MAAN,KA/Da,CAAK,IA+DlB,OAAA,IAAA,OAAA,CAAA,CAAA,CAAA;YACA,MAAA,CAAA,IAAA,CAAA;QAEI,CAAJ;QACA,EAAA,CAAA,CAAM,OAAN,IAAA,CAAA,MAAwB,KAAxB,QAAA,IAAA,IA/D6C,CA+D7C,MAAA,IAAA,OA/D8C,CAAkB,CA+DhE,CAAA;YACM,MAAN,CAAA,IAAA,CA/DkB;QAgElB,CAAK;QACD,IAAJ,gBAAA,CAAA,MAAA,GAAA;YACA,kBAAA,EAAA,aAAA,CAAA,IAAA,CAAA,kBAAA,CAAA;YACA,UAAA,EAAA,aAAA,CAAA,IAAA,CAAA,UAAA,CAAA;;;;IA7DG,CAAH;IAkEA;;;;;IAKA,CAAA;IAIA,sBAAA,uCAAA;QAHA;;WAEA;aACA;YACA,MAAA,CAAA,IAAA,CAAA,MAAA,CAAA,aAAA,CAAA,IAAA,CAnE2B,QAmE3B,EAAA;gBACM,UAAN,EAAA,IAAA,CAAA,KAAA;gBACM,WAAN,EAAA,IAAA,CAnEwB,WAmExB;gBACA,QAAA,EAAA,IAAA,CAAA,QAAA;gBACA,mBAAA,EAAA,aAAA,CAAA,IAAA,CAAA,QAAA,CAAA;;gBAlEA,gBAAA,EAAA,aAAA,CAAA,IAAA,CAAA,gBAAA,CAAA;aAoEA,CAnEE,CAmEF;QACA,CAAA;;;OAAA;;;;;CAjEA,CAAA;AAsEA;;GAEA;AACA,kBAAA,CAAA,cAAA,GAAA,cAAA,OAAA;IApEA,EAAA,IAAA,EAAA,MAAA,GAAA;IAsEA,EAAA,IAAA,EAAQ,cAAR,GAAA;IACA,EAAA,IAAA,EAAA,gBArEwB,GAqExB;CACA,EAJA,CAIA,CAAA;AACA,kBAAA,CAAA,cAAA,GArEgC;IAsEhC,QAAA,EAAA,CAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IArEmC,EAAE,CAqErC,aAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,KAAA,EAAA,EAAA;IACA,aAAA,EAAA,CAAA,EAAA,IArEsB,EAqEtB,KArEyB,EAAM,EAqE/B;IACA,UAAA,EAAY,CAAZ,EArEc,IAqEd,EArEiB,KAqEjB,EArEuB,EAAM;IAsE7B,qBAAA,EAAA,CAAA,EAAA,IArE6B,EAAE,KAqE/B,EAAA,EAAA;IACA,kBAAA,EAAA,CArEiB,EAAM,IAqEvB,EAAA,KAAA,EAAA,EAAA;IACA,oBAAA,EAAA,CArEuB,EAqEvB,IAAA,EAAA,KAAA,EAAA,EAAA;IACA,YArEW,EAAG,CAqEd,EAAA,IAAA,EAAA,KAAA,EAAA,EArEoB;IAsEpB,MAAA,EAAA,CAAA,EAAA,IAAA,EAAA,WAAA,EAAA,EAAA;IAGA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,EAAA;;;;AA4CA;;;;ADpYA,uBAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA4EA;IACA,0BAAc,MAAA,EAAd,OAAA,EAAA,QAAA,EAAA,GAAA;QAAA,iBAeA;QAvBU,IAAV,CAAA,MAAA,GAAA,MAAA,CAAA;QAEU,IAAV,CAAA,OAAA,GAAA,OAAA,CAAA;QAAG,IAAH,CAAA,QAAA,GAAA,QAAA,CAAA;QAYI,IAAI,CAAC,GAAT,GAAA,GAAA,CAAA;QACA,IAAM,CAAN,OAAA,GAAA,EAAA,CAAA;QACA,IAAA,CAAA,MAAA,GAAA,KAAmB,CAAnB;QACA,IAAA,CAAO,uBAAP,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,CAAA;QACA,IAAA,CAAA,YAAA,GAAA,MAAA,CAAA,MAAA,CAAA,SAAA,CAAA,UAAA,CAAA;YACA,EAAA,CAAA,CAAA,CAAA,YAAA,aAAA,CAAA,CAAA,CAAA;;;;IAIA,CAAA;IAIA,sBAAA,sCAAA;;;;aAAA,cAAA,MAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA,CAAA;;;OAAA;IACA;;OAEA;IACA,6CAAA,GAAA;QAAA;;;;;;QAKA;;;WAGA;;;;;;;;IAKA;;;;IAIA,sCAjBG,GAiBH,UAAA,OAAA,IAAA,IAAA,CAAA,MAjB0C,EAiB1C,CAAA,CAAA,CAAA;;;;IAfG,sCAAH,GAAG,cAAH,IAAA,CAAA,YAAA,CAAA,WAAA,EAAA,CAAA,CAAA,CAAA;IAoBA;;OACA;;;QAGI,EAAJ,CAAA,CAAQ,CAAR,IAnBa,CAmBb,KAnBc,IAmBd,CAnBwB,IAmBxB,CAAA,cAAA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,SAAA,CAAA;YACM,MAAN,CAAA;QACA,IAAA,gBAAA,CAAA,cAAA,GAAA,IAlB6B,CAkB7B,cAlB8B,EAkB9B,CAAA;QAEA,wEAAA;QACA,EAAA,CAAA,CAAA,IAAA,CAAA,MAAA,KAAA,cAAA,CAAA,CAAA,CAAA;YACA,IAAA,CAAA,MAAA,GAAA,cAAA,CAAA;;;;;IAjBG;;;;;yBAKH;;IAAG,CAAH;IAyBA;;OAEA;;QAvBA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,IAA2C,CAA3C,IAAA,CAAA,YAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA;YACQ,IAwBR,CAAA,cAAA,CAAA,IAAA,CAAA,IAAA,CAAA,YAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA,CAAA;IACA,CAAA;IACA,uBAAA;AAAA,CAAA,IAAA;AACA,gBAAA,CAxBK,UAwBL,GAAA;IACA,EAAA,IAAA,EAAA,SAAA,EAAA,IAAA,EAAA,CAAA;;;;CAtBA,CAAA;AA2BA;;GAEA;AACA,gBAAA,CAAA,cAAA,GAAA,cAAA,OAAA;IACA,EAAA,IAAA,EAAA,MAAA,GAAA;IAzBA,EAAA,IAAA,EAAA,UAAA,GAAA;IA2BA,EAAA,IAAA,EAAA,QA1BY,GA0BZ;IACA,EAAA,IAAA,EAAA,iBA1BqB,GA0BrB;CACA,EALA,CAKA,CAAA;AACA,gBAAA,CAAA,cA1BuB,GA0BvB;IACA,OAAA,EAAA,CAAA,EAAA,IAAA,EAAA,eAAA,EAAA,IAAA,EAAA,CAAA,UAAA,EAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA;;IDzKA,yBAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAmCA;IAAA,sBAAA,eAAA,EAAA,QAAA,EAAA,QAAA,EAAA,IAAA;QANG,IAAH,CAAA,eAAA,GAAA,eACwB,CADxB;QACG,IAAH,CAAA,QAAA,GAAA,QACsB,CADtB;QAYI,IAAJ,CAAA,QAAA,GAAoB,QAApB,CAAA;QACA,IAAA,CAAA,IAAA,GAAA,IAAA,CAAA;;;;IAIA,CAAA;;;;;;QAKA;;;;;;;;IASA,sBAfG,iDAAmC;QAWtC;;;;aAIA,cAAA,MAAA,CAAA,IAf8C,CAAS,QAevD,CAAA,CAAA,CAAA;;;OAAA;IAIA,sBAlBG,qCAkBH;;;;aAAA,cAAA,MAAA,CAAA,CAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA,CAAA;;;OAAA;IAGA,sBAAA,mCAAA;QAFA;;WACA;aACA;;;;QAIA,CAAA;;;OAAA;IAGA,sBAAA,wCAAA;QAFA;;WACA;aACA;;;;QAIA,CAAA;;;OAAA;IACA;;OACA;IACA,6BAAA,GAAA;QACI,EAAJ,CAAA,CAAQ,CAvBC,IAuBT,CAAA,SAAA,CAAA;YACQ,MAAR,IAAA,KAAA,CAvBU,yBAuBV,CAAA,CAAA;QACI,IAAJ,CAAA,QAAA,CAAA,MAAA,EAAA,CAAA;QACA,IAAA,gBAAA,CAAA,CAAA,GAAA,IAAA,CAAA,SAAA,CAAA;;;;;;;;;OASA;IACA,6BAAA,GAAA,UAAA,GAAA,EAAA,cAAA;;;;IAIA,CAAA;IACA;;OAEA;IACA,iCAAA,GAAA;QACA,EAAA,CAAA,CAAM,IAAI,CA7BC,SA6BX,CAAA,CAAA,CAAA;YACM,IAAN,gBA7B4B,CA6B5B,CAAA,GA7BiC,IA6BjC,CAAA,SAAA,CAAA;YACA,IAAA,CAAA,SAAA,CAAA,OAAA,EAAA,CAAA;YACA,IAAA,CAAA,SAAA,GAAA,IAAA,CAAA;;;;;;;;;;;;;OAeA;IAEA,+BAAQ,GAAR,UApCS,cAoCT,EAAA,QAAA,EAAA,QAAA,EAAA,SAAA,EAAA,SAAA;QACI,EAAJ,CAAA,CAAQ,IAAR,CAAA,WApCU,CAoCV,CAAA,CApC2B;YAsC3B,MAAA,IAAA,KAAA,CAAA,6CApCoD,CAoCpD,CAAA;QACI,CAAJ;QACI,IAAJ,CAAA,SAAA,GAAA,SAAA,CAAA;QAEI,IAAJ,CAAA,eAAA,GApCU,cAoCV,CAAA;QAEI,IAAJ,gBApC0B,CAoC1B,QApCmC,GAoCnC,cAAA,CAAA,eAAA,CAAA;QACI,IAAJ,gBAAA,CAAA,SApCoB,GAoCpB,CAAA,QAAA,CAAA,YAAA,CAAA,SAAA,CAAA,CAAA;QAEI,IAAJ,gBAAA,CAAA,OApCkC,GAoClC,QAAA,CAAA,uBAAA,CAAA,SAAA,CAAA,CAAA;QACA,IAAA,gBAAA,CAAA,GAAA,GAAA,kBAAA,CAAA,qBAAA,CAAA,SAAA,EAAA,QAAA,CAAA,CAAA;;;;;;;;;;OAYA;IAEA,mCAAA,GAAA,UAAA,cAAA,EAAA,QAAA,EAAA,SAAA;QACI,EAAJ,CAAA,CAAQ,IAAR,CAAA,WAzCU,CAyCV,CAAA,CAzC2B;YA2C3B,MAAA,IAAA,KAAA,CAAA,6CAzCoD,CAyCpD,CAAA;QACI,CAAJ;QAEI,IAAJ,CAAA,SAAA,GAAA,SAAA,CAzC2B;QA0CvB,IAAJ,CAAA,eAAA,GAzCU,cAyCV,CAAA;QAEI,IAAJ,gBAAA,CAzCU,QAAA,GAAW,cAyCrB,CAAA,eAAA,CAAA;QAEI,IAAJ,gBAzC0B,CAyC1B,SAAA,GAAA,CAAA,QAAA,CAAA,YAAA,CAAA,SAAA,CAAA,CAzCkE;QA0C9D,QAAJ,GAAA,QAAA,IAAA,IAAA,CAAA,QAAA,CAAA;QAEI,IAAJ,gBAAA,CAAA,OAzCkC,GAyClC,QAAA,CAAA,uBAAA,CAAA,SAAA,CAAA,CAAA;QACA,IAAA,gBAAA,CAAA,QAAA,GAAA,IAAA,cAAA,CAAA,cAAA,EAAA,SAAA,EAAA,IAAA,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA;;QAxCA,IAAA,CAAA,SAAA,CAAO,iBAAP,CAAA,aAAA,EAAA,CAAA;QA0CA,IAzCQ,CAyCR,cAzCmB,CAyCnB,IAzC2B,CAyC3B,IAAA,CAAA,SAAA,CAAA,QAAA,CAzCqC,CAyCrC;IACA,CAAA;;;;;CAvCA,CAAA;AA4CA;;GAEA;AACA,YAAO,CAAP,cAAA,GAAA,cAA+B,OAAA;IAC/B,EAAA,IAAA,EAAA,eAAA,GAAA;IA1CA,EAAA,IAAA,EAAA,gBAAA,GAAA;IA4CA,EAAA,IAAA,EAAA,wBAAA,GA3CmC;IA4CnC,EAAA,IAAA,EAAA,SAAA,EAAA,UA3C6B,EA2C7B,CAAA,EAAA,IAAA,EAAA,SAAA,EAAA,IAAA,EAAA,CA3CyD,MA2CzD,EAAA,EAAA,EAAA,EAAA;CACC,EAL8B,CAK9B,CA3CC;AA8CF,YAAA,CAAA,cAAA,GAAA;;;;;;;;;OAzCA;IAAA,wBAAA,KAAA,EAAA,GAAA,EAAA,MAAA;;;;;;;;;OAyFA;IAEA,4BAAA,GAAA,UAAI,KAAJ,EAAA,aAAA;QACA,EAAA,CAAA,CAAM,KAAN,KAAA,cAAA,CAAA,CAAA,CAAA;YACA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA;QAEI,CAAJ;QACA,EAAA,CAAA,CAAA,KAAA,KAAA,eAAA,CAAA,CAAA,CAAA;YACA,MAAA,CAAA,IAAA,CAAA,GAAA,CAAA;;QD/PA,MAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,CAAA,KAAA,EAAA,aAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ODuBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAmCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAuBA;IAqBA,yBAAA,MAAA,EAAA,YAAA,EAAA,QAAA,EAAA,QAAA,EAAA,kBAAA;QACI,IAAJ,CAAA,MAAA,GAAA,MAA+B,CAA/B;QAEI,IAAI,CAAC,QAAT,GAAA,QAAA,CAAA;QACA,IAAA,CAAA,kBAAA,GAAA,kBAAA,CAAA;;;;;IAIA,CAAA;IACA;;OAEA;;yBAIA;;;IAAA,CAAA;IACA;;OAEA;;;;IAIA,CAAA;;;;;;;;;;IAUA,uCA9BW,GA8BX,UA9BY,QA8BZ,EAAA,MA9B4B;QA+B5B,IAAA,gBAAA,CAAA,GAAA,GAAA,EA9Bc,CA8Bd;QACA,GAAA,CAAA,CAAA,UAAA,EAAA,iBAAA,EAAA,oBAAA,EAAA,IAAA;YAAA,IAAA,CAAA,eAAA;YAGA,kDAAA;YA9BA,EAAA,CAAA,CAAA,CAAa,CAAb,YAAA,IAAA,CAAoB,CAApB,CAAA,OAAA,IAAA,CAAuC,CAAvC,CAA+C,CAA/C,CAAA,CAAA,aAAA,CAAA,CAAA,CAAA;gBA+BQ,IAAR,gBAAA,CAAA,WAAA,GAAA,CA9B8C,CAAA,CAAE,CAAC,CAAC,CA8BlD,aAAA,CAAA;gBAGA,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,aAAA,CAAA,WAAA,CAAA,MAAA,EAAA,WAAA,CAAA,MAAA,CAAA,CAAA,CAAA;YA9BA,CAAA;YA+BA,IAAQ,CAAR,EAAW,CA9BC,CA8BZ,CAAA,CAAA,YAAA,IAAA,CAAA,CAAA,CAAA,OAAA,CAAA,CAAA,CA9BqC;gBA+BrC,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,aAAA,CAAA,QAAA,EAAA,CAAA,CAAA,CAAA,CAAA;YACA,CAAA;YACA,IAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CA9BW,QA8BX,CAAA,CA9B0B,CAAI;gBA+B9B,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,aAAA,CAAA,QAAA,EAAA,CAAA,CAAA,QAAA,CAAA,CAAA,CAAA;;;;;;;;;OASA;IACA,uCAAA,GAAA,UAAA,QAAA,EAAA,KAAA;QAAA,iBAQA;QAPA,MAAA,CAAA,IAAA,CAAA,kBAAA,CAAA,OAAA,CAAA,KAAA,EAAA;YACA,IAAA,gBAAA,CAAA,MAlCqB,GAkCrB,KAlCmC,CAAM,MAAC,CAkC1C,IAAA,CAAA,QAAA,CAlCyD,QAkCzD,EAAA,KAAA,CAAA,CAAA;YACA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,MAAA,EAAA,UAAA,MAAA;gBACA,IAAA,gBAAA,CAAA,CAAA,GAAA,KAAA,CAAA;gBACA,CAAA,CAAA,aAAA,GAAA,MAAA,CAAA;;YAjCA,CAAA,CAAA,CAAA;QAmCA,CAAA,CAlCE,CAkCF;IACA,CAAA;;;;;CAhCA,CAAA;AAqCA;;GAEA;AACA,eAAA,CAAA,cAAA,GAAA,cAAA,OAAA;IACA,EAAC,IAAI,EAAE,MAAP,GAAA;IACA,EAAA,IAAA,EAAA,qBAAA,GAAA;;IDpJA,EAAA,IAAA,EAAA,QAAA,GAAA;;GCkJA;AD9IA;;;;;AAKA;;;;AAIA,IAIC,oBAAA,GAAA,IAAA,cAAA,CAAA,sBAAA,CAAA,CAAA;AAFD;;GAEA;AACA,IAAA,oBAAA,GAAA,IAAA,cAAA,CAAA,sBAAA,CAAA,CAAA;AACA,IAAA,gBAAA,CAIa,gBAJb,GAAA;IACA,QAAA;IACA,EAAA,OAAA,EAAA,aAAA,EAAA,QAAA,EAAA,oBAAA,EAAA;IACA;QACA,OAAA,EAAA,MAAA;QACA,UAAA,EAAA,WAIQ;QAHR,IAAA,EAAA;YACA,cAAA,EAAA,aAAA,EAAA,eAAA,EAAA,QAAA,EAAA,QAAA,EAAA,qBAAA;YACA,QAAA,EAAA,MAAA,EAAA,oBAAA,EAAA,CAAA,mBAAA,EAAA,IAAA,QAAA,EAAA,CAAA;YACA,CAII,kBAAwB,EAJ5B,IAAA,QAAA,EAAA,CAAA;SACA;KACA;IACE,eAAF;IACE,EAAF,OAAA,EAAA,cAAA,EAAA,UAAA,EAAA,SAAA,EAAA,IAAA,EAAA,CAAA,MAAA,CAAA,EAAA;IACE,EAAC,OAIC,EAAQ,qBAJZ,EAAA,QAAA,EAAA,sBAAA,EAAA;IACA,eAAA;;;;CAIA,CAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA0DA;;;;;;;;;;;;;;;;;;;OAkBA;IACA,oBAAA,GAAA,UAAA,MAAA,EAAA,MAAA;QACA,MAAA,CAAA;YACA,QAAA,EAAA,YAAA;YACA,SAAA,EAAA;gBACA,gBADsB;gBAEtB,aAAA,CAAA,MAD0B,CAC1B;gBACA;oBACA,OADkB,EAClB,oBADwC;oBAExC,UAAA,EAAA,mBAAA;oBACU,IAAV,EAAA,CAAiB,CAAjB,MAAA,EAAA,IAAA,QAAA,EAAA,EAAA,IAAA,QAAA,EAAA,CAAA,CAAA;iBACA;gBACA,EAAA,OAAA,EAAA,oBAAA,EAAA,QAAA,EAAA,MAAA,GAAA,MAAA,GAAA,EAAA,EAAA;gBACA;oBACA,OAAA,EAAA,gBAAA;oBACA,UAAA,EAAA,uBAAA;oBACA,IAAA,EAAA;wBACA,gBAAA,EAAA,CAAA,IADmB,MACnB,CAAA,aAAA,CAAA,EAAA,IAAA,QAAA,EAAA,CAAA,EAAA,oBAAA;qBACA;iBACA;gBACA;oBACA,OADkB,EAClB,kBAAA;oBACA,WAAA,EAAA,MAAA,IAAA,MAAA,CAAA,kBAAA,GAAA,MAAA,CAAA,kBAAA;wBACA,YAAA;iBACA;gBACA,EAAA,OAAA,EAAA,YAAA,EAAA,KAAA,EAAA,IAAA,EAAA,UAAA,EAAA,kBAAA,EAAA;;;;;;;;;;IAOA,qBAAA,GAAA,UAAA,MAA2C;QAG3C,MAAA,CAAA,EAAA,QAAA,EAAA,YAAA,EAAA,SAAA,EAAA,CAAA,aAAA,CAAA,MAFoE,CAEpE,CAAA,EAAA,CAAA;IACA,CAAA;;;;;CAAA,CAAA;AAKA;;GAEA;AAGA,YAAA,CAAA,cAAA,GAAA,cAAA,OAAA;;;GAAA;;;;;;GAoBA;;;;;;AAKA;;;GAIA;AAPA,6BAAA,MAAA;IASA,EAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;GAqBA;AACA,uBAAA,MAAA;IACA,MAAA,CAAA;;;;;;;;;;;;;;;;;;GAmFA;AACA,qBAAA,GAAA,EAAA,aAAA,EAAA,SAAA,EAAA,QAAA,EAAA,QAAA,EAAA,MAAA,EAAA,QAAA,EAAA,MAAA,EAAA,IAAA,EAAA,mBAAA,EAAA,kBAAA;IAAA,qBAAA,EAAA,SAAA;IAEE,IAAF,gBA7CO,CA6CP,MAAA,GAAA,IAAA,MAAA,CAAA,IAAA,EAAA,aAAA,EAAA,SAAA,EAAA,QAAA,EAAA,QAAA,EAAA,MAAA,EAAA,QAAA,EAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;IACA,EAAA,CAAA,CAAI,mBAAJ,CAAA,CAAA,CAAA;QACA,MAAA,CAAA,mBAAA,GAAA,mBAAA,CAAA;IAEE,CAAF;IACA,EAAA,CAAA,CAAI,kBAAJ,CA7CY,CA6CZ,CAAA;QACA,MAAA,CAAA,kBAAA,GAAA,kBAAA,CAAA;IAEE,CAAF;IACA,EAAA,CAAA,CAAI,IAAJ,CAAA,YAAA,CAAA,CAAA,CAAA;QACI,MAAM,CA7CC,YA6CX,GAAA,IAAA,CAAA,YAAA,CAAA;IACA,CAAA;IACA,EAAA,CAAA,CAAA,IAAM,CAAN,aAAA,CAAA,CAAA,CAAA;QACA,IAAA,gBAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA;QACA,MAAA,CAAS,MAAT,CAAA,SAAA,CAAA,UAAA,CAAA;YACA,KAAA,CAAA,QAAA,CAAA,mBAAA,CAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA;YACA,KAAA,CAAA,GAAA,CAAA,CAAA,CAAA,QAAA,EAAA,CAAA,CAAA;YAEA,KAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;YACA,KAAA,CAAA,WAAA,EAAA,CAAA;;;;;AAKA;;;;;;;;;;;;;;;;;;AAoBA;IAxCA;;OAFA;IAEA,2BAAA,QAAA;;;;IA4CA,CAAA;IACA;;OAEA;IACA,0CAAA,GAAA;QAAA;QACA,IAAA,gBAAA,CAAA,CAAA,GA1CY,IA0CZ,CAAA,QA1CqB,CAAK,GA0C1B,CAAA,oBAAA,EAAA,OAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA,CAAA;QACA,MAAA,CAAA,CAAA,CAAA,IAAA,CAAA;YAEM,IAAI,gBAAV,CAAA,OAAA,GA1CqC,IAAI,CA0CzC;YACA,IAAA,gBAAA,CAAA,GAAA,GAAA,IAAA,OAAA,CAAA,UAAA,CAAA,IAAA,OAAA,OAAA,GAAA,CAAA,EAAA,CAAA,CAAA,CAAA;YAEA,IAAA,gBAAA,CAAA,MAAA,GAAA,KAAA,CAAA,QAAA,CAAA,GAAA,CAAA,MAAA,CAAA,CAAA;YA1CA,IAAA,gBAAA,CAAA,IAAA,GAAA,KAAA,CAAA,QAAA,CAAA,GAAA,CAAwD,oBAAxD,CAAA,CAAA;YA2CA,EAAA,CAAA,CAAQ,KAAR,CAAA,gBAAA,CAAA,IAAA,CAAA,IAAA,KAAA,CA1C2C,eA0C3C,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;gBACQ,OAAO,CA1CC,IAAC,CAAI,CAAC;YA4CtB,CAAO;YA1CP,IAAA,CAAa,EAAb,CAAA,CAAa,IAAK,CAAI,iBAAC,KAAqB,UAA5C,CAAuD,CAAvD,CAAA;gBA2CQ,MAAM,CA1CC,2BAA2B,EA0C1C,CAAA;;YAEA,CAAA;YACA,IAAA,CAAA,EAAA,CAAA,CAAA,IAAA,CAAA,iBA1CkB,KA0ClB,SAAA,CAAA,CAAA,CAAA;gBACA,MAAA,CAAA,KAAA,CAAA,kBAAA,GAAA;oBACA,gDAAA;oBAGA,EAAA,CAAA,CAAA,CAAA,KAAA,CAAA,cAAA,CAAA,CAAA,CAAA;wBA1CA,KAAA,CAAA,cAAA,GAAA,IAAA,CAAA;wBA2CY,OA1CO,CA0CnB,IAAA,CAAA,CA1CwB;wBA2CxB,MAAA,CAAA,KAAA,CAAA,yBAAA,CAAA;oBACA,CAAA;oBACA,IAAA,CAAA,CAAA;wBAEA,MAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAAA;oBA1CA,CAAA;gBA2CQ,CAAR,CAAA;gBACA,MAAA,CAAA,iBAAA,EAAA,CAAA;YAEM,CAAN;YACA,IAAA,CAAA,CAAA;gBACA,MAAA,IAAA,KAAA,CAAA,yCAAA,IAAA,CAAA,iBAAA,MAAA,CAAA,CAAA;;;;;IAKA;;;OAGA;IACA,6CAAA,GAAA,UAAA,wBAAA;QAEI,IAAJ,gBAAA,CAAA,IAAA,GAAA,IAAA,CAAA,QAAA,CAAA,GA7C0C,CAAU,oBA6CpD,CAAA,CAAA;QACA,IAAA,gBAAA,CAAA,SAAA,GAAA,IAAA,CAAA,QAAA,CAAA,GAAA,CAAA,eAAA,CAAA,CAAA;QACA,IAAA,gBAAA,CAAA,MAAA,GAAA,IAAA,CAAA,QAAA,CAAA,GAAA,CAAA,MAAA,CAAA,CAAA;QAEI,IAAJ,gBAAA,CAAA,GAAA,GA7C8B,IA6C9B,CAAA,QAAA,CAAA,GAAA,CAAA,cAAA,CAAA,CAAA;QACA,EAAA,CAAA,CAAM,wBA7CQ,KA6Cd,GAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;YACA,MAAA,CAAA;QA7CA,CAAA;QA+BA,EAAA,CAAA,CAAM,IAAN,CAAA,eAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;YAgBA,MAAA,CAAA,iBAAA,EAAA,CAAA;QAEI,CAAJ;QACI,IAAJ,CAAA,EA7CW,CA6CX,CAAA,IAAA,CAAA,gBA7CkC,CA6ClC,IAAA,CAAA,CAAA,CAAA,CAAA;YAdO,MAeP,CAAA,2BAAA,EA7CyC,CAAI;QA8CzC,CAAJ;QACA,SAAA,CAAA,eAAA,EAAA,CAAA;;;;;IA3CG;;;OAmDH;;;;;IA9CG;;;;IAGH,4CAAA,GAAA,UAAA,IAAA;QAoDA,MAAA,CAAA,IAAA,CAAA,iBAAA,KAAA,iBAAA,IAAA,IAAA,CAAA,iBAAA,KAAA,KAAA,CAAA;IACA,CAAA;;CAnFA;;;CAkCA,CAAA;AAsDA;;GAIA;;;;AAoBA;;;;;;;AAOA;;;;;;;;;;;;AAaA,IAAA,kBAAA,GAAA,IAAA,cAAA,CAAA,oBAAA,CAAA,CAAA;AACA;;GAEA;AACA;IACA,MAAA,CAAA;QACA,iBAAA;QACA;YACA,OAAA,EAAA,eAAA;YACA,KA5FM,EAAQ,IA4Fd;YACA,UAAA,EAAA,iBA5Fc;YA6Fd,IAAA,EAAA,CAAA,iBAAA,CAAA;SACA;;QDrfA,EAAA,OAAA,EAAA,sBAAA,EAAA,KAAA,EAAA,IAAA,EAAA,WAAA,EAAA,kBAAA,EAAA;;;;;;;;"}