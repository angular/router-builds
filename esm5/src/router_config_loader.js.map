{"version":3,"file":"router_config_loader.js","sourceRoot":"","sources":["../../../../../packages/router/src/router_config_loader.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAW,cAAc,EAAY,eAAe,EAAwB,MAAM,eAAe,CAAC;AAEzG,OAAO,EAAa,IAAI,EAAE,EAAE,EAAE,MAAM,MAAM,CAAC;AAC3C,OAAO,EAAC,GAAG,EAAE,QAAQ,EAAC,MAAM,gBAAgB,CAAC;AAC7C,OAAO,EAAe,kBAAkB,EAAS,UAAU,EAAC,MAAM,UAAU,CAAC;AAC7E,OAAO,EAAC,OAAO,EAAE,kBAAkB,EAAC,MAAM,oBAAoB,CAAC;;;;;AAM/D,MAAM,CAAC,qBAAM,MAAM,GAAG,IAAI,cAAc,CAAY,QAAQ,CAAC,CAAC;AAE9D,IAAA;IACE,4BACY,QAAuC,QAAkB,EACzD,qBACA;QAFA,WAAM,GAAN,MAAM;QAAiC,aAAQ,GAAR,QAAQ,CAAU;QACzD,wBAAmB,GAAnB,mBAAmB;QACnB,sBAAiB,GAAjB,iBAAiB;KAAyB;;;;;;IAEtD,iCAAI;;;;;IAAJ,UAAK,cAAwB,EAAE,KAAY;QAA3C,iBAgBC;QAfC,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;SACjC;QAED,qBAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,oBAAC,KAAK,CAAC,YAAY,GAAG,CAAC;QAEpE,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,UAAC,OAA6B;YAC3D,EAAE,CAAC,CAAC,KAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBAC3B,KAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;aAC/B;YAED,qBAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;YAE9C,MAAM,CAAC,IAAI,kBAAkB,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,MAAM,CAAC,CAAC;SAC7F,CAAC,CAAC,CAAC;KACL;;;;;IAEO,8CAAiB;;;;cAAC,YAA0B;;QAClD,EAAE,CAAC,CAAC,OAAO,YAAY,KAAK,QAAQ,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;SAC7C;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAC,CAAM;gBAC7D,EAAE,CAAC,CAAC,CAAC,YAAY,eAAe,CAAC,CAAC,CAAC;oBACjC,MAAM,CAAC,EAAE,CAAE,CAAC,CAAC,CAAC;iBACf;gBAAC,IAAI,CAAC,CAAC;oBACN,MAAM,CAAC,IAAI,CAAC,KAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC;iBAClD;aACF,CAAC,CAAC,CAAC;SACL;;6BAxDL;IA0DC,CAAA;AArCD,8BAqCC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, InjectionToken, Injector, NgModuleFactory, NgModuleFactoryLoader} from '@angular/core';\n// TODO(i): switch to fromPromise once it's expored in rxjs\nimport {Observable, from, of } from 'rxjs';\nimport {map, mergeMap} from 'rxjs/operators';\nimport {LoadChildren, LoadedRouterConfig, Route, copyConfig} from './config';\nimport {flatten, wrapIntoObservable} from './utils/collection';\n\n/**\n * @docsNotRequired\n * @experimental\n */\nexport const ROUTES = new InjectionToken<Route[][]>('ROUTES');\n\nexport class RouterConfigLoader {\n  constructor(\n      private loader: NgModuleFactoryLoader, private compiler: Compiler,\n      private onLoadStartListener?: (r: Route) => void,\n      private onLoadEndListener?: (r: Route) => void) {}\n\n  load(parentInjector: Injector, route: Route): Observable<LoadedRouterConfig> {\n    if (this.onLoadStartListener) {\n      this.onLoadStartListener(route);\n    }\n\n    const moduleFactory$ = this.loadModuleFactory(route.loadChildren !);\n\n    return moduleFactory$.pipe(map((factory: NgModuleFactory<any>) => {\n      if (this.onLoadEndListener) {\n        this.onLoadEndListener(route);\n      }\n\n      const module = factory.create(parentInjector);\n\n      return new LoadedRouterConfig(flatten(module.injector.get(ROUTES)).map(copyConfig), module);\n    }));\n  }\n\n  private loadModuleFactory(loadChildren: LoadChildren): Observable<NgModuleFactory<any>> {\n    if (typeof loadChildren === 'string') {\n      return from(this.loader.load(loadChildren));\n    } else {\n      return wrapIntoObservable(loadChildren()).pipe(mergeMap((t: any) => {\n        if (t instanceof NgModuleFactory) {\n          return of (t);\n        } else {\n          return from(this.compiler.compileModuleAsync(t));\n        }\n      }));\n    }\n  }\n}\n"]}