{"version":3,"file":"router.js","sourceRoot":"","sources":["../../../../../packages/router/src/router.ts"],"names":[],"mappings":";;;;;;;;;;;;AASA,OAAO,EAA4C,WAAW,EAAQ,SAAS,EAAC,MAAM,eAAe,CAAC;AACtG,OAAO,EAAC,eAAe,EAAc,OAAO,EAAgB,EAAE,EAAE,MAAM,MAAM,CAAC;AAC7E,OAAO,EAAC,SAAS,EAAE,GAAG,EAAE,QAAQ,EAAC,MAAM,gBAAgB,CAAC;AAExD,OAAO,EAAC,cAAc,EAAC,MAAM,mBAAmB,CAAC;AACjD,OAAO,EAAyD,UAAU,EAAE,cAAc,EAAC,MAAM,UAAU,CAAC;AAC5G,OAAO,EAAC,iBAAiB,EAAC,MAAM,uBAAuB,CAAC;AACxD,OAAO,EAAC,aAAa,EAAC,MAAM,mBAAmB,CAAC;AAChD,OAAO,EAAC,aAAa,EAAE,kBAAkB,EAAS,cAAc,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,aAAa,EAAE,eAAe,EAAE,eAAe,EAAqB,UAAU,EAAE,YAAY,EAAE,kBAAkB,EAAE,oBAAoB,EAAE,gBAAgB,EAAC,MAAM,UAAU,CAAC;AAChR,OAAO,EAAC,aAAa,EAAC,MAAM,kBAAkB,CAAC;AAC/C,OAAO,EAAC,SAAS,EAAC,MAAM,aAAa,CAAC;AACtC,OAAO,EAAC,yBAAyB,EAAkD,MAAM,wBAAwB,CAAC;AAClH,OAAO,EAAC,kBAAkB,EAAC,MAAM,wBAAwB,CAAC;AAE1D,OAAO,EAA2E,qBAAqB,EAAE,gBAAgB,EAA6B,MAAM,gBAAgB,CAAC;AAC7K,OAAO,EAAS,0BAA0B,EAAC,MAAM,UAAU,CAAC;AAC5D,OAAO,EAAC,0BAA0B,EAAsB,MAAM,yBAAyB,CAAC;AACxF,OAAO,EAAgB,OAAO,EAAE,YAAY,EAAE,kBAAkB,EAAC,MAAM,YAAY,CAAC;AACpF,OAAO,EAAC,OAAO,EAAC,MAAM,oBAAoB,CAAC;AAC3C,OAAO,EAAW,iBAAiB,EAAC,MAAM,cAAc,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkIzD,6BAA6B,KAAU;IACrC,MAAM,KAAK,CAAC;CACb;;;;;;AAwBD,2BAA2B,QAA6B;IACtD,MAAM,mBAAC,EAAE,CAAE,IAAI,CAAQ,EAAC;CACzB;;;;;;;;;;;;AAaD;;;;;;;;;;;AAAA;IA+DE;;OAEG;IACH,sDAAsD;IACtD,gBACY,mBAA2C,aAA4B,EACvE,cAA8C,QAAkB,EAAE,QAAkB,EAC5F,MAA6B,EAAE,QAAkB,EAAS,MAAc;QAH5E,iBAgBC;QAfW,sBAAiB,GAAjB,iBAAiB;QAA0B,kBAAa,GAAb,aAAa,CAAe;QACvE,iBAAY,GAAZ,YAAY;QAAkC,aAAQ,GAAR,QAAQ,CAAU;QACd,WAAM,GAAN,MAAM,CAAQ;2BAnEtD,IAAI,eAAe,oBAAmB,IAAI,GAAG;4BAGpC,CAAC;sBAIY,IAAI,OAAO,EAAS;;;;;;4BAQnC,mBAAmB;;;;yBAO3B,KAAK;gCACS,CAAC,CAAC;;;;;;qBAOsC;YACzE,mBAAmB,EAAE,iBAAiB;YACtC,kBAAkB,EAAE,iBAAiB;SACtC;;;;mCAK0C,IAAI,0BAA0B,EAAE;kCAElC,IAAI,yBAAyB,EAAE;;;;;;;mCAQ/B,QAAQ;;;;;;;;;yCAUC,WAAW;QAU3D,qBAAM,WAAW,GAAG,UAAC,CAAQ,IAAK,OAAA,KAAI,CAAC,YAAY,CAAC,IAAI,oBAAoB,CAAC,CAAC,CAAC,CAAC,EAA9C,CAA8C,CAAC;QACjF,qBAAM,SAAS,GAAG,UAAC,CAAQ,IAAK,OAAA,KAAI,CAAC,YAAY,CAAC,IAAI,kBAAkB,CAAC,CAAC,CAAC,CAAC,EAA5C,CAA4C,CAAC;QAE7E,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAE1C,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACzB,IAAI,CAAC,cAAc,GAAG,kBAAkB,EAAE,CAAC;QAC3C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC;QAEtC,IAAI,CAAC,YAAY,GAAG,IAAI,kBAAkB,CAAC,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;QACrF,IAAI,CAAC,WAAW,GAAG,gBAAgB,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACjF,IAAI,CAAC,kBAAkB,EAAE,CAAC;KAC3B;IAED;;;OAGG;;;;;;;IACH,uCAAsB;;;;;;IAAtB,UAAuB,iBAA4B;QACjD,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;;;QAG3C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC;KAC1D;IAED;;OAEG;;;;;IACH,kCAAiB;;;;IAAjB;QACE,IAAI,CAAC,2BAA2B,EAAE,CAAC;QACnC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAC,UAAU,EAAE,IAAI,EAAC,CAAC,CAAC;SAClE;KACF;IAED;;OAEG;;;;;IACH,4CAA2B;;;;IAA3B;QAAA,iBAeC;;;;QAXC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAC/B,IAAI,CAAC,oBAAoB,qBAAQ,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAC,MAAW;gBACnE,qBAAM,UAAU,GAAG,KAAI,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC3D,qBAAM,MAAM,GAAsB,MAAM,CAAC,MAAM,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,YAAY,CAAC;gBAC5F,qBAAM,KAAK,GAAG,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;oBACrD,EAAC,YAAY,EAAE,MAAM,CAAC,KAAK,CAAC,YAAY,EAAC,CAAC,CAAC;oBAC3C,IAAI,CAAC;gBACT,UAAU,CACN,cAAQ,KAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE,MAAM,EAAE,KAAK,EAAE,EAAC,UAAU,EAAE,IAAI,EAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;aAC3F,CAAC,CAAA,CAAC;SACJ;KACF;IAGD,sBAAI,uBAAG;QADP,sBAAsB;;;;;QACtB,cAAoB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,EAAE;;;OAAA;IAEpE,gBAAgB;;;;;;IAChB,6BAAY;;;;;IAAZ,UAAa,CAAQ,IAAU,mBAAC,IAAI,CAAC,MAAwB,EAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;IAEzE;;;;;;;;;;;;;OAaG;;;;;;;;;;;;;;;;;IACH,4BAAW;;;;;;;;;;;;;;;;IAAX,UAAY,MAAc;QACxB,cAAc,CAAC,MAAM,CAAC,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACrC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC,CAAC;KAC5B;IAED,uBAAuB;;;;;IACvB,4BAAW;;;;IAAX,cAAsB,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE;IAEvC,6BAA6B;;;;;IAC7B,wBAAO;;;;IAAP;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,oBAAoB,CAAC,WAAW,EAAE,CAAC;YACxC,IAAI,CAAC,oBAAoB,sBAAG,IAAI,EAAE,CAAC;SACpC;KACF;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAwCG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IACH,8BAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAb,UAAc,QAAe,EAAE,gBAAuC;QAAvC,iCAAA,EAAA,qBAAuC;QAC7D,IAAA,wCAAU,EAAW,0CAAW,EAAU,oCAAQ,EAClD,0DAAmB,EAAE,0DAAmB,EAAE,oDAAgB,CAAqB;QACtF,EAAE,CAAC,CAAC,SAAS,EAAE,IAAI,mBAAmB,sBAAS,OAAO,CAAA,sBAAS,OAAO,CAAC,IAAI,CAAA,CAAC,CAAC,CAAC;YAC5E,OAAO,CAAC,IAAI,CAAC,qEAAqE,CAAC,CAAC;SACrF;QACD,qBAAM,CAAC,GAAG,UAAU,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;QAC9C,qBAAM,CAAC,GAAG,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC;QACrE,qBAAI,CAAC,GAAgB,IAAI,CAAC;QAC1B,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;gBAC5B,KAAK,OAAO;oBACV,CAAC,wBAAO,IAAI,CAAC,cAAc,CAAC,WAAW,EAAK,WAAW,CAAC,CAAC;oBACzD,KAAK,CAAC;gBACR,KAAK,UAAU;oBACb,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC;oBACpC,KAAK,CAAC;gBACR;oBACE,CAAC,GAAG,WAAW,IAAI,IAAI,CAAC;aAC3B;SACF;QAAC,IAAI,CAAC,CAAC;YACN,CAAC,GAAG,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC,WAAW,IAAI,IAAI,CAAC;SACjF;QACD,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;YACf,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;SAC9B;QACD,MAAM,CAAC,aAAa,CAAC,CAAC,EAAE,IAAI,CAAC,cAAc,EAAE,QAAQ,qBAAE,CAAC,uBAAI,CAAC,GAAG,CAAC;KAClE;IAED;;;;;;;;;;;;;;;;;;;OAmBG;;;;;;;;;;;;;;;;;;;;;;;;IACH,8BAAa;;;;;;;;;;;;;;;;;;;;;;;IAAb,UAAc,GAAmB,EAAE,MAAsD;QAAtD,uBAAA,EAAA,WAA4B,kBAAkB,EAAE,KAAK,EAAC;QAEvF,qBAAM,OAAO,GAAG,GAAG,YAAY,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAClE,qBAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAE5E,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;KACxE;IAED;;;;;;;;;;;;;;;;;;;;OAoBG;;;;;;;;;;;;;;;;;;;;;;;;;IACH,yBAAQ;;;;;;;;;;;;;;;;;;;;;;;;IAAR,UAAS,QAAe,EAAE,MAAsD;QAAtD,uBAAA,EAAA,WAA4B,kBAAkB,EAAE,KAAK,EAAC;QAE9E,gBAAgB,CAAC,QAAQ,CAAC,CAAC;QAC3B,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,MAAM,CAAC,CAAC;KACzE;IAED,2CAA2C;;;;;;IAC3C,6BAAY;;;;;IAAZ,UAAa,GAAY,IAAY,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE;IAEhF,uCAAuC;;;;;;IACvC,yBAAQ;;;;;IAAR,UAAS,GAAW,IAAa,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE;IAExE,2CAA2C;;;;;;;IAC3C,yBAAQ;;;;;;IAAR,UAAS,GAAmB,EAAE,KAAc;QAC1C,EAAE,CAAC,CAAC,GAAG,YAAY,OAAO,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,cAAc,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;SACtD;QAED,qBAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC9C,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,cAAc,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;KAC1D;;;;;IAEO,iCAAgB;;;;cAAC,MAAc;QACrC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAC,MAAc,EAAE,GAAW;YAC5D,qBAAM,KAAK,GAAQ,MAAM,CAAC,GAAG,CAAC,CAAC;YAC/B,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;gBAC1C,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;aACrB;YACD,MAAM,CAAC,MAAM,CAAC;SACf,EAAE,EAAE,CAAC,CAAC;;;;;IAGD,mCAAkB;;;;;QACxB,IAAI,CAAC,WAAW;aACX,IAAI,CAAC,SAAS,CAAC,UAAC,GAAqB;YACpC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACR,KAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAC;;;gBAGrC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,eAAQ,CAAC,CAAC;aACpC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,mBAAM,EAAE,CAAE,IAAI,CAAC,EAAC;aACvB;SACF,CAAC,CAAC;aACF,SAAS,CAAC,eAAQ,CAAC,CAAC;;;;;;;;;IAGnB,mCAAkB;;;;;;;cACtB,MAAe,EAAE,MAAyB,EAAE,KAAkC,EAC9E,MAAwB;QAC1B,qBAAM,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;;;;QAK9C,EAAE,CAAC,CAAC,cAAc,IAAI,MAAM,KAAK,YAAY,IAAI,cAAc,CAAC,MAAM,KAAK,YAAY;YACnF,cAAc,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YAC3D,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAC9B;;;;QAKD,EAAE,CAAC,CAAC,cAAc,IAAI,MAAM,IAAI,YAAY,IAAI,cAAc,CAAC,MAAM,KAAK,UAAU;YAChF,cAAc,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YAC3D,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAC9B;;;;QAID,EAAE,CAAC,CAAC,cAAc,IAAI,MAAM,IAAI,UAAU,IAAI,cAAc,CAAC,MAAM,KAAK,YAAY;YAChF,cAAc,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YAC3D,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAC9B;QAED,qBAAI,OAAO,GAAQ,IAAI,CAAC;QACxB,qBAAI,MAAM,GAAQ,IAAI,CAAC;QAEvB,qBAAM,OAAO,GAAG,IAAI,OAAO,CAAU,UAAC,GAAG,EAAE,GAAG;YAC5C,OAAO,GAAG,GAAG,CAAC;YACd,MAAM,GAAG,GAAG,CAAC;SACd,CAAC,CAAC;QAEH,qBAAM,EAAE,GAAG,EAAE,IAAI,CAAC,YAAY,CAAC;QAC/B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAC,EAAE,IAAA,EAAE,MAAM,QAAA,EAAE,KAAK,OAAA,EAAE,MAAM,QAAA,EAAE,MAAM,QAAA,EAAE,OAAO,SAAA,EAAE,MAAM,QAAA,EAAE,OAAO,SAAA,EAAC,CAAC,CAAC;;;QAIrF,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,UAAC,CAAM,IAAK,OAAA,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAjB,CAAiB,CAAC,CAAC;;;;;;IAG9C,2CAA0B;;;;cAAC,EACyB;;YADxB,UAAE,EAAE,kBAAM,EAAE,kBAAM,EAAE,oBAAO,EAAE,kBAAM,EAAE,kBAAM,EAC3C,gBAAK;QACvC,qBAAM,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACrD,qBAAM,aAAa,GAAG,CAAC,IAAI,CAAC,SAAS,IAAI,GAAG,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC;QAE3F,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,aAAa,CAAC;YAC9D,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACtD,mBAAC,IAAI,CAAC,MAAwB,EAAC;iBAC1B,IAAI,CAAC,IAAI,eAAe,CAAC,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;YAC1E,OAAO,CAAC,OAAO,EAAE;iBACZ,IAAI,CACD,UAAC,CAAC;gBAAK,OAAA,KAAI,CAAC,WAAW,CACnB,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,kBAAkB,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE,EAAE,EAAE,IAAI,CAAC;YADrE,CACqE,CAAC;iBAChF,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;;;SAI5B;QAAC,IAAI,CAAC,EAAE,CAAC,CACN,aAAa,IAAI,IAAI,CAAC,UAAU;YAChC,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC/D,mBAAC,IAAI,CAAC,MAAwB,EAAC;iBAC1B,IAAI,CAAC,IAAI,eAAe,CAAC,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;YAC1E,OAAO,CAAC,OAAO,EAAE;iBACZ,IAAI,CACD,UAAC,CAAC;gBAAK,OAAA,KAAI,CAAC,WAAW,CACnB,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,EAC7B,gBAAgB,CAAC,GAAG,EAAE,KAAI,CAAC,iBAAiB,CAAC,CAAC,QAAQ,CAAC;YAFpD,CAEoD,CAAC;iBAC/D,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;SAE5B;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;YACzB,OAAO,CAAC,IAAI,CAAC,CAAC;SACf;;;;;;;;;;;IAGK,4BAAW;;;;;;;;;cACf,GAAY,EAAE,MAAe,EAAE,kBAA2B,EAAE,UAAmB,EAAE,EAAU,EAC3F,eAAyC;;QAC3C,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YAC7B,mBAAC,IAAI,CAAC,MAAwB,EAAC;iBAC1B,IAAI,CAAC,IAAI,gBAAgB,CACtB,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAC1B,mBAAiB,EAAE,mDAA8C,IAAI,CAAC,YAAc,CAAC,CAAC,CAAC;YAC/F,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SAC/B;QAED,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,cAAc,EAAE,aAAa;;;YAG/C,qBAAI,eAA2C,CAAC;YAChD,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;gBACrB,qBAAM,cAAc,GAAG,KAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;gBAC9C,qBAAM,iBAAiB,GACnB,cAAc,CAAC,cAAc,EAAE,KAAI,CAAC,YAAY,EAAE,KAAI,CAAC,aAAa,EAAE,GAAG,EAAE,KAAI,CAAC,MAAM,CAAC,CAAC;gBAE5F,eAAe,GAAG,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAC,UAAmB;oBACpE,MAAM,CAAC,SAAS,CACL,KAAI,CAAC,iBAAiB,EAAE,KAAI,CAAC,MAAM,EAAE,UAAU,EAAE,KAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAC9E,KAAI,CAAC,yBAAyB,CAAC;yBACrC,IAAI,CAAC,GAAG,CAAC,UAAC,QAAa;wBACtB,mBAAC,KAAI,CAAC,MAAwB,EAAC;6BAC1B,IAAI,CAAC,IAAI,gBAAgB,CACtB,EAAE,EAAE,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,KAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC;wBAE9E,MAAM,CAAC,EAAC,UAAU,YAAA,EAAE,QAAQ,UAAA,EAAC,CAAC;qBAC/B,CAAC,CAAC,CAAC;iBACT,CAAC,CAAC,CAAC;aACL;YAAC,IAAI,CAAC,CAAC;gBACN,eAAe,GAAG,EAAE,CAAE,EAAC,UAAU,EAAE,GAAG,EAAE,QAAQ,EAAE,eAAe,EAAC,CAAC,CAAC;aACrE;YAED,qBAAM,wBAAwB,GAC1B,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAC,CAAC;gBAC9B,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,SAAS,CAAC;oBAAC,MAAM,CAAC,EAAE,CAAE,CAAC,CAAC,CAAC;gBAC1C,MAAM,CAAC,KAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,cAAM,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC,CAAC;aACtE,CAAC,CAAC,CAAC;;YAGR,qBAAI,aAA4B,CAAC;YAEjC,qBAAM,mBAAmB,GAAG,wBAAwB,CAAC,IAAI,CAAC,GAAG,CAAC,UAAC,CAAC;gBAC9D,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,SAAS,CAAC;oBAAC,MAAM,CAAC,CAAC,CAAC;gBAC9B,IAAA,yBAAU,EAAE,qBAAQ,CAAM;gBACjC,qBAAM,cAAc,GAAG,KAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;gBAC9C,aAAa,GAAG,IAAI,aAAa,CAC7B,QAAQ,EAAE,KAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,cAAc,EACnD,UAAC,GAAU,IAAK,OAAA,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAtB,CAAsB,CAAC,CAAC;gBAC5C,aAAa,CAAC,UAAU,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC;gBAC5C,MAAM,CAAC,EAAC,UAAU,YAAA,EAAE,QAAQ,UAAA,EAAC,CAAC;aAC/B,CAAC,CAAC,CAAC;YAEJ,qBAAM,yBAAyB,GAC3B,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAC,CAAC;gBAClC,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,SAAS,IAAI,KAAI,CAAC,YAAY,KAAK,EAAE,CAAC;oBAAC,MAAM,CAAC,EAAE,CAAE,KAAK,CAAC,CAAC;gBACnE,IAAA,yBAAU,EAAE,qBAAQ,CAAM;gBAEjC,KAAI,CAAC,YAAY,CAAC,IAAI,gBAAgB,CAClC,EAAE,EAAE,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,KAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC;gBAE1E,MAAM,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,UAAC,cAAuB;oBAClE,KAAI,CAAC,YAAY,CAAC,IAAI,cAAc,CAChC,EAAE,EAAE,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,KAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE,QAAQ,EACnE,cAAc,CAAC,CAAC,CAAC;oBACrB,MAAM,CAAC,EAAC,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,cAAc,EAAE,cAAc,EAAC,CAAC;iBACrF,CAAC,CAAC,CAAC;aACL,CAAC,CAAC,CAAC;YAER,qBAAM,yBAAyB,GAC3B,yBAAyB,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAC,CAAC;gBACxC,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,SAAS,IAAI,KAAI,CAAC,YAAY,KAAK,EAAE,CAAC;oBAAC,MAAM,CAAC,EAAE,CAAE,KAAK,CAAC,CAAC;gBAE1E,EAAE,CAAC,CAAC,CAAC,CAAC,cAAc,IAAI,aAAa,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;oBACrD,KAAI,CAAC,YAAY,CAAC,IAAI,YAAY,CAC9B,EAAE,EAAE,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,KAAI,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAC9E,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,KAAI,CAAC,yBAAyB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;wBACxE,KAAI,CAAC,YAAY,CAAC,IAAI,UAAU,CAC5B,EAAE,EAAE,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,KAAI,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;wBAC9E,MAAM,CAAC,CAAC,CAAC;qBACV,CAAC,CAAC,CAAC;iBACL;gBAAC,IAAI,CAAC,CAAC;oBACN,MAAM,CAAC,EAAE,CAAE,CAAC,CAAC,CAAC;iBACf;aACF,CAAC,CAAC,CAAC;YAER,qBAAM,kBAAkB,GACpB,yBAAyB,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAC,CAAC;gBACxC,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,SAAS,IAAI,KAAI,CAAC,YAAY,KAAK,EAAE,CAAC;oBAAC,MAAM,CAAC,EAAE,CAAE,KAAK,CAAC,CAAC;gBAC1E,MAAM,CAAC,KAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,cAAM,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC,CAAC;aACrE,CAAC,CAAC,CAAC;;;YAKR,qBAAM,YAAY,GAAG,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,UAAC,CAAC;gBACjD,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,SAAS,IAAI,KAAI,CAAC,YAAY,KAAK,EAAE,CAAC;oBAAC,MAAM,CAAC,KAAK,CAAC;gBAC9D,IAAA,yBAAU,EAAE,qBAAQ,EAAE,iCAAc,CAAM;gBACjD,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;oBACnB,qBAAM,KAAK,GAAG,iBAAiB,CAAC,KAAI,CAAC,kBAAkB,EAAE,QAAQ,EAAE,KAAI,CAAC,WAAW,CAAC,CAAC;oBACrF,MAAM,CAAC,EAAC,UAAU,YAAA,EAAE,KAAK,OAAA,EAAE,cAAc,gBAAA,EAAC,CAAC;iBAC5C;gBAAC,IAAI,CAAC,CAAC;oBACN,MAAM,CAAC,EAAC,UAAU,YAAA,EAAE,KAAK,EAAE,IAAI,EAAE,cAAc,gBAAA,EAAC,CAAC;iBAClD;aACF,CAAC,CAAC,CAAC;YAGJ,KAAI,CAAC,cAAc,CACf,YAAY,EAAE,KAAI,CAAC,WAAW,EAAE,KAAI,CAAC,cAAc,EAAE,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,kBAAkB,EACxF,UAAU,EAAE,cAAc,EAAE,aAAa,CAAC,CAAC;SAChD,CAAC,CAAC;;;;;;;;;;;;;;;;;IAOG,+BAAc;;;;;;;;;;;;;;;cAClB,KAC2F,EAC3F,WAAwB,EAAE,SAAkB,EAAE,EAAU,EAAE,GAAY,EAAE,MAAe,EACvF,kBAA2B,EAAE,UAAmB,EAAE,cAAmB,EAAE,aAAkB;;;;QAG3F,qBAAI,sBAA+B,CAAC;QAEpC,KAAK;aACA,OAAO,CAAC,UAAC,CAAC;YACT,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,SAAS,IAAI,CAAC,CAAC,CAAC,cAAc,IAAI,EAAE,KAAK,KAAI,CAAC,YAAY,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACxF,sBAAsB,GAAG,KAAK,CAAC;gBAC/B,MAAM,CAAC;aACR;YACM,IAAA,yBAAU,EAAE,eAAK,CAAM;YAC9B,KAAI,CAAC,cAAc,GAAG,UAAU,CAAC;YACjC,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,KAAI,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAE9E,mBAAC,KAAiC,EAAC,CAAC,WAAW,GAAG,KAAK,CAAC;YAExD,EAAE,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;gBACxB,qBAAM,IAAI,GAAG,KAAI,CAAC,aAAa,CAAC,SAAS,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC;gBAC3D,EAAE,CAAC,CAAC,KAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC;oBAC3D,KAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,EAAE,EAAC,YAAY,EAAE,EAAE,EAAC,CAAC,CAAC;iBAC1D;gBAAC,IAAI,CAAC,CAAC;oBACN,KAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,EAAE,EAAC,YAAY,EAAE,EAAE,EAAC,CAAC,CAAC;iBAChD;aACF;YAED,IAAI,cAAc,CACd,KAAI,CAAC,kBAAkB,EAAE,KAAK,EAAE,WAAW,EAAE,UAAC,GAAU,IAAK,OAAA,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAtB,CAAsB,CAAC;iBACnF,QAAQ,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC;YAEjC,sBAAsB,GAAG,IAAI,CAAC;SAC/B,CAAC;aACD,IAAI,CACD;YACE,EAAE,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC;gBAC3B,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC;gBACtB,KAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;gBAC3B,mBAAC,KAAI,CAAC,MAAwB,EAAC;qBAC1B,IAAI,CAAC,IAAI,aAAa,CACnB,EAAE,EAAE,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,KAAI,CAAC,YAAY,CAAC,KAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gBAC7E,cAAc,CAAC,IAAI,CAAC,CAAC;aACtB;YAAC,IAAI,CAAC,CAAC;gBACN,KAAI,CAAC,wBAAwB,EAAE,CAAC;gBAChC,mBAAC,KAAI,CAAC,MAAwB,EAAC;qBAC1B,IAAI,CAAC,IAAI,gBAAgB,CAAC,EAAE,EAAE,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBAChE,cAAc,CAAC,KAAK,CAAC,CAAC;aACvB;SACF,EACD,UAAC,CAAM;YACL,EAAE,CAAC,CAAC,0BAA0B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAClC,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC;gBACtB,KAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;gBACtD,mBAAC,KAAI,CAAC,MAAwB,EAAC;qBAC1B,IAAI,CAAC,IAAI,gBAAgB,CAAC,EAAE,EAAE,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBAEvE,cAAc,CAAC,KAAK,CAAC,CAAC;aACvB;YAAC,IAAI,CAAC,CAAC;gBACN,KAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;gBACtD,mBAAC,KAAI,CAAC,MAAwB,EAAC;qBAC1B,IAAI,CAAC,IAAI,eAAe,CAAC,EAAE,EAAE,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC9D,IAAI,CAAC;oBACH,cAAc,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;iBACtC;gBAAC,KAAK,CAAC,CAAC,iBAAA,EAAE,EAAE,CAAC;oBACZ,aAAa,CAAC,EAAE,CAAC,CAAC;iBACnB;aACF;SACF,CAAC,CAAC;;;;;;;;IAGL,iCAAgB;;;;;;cAAC,WAAwB,EAAE,SAAkB,EAAE,MAAe;QACpF,mBAAC,IAAiC,EAAC,CAAC,WAAW,GAAG,WAAW,CAAC;QAC9D,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;QAChC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;QAC9E,IAAI,CAAC,wBAAwB,EAAE,CAAC;;;;;IAG1B,yCAAwB;;;;QAC9B,IAAI,CAAC,QAAQ,CAAC,YAAY,CACtB,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,EAAE,EAAE,EAAC,YAAY,EAAE,IAAI,CAAC,gBAAgB,EAAC,CAAC,CAAC;;iBA1yBlG;IA4yBC,CAAA;;;;;;;;;;;;AArmBD,kBAqmBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAED,IAAA;IACE,wBACY,oBAAgD,WAAwB,EACxE,WAAgC,YAAkC;QADlE,uBAAkB,GAAlB,kBAAkB;QAA8B,gBAAW,GAAX,WAAW,CAAa;QACxE,cAAS,GAAT,SAAS;QAAuB,iBAAY,GAAZ,YAAY,CAAsB;KAAI;;;;;IAElF,iCAAQ;;;;IAAR,UAAS,cAAsC;QAC7C,qBAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;QAC1C,qBAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;QAE9D,IAAI,CAAC,qBAAqB,CAAC,UAAU,EAAE,QAAQ,EAAE,cAAc,CAAC,CAAC;QACjE,qBAAqB,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAC7C,IAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,QAAQ,EAAE,cAAc,CAAC,CAAC;KAChE;;;;;;;IAGO,8CAAqB;;;;;;cACzB,UAAoC,EAAE,QAAuC,EAC7E,QAAgC;;QAClC,qBAAM,QAAQ,GAAqD,iBAAiB,CAAC,QAAQ,CAAC,CAAC;;QAG/F,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,WAAW;YACrC,qBAAM,eAAe,GAAG,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC;YACjD,KAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,QAAQ,CAAC,eAAe,CAAC,EAAE,QAAQ,CAAC,CAAC;YACxE,OAAO,QAAQ,CAAC,eAAe,CAAC,CAAC;SAClC,CAAC,CAAC;;QAGH,OAAO,CAAC,QAAQ,EAAE,UAAC,CAA2B,EAAE,SAAiB;YAC/D,KAAI,CAAC,6BAA6B,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;SACjD,CAAC,CAAC;;;;;;;;IAGG,yCAAgB;;;;;;cACpB,UAAoC,EAAE,QAAkC,EACxE,aAAqC;QACvC,qBAAM,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC;QAChC,qBAAM,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;QAE9C,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC;;YAEpB,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;;gBAErB,qBAAM,OAAO,GAAG,aAAa,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBACxD,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;oBACZ,IAAI,CAAC,qBAAqB,CAAC,UAAU,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;iBACpE;aACF;YAAC,IAAI,CAAC,CAAC;;gBAEN,IAAI,CAAC,qBAAqB,CAAC,UAAU,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;aACjE;SACF;QAAC,IAAI,CAAC,CAAC;YACN,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;;gBAET,IAAI,CAAC,6BAA6B,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;aAC7D;SACF;;;;;;;IAGK,sDAA6B;;;;;cACjC,KAA+B,EAAE,cAAsC;QACzE,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC/D,IAAI,CAAC,0BAA0B,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;SACxD;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;SACtD;;;;;;;IAGK,mDAA0B;;;;;cAC9B,KAA+B,EAAE,cAAsC;QACzE,qBAAM,OAAO,GAAG,cAAc,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC9D,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;YAC9B,qBAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;YAC7C,qBAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAC;YACxD,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAC,YAAY,cAAA,EAAE,KAAK,OAAA,EAAE,QAAQ,UAAA,EAAC,CAAC,CAAC;SACtF;;;;;;;IAGK,iDAAwB;;;;;cAC5B,KAA+B,EAAE,cAAsC;;QACzE,qBAAM,OAAO,GAAG,cAAc,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAE9D,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACZ,qBAAM,QAAQ,GAAgC,iBAAiB,CAAC,KAAK,CAAC,CAAC;YACvE,qBAAM,UAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,cAAc,CAAC;YAE3E,OAAO,CAAC,QAAQ,EAAE,UAAC,CAAM,EAAE,CAAS,IAAK,OAAA,KAAI,CAAC,6BAA6B,CAAC,CAAC,EAAE,UAAQ,CAAC,EAA/C,CAA+C,CAAC,CAAC;YAE1F,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;;gBAEnB,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;;gBAE5B,OAAO,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAC;aACxC;SACF;;;;;;;;IAGK,4CAAmB;;;;;;cACvB,UAAoC,EAAE,QAAuC,EAC7E,QAAgC;;QAClC,qBAAM,QAAQ,GAA4B,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QACtE,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,CAAC;YAC3B,KAAI,CAAC,cAAc,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,CAAC;YAC3D,KAAI,CAAC,YAAY,CAAC,IAAI,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;SACxD,CAAC,CAAC;QACH,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;YAC/B,IAAI,CAAC,YAAY,CAAC,IAAI,kBAAkB,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;SACtE;;;;;;;;IAGK,uCAAc;;;;;;cAClB,UAAoC,EAAE,QAAkC,EACxE,cAAsC;QACxC,qBAAM,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC;QAChC,qBAAM,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;QAE9C,qBAAqB,CAAC,MAAM,CAAC,CAAC;;QAG9B,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC;YACpB,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;;gBAErB,qBAAM,OAAO,GAAG,cAAc,CAAC,kBAAkB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBACjE,IAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;aAClE;YAAC,IAAI,CAAC,CAAC;;gBAEN,IAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,QAAQ,EAAE,cAAc,CAAC,CAAC;aAChE;SACF;QAAC,IAAI,CAAC,CAAC;YACN,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;;gBAErB,qBAAM,OAAO,GAAG,cAAc,CAAC,kBAAkB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBAEjE,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAC1D,qBAAM,MAAM,GACR,mBAA8B,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAC,CAAC;oBACrF,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;oBACrD,OAAO,CAAC,QAAQ,CAAC,kBAAkB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;oBACrD,OAAO,CAAC,SAAS,GAAG,MAAM,CAAC,YAAY,CAAC;oBACxC,OAAO,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC;oBACnC,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;;;wBAGnB,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;qBAChE;oBACD,uCAAuC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;iBACvD;gBAAC,IAAI,CAAC,CAAC;oBACN,qBAAM,MAAM,GAAG,kBAAkB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;oBACnD,qBAAM,kBAAkB,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,wBAAwB,CAAC,CAAC,CAAC,IAAI,CAAC;oBAElF,OAAO,CAAC,KAAK,GAAG,MAAM,CAAC;oBACvB,OAAO,CAAC,QAAQ,GAAG,kBAAkB,CAAC;oBACtC,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;;;wBAGnB,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;qBACzD;oBAED,IAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,IAAI,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;iBAC9D;aACF;YAAC,IAAI,CAAC,CAAC;;gBAEN,IAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC;aAC5D;SACF;;yBAl9BL;IAo9BC,CAAA;;;;;;;;;;;;;;;AAED,iDAAiD,IAA8B;IAC7E,qBAAqB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,uCAAuC,CAAC,CAAC;CAChE;;;;;AAED,4BAA4B,QAAgC;IAC1D,GAAG,CAAC,CAAC,qBAAI,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC;QAC9C,qBAAM,KAAK,GAAG,CAAC,CAAC,WAAW,CAAC;QAC5B,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,aAAa,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC;QAC7D,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,SAAS,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;KAC3C;IAED,MAAM,CAAC,IAAI,CAAC;CACb;;;;;AAED,0BAA0B,QAAkB;IAC1C,GAAG,CAAC,CAAC,qBAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACzC,qBAAM,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QACxB,EAAE,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;YAChB,MAAM,IAAI,KAAK,CAAC,iCAA+B,GAAG,0BAAqB,CAAG,CAAC,CAAC;SAC7E;KACF;CACF","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {Compiler, Injector, NgModuleFactoryLoader, NgModuleRef, Type, isDevMode} from '@angular/core';\nimport {BehaviorSubject, Observable, Subject, Subscription, of } from 'rxjs';\nimport {concatMap, map, mergeMap} from 'rxjs/operators';\n\nimport {applyRedirects} from './apply_redirects';\nimport {LoadedRouterConfig, QueryParamsHandling, Route, Routes, copyConfig, validateConfig} from './config';\nimport {createRouterState} from './create_router_state';\nimport {createUrlTree} from './create_url_tree';\nimport {ActivationEnd, ChildActivationEnd, Event, GuardsCheckEnd, GuardsCheckStart, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, NavigationTrigger, ResolveEnd, ResolveStart, RouteConfigLoadEnd, RouteConfigLoadStart, RoutesRecognized} from './events';\nimport {PreActivation} from './pre_activation';\nimport {recognize} from './recognize';\nimport {DefaultRouteReuseStrategy, DetachedRouteHandleInternal, RouteReuseStrategy} from './route_reuse_strategy';\nimport {RouterConfigLoader} from './router_config_loader';\nimport {ChildrenOutletContexts} from './router_outlet_context';\nimport {ActivatedRoute, ActivatedRouteSnapshot, RouterState, RouterStateSnapshot, advanceActivatedRoute, createEmptyState, inheritedParamsDataResolve} from './router_state';\nimport {Params, isNavigationCancelingError} from './shared';\nimport {DefaultUrlHandlingStrategy, UrlHandlingStrategy} from './url_handling_strategy';\nimport {UrlSerializer, UrlTree, containsTree, createEmptyUrlTree} from './url_tree';\nimport {forEach} from './utils/collection';\nimport {TreeNode, nodeChildrenAsMap} from './utils/tree';\n\n\n/**\n * @description\n *\n * Represents the extra options used during navigation.\n *\n *\n */\nexport interface NavigationExtras {\n  /**\n   * Enables relative navigation from the current ActivatedRoute.\n   *\n   * Configuration:\n   *\n   * ```\n   * [{\n  *   path: 'parent',\n  *   component: ParentComponent,\n  *   children: [{\n  *     path: 'list',\n  *     component: ListComponent\n  *   },{\n  *     path: 'child',\n  *     component: ChildComponent\n  *   }]\n  * }]\n   * ```\n   *\n   * Navigate to list route from child route:\n   *\n   * ```\n   *  @Component({...})\n   *  class ChildComponent {\n  *    constructor(private router: Router, private route: ActivatedRoute) {}\n  *\n  *    go() {\n  *      this.router.navigate(['../list'], { relativeTo: this.route });\n  *    }\n  *  }\n   * ```\n   */\n  relativeTo?: ActivatedRoute|null;\n\n  /**\n   * Sets query parameters to the URL.\n   *\n   * ```\n   * // Navigate to /results?page=1\n   * this.router.navigate(['/results'], { queryParams: { page: 1 } });\n   * ```\n   */\n  queryParams?: Params|null;\n\n  /**\n   * Sets the hash fragment for the URL.\n   *\n   * ```\n   * // Navigate to /results#top\n   * this.router.navigate(['/results'], { fragment: 'top' });\n   * ```\n   */\n  fragment?: string;\n\n  /**\n   * Preserves the query parameters for the next navigation.\n   *\n   * deprecated, use `queryParamsHandling` instead\n   *\n   * ```\n   * // Preserve query params from /results?page=1 to /view?page=1\n   * this.router.navigate(['/view'], { preserveQueryParams: true });\n   * ```\n   *\n   * @deprecated since v4\n   */\n  preserveQueryParams?: boolean;\n\n  /**\n   *  config strategy to handle the query parameters for the next navigation.\n   *\n   * ```\n   * // from /results?page=1 to /view?page=1&page=2\n   * this.router.navigate(['/view'], { queryParams: { page: 2 },  queryParamsHandling: \"merge\" });\n   * ```\n   */\n  queryParamsHandling?: QueryParamsHandling|null;\n  /**\n   * Preserves the fragment for the next navigation\n   *\n   * ```\n   * // Preserve fragment from /results#top to /view#top\n   * this.router.navigate(['/view'], { preserveFragment: true });\n   * ```\n   */\n  preserveFragment?: boolean;\n  /**\n   * Navigates without pushing a new state into history.\n   *\n   * ```\n   * // Navigate silently to /view\n   * this.router.navigate(['/view'], { skipLocationChange: true });\n   * ```\n   */\n  skipLocationChange?: boolean;\n  /**\n   * Navigates while replacing the current state in history.\n   *\n   * ```\n   * // Navigate to /view\n   * this.router.navigate(['/view'], { replaceUrl: true });\n   * ```\n   */\n  replaceUrl?: boolean;\n}\n\n/**\n * @description\n *\n * Error handler that is invoked when a navigation errors.\n *\n * If the handler returns a value, the navigation promise will be resolved with this value.\n * If the handler throws an exception, the navigation promise will be rejected with\n * the exception.\n *\n *\n */\nexport type ErrorHandler = (error: any) => any;\n\nfunction defaultErrorHandler(error: any): any {\n  throw error;\n}\n\ntype NavStreamValue =\n    boolean | {appliedUrl: UrlTree, snapshot: RouterStateSnapshot, shouldActivate?: boolean};\n\ntype NavigationParams = {\n  id: number,\n  rawUrl: UrlTree,\n  extras: NavigationExtras,\n  resolve: any,\n  reject: any,\n  promise: Promise<boolean>,\n  source: NavigationTrigger,\n  state: {navigationId: number} | null\n};\n\n/**\n * @internal\n */\nexport type RouterHook = (snapshot: RouterStateSnapshot) => Observable<void>;\n\n/**\n * @internal\n */\nfunction defaultRouterHook(snapshot: RouterStateSnapshot): Observable<void> {\n  return of (null) as any;\n}\n\n/**\n * @description\n *\n * Provides the navigation and url manipulation capabilities.\n *\n * See `Routes` for more details and examples.\n *\n * @ngModule RouterModule\n *\n *\n */\nexport class Router {\n  private currentUrlTree: UrlTree;\n  private rawUrlTree: UrlTree;\n  private navigations = new BehaviorSubject<NavigationParams>(null !);\n\n  private locationSubscription: Subscription;\n  private navigationId: number = 0;\n  private configLoader: RouterConfigLoader;\n  private ngModule: NgModuleRef<any>;\n\n  public readonly events: Observable<Event> = new Subject<Event>();\n  public readonly routerState: RouterState;\n\n  /**\n   * Error handler that is invoked when a navigation errors.\n   *\n   * See `ErrorHandler` for more information.\n   */\n  errorHandler: ErrorHandler = defaultErrorHandler;\n\n\n\n  /**\n   * Indicates if at least one navigation happened.\n   */\n  navigated: boolean = false;\n  private lastSuccessfulId: number = -1;\n\n  /**\n   * Used by RouterModule. This allows us to\n   * pause the navigation either before preactivation or after it.\n   * @internal\n   */\n  hooks: {beforePreactivation: RouterHook, afterPreactivation: RouterHook} = {\n    beforePreactivation: defaultRouterHook,\n    afterPreactivation: defaultRouterHook\n  };\n\n  /**\n   * Extracts and merges URLs. Used for AngularJS to Angular migrations.\n   */\n  urlHandlingStrategy: UrlHandlingStrategy = new DefaultUrlHandlingStrategy();\n\n  routeReuseStrategy: RouteReuseStrategy = new DefaultRouteReuseStrategy();\n\n  /**\n   * Define what the router should do if it receives a navigation request to the current URL.\n   * By default, the router will ignore this navigation. However, this prevents features such\n   * as a \"refresh\" button. Use this option to configure the behavior when navigating to the\n   * current URL. Default is 'ignore'.\n   */\n  onSameUrlNavigation: 'reload'|'ignore' = 'ignore';\n\n  /**\n   * Defines how the router merges params, data and resolved data from parent to child\n   * routes. Available options are:\n   *\n   * - `'emptyOnly'`, the default, only inherits parent params for path-less or component-less\n   *   routes.\n   * - `'always'`, enables unconditional inheritance of parent params.\n   */\n  paramsInheritanceStrategy: 'emptyOnly'|'always' = 'emptyOnly';\n\n  /**\n   * Creates the router service.\n   */\n  // TODO: vsavkin make internal after the final is out.\n  constructor(\n      private rootComponentType: Type<any>|null, private urlSerializer: UrlSerializer,\n      private rootContexts: ChildrenOutletContexts, private location: Location, injector: Injector,\n      loader: NgModuleFactoryLoader, compiler: Compiler, public config: Routes) {\n    const onLoadStart = (r: Route) => this.triggerEvent(new RouteConfigLoadStart(r));\n    const onLoadEnd = (r: Route) => this.triggerEvent(new RouteConfigLoadEnd(r));\n\n    this.ngModule = injector.get(NgModuleRef);\n\n    this.resetConfig(config);\n    this.currentUrlTree = createEmptyUrlTree();\n    this.rawUrlTree = this.currentUrlTree;\n\n    this.configLoader = new RouterConfigLoader(loader, compiler, onLoadStart, onLoadEnd);\n    this.routerState = createEmptyState(this.currentUrlTree, this.rootComponentType);\n    this.processNavigations();\n  }\n\n  /**\n   * @internal\n   * TODO: this should be removed once the constructor of the router made internal\n   */\n  resetRootComponentType(rootComponentType: Type<any>): void {\n    this.rootComponentType = rootComponentType;\n    // TODO: vsavkin router 4.0 should make the root component set to null\n    // this will simplify the lifecycle of the router.\n    this.routerState.root.component = this.rootComponentType;\n  }\n\n  /**\n   * Sets up the location change listener and performs the initial navigation.\n   */\n  initialNavigation(): void {\n    this.setUpLocationChangeListener();\n    if (this.navigationId === 0) {\n      this.navigateByUrl(this.location.path(true), {replaceUrl: true});\n    }\n  }\n\n  /**\n   * Sets up the location change listener.\n   */\n  setUpLocationChangeListener(): void {\n    // Don't need to use Zone.wrap any more, because zone.js\n    // already patch onPopState, so location change callback will\n    // run into ngZone\n    if (!this.locationSubscription) {\n      this.locationSubscription = <any>this.location.subscribe((change: any) => {\n        const rawUrlTree = this.urlSerializer.parse(change['url']);\n        const source: NavigationTrigger = change['type'] === 'popstate' ? 'popstate' : 'hashchange';\n        const state = change.state && change.state.navigationId ?\n            {navigationId: change.state.navigationId} :\n            null;\n        setTimeout(\n            () => { this.scheduleNavigation(rawUrlTree, source, state, {replaceUrl: true}); }, 0);\n      });\n    }\n  }\n\n  /** The current url */\n  get url(): string { return this.serializeUrl(this.currentUrlTree); }\n\n  /** @internal */\n  triggerEvent(e: Event): void { (this.events as Subject<Event>).next(e); }\n\n  /**\n   * Resets the configuration used for navigation and generating links.\n   *\n   * ### Usage\n   *\n   * ```\n   * router.resetConfig([\n   *  { path: 'team/:id', component: TeamCmp, children: [\n   *    { path: 'simple', component: SimpleCmp },\n   *    { path: 'user/:name', component: UserCmp }\n   *  ]}\n   * ]);\n   * ```\n   */\n  resetConfig(config: Routes): void {\n    validateConfig(config);\n    this.config = config.map(copyConfig);\n    this.navigated = false;\n    this.lastSuccessfulId = -1;\n  }\n\n  /** @docsNotRequired */\n  ngOnDestroy(): void { this.dispose(); }\n\n  /** Disposes of the router */\n  dispose(): void {\n    if (this.locationSubscription) {\n      this.locationSubscription.unsubscribe();\n      this.locationSubscription = null !;\n    }\n  }\n\n  /**\n   * Applies an array of commands to the current url tree and creates a new url tree.\n   *\n   * When given an activate route, applies the given commands starting from the route.\n   * When not given a route, applies the given command starting from the root.\n   *\n   * ### Usage\n   *\n   * ```\n   * // create /team/33/user/11\n   * router.createUrlTree(['/team', 33, 'user', 11]);\n   *\n   * // create /team/33;expand=true/user/11\n   * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n   *\n   * // you can collapse static segments like this (this works only with the first passed-in value):\n   * router.createUrlTree(['/team/33/user', userId]);\n   *\n   * // If the first segment can contain slashes, and you do not want the router to split it, you\n   * // can do the following:\n   *\n   * router.createUrlTree([{segmentPath: '/one/two'}]);\n   *\n   * // create /team/33/(user/11//right:chat)\n   * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n   *\n   * // remove the right secondary node\n   * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n   *\n   * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n   *\n   * // navigate to /team/33/user/11/details\n   * router.createUrlTree(['details'], {relativeTo: route});\n   *\n   * // navigate to /team/33/user/22\n   * router.createUrlTree(['../22'], {relativeTo: route});\n   *\n   * // navigate to /team/44/user/22\n   * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n   * ```\n   */\n  createUrlTree(commands: any[], navigationExtras: NavigationExtras = {}): UrlTree {\n    const {relativeTo,          queryParams,         fragment,\n           preserveQueryParams, queryParamsHandling, preserveFragment} = navigationExtras;\n    if (isDevMode() && preserveQueryParams && <any>console && <any>console.warn) {\n      console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\n    }\n    const a = relativeTo || this.routerState.root;\n    const f = preserveFragment ? this.currentUrlTree.fragment : fragment;\n    let q: Params|null = null;\n    if (queryParamsHandling) {\n      switch (queryParamsHandling) {\n        case 'merge':\n          q = {...this.currentUrlTree.queryParams, ...queryParams};\n          break;\n        case 'preserve':\n          q = this.currentUrlTree.queryParams;\n          break;\n        default:\n          q = queryParams || null;\n      }\n    } else {\n      q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams || null;\n    }\n    if (q !== null) {\n      q = this.removeEmptyProps(q);\n    }\n    return createUrlTree(a, this.currentUrlTree, commands, q !, f !);\n  }\n\n  /**\n   * Navigate based on the provided url. This navigation is always absolute.\n   *\n   * Returns a promise that:\n   * - resolves to 'true' when navigation succeeds,\n   * - resolves to 'false' when navigation fails,\n   * - is rejected when an error happens.\n   *\n   * ### Usage\n   *\n   * ```\n   * router.navigateByUrl(\"/team/33/user/11\");\n   *\n   * // Navigate without updating the URL\n   * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n   * ```\n   *\n   * In opposite to `navigate`, `navigateByUrl` takes a whole URL\n   * and does not apply any delta to the current one.\n   */\n  navigateByUrl(url: string|UrlTree, extras: NavigationExtras = {skipLocationChange: false}):\n      Promise<boolean> {\n    const urlTree = url instanceof UrlTree ? url : this.parseUrl(url);\n    const mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);\n\n    return this.scheduleNavigation(mergedTree, 'imperative', null, extras);\n  }\n\n  /**\n   * Navigate based on the provided array of commands and a starting point.\n   * If no starting route is provided, the navigation is absolute.\n   *\n   * Returns a promise that:\n   * - resolves to 'true' when navigation succeeds,\n   * - resolves to 'false' when navigation fails,\n   * - is rejected when an error happens.\n   *\n   * ### Usage\n   *\n   * ```\n   * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n   *\n   * // Navigate without updating the URL\n   * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n   * ```\n   *\n   * In opposite to `navigateByUrl`, `navigate` always takes a delta that is applied to the current\n   * URL.\n   */\n  navigate(commands: any[], extras: NavigationExtras = {skipLocationChange: false}):\n      Promise<boolean> {\n    validateCommands(commands);\n    return this.navigateByUrl(this.createUrlTree(commands, extras), extras);\n  }\n\n  /** Serializes a `UrlTree` into a string */\n  serializeUrl(url: UrlTree): string { return this.urlSerializer.serialize(url); }\n\n  /** Parses a string into a `UrlTree` */\n  parseUrl(url: string): UrlTree { return this.urlSerializer.parse(url); }\n\n  /** Returns whether the url is activated */\n  isActive(url: string|UrlTree, exact: boolean): boolean {\n    if (url instanceof UrlTree) {\n      return containsTree(this.currentUrlTree, url, exact);\n    }\n\n    const urlTree = this.urlSerializer.parse(url);\n    return containsTree(this.currentUrlTree, urlTree, exact);\n  }\n\n  private removeEmptyProps(params: Params): Params {\n    return Object.keys(params).reduce((result: Params, key: string) => {\n      const value: any = params[key];\n      if (value !== null && value !== undefined) {\n        result[key] = value;\n      }\n      return result;\n    }, {});\n  }\n\n  private processNavigations(): void {\n    this.navigations\n        .pipe(concatMap((nav: NavigationParams) => {\n          if (nav) {\n            this.executeScheduledNavigation(nav);\n            // a failed navigation should not stop the router from processing\n            // further navigations => the catch\n            return nav.promise.catch(() => {});\n          } else {\n            return <any>of (null);\n          }\n        }))\n        .subscribe(() => {});\n  }\n\n  private scheduleNavigation(\n      rawUrl: UrlTree, source: NavigationTrigger, state: {navigationId: number}|null,\n      extras: NavigationExtras): Promise<boolean> {\n    const lastNavigation = this.navigations.value;\n\n    // If the user triggers a navigation imperatively (e.g., by using navigateByUrl),\n    // and that navigation results in 'replaceState' that leads to the same URL,\n    // we should skip those.\n    if (lastNavigation && source !== 'imperative' && lastNavigation.source === 'imperative' &&\n        lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n      return Promise.resolve(true);  // return value is not used\n    }\n\n    // Because of a bug in IE and Edge, the location class fires two events (popstate and\n    // hashchange) every single time. The second one should be ignored. Otherwise, the URL will\n    // flicker. Handles the case when a popstate was emitted first.\n    if (lastNavigation && source == 'hashchange' && lastNavigation.source === 'popstate' &&\n        lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n      return Promise.resolve(true);  // return value is not used\n    }\n    // Because of a bug in IE and Edge, the location class fires two events (popstate and\n    // hashchange) every single time. The second one should be ignored. Otherwise, the URL will\n    // flicker. Handles the case when a hashchange was emitted first.\n    if (lastNavigation && source == 'popstate' && lastNavigation.source === 'hashchange' &&\n        lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n      return Promise.resolve(true);  // return value is not used\n    }\n\n    let resolve: any = null;\n    let reject: any = null;\n\n    const promise = new Promise<boolean>((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n\n    const id = ++this.navigationId;\n    this.navigations.next({id, source, state, rawUrl, extras, resolve, reject, promise});\n\n    // Make sure that the error is propagated even though `processNavigations` catch\n    // handler does not rethrow\n    return promise.catch((e: any) => Promise.reject(e));\n  }\n\n  private executeScheduledNavigation({id, rawUrl, extras, resolve, reject, source,\n                                      state}: NavigationParams): void {\n    const url = this.urlHandlingStrategy.extract(rawUrl);\n    const urlTransition = !this.navigated || url.toString() !== this.currentUrlTree.toString();\n\n    if ((this.onSameUrlNavigation === 'reload' ? true : urlTransition) &&\n        this.urlHandlingStrategy.shouldProcessUrl(rawUrl)) {\n      (this.events as Subject<Event>)\n          .next(new NavigationStart(id, this.serializeUrl(url), source, state));\n      Promise.resolve()\n          .then(\n              (_) => this.runNavigate(\n                  url, rawUrl, !!extras.skipLocationChange, !!extras.replaceUrl, id, null))\n          .then(resolve, reject);\n\n      // we cannot process the current URL, but we could process the previous one =>\n      // we need to do some cleanup\n    } else if (\n        urlTransition && this.rawUrlTree &&\n        this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree)) {\n      (this.events as Subject<Event>)\n          .next(new NavigationStart(id, this.serializeUrl(url), source, state));\n      Promise.resolve()\n          .then(\n              (_) => this.runNavigate(\n                  url, rawUrl, false, false, id,\n                  createEmptyState(url, this.rootComponentType).snapshot))\n          .then(resolve, reject);\n\n    } else {\n      this.rawUrlTree = rawUrl;\n      resolve(null);\n    }\n  }\n\n  private runNavigate(\n      url: UrlTree, rawUrl: UrlTree, skipLocationChange: boolean, replaceUrl: boolean, id: number,\n      precreatedState: RouterStateSnapshot|null): Promise<boolean> {\n    if (id !== this.navigationId) {\n      (this.events as Subject<Event>)\n          .next(new NavigationCancel(\n              id, this.serializeUrl(url),\n              `Navigation ID ${id} is not equal to the current navigation id ${this.navigationId}`));\n      return Promise.resolve(false);\n    }\n\n    return new Promise((resolvePromise, rejectPromise) => {\n      // create an observable of the url and route state snapshot\n      // this operation do not result in any side effects\n      let urlAndSnapshot$: Observable<NavStreamValue>;\n      if (!precreatedState) {\n        const moduleInjector = this.ngModule.injector;\n        const redirectsApplied$ =\n            applyRedirects(moduleInjector, this.configLoader, this.urlSerializer, url, this.config);\n\n        urlAndSnapshot$ = redirectsApplied$.pipe(mergeMap((appliedUrl: UrlTree) => {\n          return recognize(\n                     this.rootComponentType, this.config, appliedUrl, this.serializeUrl(appliedUrl),\n                     this.paramsInheritanceStrategy)\n              .pipe(map((snapshot: any) => {\n                (this.events as Subject<Event>)\n                    .next(new RoutesRecognized(\n                        id, this.serializeUrl(url), this.serializeUrl(appliedUrl), snapshot));\n\n                return {appliedUrl, snapshot};\n              }));\n        }));\n      } else {\n        urlAndSnapshot$ = of ({appliedUrl: url, snapshot: precreatedState});\n      }\n\n      const beforePreactivationDone$ =\n          urlAndSnapshot$.pipe(mergeMap((p): Observable<NavStreamValue> => {\n            if (typeof p === 'boolean') return of (p);\n            return this.hooks.beforePreactivation(p.snapshot).pipe(map(() => p));\n          }));\n\n      // run preactivation: guards and data resolvers\n      let preActivation: PreActivation;\n\n      const preactivationSetup$ = beforePreactivationDone$.pipe(map((p): NavStreamValue => {\n        if (typeof p === 'boolean') return p;\n        const {appliedUrl, snapshot} = p;\n        const moduleInjector = this.ngModule.injector;\n        preActivation = new PreActivation(\n            snapshot, this.routerState.snapshot, moduleInjector,\n            (evt: Event) => this.triggerEvent(evt));\n        preActivation.initialize(this.rootContexts);\n        return {appliedUrl, snapshot};\n      }));\n\n      const preactivationCheckGuards$ =\n          preactivationSetup$.pipe(mergeMap((p): Observable<NavStreamValue> => {\n            if (typeof p === 'boolean' || this.navigationId !== id) return of (false);\n            const {appliedUrl, snapshot} = p;\n\n            this.triggerEvent(new GuardsCheckStart(\n                id, this.serializeUrl(url), this.serializeUrl(appliedUrl), snapshot));\n\n            return preActivation.checkGuards().pipe(map((shouldActivate: boolean) => {\n              this.triggerEvent(new GuardsCheckEnd(\n                  id, this.serializeUrl(url), this.serializeUrl(appliedUrl), snapshot,\n                  shouldActivate));\n              return {appliedUrl: appliedUrl, snapshot: snapshot, shouldActivate: shouldActivate};\n            }));\n          }));\n\n      const preactivationResolveData$ =\n          preactivationCheckGuards$.pipe(mergeMap((p): Observable<NavStreamValue> => {\n            if (typeof p === 'boolean' || this.navigationId !== id) return of (false);\n\n            if (p.shouldActivate && preActivation.isActivating()) {\n              this.triggerEvent(new ResolveStart(\n                  id, this.serializeUrl(url), this.serializeUrl(p.appliedUrl), p.snapshot));\n              return preActivation.resolveData(this.paramsInheritanceStrategy).pipe(map(() => {\n                this.triggerEvent(new ResolveEnd(\n                    id, this.serializeUrl(url), this.serializeUrl(p.appliedUrl), p.snapshot));\n                return p;\n              }));\n            } else {\n              return of (p);\n            }\n          }));\n\n      const preactivationDone$ =\n          preactivationResolveData$.pipe(mergeMap((p): Observable<NavStreamValue> => {\n            if (typeof p === 'boolean' || this.navigationId !== id) return of (false);\n            return this.hooks.afterPreactivation(p.snapshot).pipe(map(() => p));\n          }));\n\n\n      // create router state\n      // this operation has side effects => route state is being affected\n      const routerState$ = preactivationDone$.pipe(map((p) => {\n        if (typeof p === 'boolean' || this.navigationId !== id) return false;\n        const {appliedUrl, snapshot, shouldActivate} = p;\n        if (shouldActivate) {\n          const state = createRouterState(this.routeReuseStrategy, snapshot, this.routerState);\n          return {appliedUrl, state, shouldActivate};\n        } else {\n          return {appliedUrl, state: null, shouldActivate};\n        }\n      }));\n\n\n      this.activateRoutes(\n          routerState$, this.routerState, this.currentUrlTree, id, url, rawUrl, skipLocationChange,\n          replaceUrl, resolvePromise, rejectPromise);\n    });\n  }\n\n  /**\n   * Performs the logic of activating routes. This is a synchronous process by default. While this\n   * is a private method, it could be overridden to make activation asynchronous.\n   */\n  private activateRoutes(\n      state: Observable<false|\n                        {appliedUrl: UrlTree, state: RouterState|null, shouldActivate?: boolean}>,\n      storedState: RouterState, storedUrl: UrlTree, id: number, url: UrlTree, rawUrl: UrlTree,\n      skipLocationChange: boolean, replaceUrl: boolean, resolvePromise: any, rejectPromise: any) {\n    // applied the new router state\n    // this operation has side effects\n    let navigationIsSuccessful: boolean;\n\n    state\n        .forEach((p) => {\n          if (typeof p === 'boolean' || !p.shouldActivate || id !== this.navigationId || !p.state) {\n            navigationIsSuccessful = false;\n            return;\n          }\n          const {appliedUrl, state} = p;\n          this.currentUrlTree = appliedUrl;\n          this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, rawUrl);\n\n          (this as{routerState: RouterState}).routerState = state;\n\n          if (!skipLocationChange) {\n            const path = this.urlSerializer.serialize(this.rawUrlTree);\n            if (this.location.isCurrentPathEqualTo(path) || replaceUrl) {\n              this.location.replaceState(path, '', {navigationId: id});\n            } else {\n              this.location.go(path, '', {navigationId: id});\n            }\n          }\n\n          new ActivateRoutes(\n              this.routeReuseStrategy, state, storedState, (evt: Event) => this.triggerEvent(evt))\n              .activate(this.rootContexts);\n\n          navigationIsSuccessful = true;\n        })\n        .then(\n            () => {\n              if (navigationIsSuccessful) {\n                this.navigated = true;\n                this.lastSuccessfulId = id;\n                (this.events as Subject<Event>)\n                    .next(new NavigationEnd(\n                        id, this.serializeUrl(url), this.serializeUrl(this.currentUrlTree)));\n                resolvePromise(true);\n              } else {\n                this.resetUrlToCurrentUrlTree();\n                (this.events as Subject<Event>)\n                    .next(new NavigationCancel(id, this.serializeUrl(url), ''));\n                resolvePromise(false);\n              }\n            },\n            (e: any) => {\n              if (isNavigationCancelingError(e)) {\n                this.navigated = true;\n                this.resetStateAndUrl(storedState, storedUrl, rawUrl);\n                (this.events as Subject<Event>)\n                    .next(new NavigationCancel(id, this.serializeUrl(url), e.message));\n\n                resolvePromise(false);\n              } else {\n                this.resetStateAndUrl(storedState, storedUrl, rawUrl);\n                (this.events as Subject<Event>)\n                    .next(new NavigationError(id, this.serializeUrl(url), e));\n                try {\n                  resolvePromise(this.errorHandler(e));\n                } catch (ee) {\n                  rejectPromise(ee);\n                }\n              }\n            });\n  }\n\n  private resetStateAndUrl(storedState: RouterState, storedUrl: UrlTree, rawUrl: UrlTree): void {\n    (this as{routerState: RouterState}).routerState = storedState;\n    this.currentUrlTree = storedUrl;\n    this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, rawUrl);\n    this.resetUrlToCurrentUrlTree();\n  }\n\n  private resetUrlToCurrentUrlTree(): void {\n    this.location.replaceState(\n        this.urlSerializer.serialize(this.rawUrlTree), '', {navigationId: this.lastSuccessfulId});\n  }\n}\n\nclass ActivateRoutes {\n  constructor(\n      private routeReuseStrategy: RouteReuseStrategy, private futureState: RouterState,\n      private currState: RouterState, private forwardEvent: (evt: Event) => void) {}\n\n  activate(parentContexts: ChildrenOutletContexts): void {\n    const futureRoot = this.futureState._root;\n    const currRoot = this.currState ? this.currState._root : null;\n\n    this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);\n    advanceActivatedRoute(this.futureState.root);\n    this.activateChildRoutes(futureRoot, currRoot, parentContexts);\n  }\n\n  // De-activate the child route that are not re-used for the future state\n  private deactivateChildRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>|null,\n      contexts: ChildrenOutletContexts): void {\n    const children: {[outletName: string]: TreeNode<ActivatedRoute>} = nodeChildrenAsMap(currNode);\n\n    // Recurse on the routes active in the future state to de-activate deeper children\n    futureNode.children.forEach(futureChild => {\n      const childOutletName = futureChild.value.outlet;\n      this.deactivateRoutes(futureChild, children[childOutletName], contexts);\n      delete children[childOutletName];\n    });\n\n    // De-activate the routes that will not be re-used\n    forEach(children, (v: TreeNode<ActivatedRoute>, childName: string) => {\n      this.deactivateRouteAndItsChildren(v, contexts);\n    });\n  }\n\n  private deactivateRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>,\n      parentContext: ChildrenOutletContexts): void {\n    const future = futureNode.value;\n    const curr = currNode ? currNode.value : null;\n\n    if (future === curr) {\n      // Reusing the node, check to see if the children need to be de-activated\n      if (future.component) {\n        // If we have a normal route, we need to go through an outlet.\n        const context = parentContext.getContext(future.outlet);\n        if (context) {\n          this.deactivateChildRoutes(futureNode, currNode, context.children);\n        }\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.deactivateChildRoutes(futureNode, currNode, parentContext);\n      }\n    } else {\n      if (curr) {\n        // Deactivate the current route which will not be re-used\n        this.deactivateRouteAndItsChildren(currNode, parentContext);\n      }\n    }\n  }\n\n  private deactivateRouteAndItsChildren(\n      route: TreeNode<ActivatedRoute>, parentContexts: ChildrenOutletContexts): void {\n    if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {\n      this.detachAndStoreRouteSubtree(route, parentContexts);\n    } else {\n      this.deactivateRouteAndOutlet(route, parentContexts);\n    }\n  }\n\n  private detachAndStoreRouteSubtree(\n      route: TreeNode<ActivatedRoute>, parentContexts: ChildrenOutletContexts): void {\n    const context = parentContexts.getContext(route.value.outlet);\n    if (context && context.outlet) {\n      const componentRef = context.outlet.detach();\n      const contexts = context.children.onOutletDeactivated();\n      this.routeReuseStrategy.store(route.value.snapshot, {componentRef, route, contexts});\n    }\n  }\n\n  private deactivateRouteAndOutlet(\n      route: TreeNode<ActivatedRoute>, parentContexts: ChildrenOutletContexts): void {\n    const context = parentContexts.getContext(route.value.outlet);\n\n    if (context) {\n      const children: {[outletName: string]: any} = nodeChildrenAsMap(route);\n      const contexts = route.value.component ? context.children : parentContexts;\n\n      forEach(children, (v: any, k: string) => this.deactivateRouteAndItsChildren(v, contexts));\n\n      if (context.outlet) {\n        // Destroy the component\n        context.outlet.deactivate();\n        // Destroy the contexts for all the outlets that were in the component\n        context.children.onOutletDeactivated();\n      }\n    }\n  }\n\n  private activateChildRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>|null,\n      contexts: ChildrenOutletContexts): void {\n    const children: {[outlet: string]: any} = nodeChildrenAsMap(currNode);\n    futureNode.children.forEach(c => {\n      this.activateRoutes(c, children[c.value.outlet], contexts);\n      this.forwardEvent(new ActivationEnd(c.value.snapshot));\n    });\n    if (futureNode.children.length) {\n      this.forwardEvent(new ChildActivationEnd(futureNode.value.snapshot));\n    }\n  }\n\n  private activateRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>,\n      parentContexts: ChildrenOutletContexts): void {\n    const future = futureNode.value;\n    const curr = currNode ? currNode.value : null;\n\n    advanceActivatedRoute(future);\n\n    // reusing the node\n    if (future === curr) {\n      if (future.component) {\n        // If we have a normal route, we need to go through an outlet.\n        const context = parentContexts.getOrCreateContext(future.outlet);\n        this.activateChildRoutes(futureNode, currNode, context.children);\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.activateChildRoutes(futureNode, currNode, parentContexts);\n      }\n    } else {\n      if (future.component) {\n        // if we have a normal route, we need to place the component into the outlet and recurse.\n        const context = parentContexts.getOrCreateContext(future.outlet);\n\n        if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {\n          const stored =\n              (<DetachedRouteHandleInternal>this.routeReuseStrategy.retrieve(future.snapshot));\n          this.routeReuseStrategy.store(future.snapshot, null);\n          context.children.onOutletReAttached(stored.contexts);\n          context.attachRef = stored.componentRef;\n          context.route = stored.route.value;\n          if (context.outlet) {\n            // Attach right away when the outlet has already been instantiated\n            // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated\n            context.outlet.attach(stored.componentRef, stored.route.value);\n          }\n          advanceActivatedRouteNodeAndItsChildren(stored.route);\n        } else {\n          const config = parentLoadedConfig(future.snapshot);\n          const cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;\n\n          context.route = future;\n          context.resolver = cmpFactoryResolver;\n          if (context.outlet) {\n            // Activate the outlet when it has already been instantiated\n            // Otherwise it will get activated from its `ngOnInit` when instantiated\n            context.outlet.activateWith(future, cmpFactoryResolver);\n          }\n\n          this.activateChildRoutes(futureNode, null, context.children);\n        }\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.activateChildRoutes(futureNode, null, parentContexts);\n      }\n    }\n  }\n}\n\nfunction advanceActivatedRouteNodeAndItsChildren(node: TreeNode<ActivatedRoute>): void {\n  advanceActivatedRoute(node.value);\n  node.children.forEach(advanceActivatedRouteNodeAndItsChildren);\n}\n\nfunction parentLoadedConfig(snapshot: ActivatedRouteSnapshot): LoadedRouterConfig|null {\n  for (let s = snapshot.parent; s; s = s.parent) {\n    const route = s.routeConfig;\n    if (route && route._loadedConfig) return route._loadedConfig;\n    if (route && route.component) return null;\n  }\n\n  return null;\n}\n\nfunction validateCommands(commands: string[]): void {\n  for (let i = 0; i < commands.length; i++) {\n    const cmd = commands[i];\n    if (cmd == null) {\n      throw new Error(`The requested path contains ${cmd} segment at index ${i}`);\n    }\n  }\n}\n"]}