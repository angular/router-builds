{"version":3,"file":"url_handling_strategy.js","sourceRoot":"","sources":["../../../../../packages/router/src/url_handling_strategy.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;AAAA;;;8BAjBA;IAsCC,CAAA;;;;;;;;;AArBD,+BAqBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKD;;;AAAA;;;;;;;IACE,qDAAgB;;;;IAAhB,UAAiB,GAAY,IAAa,MAAM,CAAC,IAAI,CAAC,EAAE;;;;;IACxD,4CAAO;;;;IAAP,UAAQ,GAAY,IAAa,MAAM,CAAC,GAAG,CAAC,EAAE;;;;;;IAC9C,0CAAK;;;;;IAAL,UAAM,UAAmB,EAAE,QAAiB,IAAa,MAAM,CAAC,UAAU,CAAC,EAAE;qCA9C/E;IA+CC,CAAA;;;;AAJD,sCAIC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {UrlTree} from './url_tree';\n\n/**\n * @description\n *\n * Provides a way to migrate AngularJS applications to Angular.\n *\n * @experimental\n */\nexport abstract class UrlHandlingStrategy {\n  /**\n   * Tells the router if this URL should be processed.\n   *\n   * When it returns true, the router will execute the regular navigation.\n   * When it returns false, the router will set the router state to an empty state.\n   * As a result, all the active components will be destroyed.\n   *\n   */\n  abstract shouldProcessUrl(url: UrlTree): boolean;\n\n  /**\n   * Extracts the part of the URL that should be handled by the router.\n   * The rest of the URL will remain untouched.\n   */\n  abstract extract(url: UrlTree): UrlTree;\n\n  /**\n   * Merges the URL fragment with the rest of the URL.\n   */\n  abstract merge(newUrlPart: UrlTree, rawUrl: UrlTree): UrlTree;\n}\n\n/**\n * @experimental\n */\nexport class DefaultUrlHandlingStrategy implements UrlHandlingStrategy {\n  shouldProcessUrl(url: UrlTree): boolean { return true; }\n  extract(url: UrlTree): UrlTree { return url; }\n  merge(newUrlPart: UrlTree, wholeUrl: UrlTree): UrlTree { return newUrlPart; }\n}"]}